[
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set the last 'Billing cycle' to 2024-08~2024-09.",
        "output": "<thought>\n需要将 \"Billing cycle\" 字段最后一个设置为 \"2024-08~2024-09\"。可以使用 SetField 关键字，通过指定 idx=-1 来设置最后一个字段。\n</thought>\n\n<code_block>\n# 设置最后一个 Billing cycle 为 2024-08~2024-09\nSetField | Billing cycle | 2024-08~2024-09 | idx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on 'Amount due' in the popup and select 'Pre-tax amount(payment currency)'.",
        "output": "<thought>\n首先需要点击弹窗中的\"Amount due\"文本，然后选择\"Pre-tax amount(payment currency)\"选项。可以使用Click关键字来点击\"Amount due\"文本，并指定base为POPUP表示弹窗中的元素。然后使用SelectOption关键字选择\"Pre-tax amount(payment currency)\"选项。\n</thought>\n\n<code_block>\n# 点击弹窗中的 Amount due\nClick | Amount due | base=POPUP\n\n# 选择 ‘Pre-tax amount(payment currency)’\nSelectOption | Pre-tax amount(payment currency)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Capture the current screenshot and verify the presence of \"$42,928.51 USD\", \"Post-tax amount(payment currency)\", and \"default: S57,422.76 USD 79.47%\".",
        "output": "<thought>\n为了解决这个问题，需要获取当前屏幕截图中的文本，然后校验截图文本同时包含指定的多个文本。应该使用`GetPageScreenshotText`来获取截图中的文本，接着使用`Should Contain`来校验截图文本包含指定的每个文本。\n</thought>\n\n<code_block>\n# 获取屏幕截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验截图中包含 “$42,928.51 USD”\nShould Contain  ${txt}  $42,928.51 USD\n\n# 校验截图中包含 “Post-tax amount(payment currency)”\nShould Contain  ${txt}  Post-tax amount(payment currency)\n\n# 校验截图中包含 “default: S57,422.76 USD 79.47%”\nShould Contain  ${txt}  default: S57,422.76 USD 79.47%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on 'img' below '生图模型'.",
        "output": "<thought>\n需要点击‘生图模型’下方的img元素，可以使用ClickElemToTheDirectionOf关键字，基准元素是‘生图模型’，方向是bottom，目标是img元素。\n</thought>\n\n<code_block>\n# 点击‘生图模型’下方的img元素\nClickElemToTheDirectionOf | 生图模型 | bottom | img\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Close the popup.",
        "output": "<thought>\n关闭弹框的要求是关闭页面上的弹窗/通知/问卷/新手引导等提示，可以直接使用CloseNotifications关键字来实现。\n</thought>\n\n<code_block>\n# 关闭页面上的弹窗/通知/问卷/新手引导等提示\nCloseNotifications\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify if errmsg is equal to \"success\"",
        "output": "```\n<thought>\n为了解决这个问题，我们需要校验变量errmsg的值是否等于字符串\"success\"。Robot Framework中有一个内置的关键字\"Should Be Equal As Strings\"可以用来比较两个字符串是否相等。因此，我们可以使用这个关键字来实现。\n</thought>\n\n<code_block>\n# 校验errmsg是否等于\"success\"\nShould Be Equal As Strings  ${errmsg}  success\n</code_block>\n```"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "The page is expected to display the text: '请输入企业名称（O）'",
        "output": "<thought>\n首先，我们需要验证页面上是否包含指定的文本“请输入企业名称（O）”。可以使用关键字`CheckHasText`来验证页面上是否包含该文本。\n</thought>\n\n<code_block>\n# 校验页面包含文本\"请输入企业名称（O）\"\nCheckHasText | 请输入企业名称（O）\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search for the last 5 requests where the 'url' contains 'feishu.cn/search', the request method is GET, and the request body matches appid.*167",
        "output": "<thought>\n在这个场景中，我们需要使用提供的关键字搜索特定的HTTP请求。使用`Search Requests`关键字可以从浏览器发出的请求中查找符合条件的请求。我们使用url中的模式`feishu.cn/search`，HTTP方法为`GET`，并且请求体需要匹配正则模式`appid.*167`。我们需要找到满足这些条件的最后5个请求，因此`mode`参数需要设置为`last5`。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 feishu.cn/search, 且请求方式为 GET，且请求体匹配 appid.*167 的最后5请求\n${resp_json}  Search Requests  feishu.cn/search  GET  last5  appid.*167\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search for the last 3 GET requests sent to the api/v1/org/demo_apps endpoint, extract the app_name field from the response JSON, and verify that it includes '教育Demo'.",
        "output": "<thought>\n在这个场景中，要实现两个主要任务：首先是使用Search Requests关键字找到符合条件的HTTP请求，其次是从请求响应中提取所需字段，并进行校验。为了完成这个任务，我将依次使用以下关键字：\n\n1. 使用`Search Requests`关键字获取发往`api/v1/org/demo_apps`接口的最后3个GET请求。\n2. 使用`GetValuesFromJson`关键字从响应JSON中提取`app_name`字段。\n3. 使用内置校验关键字`Should Contain`来校验提取出的字段包含`教育Demo`。\n</thought>\n\n<code_block>\n# 搜索发往 api/v1/org/demo_apps 接口的最后3个 GET 请求\n${resp_json}  Search Requests  api/v1/org/demo_apps  GET  last3\n\n# 从获取的响应中提取 app_name 字段的值\n${app_name}  GetValuesFromJson  ${resp_json}  app_name\n\n# 校验提取的 app_name 字段是否包含 \"教育Demo\"\nShould Contain  ${app_name}  教育Demo\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the '删除' button, and after the popup appears, click the '确定' button.",
        "output": "<thought>\n首先需要找到删除按钮并点击，然后等待弹窗出现后再点击弹窗中的确定按钮。可以使用Click关键字来点击删除按钮，并利用base=POPUP参数来点击弹窗中的确定按钮。\n</thought>\n\n<code_block>\n# 点击删除按钮\nClick | 删除\n\n# 点击弹窗中的确定按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '查看详情' near '活动'.",
        "output": "<thought>\n我们需要在\"活动\"文本附近点击\"查看详情\"，这可以使用关键字Click并结合near参数来实现。首先，我们需要确保定位到\"活动\"这个文本，然后在其附近查找\"查看详情\"文本并进行点击操作。\n</thought>\n\n<code_block>\n# 点击\"活动\"附近的\"查看详情\"\nClick | 查看详情 | near=活动\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '搜索模板名称' and enter: '证书AI自动化Update'.",
        "output": "<thought>\n本任务需要先点击“搜索模板名称”文本，然后在弹出的输入框中输入“证书AI自动化Update”。可使用Click关键字进行点击操作，再使用SendText关键字输入文本。\n</thought>\n\n<code_block>\n# 点击搜索模板名称\nClick | 搜索模板名称\n\n# 输入证书AI自动化Update\nSendText | 证书AI自动化Update\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the first '编辑' button in the ‘操作’ column of the table, enter '模版信息': '外部路由配置', then click '保存'. The page is expected to display the text: '更新成功'.",
        "output": "<thought>\n首先，我们需要点击表格中“操作”列下的第一个“编辑”按钮，这可以使用`ClickTextOfCell`关键字。然后，我们使用`SetField`或`SendText`来输入“外部路由配置”到模版信息字段中。接着点击保存按钮，最后使用`CheckHasText`关键字检查页面上是否出现“更新成功”的文案。\n</thought>\n\n<code_block>\n# 点击表格操作列下的第一个 '编辑' 按钮\nClickTextOfCell | 1 | 操作 | 编辑\n\n# 输入模版信息：外部路由配置\nSetField | 模版信息 | 外部路由配置\n\n# 点击保存按钮\nClick | 保存\n\n# 检查页面出现更新成功的文案\nCheckHasText | 更新成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set '联系人姓名' to: '杨', then press the Tab key and enter '鑫'. Click '确认', and verify that the first row of the table includes: '个人模板Test'.",
        "output": "<thought>\n首先需要设置联系人姓名的字段，将其设置为\"杨\"。然后，在该字段中输入完毕后，发送TAB键切换到下一个字段，并输入\"鑫\"。完成输入后，点击确认按钮。最后，需要检验表格的第一行是否包含“个人模板Test”。可以依次使用SetField、Press Keys、SendText、Click以及CheckRowHas关键字实现这些步骤。\n</thought>\n\n<code_block>\n# 设置联系人姓名为“杨”\nSetField | 联系人姓名 | 杨\n\n# 按TAB键并输入“鑫”\nPress Keys | None | TAB\nSendText | 鑫\n\n# 点击确认按钮\nClick | 确认\n\n# 校验表格第一行包含“个人模板Test”\nCheckRowHas | 1 | 个人模板Test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on the '信息模版' menu, then click '创建模版'. Enter '模版名称': '自动化测试', generate the date one year from now in '年/月/日' format, and input it into '模版过期时间'. Move the mouse over the '确定创建' button and double-click it. After the prompt appears, click '确定'.",
        "output": "<thought>\n首先，使用ClickMenu关键字点击“信息模版”菜单。然后，使用Click关键字点击“创建模版”按钮。接下来，使用SetField关键字在“模版名称”字段中输入“自动化测试”。利用Get Current Date和Add Time To Date来生成一年后的日期，并使用SetField输入该日期到“模版过期时间”字段。随后，使用MoToElem关键字将鼠标移动到“确定创建”按钮上，并使用DClick双击该按钮。最后，使用Click关键字，基于弹出提示框中的“确定”按钮操控。\n</thought>\n\n<code_block>\n# 点击信息模版菜单\nClickMenu | 信息模版\n\n# 点击创建模版\nClick | 创建模版\n\n# 输入模版名称为“自动化测试”\nSetField | 模版名称 | 自动化测试\n\n# 获取当前日期\n${current_date}  Get Current Date\n\n# 计算一年后的日期\n${next_year_date}  Add Time To Date | ${current_date} | 1 year | result_format=%Y/%m/%d\n\n# 填写模版过期时间\nSetField | 模版过期时间 | ${next_year_date}\n\n# 移动鼠标到“确定创建”按钮上\nMoToElem | button:contains(确定创建)\n\n# 双击“确定创建”按钮\nDClick | button:contains(确定创建)\n\n# 弹出提示后点击确定\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that in the last POST request sent to the /current/user endpoint, the JSON field response:header:content-type is application/json, and response:body:email contains bytedance.",
        "output": "<thought>\n首先，我们需要搜索接口请求，找到最后一个发送到 /current/user 的 POST 请求。然后，我们根据需要获取该请求的响应数据，特别是 JSON 字段 response:header:content-type 和 response:body:email。接着，需要校验 content-type 是否为 application/json 并验证 email 字段是否包含 bytedance。\n</thought>\n\n<code_block>\n# 搜索发送到 /current/user 的最后一个 POST 请求\n${resp_json}  Search Requests  /current/user  POST  last\n\n# 获取响应头中的 content-type\n${content_type}  GetValuesFromJson  ${resp_json}  response:header:content-type\n\n# 校验 content-type 为 application/json\nShould Be Equal As Strings  ${content_type}  application/json\n\n# 获取响应体中的 email\n${email}  GetValuesFromJson  ${resp_json}  response:body:email\n\n# 校验 email 包含 bytedance\nShould Contain  ${email}  bytedance\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '信息模版', then click '创建模版'. Set '模版持有者类型' to '个人', and enter vol-k4ucf0m15yft6h3wsc34 into '实例ID' in the popup.",
        "output": "<thought>\n首先，根据任务要求需要依次点击“信息模版”和“创建模版”。这两个步骤可以通过`Click`或`ClickTextOneByOne`关键字来实现。接下来，需要设置模版持有者类型为“个人”，这可能需要使用`SetField`关键字。最后，在弹框中向‘实例ID’输入框中输入指定的值，这需要使用`SetPopupField`关键字。\n</thought>\n\n<code_block>\n# 依次点击信息模版和创建模版\nClickTextOneByOne | 信息模版 | 创建模版\n\n# 设置模版持有者类型为：个人\nSetField | 模版持有者类型 | 个人\n\n# 向弹框中的‘实例ID’中输入指定的值\nSetPopupField | 实例ID | vol-k4ucf0m15yft6h3wsc34\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '保存' and wait for '保存成功' to appear. Verify that the first row of the table includes '${rand_group_name}', '每日例行', and '规则创建', but does not include 'huleiting'.",
        "output": "<thought>\n在这个场景中，我们需要执行以下几个步骤：\n1. 点击保存按钮。\n2. 等待页面上出现“保存成功”的提示。\n3. 校验表格的第一行是否包含文本 `${rand_group_name}`、`每日例行` 和 `规则创建`，同时确认该行不包含 `huleiting`。\n\n为实现以上功能，我将按顺序使用 `Click`、`WaitText`、`CheckRowHas` 和 `CheckRowNotHas` 四个关键字。\n</thought>\n\n<code_block>\n# 点击保存按钮\nClick | 保存\n\n# 等待出现“保存成功”\nWaitText | 保存成功\n\n# 校验表格第一行包含指定的文本\nCheckRowHas | 1 | ${rand_group_name} | 每日例行 | 规则创建\n\n# 校验表格第一行不包含“huleiting”\nCheckRowNotHas | 1 | huleiting\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Iterate through all elements on the page where data-tabkey contains semiTab and click on them.",
        "output": "<thought>\n首先，我们需要找到所有符合条件的元素，即data-tabkey包含semiTab的元素。我们可以使用FindElem关键字配合jQuery选择器来定位这些元素。查找到这些元素后，我们需要遍历它们，并对每一个元素执行点击操作。为此，我们可以使用Robot Framework的FOR循环结构来遍历这些元素，并使用ClickElem关键字来点击每一个元素。\n</thought>\n\n<code_block>\n# 查找所有data-tabkey包含semiTab的元素\n${elements}  FindElem  [data-tabkey*=semiTab]\n\n# 遍历找到的元素并点击\nFOR  ${elem}  IN  @{elements}\n  ClickElem  ${elem}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "The text '投放日' does not exist in the popup.",
        "output": "<thought>\n给定的场景要求我们验证弹窗中不存在特定文本“投放日”。我们可以使用`CheckNotHasText`关键字来检查“投放日”在弹窗中是否不存在。为了确定这是一个弹窗中的操作，我们需要设置`base`参数为特殊值`POPUP`。\n</thought>\n\n<code_block>\n# 校验弹窗中不存在'投放日'\nCheckNotHasText | 投放日 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click 'Export CSV' in the popup and verify that \"Cancel\" and \"OK\" are present in the popup.",
        "output": "<thought>\n需要在弹窗中点击“Export CSV”按钮，然后校验弹窗中是否存在文本“Cancel”和“OK”。可以使用Click关键字来点击按钮，并使用CheckHasText关键字来校验文本。\n</thought>\n\n<code_block>\n# 点击弹窗中的 Export CSV\nClick | Export CSV | base=POPUP\n\n# 校验弹窗中存在 Cancel 和 OK\nCheckHasText | Cancel | OK | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check 'PoP rate' in the popup, click on 'Amount paid' in the popup and select \"Amount due\". Verify that \"Amount paid is empty\" is present.",
        "output": "<thought>\n这个场景涉及操作一个弹窗。首先，我将使用`CheckBoxOn`关键字来勾选弹窗中的“PoP rate”复选框。接下来，我需要点击弹窗中的“Amount paid”，为此可以使用`Click`关键字，base设置为`POPUP`表示弹窗。然后，选择“Amount due”选项，我将使用`SelectOption`关键字来实现。最后，使用`CheckHasText`关键字校验页面是否包含“Amount paid is empty”文本。需要注意的是，由于这些操作发生在弹窗中，因此大部分关键字会使用`base=POPUP`。\n</thought>\n\n<code_block>\n# 勾选弹窗中的“PoP rate”复选框\nCheckBoxOn | PoP rate | base=POPUP\n\n# 点击弹窗中的“Amount paid”\nClick | Amount paid | base=POPUP\n\n# 选择“Amount due”选项\nSelectOption | Amount due\n\n# 校验页面是否包含“Amount paid is empty”文本\nCheckHasText | Amount paid is empty\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on 'Post-tax amount' in the popup, select the 'Amount after discount' option, wait for 10 seconds, click the first element with the tag 'img', and then click '提交'.",
        "output": "<thought>\n首先需要点击弹窗中的\"Post-tax amount\"，根据描述应使用`Click`关键字并指定`base=POPUP`。接着选择 \"Amount after discount\" 选项，可以使用`SelectOption`关键字。然后等待10秒，使用`Sleep`关键字。再点击第一个tag为img的元素，可以使用`ClickElem`结合jquery选择器`:eq(0)`。最后点击\"提交\"，使用`Click`关键字。\n</thought>\n\n<code_block>\n# 点击弹窗中的Post-tax amount\nClick | Post-tax amount | base=POPUP\n\n# 选择Amount after discount选项\nSelectOption | Amount after discount\n\n# 等待10秒\nSleep | 10s\n\n# 点击第一个tag为img的元素\nClickElem | img:eq(0)\n\n# 点击提交\nClick | 提交\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '餐饮商品管理' under '商品管理'.",
        "output": "<thought>\n这个测试任务要求点击“商品管理”下面的“餐饮商品管理”。可以使用`ClickTextToTheDirectionOf`关键字，选择“商品管理”作为基准元素，然后在基准元素的下方寻找“餐饮商品管理”进行点击。\n</thought>\n\n<code_block>\n# 点击商品管理下面的餐饮商品管理\nClickTextToTheDirectionOf | 商品管理 | bottom | 餐饮商品管理\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Refresh the page, enter 8888 in '密码', and enter 666 in '验证码'.",
        "output": "<thought>\n这个任务要求在刷新页面后，输入密码和验证码。我们可以使用`RefreshPage`来刷新当前页面，然后使用`SetField`在页面字段中填写密码和验证码。根据提示，我们需要在字段\"密码\"中输入\"8888\"，在字段\"验证码\"中输入\"666\"。\n</thought>\n\n<code_block>\n# 刷新页面\nRefreshPage\n\n# 在密码字段中输入\"8888\"\nSetField | 密码 | 8888\n\n# 在验证码字段中输入\"666\"\nSetField | 验证码 | 666\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set '活动时间' to: 2024/12/30 ~ 2024/12/31, and set '投放时间' to: 01:00 ~ 08:00.",
        "output": "<thought>\n设置“活动时间”和“投放时间”需要分别在两个字段中填写两个不同的时间区间。可以使用`SetField`关键字来设置这些字段的值。根据问题描述，先设置“活动时间”为“2024/12/30 ~ 2024/12/31”，然后将“投放时间”设置为“01:00 ~ 08:00”。\n</thought>\n\n<code_block>\n# 设置活动时间为2024/12/30 ~ 2024/12/31\nSetField | 活动时间 | 2024/12/30 ~ 2024/12/31\n\n# 设置投放时间为01:00 ~ 08:00\nSetField | 投放时间 | 01:00 ~ 08:00\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "get status if it runnign keyword fails",
        "output": "<thought>\n如果运行关键字失败，我们希望获取状态。为此，我们可以使用 `Run Keyword And Ignore Error` 来运行关键字，并检查关键字执行是否成功\n</thought>\n\n<code_block>\n# 运行关键字并忽略错误\n${status}  Run Keyword And Return Status  YourKeywordHere\n\n# 检查状态并处理错误\nIF  '${status}' == 'FAIL'\n    Log  关键字运行失败\nELSE\n    Log  关键字运行成功\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check if the page is blank (white screen), and if it is, refresh the page.",
        "output": "<thought>\n我们需要使用CheckWhiteScreen关键字来检查页面是否存在白屏。如果白屏存在，CheckWhiteScreen会抛出异常。因此，我们应该使用Run Keyword And Return Status来捕捉异常，从而判断页面是否是白屏。如果CheckWhiteScreen执行成功（返回False），页面不是白屏，否则（返回True）页面是白屏，则刷新页面。\n</thought>\n\n<code_block>\n# 使用 Run Keyword And Return Status 判断白屏\n${is_white_screen}  Run Keyword And Return Status  CheckWhiteScreen\n\n# 如果是白屏，则刷新页面\nIF  ${is_white_screen}\n    RefreshPage\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '主播列表', then click '主播详情' in the first row of the table. In the details popup, set '主播' to '运营经纪人'. If '开始上麦' is present, click on it.",
        "output": "<thought>\n首先，使用Click关键字点击‘主播列表’。然后，使用ClickTextOfRow关键字点击表格第一行的‘主播详情’。在弹出的主播详情弹框中，使用SetField将‘主播’字段设为‘运营经纪人’。最后，使用IsAnyTextExisting检查弹框中是否存在‘开始上麦’，如果存在就点击它。\n</thought>\n\n<code_block>\n# 点击‘主播列表’\nClick  主播列表\n\n# 点击表格第一行的‘主播详情’\nClickTextOfRow  1  主播详情\n\n# 在弹窗中将‘主播’设为‘运营经纪人’\nSetField  主播  '运营经纪人'  base=POPUP\n\n# 检查是否存在‘开始上麦’，如果存在则点击\n${exist}  IsAnyTextExisting  开始上麦  base=POPUP\nIF  ${exist}\n    Click  开始上麦  base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on 'Summary distribution', select the option containing \"hxq经纪人44(123)\", and verify that the first column of the first row in the table contains \"hxqppe4\".",
        "output": "<thought>\n为了完成这个任务，我需要执行以下步骤：\n1. 点击文本 \"Summary distribution\"。\n2. 选择包含文本 \"hxq经纪人44(123)\" 的选项。\n3. 校验表格的第一行第一列是否包含文本 \"hxqppe4\"。\n\n我可以首先使用 Click 关键字点击 \"Summary distribution\"。接着，我使用 SelectOption 来选择包含 \"hxq经纪人44(123)\" 的选项。最后，我使用 CheckCellHas 关键字来检查表格的第一行第一列是否包含 \"hxqppe4\"。\n</thought>\n\n<code_block>\n# 点击 Summary distribution\nClick | Summary distribution\n\n# 选择包含“hxq经纪人44(123)\" 的选项\nSelectOption | hxq经纪人44(123)\n\n# 校验表格第一行第一列包含“hxqppe4”\nCheckCellHas | 1 | 1 | hxqppe4\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that the contents of the first row of the table are in the following order: '2024-09', 'bptestsg02', 'Byteplus', 'bptestsg02', 'SG'.\n\nTip: To ensure the contents are in order, you can use a FOR loop to check each cell individually",
        "output": "<thought>\n为了校验表格第一行内容的顺序，我们可以使用一个FOR循环，逐个校验表格第一行的每个单元格文本。首先，我们定义要校验的目标文本列表。接着，使用FOR循环遍历这个列表，并且对于每个元素，调用CheckCellHas关键字，指定第一行及对应列，来验证每个单元格的文本。\n</thought>\n\n<code_block>\n# 定义期望的单元格内容列表\n@{expected_texts}   Create List  2024-09  bptestsg02  Byteplus  bptestsg02  SG\n\n# 使用FOR循环逐个校验单元格\nFOR  ${index}  ${expected_text}  IN ENUMERATE  @{expected_texts}\n  # 校验第一行每个对应列\n  CheckCellHas  1  ${index + 1}  ${expected_text}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click 'Split bills', then iterate through all elements on the page where aria-controls contains \"semiTabPanel\" and click on them.",
        "output": "<thought>\n首先，我们需要点击包含文本 \"Split bills\" 的元素。接着，我们需要查找页面上所有 aria-controls 属性包含 \"semiTabPanel\" 的元素，并逐一点击这些元素。可以使用 Click 关键字来点击文本 \"Split bills\"，然后使用 FindElem 获取满足条件的所有元素，并使用 ClickElem 迭代对每个元素进行点击。\n</thought>\n\n<code_block>\n# 点击 Split bills\nClick | Split bills\n\n# 查找并点击所有 aria-controls 包含 semiTabPanel 的元素\n${elems}  FindElem | [aria-controls*=semiTabPanel]\nFOR    ${elem}    IN    @{elems}\n    ClickElem    ${elem}\nEND"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Open https://life.douyin.com/h5/seckill/list, click '创建秒杀', find the input with the placeholder '商品名称', click on it, and then enter 234.",
        "output": "<thought>\n在这个场景中，我需要完成以下步骤：\n1. 打开指定的URL。\n2. 点击页面上的“创建秒杀”按钮。\n3. 找到placeholder为“商品名称”的输入框。\n4. 点击该输入框，然后输入“234”。\n\n首先使用`OpenUrl`关键字打开页面，然后使用`Click`关键字点击“创建秒杀”按钮。接着，使用`FindElem`关键字找到placeholder为“商品名称”的input栏，最后使用`FillArea`关键字完成输入操作。\n</thought>\n\n<code_block>\n# 打开指定的URL\nOpenUrl | https://life.douyin.com/h5/seckill/list\n\n# 点击“创建秒杀”按钮\nClick | 创建秒杀\n\n# 找到placeholder为“商品名称”的input并输入234\n${input_elem}  FindElem | input[placeholder='商品名称']\nFillArea | ${input_elem} | 234\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the mouse over the first element to the right of “近30日音浪收入” where the class contains “help”.",
        "output": "<thought>\n在这个场景中，我们需要将鼠标移动到“近30日音浪收入”右边的第一个class包含“help”的元素上。可以使用MoveToElemToTheDirectionOf关键字，它可以帮助我们根据基准元素和方向找到具体的目标元素，然后移动到该元素上。因此，我们选择使用该关键字，以“近30日音浪收入”为基准，从其右边找第一个class包含“help”的元素。\n</thought>\n\n<code_block>\n# 移动鼠标到“近30日音浪收入”右边的第一个class包含“help”的元素\nMoveToElemToTheDirectionOf | 近30日音浪收入 | right | [class*=help] | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"编辑\" in the first row of the table, set \"数值要求\" to multiple values: '开播时长', '入会后7天内', '大于', '100'. Click '分润模式', and the page is expected to display the text: '5:5开'.",
        "output": "<thought>\n本任务可以分为几个步骤：首先需要点击表格中第一行的“编辑”按钮，这可以使用关键字 `ClickTextOfRow`。然后需要在弹出的界面中设置“数值要求”字段为多个值（开播时长、入会后7天内、大于、100），这可以通过使用关键字 `SetField`。接下来，需要点击“分润模式”，可以用 `Click`关键字完成。最后，验证页面是否包含文案“5:5开”可使用 `CheckHasText`。整体思路比较清晰，主要需要注意顺序和触发的具体页面元素。\n</thought>\n\n<code_block>\n# 点击表格中第一行的“编辑”\nClickTextOfRow | 1 | 编辑\n\n# 设置“数值要求”为多个值\nSetField | 数值要求 | 开播时长 | 入会后7天内 | 大于 | 100\n\n# 点击“分润模式”\nClick | 分润模式\n\n# 校验页面存在文案“5:5开”\nCheckHasText | 5:5开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '镜像管理', perform a white screen detection, click '更多' to the right of '产品文档', then click '详情' to the right of '数据监控'. The page is expected to display the text: '新增实例'.",
        "output": "<thought>\n为了解决这个问题，我们需要依次使用关键字实现以下步骤：\n1. 使用`Click`关键字点击\"镜像管理\"。\n2. 使用`CheckWhiteScreen`关键字进行白屏检测。\n3. 使用`ClickTextToTheDirectionOf`关键字点击\"产品文档\"右侧的\"更多\"。\n4. 使用`ClickTextToTheDirectionOf`关键字点击\"数据监控\"右侧的\"详情\"。\n5. 使用`CheckHasText`关键字检查页面是否存在\"新增实例\"的文案。\n</thought>\n\n<code_block>\n# 点击镜像管理\nClick | 镜像管理\n\n# 检测白屏\nCheckWhiteScreen\n\n# 点击产品文档右侧的更多\nClickTextToTheDirectionOf | 产品文档 | right | 更多\n\n# 点击数据监控右侧的详情\nClickTextToTheDirectionOf | 数据监控 | right | 详情\n\n# 校验页面存在新增实例\nCheckHasText | 新增实例\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write a RobotFramework keyword named '随机生成云服务名称' with the following logic: Randomly generate a string with the prefix 'UItest_', followed by a 6-digit random number, and finally return the generated cloud service name",
        "output": "<thought>\n这个任务需要生成一个特定格式的随机字符串。我们可以使用`GenerateRandomWithPrefix`关键字，从而生成以`UItest_`为前缀的字符串，并指定生成后缀部分的长度和字符类型。为满足要求，后缀部分应为6位，由数字组成。\n</thought>\n\n<code_block>\n*** Keywords ***\n随机生成云服务名称\n    # 生成 UItest_ 开头的长度为13的随机字符串，其中后6位为数字\n    ${cloud_service_name}=  GenerateRandomWithPrefix  UItest_  13  [NUMBERS]\n\n    # 返回生成的云服务名称\n    [Return]  ${cloud_service_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on the menu '边缘服务', perform a blank screen check, change 'Period' to 'By day', and after 2 seconds, verify that the contents of the '开启日期' column in the table are in the following order: '2024-09-10', '2024-09-11', '2024-09-12'",
        "output": "<thought>\n1. 使用ClickMenu关键字点击菜单'边缘服务'。\n2. 使用CheckWhiteScreen关键字进行白屏检测。\n3. 使用SetField关键字将'Period'字段设置为'By day'。\n4. 使用RF标准库中的'Sleep'关键字等待2秒，以确保页面数据加载完成。\n5. 使用一个循环和GetCellValue关键字获取表格中'开启日期'列的值。\n6. 校验获取到的列值与预期值'2024-09-10', '2024-09-11', '2024-09-12'是否一致。\n</thought>\n\n<code_block>\n# 点击边缘服务菜单\nClickMenu | 边缘服务\n\n# 检测白屏\nCheckWhiteScreen\n\n# 设置Period为By day\nSetField | Period | By day\n\n# 等待2秒以确保页面加载完成\nSleep | 2s\n\n# 预期的开启日期列表\n@{expected_dates}  Create List  2024-09-10  2024-09-11  2024-09-12\n\n# 循环校验表格中'开启日期'列的内容\nFOR  ${index}  IN RANGE  0  3\n   # 获取当前行的开启日期\n   ${actual_date}  GetCellValue | ${index+1} | 开启日期\n\n   # 校验当前行的开启日期是否与预期值一致\n   Should Be Equal As Strings  ${actual_date}  ${expected_dates}[${index}]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on the element with class=\"sc-ddjGPC\" and text '资源包管理', click the icon to the left of 'Export CSV', and click '确定' in the popup dialog",
        "output": "<thought>\n我们需要完成以下几个步骤：\n1. 查找 class 为 \"sc-ddjGPC\" 且文案为 \"资源包管理\" 的元素，并进行点击。\n2. 然后需要点击 \"Export CSV\" 左边的 icon。\n3. 最后，在弹出的弹框中点击 \"确定\"。\n\n为此，我们可以使用以下关键字：\n- 对于第一步，我们可以使用 `FindByText` 来找到包含文本\"资源包管理\"且 class 为\"sc-ddjGPC\"的元素，然后 `ClickElem` 进行点击。\n- 第二步，可以使用 `ClickIconToTheDirectionOf`，指定基准元素为 \"Export CSV\"，方向为 \"left\"。\n- 第三步，直接用 `Click` 在弹窗中点击 \"确定\"，基准元素为 `POPUP`。\n</thought>\n\n<code_block>\n# 找到 class=\"sc-ddjGPC\" 且文案为 \"资源包管理\" 的元素并点击\nClickElem | [class='sc-ddjGPC']:contains(资源包管理)\n\n# 点击 \"Export CSV\" 左边的 icon\nClickIconToTheDirectionOf | Export CSV | left\n\n# 点击弹窗中的 \"确定\"\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set '会议室名称' to 'Guangzhou-Heji(赫基大厦) > F23-01', click the 'More' icon below '操作', and click '下线' in the dropdown popup",
        "output": "<thought>\n首先，我需要使用 `SetField` 关键字来设置会议室名称为 \"Guangzhou-Heji(赫基大厦) > F23-01\"。接着，我使用 `ClickIconToTheDirectionOf` 关键字来点击 \"操作\" 下方的更多 icon。最后，我需要在弹窗中点击 \"下线\"，可以使用 `Click` 关键字并设置 base 为 POPUP来实现。\n</thought>\n\n<code_block>\n# 设置会议室名称为 \"Guangzhou-Heji(赫基大厦) > F23-01\"\nSetField | 会议室名称 | Guangzhou-Heji(赫基大厦) > F23-01\n\n# 点击 \"操作\" 下方的更多 icon\nClickIconToTheDirectionOf | 操作 | bottom | more\n\n# 在弹窗中点击 \"下线\"\nClick | 下线 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Read the content from the file abc.txt and store it in the variable dollarname",
        "output": "<thought>\n我们需要从文件`abc.txt`中读取内容并存储到变量`dollarname`中。Robot Framework提供了`OperatingSystem`库中的`Get File`关键字，可以使用该关键字来读取文件内容。\n</thought>\n\n<code_block>\n# 从文件abc.txt读取内容存储到变量dollarname\n${dollarname}  Get File  abc.txt\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Once the page has loaded, with a timeout of 60 seconds, click the button that includes '变更', base: class includes 'detail_info', then fill in '播放时段' with 0000-00-15 ~ 0000-00-21.",
        "output": "<thought>\n首先，使用WaitLoading关键字等待页面加载完成，最多等待60秒。接下来，使用Click关键字点击包含‘变更’的按钮，基准元素是class包括‘detail_info’。最后，使用SetField关键字填写‘播放时段’字段为‘0000-00-15 ~ 0000-00-21’。\n</thought>\n\n<code_block>\n# 等待页面加载完成，最多60秒\nWaitLoading | timeout=60\n\n# 点击class包含'detail_info'的基准元素中的‘变更’按钮\nClick | 变更 | base=[class*=detail_info]\n\n# 设置‘播放时段’为‘0000-00-15 ~ 0000-00-21’\nSetField | 播放时段 | 0000-00-15 ~ 0000-00-21\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '证书列表' and select the first certificate in the dropdown dialog",
        "output": "<thought>\n在这个场景中，我们需要在页面上找到并点击“证书列表”文本，以打开下拉弹框。然后，我们需要选择下拉弹框中的第一个证书。为此，我们可以使用`Click`关键字来点击“证书列表”文本，然后使用`SelectOption`关键字，并结合特殊值`OPTIONS_1`来选择下拉弹框内的第一个选项。\n</thought>\n\n<code_block>\n# 点击证书列表\nClick | 证书列表\n\n# 选择第一个证书\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If ${assert_list} is empty, print log as empty; otherwise, print the length of the list and write the last item of the list to the file last.item",
        "output": "<thought>\n为了判断 ${assert_list} 是否为空，我们需要使用 IF 条件语句。如果不为空，则获取列表长度并打印，同时将最后一个元素写入文件。Robot Framework 的 IF 语句允许在 ELSE 块中执行不同的操作，因此我们可以利用这一点来实现逻辑分支。我们可以通过获取列表的长度来判断，并用BuiltIn库的关键字来记录日志和写入文件。\n</thought>\n\n<code_block>\n# 判断 ${assert_list} 是否为空列表\nIF  ${assert_list} == []\n    # 列表为空，打印日志\n    Log  为空\nELSE\n    # 列表不为空，获取其长度并打印\n    ${length}=  Get Length  ${assert_list}\n    Log  列表的长度为: ${length}\n\n    # 获取列表的最后一个元素\n    ${last_item}=  Evaluate  ${assert_list}[-1]\n    \n    # 将最后一个元素写入文件\n    Create File  last.item  ${last_item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that the status_code of all POST requests sent to the /api/create/message endpoint is equal to 200",
        "output": "<thought>\n为了解决此问题，我需要获取发往接口 /api/create/message 的所有 POST 请求的响应信息，然后检查这些响应的状态码是否都等于 200。可以使用 \"Search Requests\" 关键字来找到所有符合条件的请求，接着遍历响应数据并校验 status_code 是否为 200。\n</thought>\n\n<code_block>\n# 搜索所有发往 /api/create/message 接口的 POST 请求\n${responses}  Search Requests  /api/create/message  POST  all\n\n# 遍历每个响应校验其 status_code\nFOR  ${response}  IN  @{responses}\n    # 获取响应的状态码\n    ${status_code}  Evaluate  ${response}['status_code']\n\n    # 校验状态码是否等于200\n    Should Be Equal As Numbers  ${status_code}  200\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '证书概览', wait for the page to load completely, click the first '图片生成' button on the page, fill in '发送箱地址' with ${name}@qq.com, and click '发送'",
        "output": "<thought>\n首先，需要点击“证书概览”文本来打开相应页面。然后，等待页面加载完成。接着，点击页面中第一个“图片生成”按钮。之后，填写“发送箱地址”字段，填写的值为`${name}@qq.com`。最后，点击“发送”按钮。\n</thought>\n\n<code_block>\n# 点击证书概览\nClick | 证书概览\n\n# 等待页面加载完成\nWaitLoading\n\n# 点击页面中第一个‘图片生成’按钮\nClick | 图片生成 | idx=0\n\n# 填写发送箱地址\nSetField | 发送箱地址 | ${name}@qq.com\n\n# 点击‘发送’\nClick | 发送\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '我的申请单', check that '设备退还' exists on the page, click the first '设备退还', and click '确定', with the base being an element whose class includes 'UIAttributeInfoDrawer-'",
        "output": "<thought>\n首先需要点击文本\"我的申请单\"，然后检查页面上是否存在\"设备退还\"。接着，点击第一个出现的\"设备退还\"。最后，点击类名包含\"UIAttributeInfoDrawer-\"的元素中的文本\"确定\"。根据给定的关键字和说明，依次使用`Click`、`CheckHasText`、`Click`、`Click`来实现这些步骤。\n</thought>\n\n<code_block>\n# 点击文本 我的申请单\nClick | 我的申请单\n\n# 检查页面存在文本 设备退还\nCheckHasText | 设备退还\n\n# 点击第一个出现的 设备退还\nClick | 设备退还 | idx=0\n\n# 点击 class 包含 UIAttributeInfoDrawer- 的元素中的 确定\nClick | 确定 | base=[class*='UIAttributeInfoDrawer-']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on the textarea to the right of '事件描述', input ctrl + right arrow key, then input 15 backspace keys, followed by typing: 我修改一下, and then press enter",
        "output": "<thought>\n根据问题描述的操作步骤，首先需要找到“事件描述”右边的textarea并点击。接着，需要在textarea中输入组合键Ctrl+右方向键。接下来，输入15个退格键以删除对应字符。最后，输入“我修改一下”并回车。可以使用SeleniumLibrary中的Press Keys来处理特殊键输入。\n</thought>\n\n<code_block>\n# 点击‘事件描述’右边的 textarea\nClickTextToTheDirectionOf | 事件描述 | right | textarea\n\n# 输入 Ctrl + 右方向键\nPress Keys | None | CTRL+ARROW_RIGHT\n\n# 输入 15 个退格键\nPress Keys | None | ${KEY_BACKSPACE * 15}\n\n# 输入：我修改一下，然后回车\nSendText | 我修改一下 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check that the first row of the table contains '${req} 已审批', click '取消工单' in this row, wait for '确定取消工单吗' to appear, and input '撤回原因': '已经有一台设备了'",
        "output": "<thought>\n首先需要检查表格第一行是否包含文本 `${req}` 和 `已审批`。如果条件成立，则点击该行中的 `取消工单`。接着，等待文本 `确定取消工单吗` 出现，以确保弹窗已经出现。在弹窗中，输入撤回原因，即 `已经有一台设备了`。\n为实现这个逻辑，分多个步骤使用关键词：首先使用 `CheckRowHas` 确认第一行包含所需文本，然后用 `ClickTextOfRow` 点击 `取消工单`。接着使用 `WaitText` 等待确认弹窗，最后用 `SetPopupField` 输入撤回原因。\n</thought>\n\n<code_block>\n# 检查表格第一行包含所需文本\nCheckRowHas | 1 | ${req} | 已审批\n\n# 点击表格第一行中的“取消工单”\nClickTextOfRow | 1 | 取消工单\n\n# 等待“确定取消工单吗”文本出现\nWaitText | 确定取消工单吗\n\n# 在弹窗中输入撤回原因\nSetPopupField | 撤回原因 | 已经有一台设备了\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the mouse to the small icon to the right of \"Hide $0 bills\", and click on 12345 after ${attribute_name}",
        "output": "<thought>\n该场景要求鼠标首先移动到“Hide $0 bills”右边的icon上，然后点击${attribute_name}后面的文本“12345”。结合给定的关键字，我们可以使用`MoveToIconToTheDirectionOf`来达到鼠标移动的效果，然后使用`ClickTextToTheDirectionOf`来实现点击操作。\n</thought>\n\n<code_block>\n# 移动到“Hide $0 bills”右边的icon\nMoveToIconToTheDirectionOf | Hide $0 bills | right\n\n# 点击 ${attribute_name} 右边的 12345\nClickTextToTheDirectionOf | ${attribute_name} | right | 12345\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the filter to the right of the 'Payment Status' cell in the table header, select 'Cleared', and click 'Ok'",
        "output": "<thought>\n首先我们需要点击表格头中 \"Payment Status\" 单元格右边的筛选器，这可以通过 `ClickElemOfCell` 关键字实现。 然后需要选择 \"Cleared\" 选项，这可以通过 `SelectOption` 关键字实现。最后，选择 \"Ok\" 按钮以确认，这可以通过 `Click` 关键字实现。\n</thought>\n\n<code_block>\n# 点击 \"Payment Status\" 单元格右边的筛选器\nClickElemOfCell | HEAD | Payment Status | [class*=filter]\n\n# 选择 \"Cleared\" 选项\nSelectOption | Cleared\n\n# 点击 \"Ok\" 按钮\nClick | Ok\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the time ten minutes from now in the format similar to: 2025-11-11 10:12",
        "output": "<thought>\n要获取十分钟后的时间，可以使用RF的时间处理关键字。首先，可以通过`Get Current Date`获取当前时间，然后使用`Add Time To Date`添加10分钟。最后，把结果格式化为所需的格式。\n</thought>\n\n<code_block>\n# 获取当前时间\n${current_time}  Get Current Date  result_format=%Y-%m-%d %H:%M\n\n# 添加10分钟\n${time_after_10_minutes}  Add Time To Date  ${current_time}  10 minutes  result_format=%Y-%m-%d %H:%M\n\n# 输出十分钟后时间\nLog  ${time_after_10_minutes}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the mouse to a position 20 pixels below '字段类型' in the popup and click",
        "output": "<thought>\n在这个场景中，我们需要将鼠标移动到弹框中的某个文本的特定位置并执行点击操作。首先可以使用`MoTo`关键字将鼠标移动到特定文本，再利用坐标调整功能移动到下方20像素的位置，最后使用`MClick`关键字进行点击。由于是在弹框中操作，需要确保`base=POPUP`的使用。\n</thought>\n\n<code_block>\n# 移动鼠标到弹框中‘字段类型’下方20像素位置\nMoTo | 字段类型 | base=POPUP | dy=20\n\n# 点击当前鼠标位置\nMClick\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that all cells in the 'Billing type' column of the table contain 'Refund', and then click 'Reset'",
        "output": "<thought>\n首先，我们需要获取表格的行数，然后遍历每一行，检查每一行的Billing type列是否包含Refund。为此，我们可以使用`GetRowCount`获取行数，然后在循环中使用`CheckCellHas`检查每一行的Billing type列。最后，通过使用`Click`关键字点击Reset按钮。\n</thought>\n\n<code_block>\n# 获取表格行数\n${rowCount}  GetRowCount\n\n# 遍历表格的每一行\nFOR  ${row}  IN RANGE  1  ${rowCount}+1\n    # 校验Billing type列中的值为Refund\n    CheckCellHas  ${row}  Billing type  Refund\nEND\n\n# 点击Reset按钮\nClick  Reset\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Wait for '仅展示权限范围内的合同' to appear on the page, click '查看详情' to the right of '已签署合同' in the popup, select 'Refund', and click 'Ok'",
        "output": "<thought>\n此场景需要通过等待文本出现，然后在弹窗中点击特定文本的“查看详情”按钮，以及选择一个选项并确认。一开始，需要等待页面出现“仅展示权限范围内的合同”。然后在弹窗中，需要找到“已签署合同”右侧的“查看详情”按钮进行点击，再选择Refund选项并点击Ok按钮，需要用到Click系列和SelectOption关键字。具体步骤如下：\n1. 使用`WaitText`关键字等待文本“仅展示权限范围内的合同”出现。\n2. 使用`ClickTextToTheDirectionOf`关键字，查找“已签署合同”右侧的“查看详情”并点击。\n3. 使用`SelectOption`关键字选择Refund。\n4. 使用`Click`关键字点击Ok。\n</thought>\n\n<code_block>\n# 等待出现文本“仅展示权限范围内的合同”\nWaitText | 仅展示权限范围内的合同\n\n# 点击弹窗中“已签署合同”右边的“查看详情”\nClickTextToTheDirectionOf | 已签署合同 | right | 查看详情 | base=POPUP\n\n# 选择Refund选项\nSelectOption | Refund\n\n# 点击Ok按钮\nClick | Ok\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Scroll '消费规则' to the middle of the page, clear 'Order/Bill no', click the first div with title=\"10 / Page\", set 'Export' in the popup to 'Current filter results', and verify that 'Total: 1' exists",
        "output": "<thought>\n首先，我们需要将‘消费规则’移动到视野内，可以使用MoveIntoView关键字。接下来，清空字段Order/Bill no，可以使用SetField关键字，并通过传递特殊值${KEY_BACKSPACE}来实现清空。然后，需要点击第一个div元素，其title属性为\"10 / Page\"，可以通过ClickElem关键字和jquery选择器来实现。接着，要在弹窗中设置Export字段为\"Current filter results\"，可以使用SetPopupField关键字。最后，校验页面上存在文本\"Total: 1\"，可以使用CheckHasText关键字。\n</thought>\n\n<code_block>\n# 将‘消费规则’移动到视野内\nMoveIntoView | :contains('消费规则')\n\n# 清空Order/Bill no字段\nSetField | Order/Bill no | ${KEY_BACKSPACE}\n\n# 点击第一个title为\"10  / Page\"的div\nClickElem | div[title='10  / Page']:eq(0)\n\n# 设置弹窗中的Export为Current filter results\nSetPopupField | Export | Current filter results\n\n# 校验页面存在文本\"Total: 1\"\nCheckHasText | Total: 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the small icon to the left of 'Export CSV', and check 'Select all'",
        "output": "<thought>\n首先我们需要点击 \"Export CSV\" 左边的图标。可以使用`ClickIconToTheDirectionOf`关键字，基于给定的方向和目标元素。然后我们需要勾选 \"Select all\"，可以使用`CheckBoxOn`关键字。\n</thought>\n\n<code_block>\n# 点击 Export CSV 左边的图标\nClickIconToTheDirectionOf | Export CSV | left\n\n# 勾选 Select all\nCheckBoxOn | Select all\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the date from 3 months ago in the format year-month-day",
        "output": "<thought>\n为了解决这个问题，我们可以使用RF标准库中的日期处理关键字。可以利用 Get Current Date 获取当前日期，然后用 Subtract Time From Date 减去3个月。由于日期格式通常是年-月-日格式，我们可以通过设置日期格式来得到最期望的输出格式。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}    Get Current Date    result_format=%Y-%m-%d\n\n# 计算3个月前的日期\n${three_months_ago}  Subtract Time From Date  ${current_date}  3 months  result_format=%Y-%m-%d\n\n# 输出3个月前的日期\nLog    ${three_months_ago}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set ${StartDay} to the date of the 16th of last month, in the format: 2026-11-16",
        "output": "<thought>\n为了将 ${StartDay} 设置为上个月16号的日期，我们可以使用Robot Framework的日期和时间处理关键字。首先，我们使用`Get Current Date`获取当前的日期，然后用`Subtract Time From Date`将日期减去一个月，最后用`Convert Date`来格式化日期，确保结果的格式为“YYYY-MM-DD”。\n</thought>\n\n<code_block>\n# 获取当前日期\n${currentDate}  Get Current Date\n\n# 计算上个月的同一天\n${lastMonthSameDay}  Subtract Time From Date  ${currentDate}  1 month\n\n# 构造上个月16号的日期字符串\n${StartDay}  Convert Date  ${lastMonthSameDay}  result_format=%Y-%m-16\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "for index in range 0 to 44",
        "output": "<thought>\n需要循环遍历从0到44的索引值，可以使用RF内置的FOR循环结构来实现。在循环体内可以使用${index}来引用当前的索引值。\n</thought>\n\n<code_block>\n# 使用FOR循环遍历索引0到44\nFOR    ${index}    IN RANGE    0    45\n    # 循环体内的操作\n    Log    ${index}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "if 当日大盘流水 in txt then pass",
        "output": "<thought>\n需要判断“当日大盘流水”是否在给定的文本txt中，使用RF内置的IF/ELSE语法来实现条件判断。\n</thought>\n\n<code_block>\n# 使用Robot Framework的IF/ELSE语法\nIF  \"当日大盘流水\" in $txt\n    Log  pass\nELSE\n    Fail  当日大盘流水 not in $txt\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that there is '视频' to the left of '国学美风'",
        "output": "<thought>\n解决问题思路: 应该使用CheckHasTextToTheDirectionOf关键字，以‘国学美风’为基准元素，检查其左方是否存在文本‘视频’。\n</thought>\n\n<code_block>\n# 校验 ‘国学美风’ 左边有 ‘视频’\nCheckHasTextToTheDirectionOf | 国学美风 | left | 视频\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the element with a class containing checkbox to the left of the 3rd '标签名称'",
        "output": "<thought>\n需要使用ClickElemToTheDirectionOf关键字，基准元素为文本“第3个标签名称”，方向为left，目标元素选择器为[class*=checkbox]。由于是第3个标签名称，所以需要在选择器中使用:eq(2)来定位。\n</thought>\n\n<code_block>\n# 点击第3个标签名称左面的class包含checkbox的元素\nClickElemToTheDirectionOf | :contains(标签名称):eq(2) | left | [class*=checkbox]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the content of the \"知识解决方案\" card below the text \"广州赫基大厦有几个服务台？${timestamp}\"",
        "output": "<thought>\n要解决这个问题，我们需要遵循以下步骤：\n1. 首先，查找文案“广州赫基大厦有几个服务台？${timestamp}”所在的元素。\n2. 从这个元素出发，查找给定方向下的文案“知识解决方案”所在的元素。\n3. 找到步骤2中找到的元素的祖先中，class包含card的元素。\n4. 获取步骤3中找到的元素的文本内容。\n\n根据描述的关键字，可以使用 `FindByText` 来找到第一步和第二步的元素；使用 `FindParentElem` 来捕获第三步中所需的祖先元素；最后使用 `GetElemText` 来获取文本。\n</thought>\n\n<code_block>\n# 查找文案“广州赫基大厦有几个服务台？${timestamp}”所在的元素\n${base_elem}  FindByText  广州赫基大厦有几个服务台？${timestamp}\n\n# 在base_elem下方查找“知识解决方案”文案所在的元素\n${knowledge_elem}  FindTextToTheDirectionOf  ${base_elem}  bottom  知识解决方案\n\n# 查找${knowledge_elem}祖先中class包含card的元素\n${card_elem}  FindParentElem  ${knowledge_elem}  [class*=card]\n\n# 获取${card_elem}的文本内容\n${card_content}  GetElemText  ${card_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Enter 'ComfyUI-AngryNodes' in '请输入插件名称关键词' field and press enter",
        "output": "\n<thought>\n在这个场景中，我们需要在一个名为\"请输入插件名称关键词\"的字段中输入文本\"ComfyUI-AngryNodes\"并且触发回车操作。根据给定的关键字描述，SetField 可以用来操作特定名称的字段并输入文本，同时可以通过 enter=True 参数来模拟回车按键。\n</thought>\n\n<code_block>\n# 在\"请输入插件名称关键词\"字段中输入\"ComfyUI-AngryNodes\"并回车\nSetField | 请输入插件名称关键词 | ComfyUI-AngryNodes | enter=True\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set '分组名称' to 'ui自动化' + an eight-character random string + '_test', set '线路' to '越南运营商_FPT_和平', and check that the '状态' column in the first row of the cell is '运行中'",
        "output": "<thought>\n首先需要生成一个八位随机字符串，并将其与“ui自动化”合并，再加上“_test”设置为分组名称。其次，将“线路”设置为“越南运营商_FPT_和平”。最后，检查表格中第一行的“状态”列，确保其文本为“运行中”。这可以通过使用GenerateRandom、SetField、和CheckCellHas关键字实现。\n</thought>\n\n<code_block>\n# 生成八位随机字符串\n${rand_str}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n\n# 设置分组名称为“ui自动化+八位随机字符串_test”\nSetField  分组名称  ui自动化${rand_str}_test\n\n# 设置线路为“越南运营商_FPT_和平”\nSetField  线路  越南运营商_FPT_和平\n\n# 校验表格第一行的状态列为“运行中”\nCheckCellHas  1  状态  运行中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write a keyword named \"过滤操作人是否为空\" which accepts a parameter choice. First, click the element with span class arco-select-view-value-mirror and text '默认全部', then click to select choice. After waiting for 1 second, check that the page contains the parameter choice, and finally click the '搜索' button",
        "output": "<thought>\n要解决这个问题，我们将按顺序执行以下操作：\n1. 使用`ClickElem`点击选择器`span.arco-select-view-value-mirror:contains(默认全部)`。\n2. 使用`SelectOption`选择给定的参数`choice`。\n3. 使用`Sleep`等待1秒。\n4. 使用`CheckHasText`验证页面是否包含参数`choice`。\n5. 使用`ClickElem`点击选择器对应的搜索按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n过滤操作人是否为空\n    [Arguments]  ${choice}\n\n    # 点击 span class为arco-select-view-value-mirror 并且文本为默认全部的元素\n    ClickElem  span[class=arco-select-view-value-mirror]:contains(默认全部)\n\n    # 选择参数 choice 的选项\n    SelectOption  ${choice}\n\n    # 等待 1 秒\n    Sleep  1s\n\n    # 检查页面是否包含参数 choice\n    CheckHasText  ${choice}\n\n    # 点击搜索按钮\n    ClickElem  button:contains(搜索)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check that the first row, first column of the table contains {evop_name}, and verify that the '操作人' column on the page does not contain admin",
        "output": "<thought>\n对于这个场景，我们需要进行两项检查：\n1. 检查表格中的第一行第一列是否包含变量{evop_name}。\n2. 检查页面的“操作人”一列不包含文本“admin”。\n\n我们可以使用`CheckCellHas`关键字来验证第一行第一列是否包含指定文本。同时，可以使用`CheckColNotHas`关键字来验证特定列中不包含指定文本。需要假设“操作人”是页面上的一个表格列。\n</thought>\n\n<code_block>\n# 检查表格中的第一行第一列包含变量evop_name\nCheckCellHas | 1 | 1 | ${evop_name}\n\n# 检查操作人列不包含文本admin\nCheckColNotHas | 操作人 | admin\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the small icon for more, click '续费', click '停用' in the popup, and enter '欠费' in the '停用原因' field in the dialog",
        "output": "thought>\n首先需要点击名称为“更多功能”的图标，可以使用ClickIcon关键字。随后，点击“续费”可以使用Click关键字。接着在弹窗中点击“停用”，可以使用Click关键字并指定base为POPUP。最后, 在弹窗中的停用原因输入“欠费”，使用SetPopupField关键字。\n</thought>\n\n<code_block>\n# 点击更多功能的icon\nClickIcon | more\n\n# 点击续费\nClick | 续费\n\n# 点击弹窗中的停用\nClick | 停用 | base=POPUP\n\n# 在弹窗中的停用原因中输入：欠费\nSetPopupField | 停用原因 | 欠费\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Scroll the page until the fourth area with data-auto-id attribute as card-content is fully displayed",
        "output": "<thought>\n为了将第四个data-auto-id为card-content的元素移动到视野内，我需要首先定位到该元素。基于jQuery选择器，我可以使用:eq(3)来选择第四个匹配的元素。然后，使用MoveIntoView关键字来确保该元素出现在视野中。\n</thought>\n\n<code_block>\n# 查找第四个data-auto-id为card-content的元素\n${elem}  FindElem | [data-auto-id=\"card-content\"]:eq(3)\n\n# 将元素移动到视野内\nMoveIntoView | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find \"管理中心\" on the page and click it, wait for 3 seconds, and verify whether the number 3 exists in the ${status_code_list} list",
        "output": "<thought>\n首先需要找到页面中的“管理中心”文本并点击，然后等待3秒以确保页面内容加载完成。接着，需要检查变量`${status_code_list}`中是否包含值3。可以使用`Click`进行点击操作，`Sleep`来实现等待时间，`Should Contain`来判断列表中是否包含指定的值。\n</thought>\n\n<code_block>\n# 点击管理中心\nClick  管理中心\n\n# 等待3秒让页面加载完成\nSleep  3s\n\n# 校验${status_code_list}列表内是否存在3\nShould Contain  ${status_code_list}  3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '上传单个合同文件' with the mouse. If '上传单个合同文件' disappears, upload the file ${doc_1}. Otherwise, wait for 5 seconds and repeat the loop, up to a maximum of 5 times",
        "output": "<thought>\n首先，鼠标点击\"上传单个合同文件\"按钮。之后进入一个循环，在每次循环中检查\"上传单个合同文件\"文本是否存在。如果不存在，则执行文件上传操作，并终止循环。如果存在，则等待5秒钟，然后进行下一次循环。循环最多执行5次。\n</thought>\n\n<code_block>\n# 鼠标点击上传单个合同文件\nMClick | 上传单个合同文件\n\n# 初始化循环变量\nFOR  ${index}  IN RANGE  5\n    # 判断是否出现上传单个合同文件消失\n    ${exist}  IsAnyTextExisting | 上传单个合同文件\n    IF  not ${exist}\n        # 上传文件\n        UploadFile | ${doc_1}\n        # 退出循环\n        BREAK\n    ELSE\n        # 等待5秒\n        Sleep  5s\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click at a position 60px to the right of '撤销', and enter: '我不要了'.\nHint: First move the mouse to the given offset position, then click in place",
        "output": "<thought>\n在这个场景中，首先需要移动鼠标到“撤销”文本的位置，并在其右侧偏移60px的位置点击。然后在点击的位置输入“我不要了”。为此，可以使用`MoTo`关键字将鼠标移动到“撤销”文本上，并通过`dx=60`进行水平偏移。接着使用`MClick`在当前位置点击，最后使用`SendText`输入文本“我不要了”。\n</thought>\n\n<code_block>\n# 移动鼠标到\"撤销\"文本右侧60px的位置\nMoTo | 撤销 | dx=60\n\n# 点击鼠标当前位置\nMClick\n\n# 输入“我不要了”\nSendText | 我不要了\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search for the last delete request sent to /xxx/yyy, and in the response JSON, abc:efg should be 333",
        "output": "<thought>\n首先需要使用Search Requests关键字来查找发送到/xxx/yyy的最后一个DELETE请求。接着，使用GetValuesFromJson关键字从响应的JSON中提取abc:efg的值。最后，使用Should Be Equal As Strings关键字来验证提取的值是否为333。\n</thought>\n\n<code_block>\n# 搜索发送到/xxx/yyy的最后一个DELETE请求\n${resp_json}  Search Requests  /xxx/yyy  DELETE  last\n\n# 从响应的JSON中获取abc:efg的值\n${value}  GetValuesFromJson | ${resp_json} | abc:efg\n\n# 校验abc:efg的值是否为333\nShould Be Equal As Strings  ${value}  333\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that the contents of the '创建日期' column in the table are in the following order: '2024-09', '2024-08', '2024-07', '2024-06'.\nHint: You can loop through the first N rows of the table to get the content of the cells in the '创建日期' column for verification",
        "output": "<thought>\n首先，我们需要获取目标表格中‘创建日期’列的所有内容。为此，可以使用GetColValues关键字获取整列数据。然后，我们可以逐一校验每行的数据是否与期望值相符。由于涉及到顺序校验，可以使用RF的FOR循环特性，逐行检查与预期的列表进行比较。\n</thought>\n\n<code_block>\n# 定义预期的日期列表\n@{expected_dates}  Create List  2024-09  2024-08  2024-07  2024-06\n\n# 获取‘创建日期’列的所有值\n@{actual_dates}  GetColValues  创建日期\n\n# 校验实际数据与预期数据是否匹配\nFOR  ${index}  IN RANGE  0  ${len(expected_dates)}\n    # 这里 actual_dates 数组的 index + 1是因为表格列值中的第一个是列头文本，从第二个开始才是真正的值\n    Should Be Equal As Strings   ${actual_dates}[${index+1}]   ${expected_dates}[${index}]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Open the browser and visit https://bytegrowth.com/cloud/login. Enter '邮箱': ${EMAIL}, '密码': ${PASSWORD}, and click '登录'",
        "output": "\n<thought>\n 首先需要使用`OpenBrowser`关键字打开浏览器并访问指定的URL。然后，使用`SetField`关键字输入邮箱和密码。最后，使用`Click`关键字点击登录按钮。\n </thought>\n \n <code_block>\n # 打开浏览器并访问登录页面\n OpenBrowser | https://bytegrowth.com/cloud/login\n \n # 输入邮箱\n SetField | 邮箱 | ${EMAIL}\n \n # 输入密码\n SetField | 密码 | ${PASSWORD}\n \n # 点击登录\n Click | 登录\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Generate the date and time for 5 seconds from now, precise to the second",
        "output": "<thought>\n为了生成5秒后的日期，可以使用Robot Framework的BuiltIn库中的关键字`Get Current Date`，并通过设置`increment`参数来实现时间的增加。在这个场景中，我们需要将`increment`设置为5秒，格式为`5 seconds`。\n</thought>\n\n<code_block>\n# 获取当前日期并增加5秒，格式化到秒\n${future_date}  Get Current Date  increment=5 seconds  result_format=%Y-%m-%d %H:%M:%S\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '导出数据' in the area where the class contains cardTop",
        "output": "<thought>\n要在class包含\"cardTop\"的区域中点击文本“导出数据”，可以使用Click关键字，并将base参数设置为包含该class的选择器。选择器可以使用jQuery选择器语法表示[class*=cardTop]。\n</thought>\n\n<code_block>\n# 在class包含cardTop的区域中点击‘导出数据’\nClick | 导出数据 | base=[class*=cardTop]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set \"Month of allocation\" in the popup to 2024-08~2024-09",
        "output": "<thought>\n为了在弹窗中设置“Month of allocation”为“2024-08~2024-09”，我们可以使用`SetPopupField`关键字。这个关键字专门用于操作弹窗中的页面字段，根据需求，我们需要设置的字段名是“Month of allocation”，值为“2024-08~2024-09”。\n</thought>\n\n<code_block>\n# 设置弹窗中的Month of allocation为2024-08~2024-09\nSetPopupField | Month of allocation | 2024-08~2024-09\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set Project to \"default\", clear \"Order/Billing no.\", and verify that \"No data\" exists",
        "output": "<thought>\n解决问题思路：首先，我们需要设置字段“Project”为“default”，然后清空“Order/Billing no.”字段，最后检查页面中存在文本“No data”。通过分析，我们可以使用SetField关键字来设置“Project”字段和清空“Order/Billing no.”字段，使用CheckHasText关键字来检查页面中是否存在“No data”。\n</thought>\n\n<code_block>\n# 设置Project字段为default\nSetField | Project | default\n\n# 清空Order/Billing no.字段\nSetField | Order/Billing no. | ${KEY_BACKSPACE}\n\n# 校验存在“No data”\nCheckHasText | No data\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Create a keyword '点击创建合同' with the following logic: Click '创建合同'. If '上传合同文件' appears, end the keyword. If '上传合同文件' does not appear, wait for 5 seconds and repeat the loop, up to a maximum of 12 times",
        "output": "<thought>\n为了实现这个任务，需要创建一个自定义关键字“点击创建合同”。首先，我们将点击“创建合同”文本，然后检查“上传合同文件”文本是否存在。如果存在，关键字执行结束。如果不存在，则等待5秒钟，至多循环12次以检查文本是否出现。我们将使用Click、IsAnyTextExisting和Sleep等关键字来实现这个逻辑。\n</thought>\n\n<code_block>\n*** Keywords ***\n点击创建合同\n    [Documentation]  点击创建合同，如果出现上传合同文件，则结束该关键字，如果不出现上传合同文件，则等待5s循环，最多12次循环\n    Click  创建合同\n    FOR  ${index}  IN RANGE  12\n       ${exist}=  IsAnyTextExisting  上传合同文件\n       IF  ${exist}\n           Exit For Loop\n       ELSE\n           Sleep  5s\n       END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that the contents of the table row containing 'Consumption-purchase' are in the following order: 'Allocated by purchase', '2024-09-04 00:00:00', '1', 'Byteplus Pte. Ltd.'\nHint: This requires verifying the contents of the first N cells in the table row in order. It is recommended to use a FOR loop",
        "output": "<thought>\n为了校验表格行的内容依次为指定的文本，我将使用RF的循环结构逐一检查每个单元格的内容是否匹配。首先，需要找到 \"Consumption-purchase\" 所在的行，然后使用循环遍历行内的每一个单元格，验证其内容是否等于相应的期望值。\n</thought>\n\n<code_block>\n# 定义期望的内容\n${expected_contents}   Create List  Allocated by purchase  2024-09-04 00:00:00  1  Byteplus Pte. Ltd.\n\n# 使用 FOR 循环校验 'Consumption-purchase' 所在行的内容\nFOR  ${index}  ${expected_text}  IN ENUMERATE  @{expected_contents}\n    # 校验单元格内容\n    CheckCellHas  Consumption-purchase  ${index+1}  ${expected_text}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the calendar icon, and then click either flink_test or for_oceanus",
        "output": "<thought>\n在这种情况下，我们需要首先点击日历图标，然后尝试点击文本 “flink_test” 或 “for_oceanus” 中的任意一个。根据题意，“日历”可能指的是一个图标，因此使用 ClickIcon 来点击。接着使用 ClickAny 来尝试点击两个选项之一。\n</thought>\n\n<code_block>\n# 点击日历图标\nClickIcon | calendar\n\n# 尝试点击文本 flink_test 或 for_oceanus\nClickAny | flink_test | for_oceanus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click to select '调试' near the text '机房' , and choose '在线调试'",
        "output": "<thought>\n任务要求我们在页面上点击“选择机房”附近的“调试”按钮，然后选择“在线调试”选项。首先，我们使用`Click`关键字点击“调试”按钮，并且使用`near`参数指定要在“选择机房”附近查找该按钮。接着，使用`SelectOption`关键字选择“在线调试”。\n</thought>\n\n<code_block>\n# 点击\"选择机房\"附近的\"调试\"按钮\nClick | 调试 | near=选择机房\n\n# 选择\"在线调试\"选项\nSelectOption | 在线调试\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the input box with class semi2-input semi2-input-default on the page, then click the button with class h-4 w-4 in the popup, and click \"五月\"",
        "output": "<thought>\n首先，使用`ClickElem`关键字点击页面中class为semi2-input semi2-input-default的输入框；然后，使用`ClickElem`关键字在弹出框中点击class为h-4 w-4的按钮；最后，使用`Click`关键字找到并点击文本“五月”。\n</thought>\n\n<code_block>\n# 点击页面中class为semi2-input semi2-input-default的输入框\nClickElem | input[class=\"semi2-input semi2-input-default\"]\n\n# 点击弹出框中class为h-4 w-4的按钮\nClickElem | button[class=\"h-4 w-4\"] | base=POPUP\n\n# 点击文本“五月”\nClick | 五月\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '人气', '流水', and '时长' in sequence, waiting 1 second after each click, and verify that the page contains \"已经和本机构合作\"",
        "output": "<thought>\n为了实现这个场景，我们需要依次点击文本“人气”、“流水”、“时长”，每次点击后等待1秒，然后验证页面中包含文本“已经和本机构合作”。我们可以使用Click关键字来进行点击操作，使用Sleep关键字来等待1秒，最后使用CheckHasText关键字来进行文本校验。\n</thought>\n\n<code_block>\n# 点击人气并等待1秒\nClick | 人气\nSleep | 1s\n\n# 点击流水并等待1秒\nClick | 流水\nSleep | 1s\n\n# 点击时长并等待1秒\nClick | 时长\nSleep | 1s\n\n# 校验页面中包含“已经和本机构合作”\nCheckHasText | 已经和本机构合作\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "The popup should contain \"已经和本机构合作\", and verify that the variable Text contains a regular expression similar to 2025-01-01～2025-01-02",
        "output": "<thought>\n首先，我们应该使用CheckHasText关键字检查弹窗中是否包含文本“已经和本机构合作”。为了做到这一点，我们将使用base参数设置为POPUP，以只检查弹窗内容。\n\n接下来，我们需要验证变量Text中是否有类似“2025-01-01～2025-01-02”的正则表达式。这可以通过使用Should Match Regexp关键字来实现。\n</thought>\n\n<code_block>\n# 校验弹窗包含“已经和本机构合作”\nCheckHasText | 已经和本机构合作 | base=POPUP\n\n# 校验变量Text中有日期范围的正则表达式\nShould Match Regexp  ${Text}  \\\\d{4}-\\\\d{2}-\\\\d{2}～\\\\d{4}-\\\\d{2}-\\\\d{2}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that '顾客实际需支付' has '26元' to its right. If the verification fails, do not block the subsequent steps",
        "output": "<thought>\n要求校验顾客实际需支付右侧存在文本“26元”，校验失败不阻塞后续步骤。可以使用 CheckHasTextToTheDirectionOf 进行校验，也可以结合 Robot Framework 的 `Run Keyword And Continue On Failure` 关键字来保证即便校验失败也不会阻塞后面的步骤。\n</thought>\n\n<code_block>\n# 校验顾客实际需支付右方有文本26元，校验失败不阻塞后续步骤\nRun Keyword And Continue On Failure  CheckHasTextToTheDirectionOf  顾客实际需支付  right  26元\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the mouse over the text '4:3', stay on the page for 2 seconds, click \"查看全部团队\" below '团队经营排行Top3', and check that the page contains \"批量主播拉新\" or \"规模素人孵化\"",
        "output": "<thought>\n根据给定的场景，首先需要将鼠标移动到 \"4:3\" 文案上，这可以通过 `MoTo` 关键字完成。在完成鼠标移动后，需要页面停留2秒，可以使用 `Sleep` 关键字。接下来，点击 \"团队经营排行Top3\" 下面的 \"查看全部团队\"，这可以通过 `ClickTextToTheDirectionOf` 关键字结合查找方向进行实现。之后，需要检查页面是否存在 \"批量主播拉新\" 或 \"规模素人孵化\"，可以使用 `CheckHasAnyText` 关键字实现。\n</thought>\n\n<code_block>\n# 移动鼠标到 \"4:3\" 文案上\nMoTo | 4:3\n\n# 页面停留2秒\nSleep  2s\n\n# 点击 \"团队经营排行Top3\" 下方的 \"查看全部团队\"\nClickTextToTheDirectionOf | 团队经营排行Top3 | bottom | 查看全部团队\n\n# 校验页面出现 “批量主播拉新” 或 “规模素人孵化”\nCheckHasAnyText | 批量主播拉新 | 规模素人孵化\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find the child element of ${elem} whose placeholder contains '输入'",
        "output": "<thought>\n要解决这个问题，我们需要找到一个元素`${elem}`的后代元素，该元素的`placeholder`属性包含“输入”字符串。在Robot Framework中，我们可以使用`FindElem`关键字与适当的jQuery选择器组合来完成此任务。\n\n用来选择具有特定属性值的jQuery选择器语法为`[attribute*='value']`，因此我们可以使用选择器`[placeholder*='输入']`。通过将选择器与基准元素`${elem}`结合来查找后代元素。\n\n我们采用`${descendant}` 来保存查找到的后代元素。如果查找失败，将抛出异常。\n</thought>\n\n<code_block>\n# 查找 ${elem} 中 placeholder 包含 “输入” 的后代元素\n${descendant}  FindElem | [placeholder*='输入'] | base=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find the checkbox near '我已知晓'",
        "output": "<thought>\n为了查找“我已知晓”附近的复选框，我们可以使用`FindByText`关键字来定位包含文本“我已知晓”的元素，然后使用`FindNearElem`关键字来查找其附近的复选框元素。根据上下文，复选框通常是一个`input`元素，带有`type=\"checkbox\"`属性 或 用 :checkbox 来表示。\n</thought>\n\n<code_block>\n# 找到文本为“我已知晓”的元素\n${elem}  FindByText | 我已知晓\n\n# 查找“我已知晓”附近的复选框\n${checkbox}  FindNearElem | ${elem} | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find the ancestor element of ${elem} whose class contains abc and id contains 666",
        "output": "<thought>\n要找到${elem}的祖先元素，并且该祖先元素的class包含vV-abc_uUU，且id属性包含666，我们可以使用FindParentElem关键字。首先，我们会用FindParentElem定位到所有祖先元素，然后在这些祖先元素中筛选出满足条件的元素。\n</thought>\n\n<code_block>\n# 查找class包含'vV-abc_uUU'且id包含'666'的祖先元素\n${ancestor}  FindParentElem | ${elem} | [class*=vV-abc_uUU][id*=666]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find '学号' near '姓名'",
        "output": "<thought>\n在这个场景中，我们需要查找“姓名”附近的“学号”。根据提供的关键字列表，我们可以使用`FindNearElem`关键字来完成这个任务。此关键字专用于查找某个基准元素附近的目标元素。因此，我们的解决方案是首先提供基准文本“姓名”，然后指定要查找的目标元素为“学号”。\n</thought>\n\n<code_block>\n# 查找‘姓名’附近的‘学号’\n${elem}  FindNearElem | 姓名 | 学号\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find the second '请输入' near '火山登录'",
        "output": "<thought>\n首先，我们需要使用FindByText关键字查找‘火山登录’文本的元素。然后，应该使用FindNearElem关键字在‘火山登录’文本元素附近查找包含‘请输入’的元素。因为查找的是第二个‘请输入’，我们会使用jquery选择器的:eq(1)来表示第二个元素。\n</thought>\n\n<code_block>\n# 查找文本为‘火山登录’的元素\n${huoshan_elem}  FindByText | 火山登录\n\n# 查找‘火山登录’附近的第二个‘请输入’元素\n${second_placeholder}  FindNearElem | ${huoshan_elem} | :contains(请输入):eq(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"展开\" under \"素人孵化线上型公会\", click the pencil-shaped edit icon, and then enter: 素人甲天下",
        "output": "<thought>\n首先需要点击“素人孵化线上型公会”下方的“展开”按钮，接着点击铅笔形状的编辑图标。然后在文本框中输入“素人甲天下”。可以使用ClickTextToTheDirectionOf来点击文本下方的元素；接着使用ClickIcon选择铅笔形状的图标；最后使用SendText输入文本。\n</thought>\n\n<code_block>\n# 点击“素人孵化线上型公会”下方的“展开”\nClickTextToTheDirectionOf | 素人孵化线上型公会 | bottom | 展开\n\n# 点击铅笔形状的编辑icon\nClickIcon | edit\n\n# 输入：素人甲天下\nSendText | 素人甲天下\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the selection box to the right of data_source_eu",
        "output": "<thought>\n通过分析需求，解决问题的思路是：首先需要找到“data_source_eu”这个基准文本，然后点击其右侧的选择框。可以使用“ClickElemToTheDirectionOf”关键字来实现这一操作。\n</thought>\n\n<code_block>\n# 点击 data_source_eu 右侧的选择框\nClickElemToTheDirectionOf | data_source_eu | right | [class*=select]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search for the last delete request sent to /xxx/yyy, and in the response JSON, response:body:success should be OK",
        "output": "<thought>\n首先，我们需要使用 `Search Requests` 关键字来搜索请求 URL 中包含 `/xxx/yyy` 并且请求方法为 DELETE 的最后一个请求。接下来，我们使用 `GetValuesFromJson` 关键字从响应的 JSON 中获取 `response:body:success` 的值，并验证它是否等于 \"OK\"。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 /xxx/yyy, 且请求方式为 DELETE 的最后一个请求\n${resp_json}  Search Requests  /xxx/yyy  DELETE  last\n\n# 获取响应 json 中的 response:body:success\n${success_value}  GetValuesFromJson  ${resp_json}  response:body:success\n\n# 校验 response:body:success 应该是 OK\nShould Be Equal As Strings  ${success_value}  OK\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that the status_code of all POST requests sent to /data/upload is 201",
        "output": "<thought>\n首先，我需要使用`Search Requests`关键字来查找发送到`/data/upload`的POST请求。然后，我将检查这些请求的`status_code`字段是否等于201。由于我们要检查所有请求的状态码，我们将使用`all`模式来获取所有相关请求。最后，使用`Should Be Equal As Strings`关键字来验证`status_code`是否为201。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 /data/upload, 且请求方式为 POST 的所有请求\n${resp_json}  Search Requests  /data/upload  POST  all\n\n# 校验每个请求的status_code是否为201\nFOR  ${item}  IN  @{resp_json}\n    Should Be Equal As Strings  ${item['status_code']}  201\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the last element with a class containing view-lines monaco-mouse-cursor-text and clear its content",
        "output": "<thought>\n首先，我们需要定位到 class 包含 `view-lines monaco-mouse-cursor-text` 的最后一个元素。可以使用 `FindElem` 关键字查找该 jQuery 选择器匹配的元素，并使用 `:eq(-1)` 获取最后一个。然后使用 `ClickElem` 点击该元素，以便将光标聚焦在此元素上。最后，使用 `SendText` 关键字输入回退键来清空内容。\n</thought>\n\n<code_block>\n# 查找 class 包含 view-lines monaco-mouse-cursor-text 的最后一个元素\n${elem}  FindElem | [class*=\"view-lines monaco-mouse-cursor-text\"]:eq(-1)\n\n# 点击该元素\nClickElem | ${elem}\n\n# 清空内容\nSendText | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Iterate over the elements on the page with a class containing taskItem and click each one",
        "output": "<thought>\n根据问题描述，目标是查找页面上所有class包含taskItem的元素，并进行点击操作。可以使用FindElem关键字与ClickElem关键字相结合。首先使用FindElem查找目标元素，然后使用ClickElem逐一点击。\n</thought>\n\n<code_block>\n# 查找页面上class包含taskItem的所有元素\n${elements}  FindElem | [class*=taskItem]\n\n# 遍历找到的元素并逐一点击\nFOR  ${element}  IN  @{elements}\n  ClickElem | ${element}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set the time period to 7 days before the current date, in the format yyyy-mm-dd",
        "output": "<thought>\n解决问题思路：\n1. 获取当前日期。\n2. 将当前日期减去7天，得到目标日期。\n3. 使用目标日期设置时间周期。\n\n可以使用RF内置的时间处理关键字，如`Get Current Date`获取当前日期，用`Subtract Time From Date`将当前日期减去7天，最后设置字段即可。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 将当前日期减去7天\n${start_date}  Subtract Time From Date  ${current_date}  7d  result_format=%Y-%m-%d\n\n# 设置时间周期字段\nSetField  时间周期  ${start_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set '合同终止日期' to the date 2 years and 35 days from now, in the format year-month-day",
        "output": "<thought>\n首先我们需要从当前日期开始，计算出距离现在2年零35天后的日期。通过使用RF的标准库日期时间关键字，我们可以实现这个计算。计算出目标日期后，我们需要将这个日期格式化为\"年-月-日\"格式。最后，使用SetField关键字将格式化后的日期设置为“合同终止日期”字段的值。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}    Get Current Date    result_format=%Y-%m-%d\n\n# 计算2年零35天后的日期\n${target_date}    Add Time To Date    ${current_date}    2 years 35 days    result_format=%Y-%m-%d\n\n# 设置合同终止日期为计算出的日期\nSetField    合同终止日期    ${target_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If '复制并创建' exists on the page, click '复制并创建'. If it does not exist, click '更多' and then click '复制并创建'",
        "output": "<thought>\n首先需要判断页面是否存在“复制并创建”文本，如果存在则点击它。如果不存在，则需要先点击“更多”文本，然后点击“复制并创建”文本。为此，可以使用IsAnyTextExisting关键字来判断文本是否存在，然后用IF/ELSE结构来决定点击顺序。\n</thought>\n\n<code_block>\n# 判断页面是否存在“复制并创建”文本\n${exist}  IsAnyTextExisting | 复制并创建\n\n# 如果存在“复制并创建”则点击，否则先点击“更多”再点击“复制并创建”\nIF  ${exist}\n    Click  复制并创建\nELSE\n    ClickTextOneByOne  更多  复制并创建\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find all elements in the popup whose class contains disabled",
        "output": "<thought>\n为了找到弹框中class含有disabled的所有元素，可以使用FindElem关键字并结合选择器查找。由于需要在弹框内查找元素，可以使用base参数设为特殊值POPUP。选择器将是[class*=disabled]，这将匹配所有class属性中包含disabled的元素。\n</thought>\n\n<code_block>\n# 在弹框中查找class包含disabled的所有元素\n${disabled_elems}  FindElem | [class*=disabled] | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If there are two '开播任务' on the page, click the second one",
        "output": "<thought>\n首先，我需要查找页面中包含‘开播任务’文本的元素数量。使用GetElemCount关键字可以实现这一点。接着，我要判断是否存在至少两个‘开播任务’。如果存在两个或更多，我将点击第二个‘开播任务’。为此，我可以使用Click关键字，并通过设置idx参数来指定点击第二个元素。\n</thought>\n\n<code_block>\n# 获取‘开播任务’的元素个数\n${count}  GetElemCount  :contains(开播任务)\n\n# 判断‘开播任务’的数量是否大于等于2\nIF  ${count} >= 2\n    # 点击第二个‘开播任务’\n    Click  开播任务  idx=1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If there are two '确定' on the page, click the last one",
        "output": "<thought>\n首先，我们需要查找页面上'确定'文本的数量，可以使用 `GetElemCount` 关键字。如果数量大于或等于2，就点击最后一个'确定'。为此，我们可以使用 `Click` 关键字，并通过 `idx=-1` 来选择最后一个。\n</thought>\n\n<code_block>\n# 获取页面上'确定'文本的数量\n${cnt}  GetElemCount | :contains(确定)\n\n# 如果'确定'的数量大于等于2，点击最后一个\nIF  ${cnt} >= 2\n    Click  确定  | idx=-1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Change '生效中' or '待生效' in the array to '已结束'",
        "output": "<thought>\n这个任务要求我们遍历一个数组并替换特定元素的值。我们可以使用RF的FOR循环与ENUMERATE来实现对数组的遍历，结合IF/ELSE结构判断数组元素的值。在找到目标值后，用'Set List Value'关键字修改数组中的值。首先，我们需要判断数组中的每个元素，如果是“生效中”或“待生效”，就将其值改为“已结束”。\n</thought>\n\n<code_block>\n# 定义数组变量\n${array}    Create List    生效中    待生效    已结束   生效中\n\n# 遍历数组并使用ENUMERATE获取索引和值\nFOR    ${index}    ${value}    IN ENUMERATE    @{array}\n    # 判断元素是否为\"生效中\"或\"待生效\"\n    IF    '${value}' == '生效中' or '${value}' == '待生效'\n        # 将数组中的相应元素修改为\"已结束\"\n        Set List Value    ${array}    ${index}    已结束\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Create a keyword \"切换页数\" that accepts a parameter num, representing the page number. The default value is 1. The idea is to locate the div element with a title containing \"Page\" and click on '第 num 页' within it",
        "output": "<thought>\n为了解决这个问题，我们需要创建一个关键字“切换页数”，它接受一个参数num，表示要切换到的页码。默认值为1。我们将使用RF的Click关键字来模拟点击操作，以便导航到指定的页码。首先，我们需要查找到包含“Page”的div元素。为了实现这一点，我们可以使用FindElem关键字来定位这个div，然后在它的范围内，点击“第 num 页”，这需要在选择器中构建一个条件来选择正确的页码元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n切换页数\n    [Arguments]  ${num}=1\n    # 获取title包含Page的div元素\n    ${div_elem}  FindElem  div[title*='Page']\n    # 点击其中包含“第 num 页”的文本\n    Click  第 ${num} 页  base=${div_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Generate an 8-character string consisting entirely of lowercase letters",
        "output": "<thought>\n根据需求，生成一个8位字符串全部是小写，可以使用RobotFramework的Generate Random关键字，并使用LOWER字符集。生成后将结果存储在一个变量中。\n</thought>\n\n<code_block>\n# 生成长度为8的随机小写字符串\n${low_str}  GenerateRandom  | 8 | [LOWER]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set mon to last month",
        "output": "<thought>\n为了将字段mon设置为上个月，可以使用RF的日期处理关键字。首先，通过Get Current Date获取当前日期，然后使用Subtract Time From Date减少一个月的时间，得到上个月的日期。接着，使用SetField将解析后的月份设置到字段mon中。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 计算上个月日期\n${last_month_date}  Subtract Time From Date  ${current_date}  1month  result_format=%m\n\n# 设置字段mon为上个月\nSetField  mon  ${last_month}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the year and month of last month, and display it in the format year/month",
        "output": "<thought>\n为了解决这个问题，我们可以使用Robot Framework的内置关键字来获取当前日期，然后从中减去一个月的时间。首先，我们使用`Get Current Date`关键字获取当前日期。接下来，我们使用`Subtract Time From Date`关键字从当前日期中减去一个月。最后，我们需要格式化日期为“年/月”的形式。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date\n\n# 减去一个月以获取上个月的日期\n${last_month_date}  Subtract Time From Date  ${current_date}  1month  result_format=%Y/%m\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set the global variable 'StartTime' to the date of the 1st of last month, in the format: 2024/07/21 10:00",
        "output": "<thought>\n要设置全局变量‘StartTime’为上个月1号的日期，格式为指定的格式，可以通过RF的日期处理关键字和变量设置关键字来实现。首先，获取当前日期，然后使用Subtract Time From Date关键字减去当前日期中的日期部分，以获得上个月的日期。最后，使用Set Variable设置格式化后的日期字符串为全局变量。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date\n\n# 获取上个月1号的日期\n${last_month}  Subtract Time From Date  ${current_date}  1month  result_format=%Y/%m/01 10:00\n\n# 设置全局变量 'StartTime'\nSet Global Variable  ${StartTime}  ${last_month}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If '确认提交' exists on the page, click '确认提交'",
        "output": "<thought>\n首先，使用 `IsAnyTextExisting` 判断页面是否存在文本“确认提交”。如果存在，则点击“确认提交”。\n</thought>\n\n<code_block>\n# 判断页面是否存在“确认提交”文本\n${exist}  IsAnyTextExisting | 确认提交\n\n# 如果存在“确认提交”，则点击它\nIF  $exist\n    Click  确认提交\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Delete cookies in the browser",
        "output": "<thought>\n为了清除Cookie，在Robot Framework中可以利用SeleniumLibrary中的Delete All Cookies关键字。SeleniumLibrary是Robot Framework的一个常用扩展库，提供了对Web浏览器的操作功能，其中包括管理浏览器Cookie的能力。使用Delete All Cookies关键字可以直接删除当前会话中的所有Cookie。\n</thought>\n\n<code_block>\n# 清除所有Cookie\nDelete All Cookies\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click 25 pixels to the right of \"取消\"",
        "output": "<thought>\n为了实现点击“取消”右侧25像素的位置，我们可以分两步完成：首先使用MoTo关键字将鼠标移动到“取消”的右边25像素的位置，然后使用MClick关键字进行点击。\n</thought>\n\n<code_block>\n# 将鼠标移动到“取消”右边25像素的位置\nMoTo | 取消 | dx=25\n\n# 在当前位置点击鼠标\nMClick\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '按月' to the right of '明细列表', then select '按周'",
        "output": "<thought>\n我们需要使用`ClickTextToTheDirectionOf`关键字来实现点击某个文本右边的另一个文本。首先，点击‘明细列表’右边的‘按月’，然后选择选项‘按周’。`SelectOption`关键字可以用于选择一个选项。\n</thought>\n\n<code_block>\n# 点击 '明细列表' 右边的 '按月'\nClickTextToTheDirectionOf | 明细列表 | right | 按月\n\n# 选择 '按周'\nSelectOption | 按周\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write a keyword named \"打开拜访管理页\" with the following logic: 1. Open Google Chrome and use cookies=${ZZR_SSO_COOKIES} to visit ${APP_MAIN_PAGE} 2. Wait for the page to load completely",
        "output": "<thought>\n首先需要使用OpenBrowser关键字打开浏览器，并传入url和cookies参数。然后使用WaitLoading关键字等待页面加载完成。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开拜访管理页\n    # 打开谷歌浏览器并访问 ${APP_MAIN_PAGE}，使用给定的cookies\n    OpenBrowser | ${APP_MAIN_PAGE} | cookies=${ZZR_SSO_COOKIES}\n    \n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find the '西药' button near '类目名称', and then click it",
        "output": "<thought>\n首先需要查找‘类目名称’附近的‘西药’按钮，可以使用`FindNearElem`关键字。找到元素后，再使用`ClickElem`关键字进行点击操作。\n</thought>\n\n<code_block>\n# 查找‘类目名称’附近的‘西药’按钮\n${elem}  FindNearElem | 类目名称 | 西药\n\n# 点击查找到的元素\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the mouse to a position 50px above '交易方风险加', click, and enter: 500",
        "output": "<thought>\n这个问题需要先将鼠标移动到指定文本\"交易方风险加\"上方50px的位置，然后进行点击操作，最后在光标处输入\"500\"。为此，我将使用`MoTo`关键字来移动鼠标，使用`MClick`关键字来点击，最后使用`SendText`关键字来输入文本。\n</thought>\n\n<code_block>\n# 将鼠标移动到\"交易方风险加\"上方50px处\nMoTo | 交易方风险加 | dy=-50\n\n# 在当前位置点击\nMClick\n\n# 输入500\nSendText | 500\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Input the down arrow key 5 times",
        "output": "<thought>\n在这种情况下，我们需要使用RF中的Press Keys关键字来模拟按下方向键。根据给出的示例，“输入15个退格键”通过使用“${KEY_BACKSPACE * 15}”来实现。同样，我们可以利用类似的格式来实现按5次向下方向键，通过将“ARROW_DOWN * 5”传递给Press Keys关键字。\n</thought>\n\n<code_block>\n# 按5次向下方向键\nPress Keys | None | ${KEY_ARROW_DOWN * 5}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '请输入描述', input ctrl + alt + a, then enter 8 English letters, and finally press ESC",
        "output": "<thought>\n首先，根据提示我们需要首先点击“请输入描述”所在的位置；然后输入 Ctrl + Alt + A 组合键，再输入 8 个随机英文字母，最后需要按下 ESC 键。Robot Framework 的 Press Keys 关键字可以用来输入组合键。在没有提供输入随机字母的关键字时，需要使用Evaluate来生成随机字母。\n</thought>\n\n<code_block>\n# 点击‘请输入描述’\nClick | 请输入描述\n\n# 输入 Ctrl + Alt + A 组合键\nPress Keys | None | CTRL+ALT+A\n\n# 生成随机8个英文字母\n${random_letters} | Evaluate | ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=8)) | random\n\n# 输入随机英文字母\nSendText | ${random_letters}\n\n# 输入 ESC 键\nPress Keys | None | ESC\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "if not monday and tuesday, then run this part",
        "output": "<thought>\n需要使用RF的IF/ELSE语法来判断当前日期是否不是周一或周二。通过Evaluate关键字使用Python代码获取当前日期，然后进行判断。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_day}  Evaluate  datetime.datetime.now().weekday()\n\n# 判断是否不是周一(0)或周二(1)\nIF  ${current_day} != 0 and ${current_day} != 1\n    # 执行这部分\n    Log  执行这部分\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "split txt by empty space and then get second element after splitting",
        "output": "<thought>\n解决问题思路: 首先需要将文本按空格分割，然后获取分割后的第二个元素。由于RF中没有直接提供这些功能的关键字，可以使用Evaluate关键字来执行Python代码实现文本分割和获取第二个元素的操作。\n</thought>\n\n<code_block>\n# 使用Python代码分割文本并获取第二个元素\n${split_txt}  Evaluate  \"${txt}\".split(' ')[1]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get all cookies from the current page",
        "output": "<thought>\n此问题需要获取当前页面的所有 cookies，Robot Framework 的 SeleniumLibrary 提供了 `Get Cookies` 关键字可以直接使用。因此，只需要在代码中调用该关键字即可。\n</thought>\n\n<code_block>\n# 获取当前页面的所有 cookies\n${cookies}  Get Cookies\nLog  ${cookies}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get session_id from the page cookies",
        "output": "<thought>\n为了解决从页面cookie中获取session_id的问题，我们可以利用SeleniumLibrary中的Get Cookie关键字。首先，我们将获取名为session_id的cookie信息，然后提取其value属性，以获取具体的session_id的值。\n</thought>\n\n<code_block>\n# 获取名为session_id的cookie的信息\n${cookie}  Get Cookie  session_id\n\n# 打印cookie的值\nLog  Cookie value: ${cookie.value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '创建实例'. Set '计费类型' to '包年包月'. Enter multiple values into '地域及可用区': '华北2', '可用区A'",
        "output": "<thought>\n场景需要进行以下操作：1) 点击“创建实例”按钮；2) 设置计费类型为“包年包月”；3) 在“地域及可用区”下输入多个值“华北2”和“可用区A”。我会选择使用`Click`关键字来点击按钮，以及`SetField`关键字来设置字段值。\n</thought>\n\n<code_block>\n# 点击创建实例按钮\nClick | 创建实例\n\n# 设置计费类型为：包年包月\nSetField | 计费类型 | 包年包月\n\n# 针对“地域及可用区”设置多个值\nSetField | 地域及可用区 | 华北2 | 可用区A\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '公共镜像' to the right of '镜像', then click CentOS at its bottom right, then enter 'Stream 9' into '选择镜像版本', and check '安全加固'",
        "output": "<thought>\n首先需要点击“镜像”右边的“公共镜像”，可以使用`ClickTextToTheDirectionOf`关键字。然后点击“公共镜像”右下方的“CentOS”，同样使用`ClickTextToTheDirectionOf`。接下来在“选择镜像版本”字段中输入“Stream 9”，用`SetField`关键字。最后勾选“安全加固”复选框，使用`CheckBoxOn`关键字。\n</thought>\n\n<code_block>\n# 点击 “镜像” 右边的 “公共镜像”\nClickTextToTheDirectionOf | 镜像 | right | 公共镜像\n\n# 点击 “公共镜像” 右下方的 \"CentOS\"\nClickTextToTheDirectionOf | 公共镜像 | bottomRight | CentOS\n\n# 向 “选择镜像版本” 中输入：Stream 9\nSetField | 选择镜像版本 | Stream 9\n\n# 勾选：安全加固\nCheckBoxOn | 安全加固\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search for the last GET request sent to CalculateInstancePrice, and verify that its JSON response contains the value 1.45 in the originalAmount field",
        "output": "<thought>\n在这个场景中，我们需要搜索最后一个发往 CalculateInstancePrice 的 GET 请求，并从该请求的响应中获取 JSON 对象。然后，我们需要检查这个 JSON 响应中的 originalAmount 字段是否包含 1.45。我们可以使用 `Search Requests` 关键字来搜索请求，并使用 `GetValuesFromJson` 关键字获取 originalAmount 字段的值。最后，我们可以使用内置的 Should 系列关键字来验证这一点。\n</thought>\n\n<code_block>\n# 搜索发往 CalculateInstancePrice 的最后一个 GET 请求\n${resp_json}  Search Requests  CalculateInstancePrice  GET  last\n\n# 获取响应中的 originalAmount 字段值\n${original_amount}  GetValuesFromJson | ${resp_json} | originalAmount\n\n# 校验 originalAmount 字段中包含 1.45\nShould Contain  ${original_amount}  1.45\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the value of the '配置费用' field and verify that it contains: ¥ and 169.20",
        "output": "<thought>\n根据需求，首先需要获取配置费用字段的值，然后验证该值中是否包含符号“¥”和数字“169.20”。可以使用`GetFieldVal`关键字获取配置费用的值，然后使用`Should Contain`来验证内容。\n</thought>\n\n<code_block>\n# 获取配置费用字段的值\n${config_fee}  GetFieldVal | 配置费用\n\n# 验证配置费用中包含\"¥\"\nShould Contain  ${config_fee}  ¥\n\n# 验证配置费用中包含\"169.20\"\nShould Contain  ${config_fee}  169.20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the text of the div element immediately following the first \"点赞次数\"",
        "output": "<thought>\n首先，我们需要找到文本为“点赞次数”的元素，并接着定位到其后一个div元素，然后获取该div元素的文本。为此，我们可以使用“FindByText”关键字查找“点赞次数”元素，然后用“FindElem”结合jQuery选择器“+ div”来获取其后一个div元素，最后用“GetElemText”获取该div元素的文本。\n</thought>\n\n<code_block>\n# 查找文本为“点赞次数”的元素\n${like_count_elem}  FindByText | 点赞次数\n\n# 查找“点赞次数”后面的div元素\n${next_div}  FindElem | ${like_count_elem} + div\n\n# 获取该div元素的文本\n${div_text}  GetElemText | ${next_div}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the text of the element to the right of \"评价人次\"",
        "output": "<thought>\n要获取“评价人次”右边元素的文案，我们可以使用FindElemToTheDirectionOf关键字来定位到“评价人次”这个基准元素右边的目标元素。然后，使用GetElemText关键字获取该元素的文本内容。\n</thought>\n\n<code_block>\n# 查找“评价人次”右边的元素\n${elem}  FindElemToTheDirectionOf | 评价人次 | right\n\n# 获取该元素的文本内容\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that the page contains an element with class=bg-white text-primary that includes \"昨天\"",
        "output": "<thought>\n要验证页面中是否包含class属性为“bg-white text-primary”且包含文本“昨天”的元素，我们可以使用CheckHasElem关键字来校验页面是否包含符合条件的jQuery选择器表示的元素。选择器可以通过组合class选择器和包含特定文本的选择器来构建。\n</thought>\n\n<code_block>\n# 校验页面包含class=bg-white text-primary，且包含\"昨天\"的元素\nCheckHasElem | [class=bg-white.text-primary]:contains(昨天)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the value of the \"主播服务满意度评价\" field from ${elem}",
        "output": "<thought>\n对于这个问题，我们需要获取字段“主播服务满意度评价”的值。可以使用`GetFieldVal`关键字，因为问题已经提示了需要设置`base`为`${elem}`，这样可以在指定的基准元素`${elem}`中查找该字段。\n</thought>\n\n<code_block>\n# 获取“主播服务满意度评价”字段的值\n${val}  GetFieldVal | 主播服务满意度评价 | base=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "create a keyword of \"volcano login\", accept user,sub_user,password, and there default values are USER,SUB_USER,PASSWORD\n# open browser MAIN_PAGE\n# click IAM子用户登录\n# put user,sub_user,password into 主账号名、子账户、密码\n# click 登录\n# wait until url not contain login as login successfully",
        "output": "<thought>\n为了解决这个问题，我需要创建一个名为\"volcano login\"的关键字，接受user、sub_user和password三个参数，并设置默认值为USER、SUB_USER和PASSWORD。然后使用OpenBrowser关键字打开浏览器并访问MAIN_PAGE。在页面加载完成后，点击\"IAM子用户登录\"文本，然后将user、sub_user和password分别输入到\"主账号名\"、\"子账户\"和\"密码\"字段中。最后点击\"登录\"按钮，并等待URL不再包含\"login\"，表示登录成功。\n</thought>\n\n<code_block>\n*** Keywords ***\nvolcano login\n    [Arguments]  ${user}=${USER}  ${sub_user}=${SUB_USER}  ${password}=${PASSWORD}\n\n    # 打开浏览器并访问MAIN_PAGE\n    OpenBrowser  ${MAIN_PAGE}\n\n    # 点击IAM子用户登录\n    Click  IAM子用户登录\n\n    # 输入主账号名\n    SetField  主账号名  ${user}\n\n    # 输入子账户\n    SetField  子账户  ${sub_user}\n\n    # 输入密码\n    SetField  密码  ${password}\n\n    # 点击登录\n    Click  登录\n\n    # 等待URL不再包含login，表示登录成功\n    Ui Wait URL Not Contains  login\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Disable the mock for requests with a URL containing feishu.cn/path/download and a request method of POST",
        "output": "<thought>\n在这个场景中，我们需要对请求url中包含 \"feishu.cn/path/download\" 且请求方式为 POST 的请求关闭 mock。根据给定的关键字列表，我们可以使用 `Stop Mock` 关键字，该关键字允许我们指定路径和请求方法，以及一个可选的请求体正则表达式（在这个问题中不需要）来停止 mock。这个关键字直接满足了本场景的需求。\n</thought>\n\n<code_block>\n# 停止对url包含feishu.cn/path/download的POST请求的mock\nStop Mock  feishu.cn/path/download  POST\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Disable the mock for POST requests to feishu.cn/path/sso",
        "output": "<thought>\n首先，我们需要取消对特定路径和请求方法的mock。根据给定的关键字，我们可以使用`Stop Mock`来停止指定路径和方法的mock行为。在本场景中，需要对路径`feishu.cn/path/sso`的POST请求取消mock，因此我们只需指定对应的路径和方法即可，无需使用`req_body_pattern`参数。\n</thought>\n\n<code_block>\n# 取消 feishu.cn/path/sso 的 POST 请求的 mock\nStop Mock  feishu.cn/path/sso  POST\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Disable the mock for requests with a URL containing feishu.cn/monitor, a request method of PUT, and a request body matching appid.*129",
        "output": "<thought>\n在这个场景中，我们需要停止一个请求体匹配正则表达式 \"appid.*129\" 的 PUT 请求对 \"feishu.cn/monitor\" 接口的 mock。可用 Stop Mock 关键字，它允许我们指定 path、method 和可选的 req_body_pattern 来停止 mock。在这种情况下，我们可以使用这个关键字来实现。\n</thought>\n\n<code_block>\n# 停止对请求 url 中包含 feishu.cn/monitor，且请求方式为 PUT，且请求体匹配 appid.*129 的接口的 mock\nStop Mock  feishu.cn/monitor  PUT  appid.*129\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Use the data from mock/user.json to respond to GET requests to /users/query",
        "output": "<thought>\n为了解决这个问题，我们需要模拟一个GET请求并提供一个特定的响应数据集。我们可以使用`Start Mock`关键字来实现这一功能。该关键字允许我们定义某个路径、请求方法以及关联的mock数据。在这个场景中，路径是`/users/query`，方法是`GET`，而mock数据存储在文件`mock/user.json`中。因此，我们可以直接使用`Start Mock`关键字配置这些参数来实现所需的功能。\n</thought>\n\n<code_block>\n# 对 /users/query 的 GET 请求使用 mock/user.json 中的数据进行 mock\nStart Mock  /users/query  GET  mock_data_path=mock/user.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Mock the requests with a URL containing feishu.cn/path/download, a request method of POST, and a request body matching user.*xiaoli, using the data stored at: https://mysite.net/mock1.json",
        "output": "<thought>\n对于这个场景，我们需要针对请求URL中包含`feishu.cn/path/download`且请求方法为`POST`的请求进行mock。请求体需要匹配正则表达式`user.*xiaoli`。我们要使用的关键字是`Start Mock`，它允许我们对符合条件的请求进行mock，使用指定的mock数据文件。在此场景中，我们的mock数据存储在`https://mysite.net/mock1.json`。实现时需要按照提供的条件填写`Start Mock`的参数。\n</thought>\n\n<code_block>\n# 对请求 url 中包含 feishu.cn/path/download, 且请求方式为 POST, 且请求体匹配 user.*xiaoli 的接口进行 mock\nStart Mock  feishu.cn/path/download  POST  user.*xiaoli  mock_data_path=https://mysite.net/mock1.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Mock the DELETE requests with a URL containing /api/v4/accounts using the data stored in accounts_mock.json",
        "output": "<thought>\n我们需要对 URL 中包含 /api/v4/accounts 的 DELETE 请求进行 mock。为此，我们可以使用提供的 Start Mock 关键字，指定方法为 DELETE，并提供 mock 数据的路径 accounts_mock.json。\n</thought>\n\n<code_block>\n# 对 URL 包含 /api/v4/accounts 的 DELETE 请求进行 mock，使用 accounts_mock.json 的 mock 数据\nStart Mock  /api/v4/accounts  DELETE  mock_data_path=accounts_mock.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Mock the GET requests with a URL containing /api/v3/orders/details and a request body matching order_id=.* using the data stored at http://example.net/details_mock.json",
        "output": "<thought>\n为了对指定URL的请求进行mock，我们需要使用`Start Mock`关键字。根据问题描述，我们需要mock的是URL中包含`/api/v3/orders/details`的GET请求，并且请求体应该匹配正则表达式`order_id=.*`。我们还知道mock数据存放在`http://example.net/details_mock.json`。因此，应该设置`Start Mock`关键字的`path`为`/api/v3/orders/details`，`method`为`GET`，`req_body_pattern`为`order_id=.*`，以及`mock_data_path`为给定的URL。\n</thought>\n\n<code_block>\n# 对请求 url 中包含 /api/v3/orders/details, 且请求方式为 GET, 且请求体匹配 order_id=.* 的接口进行 mock，mock 数据存放在: http://example.net/details_mock.json\nStart Mock  /api/v3/orders/details  GET  order_id=.*  mock_data_path=http://example.net/details_mock.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Mock the GET requests with a URL containing `/api/v1/customer_data` using the data from `data/mocks/customer.json`",
        "output": "<thought>\n为了对URL中包含`/api/v1/customer_data`的GET请求进行mock，我们可以使用提供的`Start Mock`关键字。这个关键字需要三个参数：请求路径、请求方法和mock数据路径。在此场景中，请求路径为`/api/v1/customer_data`，请求方法为`GET`，mock数据路径为`data/mocks/customer.json`。\n</thought>\n\n<code_block>\n# Mock /api/v1/customer_data 的 GET 请求，使用 data/mocks/customer.json 中的 mock 数据\nStart Mock  /api/v1/customer_data  GET  mock_data_path=data/mocks/customer.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Mock the POST requests with a URL containing `example.com/api/products` using the data stored in `products_mock.json`",
        "output": "<thought>\n对于指定的URL和请求方法，我们需要使用`Start Mock`关键字来设置mock响应。根据要求，URL中应包含`example.com/api/products`，请求方式为POST，mock数据存放在`products_mock.json`。因此，`Start Mock`需要传递的参数依次是path、method以及mock_data_path。\n</thought>\n\n<code_block>\n# 对 URL 包含 `example.com/api/products` 的 POST 请求进行 mock，mock 数据存放在 `products_mock.json`\nStart Mock  example.com/api/products  POST  mock_data_path=products_mock.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Mock the requests with a URL containing `myapi.com/checkout` and a request body matching `orderId=.*1234` using the data stored in `mock_data/checkout.json`",
        "output": "<thought>\n根据问题的描述，我需要对特定的API请求进行mock操作。请求的URL需要包含`myapi.com/checkout`，并且请求体要匹配`orderId=.*1234`。mock的数据存放在`mock_data/checkout.json`中。对于这种需求，可以使用提供的`Start Mock`关键字来实现。在该关键字中，需要传入路径匹配的部分、请求方法（未指定，因此默认使用常见的GET或POST）、请求体的正则表达式，以及mock数据的路径。\n</thought>\n\n<code_block>\n# 对请求 url 中包含 myapi.com/checkout, 且请求体匹配 orderId=.*1234 的接口进行 mock\nStart Mock  myapi.com/checkout  GET  orderId=.*1234  mock_data_path=mock_data/checkout.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Make a certain text appear in the field of view",
        "output": "<thought>\n将某个元素或文本移动到视野中，可以使用MoveIntoView关键字。这个关键字接受一个基于jQuery的选择器作为参数，将该元素移动到视野中。\n\n首先，我们需要确定要移动到视野中的具体元素，这里我们假设使用文本“操作日志”作为案例。可以通过jQuery选择器`:contains(操作日志)`来选择包含“操作日志”文本的元素。然后使用MoveIntoView关键字将它移动到视野中。\n\n需要注意的是，选择器应唯一且准确地指向目标元素，以避免移动其他不相关的元素。\n</thought>\n\n<code_block>\n# 将文本“操作日志”移动到视野中\nMoveIntoView | :contains(操作日志)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Let the current page gain focus",
        "output": "<thought>\n在Robot Framework中，没有专门的关键字直接用于获取页面焦点。不过，我们可以通过执行JavaScript来实现这一点。可以使用Execute Javascript关键字执行JavaScript代码来获取焦点。一般来说，在浏览器中，可以通过document.focus()或其他元素的focus()方法让页面获取焦点。\n</thought>\n\n<code_block>\n# 获取当前页面的焦点\nExecute Javascript | document.activeElement.blur()\nExecute Javascript | window.focus()\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Enter \"username\" and \"password\" into the 账号名 and 密码 fields, respectively, and click 登录",
        "output": "<thought>\n在此场景中，我们需要将“username”和“password”输入到对应的字段中，并执行一次点击动作来登录。在RF中，我们可以使用BatchSetFields关键字来同时设置账号名和密码。然后使用Click关键字来执行对“登录”按钮的点击操作。为了保证准确性，我们需要确保selector或文本与页面元素的对应关系明确。\n</thought>\n\n<code_block>\n# 输入账号名和密码\nBatchSetFields  账号名=username  密码=password\n\n# 点击登录按钮\nClick | 登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the mouse to the first image below \"即梦-图片生成\"",
        "output": "<thought>\n对于这道题目，我们的目标是使用提供的关键字将鼠标移动到指定元素上。在描述中，我们需要将鼠标移动到“即梦-图片生成”下方的第一张图片，这个任务需要找到基准元素“即梦-图片生成”，并获取其下方方向的第一张图片元素。这里可以考虑使用`MoveToElemToTheDirectionOf`关键字来实现移动操作，目标选择器则是代表图片的`img`。由于题中没有给出更详细的选择器信息，只能假设图片是用`img`标签标识的。\n</thought>\n\n<code_block>\n# 移动到“即梦-图片生成”下方的第一张图片\nMoveToElemToTheDirectionOf | 即梦-图片生成 | bottom | img | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the third image below \"即梦-图片生成\"",
        "output": "<thought>\n首先需要找出基准文本“即梦-图片生成”的位置，然后在其下方查找图片元素。我们选择使用ClickElemToTheDirectionOf关键字，其中the_base为\"即梦-图片生成\"，direction为\"bottom\"，selector为\"img\"，并指定idx=2以点击第3张图片\n</thought>\n\n<code_block>\n# 点击即梦-图片生成下方的第3张图片\nClickElemToTheDirectionOf | 即梦-图片生成 | bottom | img | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the first image below \"蜡笔小x\"",
        "output": "<thought>\n为了实现点击蜡笔小x下方的第一个图片，我应该使用`ClickElemToTheDirectionOf`关键字。这个关键字允许我指定基准元素和目标元素的方向以及目标元素的选择器。具体来说，基准元素是\"蜡笔小x\"，方向是\"bottom\"，目标元素是第一个图片，对应的选择器是`img:eq(0)`。\n</thought>\n\n<code_block>\n# 点击蜡笔小x下方的第一个图片\nClickElemToTheDirectionOf | 蜡笔小x | bottom | img:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the mouse over the first image to the lower right of \"蜡笔小x\"",
        "output": "<thought>\n我们需要将鼠标移动到蜡笔小x右下方的第一张图片上。为此，我们将使用`MoveToElemToTheDirectionOf`关键字。首先，我们需要使用`FindElemToTheDirectionOf`查找到蜡笔小x右下方的图片，因为它能够返回目标元素供后续使用。然后使用`MoToElem`将鼠标移动到找到的图片元素上。\n</thought>\n\n<code_block>\n# 查找蜡笔小x右下方的第一张图片\n${img_elem}  FindElemToTheDirectionOf | 蜡笔小x | bottomRight | img\n\n# 将鼠标移动到找到的图片元素上\nMoToElem | ${img_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the cell labeled '预算科目' in the first row of the table",
        "output": "<thought>\n要点击表格第一行中“预算科目”这个单元格，可以使用ClickTextOfCell关键字。首先，需要确定行和列的位置。\"预算科目\"在问题中已作为列名给出，第一行的行号是1。因此可以直接使用关键字 ClickTextOfCell | 1 | 预算科目 即可实现点击操作。\n</thought>\n\n<code_block>\n# 点击表格第一行中预算科目这个单元格\nClickTextOfCell | 1 | 预算科目\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Access COZE_PRO",
        "output": "<thought>\n为了访问COZE_PRO，我们需要使用OpenUrl关键字并传入相应的URL。根据可用关键字，直接使用OpenUrl关键字打开指定的URL即可完成任务。\n</thought>\n\n<code_block>\n# 访问COZE_PRO\nOpenUrl | ${COZE_PRO}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "The row containing DataFinder should include '部署' and '成功'",
        "output": "<thought>\n任务要求检查数据表中名为\"DataFinder\"的行是否包含\"部署\"和\"成功\"。这是一个典型的行内容验证问题，因此可以使用CheckRowHas关键字来实现。首先我们需要确认表格的选择器，假设为默认表格1。然后列出需要校验的文本内容。\n</thought>\n\n<code_block>\n# 校验DataFinder所在行包含部署和成功\nCheckRowHas | DataFinder | 部署 | 成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Select the cell directly below '预算科目'",
        "output": "<thought>\n当用户需要选择一个特定单元格时，我们可以假设这是一个类似“点击”的动作。由于问题陈述中提到了“选择预算科目正下方单元格”，这意味着我们需要找到“预算科目”所在列的特定行，然后在这一列的下一个单元格中执行点击动作。假定“预算科目”是某个列名，它需要用作列选择的依据。可以使用ClickElemOfCell或者ClickTextOfCell，假设我们要点击单元格中的某个文本。\n</thought>\n\n<code_block>\n# 假设要点击的是第1行, 预算科目所对应的列下的单元格\nClickTextOfCell | 1 | 预算科目\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the cell in the third row, first column of the table, and enter 1 in the blank cell",
        "output": "<thought>\n为了解决这个问题，我们需要定位并点击表格第三行第一列的单元格，然后在该单元格中输入数字“1”。在Robot Framework中，我们可以使用ClickElemOfCell关键字来实现对单元格的点击操作，以及SendText关键字来输入文字。首先，使用ClickElemOfCell关键字来定位并点击第三行第一列的单元格，然后使用SendText关键字输入“1”。\n</thought>\n\n<code_block>\n# 点击表格第三行第一列的单元格\nClickElemOfCell | 3 | 1\n\n# 在光标激活位置输入1\nSendText | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the cell at (3, 2)",
        "output": "<thought>\n在这个场景中，我们需要点击特定的表格单元格。给出的提示为“点击单元格（3，2）”，这意味着我们需要在一个表格中，点击位于第3行和第2列的单元格。可以使用`ClickTextOfCell`或`ClickElemOfCell`关键字来精确点击这个单元格。由于没有指定要点击的具体文本或元素，我们可以使用默认的通配符参数来点击该单元格中的任意文本或元素。选择这个方法是因为它能够直接定位目标单元格，满足场景要求。\n</thought>\n\n<code_block>\n# 点击第3行，第2列中的任意元素\nClickElemOfCell | 3 | 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the position directly below '预算科目'",
        "output": "<thought>\n在此场景中，我们需要找到“预算科目”这个基准元素，并点击其正下方的位置。根据提供的关键字，我们可以使用`ClickDirection`关键字来完成这一操作。`ClickDirection`允许点击基准元素特定方向（如下方）距离一定delta的位置。在这里，预算科目正下方的位置是我们要点击的目标，因此我们可以设置`direction`为`bottom`。\n</thought>\n\n<code_block>\n# 点击预算科目正下方的位置\nClickDirection | 预算科目 | bottom\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click 35 pixels to the right of \"fengyinjie\"",
        "output": "<thought>\n在这个场景中，我们需要在页面上找到一个名为\"fengyinjie\"的基准元素，然后点击其右边35个像素的位置。这个操作可以通过`ClickDirection`关键字实现。`ClickDirection`关键字允许我们指定基准元素，以及从该元素偏移一定像素距离后的位置进行点击。在这里，the_base将是\"fengyinjie\"，direction是\"right\"，和delta是35像素。\n</thought>\n\n<code_block>\n# 点击距离 fengyinjie 右边 35 像素的地方\nClickDirection | fengyinjie | right | delta=35\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Determine if the \"行业通用\" option exists on the page.",
        "output": "<thought>\n为了判断页面上是否存在“行业通用”选项，可以使用 IsAnyTextExisting 关键字，该关键字用于判断一组文本是否至少有一个存在于页面上。\n</thought>\n\n<code_block>\n# 使用IsAnyTextExisting判断页面上是否存在“行业通用”\n${exist}  IsAnyTextExisting  行业通用\n\n# 如果存在“行业通用”，则打印ok\nIF  ${exist}\n    Log  ok\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Delete the text '预算科目' from the search box, check the \"已阅读并同意\" option, and click the \"立即入驻\" button.",
        "output": "<thought>\n要删除搜索框中的文本，可以使用SetField关键字并输入${KEY_BACKSPACE}以确保清空字段。接下来，需要勾选“已阅读并同意”复选框，可以使用CheckBoxOn关键字。最后，点击“立即入驻”，可以使用Click关键字来完成。\n</thought>\n\n<code_block>\n# 清空搜索框中的文字“预算科目”\nSetField | 搜索 | ${KEY_BACKSPACE}\n\n# 勾选“已阅读并同意”\nCheckBoxOn | 已阅读并同意\n\n# 点击“立即入驻”\nClick | 立即入驻\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Select the cell in the first row, first column of the table.",
        "output": "<thought>\n要选中表格的第一行第一列，我们要使用选择或点击类的关键字。根据给出的关键字说明，SelectTableRow 用于选择或选中表格行。由于只需选中第一行，且没有特别指定表格的名称，可以直接使用 SelectTableRow 关键字选择第一行。\n</thought>\n\n<code_block>\n# 选择表格中的第一行\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check if '账号分析类直播间' appears on the page, and if it does, hover over that card.",
        "output": "<thought>\n任务的目标是检测页面上是否出现包含文本“账号分析类直播间”的元素，并在找到时对其进行hover操作。为此，我们可以使用`IsAnyTextExisting`关键字来检测文本的存在。如果检测到文本，我们可以使用`MoTo`关键字来实现hover操作。\n\n具体步骤如下：\n1. 使用`IsAnyTextExisting`来检测页面上是否存在“账号分析类直播间”。\n2. 如果文本存在，则使用`MoTo`关键字将鼠标移动到该文本上以执行hover操作。\n3. 使用RF的内置IF/ELSE语法来控制逻辑分支。\n\n我们会假设该文本在页面上是唯一的，因此直接使用文本内容作为依据进行操作。\n</thought>\n\n<code_block>\n# 检测是否存在“账号分析类直播间”\n${exist}  IsAnyTextExisting  账号分析类直播间\n\n# 如果存在该文本，则hover该卡片\nIF  $exist\n    # Hover到文本“账号分析类直播间”上\n    MoTo  账号分析类直播间\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '视频', check if the text '常用转场模板' appears on the page, and if it does, take a screenshot.",
        "output": "<thought>\n在这个场景中，我们需要首先点击文本 \"视频\"，然后检测页面上是否出现了 \"常用转场模板\" 字符。如果检测到该字符，应该进行截图。\n\n为了解决这个问题，我们可以按照以下步骤进行：\n1. 使用 `Click` 关键字以点击文本 \"视频\"。\n2. 使用 `WaitText` 或 `CheckHasText` 来检测文本 \"常用转场模板\" 是否出现在页面。\n3. 如果该文本存在，使用 `Screenshot` 关键字进行截图。\n4. 使用 IF 结构来判断文本是否存在，以决定是否进行截图。\n\n接下来，将逻辑转换为 RF 的关键字代码。\n</thought>\n\n<code_block>\n# 点击视频\nClick  视频\n\n# 判断页面是否出现常用转场模板\n${exist}  IsAnyTextExisting  常用转场模板\n\n# 如果存在，则截图\nIF  ${exist}\n    Screenshot\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Select the first cell",
        "output": "<thought>\n根据提示，目标是选中第一个单元格。在给定的关键字中，选择单元格的关键字没有直接的实现方法。但是，我们可以使用SelectTableRow关键字选中第一行，然后假设通过这种方式间接实现选中第一个单元格的效果。这里不需要特别针对列进行操作，因为选中整行也能覆盖需求。\n</thought>\n\n<code_block>\n# 选择表格的第一行，这样能选中第一个单元格\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the first cell below '课程列表'",
        "output": "<thought>\n在这个场景中，我们需要点击位于“课程列表”文本下方的第一个单元格。可以使用`ClickElemToTheDirectionOf`关键字来实现此功能。根据需求分析，应该选择“课程列表”作为基准元素，方向为下方（bottom），选择器可以为单元格的通用选择器`td`，并指定第一个单元格（即索引为0）。\n</thought>\n\n<code_block>\n# 点击‘课程列表’下方的第一个单元格\nClickElemToTheDirectionOf | 课程列表 | bottom | td:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '查看详情' in the first row of the current list, check if the text '超过3个月不展示个人作品' appears, and if it does, click '取消'. Then, check if the text '直播回放' appears, and if it does, click '取消'",
        "output": "<thought>\n我们需要处理以下任务：\n1. 首先在当前列表的第一行点击“查看详情”。\n2. 检查页面中是否出现“超过3个月不展示个人作品”字符。\n3. 如果存在，则点击“取消”按钮。\n4. 检查页面中是否有“直播回放”字符。\n5. 如果存在，则点击“取消”按钮。\n\n可以使用以下关键字和方法：\n- 使用 `ClickTextOfRow` 点击表格第一行的“查看详情”。\n- 使用 `CheckHasText` 检查是否出现特定的字符串。\n- 使用条件判断来执行相应的点击操作。\n- 使用 `Click` 点击“取消”按钮。\n\n在实现时，我们可以通过使用 `CheckHasText` 和条件判断来决定在检测到特定文本后执行的操作。\n</thought>\n\n<code_block>\n# 点击当前列表的第一行中的查看详情\nClickTextOfRow | 1 | 查看详情\n\n# 检查页面是否出现\"超过3个月不展示个人作品\"文本并处理\n${exist}  IsAnyTextExisting | 超过3个月不展示个人作品\nIF  ${exist}\n    Click  取消\nEND\n\n# 检查页面是否出现\"直播回放\"文本并处理\n${exist}  IsAnyTextExisting | 直播回放\nIF  ${exist}\n    Click  取消\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on a blank area of the pop-up window with the cursor",
        "output": "<thought>\n在这个场景中，我们需要在特定的弹窗中点击空白区域。根据给定的关键字，我们可以使用ClickWhiteArea来实现点击空白处的操作。由于需要在弹窗中进行操作，我们需要确保操作的上下文是在弹窗之内。因此，利用ClickWhiteArea即可完成任务。\n</thought>\n\n<code_block>\n# 在弹窗中点击空白区域\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the icon to the left of '添加账号', and set the second '请输入选项名称' to '选项2'.",
        "output": "<thought>\n我们需要完成两个操作：首先是点击“添加账号”左边的icon，其次是设置第二个“请输入选项”的名称为“选项2”。\n\n1. 点击“添加账号”左边的icon：我们有一个关键字 `ClickIconToTheDirectionOf` 可以用于点击指定文本附近的icon。这里，我们可以使用方向 `left` 表示icon在“添加账号”的左边。\n\n2. 设置第二个“请输入选项”名称：用 `SetField` 关键字可以设置字段的值。我们需要设置第二个包含“请输入选项”名称的字段，所以可以通过设定 `idx=1`。\n\n因此，选择`ClickIconToTheDirectionOf`和`SetField`关键字来完成这两个任务。\n</thought>\n\n<code_block>\n# 点击“添加账号”左边的icon\nClickIconToTheDirectionOf | 添加账号 | left\n\n# 设置第二个“请输入选项”字段名称为“选项2”\nSetField | 请输入选项名称 | 选项2 | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '不感兴趣' in the first row of the current list, check if the text '确认不感兴趣' appears, and if it does, take a screenshot and then click '取消'. If it does not appear, do not perform any action",
        "output": "<thought>\n首先，我们需要定位当前列表第一行中的\"不感兴趣\"按钮。可以使用`ClickTextOfRow`关键字来实现。接下来，我们需要检查页面中是否包含\"确认不感兴趣\"文本，可以使用`CheckHasAnyText`关键字。如果文本存在，则进行截图，并点击\"取消\"按钮，这可以使用`Click`关键字。如果文本不存在，则不进行任何操作。\n</thought>\n\n<code_block>\n# 点击当前列表第一行的不感兴趣\nClickTextOfRow | 1 | 不感兴趣\n\n# 判断页面是否有“确认不感兴趣”文本\n${exist}  IsAnyTextExisting | 确认不感兴趣\n\n# 如果存在“确认不感兴趣”\nIF  ${exist}\n    # 截图\n    Screenshot\n    # 点击取消\n    Click | 取消\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the cursor away and click on a blank area",
        "output": "<thought>\n为了实现将光标移到空白处并点击这一操作，我们可以使用提供的关键字。首先，我们需要将光标移动到一个特定的文本或元素上，然后使用`ClickWhiteArea`关键字在空白处点击。由于我们没有指定的文本或元素，所以我们假设光标当前在某个地方。我们直接使用`ClickWhiteArea`就能完成任务。\n</thought>\n\n<code_block>\n# 点击空白区域\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the + icon in the column to the right of '火山引擎基础产品'",
        "output": "<thought>\n要在RobotFramework中实现点击\"火山引擎基础产品\"右边列的\"+\"图标的操作，我们需要使用ClickIconToTheDirectionOf关键字。在这里，“火山引擎基础产品”是基准元素，我们需要指定方向为right，目标图标为plus。因此可以直接使用ClickIconToTheDirectionOf来实现。\n</thought>\n\n<code_block>\n# 点击'火山引擎基础产品'右边的'+'图标\nClickIconToTheDirectionOf | 火山引擎基础产品 | right | plus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '发起沟通' in the first row of the current list, and check if the text '确认该主播合作' appears. If it does, take a screenshot.",
        "output": "<thought>\n我们需要针对场景进行自动化测试脚本的编写。首先，需要点击当前列表的第一行中“发起沟通”按钮，这可以通过`ClickTextOfRow`关键字来实现。接着，检测是否存在“确认该主播合作”字符，可以用`IsAnyTextExisting`来判断。最后，如果确认文本存在，则进行截图操作。截图可以使用`Screenshot`关键字。根据这些步骤，整理出所需的操作顺序即可。\n</thought>\n\n<code_block>\n# 点击当前列表第一行的发起沟通\nClickTextOfRow | 1 | 发起沟通\n\n# 判断文本\"确认该主播合作\"是否存在\n${exist}  IsAnyTextExisting | 确认该主播合作\n\n# 如果存在，则截图\nIF  ${exist}\n    Screenshot\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write a keyword named \"前往升级\" with the following logic:  \n1. Click '前往升级'  \n2. Wait for the page to load completely  \n3. Verify the presence of '套餐更配' on the page  \n4. Click the icon to the left of '套餐更配'",
        "output": "<thought>\n为了实现这个关键字，我们需要分几个步骤完成：\n1. 使用`Click`关键字点击“前往升级”。\n2. 使用`WaitLoading`关键字等待页面加载完成。\n3. 使用`CheckHasText`关键字验证页面是否包含“套餐更配”。\n4. 使用`ClickIconToTheDirectionOf`关键字点击“套餐更配”左边的icon。\n</thought>\n\n<code_block>\n*** Keywords ***\n前往升级\n    # 点击文本为“前往升级”的按钮\n    Click  前往升级\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 验证页面中是否存在“套餐更配”\n    CheckHasText  套餐更配\n    \n    # 点击“套餐更配”左边的icon\n    ClickIconToTheDirectionOf  套餐更配  left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the icon to the right of \"Video Analyse\" and verify that \"Video Analyse Update\" does not exist on the page.",
        "output": "<thought>\n首先，我们需要点击“Video Analyse”右边的icon。根据提供的关键字，我们可以使用`ClickIconToTheDirectionOf`来实现，因为它可以精确定位和点击指定元素的右边的图标。接下来，我们需要验证页面上没有显示“Video Analyse Update”文本，可以使用`CheckNotHasText`关键字来完成文本是否存在的检查。\n</thought>\n\n<code_block>\n# 点击Video Analyse右边的icon\nClickIconToTheDirectionOf | Video Analyse | right | icon\n\n# 检查页面不存在Video Analyse Update\nCheckNotHasText | Video Analyse Update\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Select \"DataFinder\" for '安装产品'.",
        "output": "<thought>\n在这个场景中，需要选择一个特定的选项“DataFinder”。我可以使用`SelectOptionForField`关键字来实现该功能，因为它允许我们在指定字段（这里是'安装产品'）中选择特定的选项。\n</thought>\n\n<code_block>\n# 选择‘安装产品’为DataFinder\nSelectOptionForField | 安装产品 | DataFinder\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '颜值', wait for 2 seconds, and check if the text \"公会当前无符合服务信息的主播\" is present. If it is, take a screenshot. If not, check for the text \"发起沟通\", and if it is present, take a screenshot.",
        "output": "<thought>\n首先，我们需要找到点击“颜值”的方式，可以使用`Click`关键字。在点击之后，我们需要等待2秒，这可以通过`Sleep`关键字实现。接着，我们需要检查页面上是否包含特定的文本：首先检查“公会当前无符合服务信息的主播”，如果存在，则截图；如果不存在，则检查“发起沟通”，如果存在，则同样截图。这些步骤可以通过`CheckHasText`和条件语句实现。\n</thought>\n\n<code_block>\n# 点击颜值\nClick | 颜值\n\n# 等待2秒\nSleep | 2s\n\n# 检查当前是否含有“公会当前无符合服务信息的主播”字符\n${exist}  IsAnyTextExisting | 公会当前无符合服务信息的主播\nIF  ${exist}\n    # 如果存在，截图\n    Screenshot\nELSE\n    # 如果“公会当前无符合服务信息的主播”不存在，检查“发起沟通”\n    ${exist}  IsAnyTextExisting | 发起沟通\n    IF  ${exist}\n        # 如果存在“发起沟通”，截图\n        Screenshot\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the small icon to the left of the first '直播内容' and check if the page displays all the texts: '游戏', '语音', '颜值', '聊天', '才艺', and '其他'. If all are present, take a screenshot.",
        "output": "<thought>\n首先，我们需要点击第一个\"直播内容\"左边的icon，因此我们可以使用`ClickIconToTheDirectionOf`关键字来实现这个步骤。此关键字可以指定基准元素和点击目标的方向。在这个场景中，“直播内容”是基准文本，icon是目标元素，并且位于直播内容的左边。\n\n接下来，我们需要检测页面上是否出现 '游戏 语音 颜值 聊天 才艺 其他' 这所有的文案。为此，可以使用`IsAllTextExisting`关键字，它可以判断多个文本是否同时存在。\n\n如果这些文本都存在，我们就需要进行截图操作。可以使用`Screenshot`关键字来截取整个页面的截图。\n\n根据上述分析，以下是实现代码：\n</thought>\n\n<code_block>\n# 点击第一个直播内容左边的icon\nClickIconToTheDirectionOf | 直播内容 | left \n\n# 判断页面是否同时出现 '游戏 语音 颜值 聊天 才艺 其他'\n${exist}  IsAllTextExisting | 游戏 | 语音 | 颜值 | 聊天 | 才艺 | 其他\n\n# 如果这些文本都存在，则截图\nIF  ${exist}\n    Screenshot\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '前往升级' and set '源站类型' in the popup to '对象存储源站'.",
        "output": "<thought>\n此场景需要点击一个文本，然后在弹窗中设置一个字段。首先，我们需要使用 `Click` 关键字点击\"前往升级\"文本。然后在弹窗中使用 `SetField` 关键字设置\"源站类型\"为\"对象存储源站\"。需要注意的是，\"弹窗\"不会在代码中直接使用，而是用特殊值 `POPUP` 作为 `base` 参数。\n</thought>\n\n<code_block>\n# 点击前往升级\nClick | 前往升级\n\n# 设置弹窗中的源站类型为对象存储源站\nSetField | 源站类型 | 对象存储源站 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set the browser to its default size",
        "output": "<thought>\n通过设置浏览器窗口的宽度和高度为常见的默认值（如1920x1080）来实现类似的效果。默认大小通常取决于设备和操作系统，但1920x1080是比较常见的桌面浏览器默认尺寸。\n</thought>\n\n<code_block>\n# 设置浏览器为默认大小 1920x1080\nSetWindowSize | 1920 | 1080\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the text content of \"Follow Count\".",
        "output": "<thought>\n要获取“Follow Count”字段的文本内容，我需要先使用合适的定位关键字定位到“Follow Count”字段的元素。根据已给关键字说明，`GetFieldVal`关键字用于获取字段名称与页面控件关联的值。因此，我可以直接使用`GetFieldVal`关键字来获取“Follow Count”字段的值。\n</thought>\n\n<code_block>\n# 获取Follow Count字段的值\n${val}  GetFieldVal | Follow Count\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the plus sign (+) in the header row of the table.",
        "output": "<thought>\n要点击表格的表头行中的+号，我们可以使用提供的关键字之一：`ClickIconOfRow`。因为表头行是特殊的，我们应该使用`row_name_or_id=HEAD`来指定表头行。另外，我们要点击的是一个图标，假设图标的名字是`plus`（`+`号的常见类名），我们需要使用`icon='plus'`来指定要点击的图标。如果没有明确的表格标识，可以使用默认的`tbl=1`。\n</thought>\n\n<code_block>\n# 点击表头行中的+号图标\nClickIconOfRow | HEAD | plus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Randomly select a parameter from ${module_list} and assign it to variable A.",
        "output": "<thought>\n对于这个场景，我们需要从一个变量列表${module_list}中随机选择一个参数并将其分配给变量A。首先，我们需要确定如何从列表中随机选择一个元素。在Robot Framework中，没有直接用于从列表中随机选择元素的关键字，但我们可以通过使用Evaluate关键字调用Python的random模块来实现这个功能。然后，将随机选择的元素赋值给变量A。\n</thought>\n\n<code_block>\n# 使用Python的random.choice从${module_list}中随机选择一个元素，并将其赋值给变量A\n${A}  Evaluate  random.choice(${module_list})  modules=random\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Locate the second element on the page that contains \"Follow Count\"",
        "output": "<thought>\n在这个场景中，我们需要找到页面上第二个包含文本“Follow Count”的元素。根据提供的关键字和示例，我们可以使用`FindByText`关键字来定位包含该文本的元素。由于我们需要获取第二个匹配的元素，应该利用`:eq(num-1)`来准确获取第二个元素的索引。因此，我们会设置idx参数为1（因为idx是0开始的）。最终解法是使用`FindByText`来获取所需的元素。\n</thought>\n\n<code_block>\n# 查找页面第二个包含Follow Count的元素\n${elem}  FindByText | Follow Count | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "The div with class='view-lines monaco-mouse-cursor-text' should not be empty.",
        "output": "<thought>\n为了检查指定的div元素的文本内容不应该为空，我需要首先找到该div元素，接着获取其文本内容，并进行验证确认非空。可以使用`FindElem`关键字来根据jQuery选择器查找该元素，然后使用`Get Text`关键字获取该元素的文本内容，再使用`Should Not Be Empty`来验证文本不空。\n</thought>\n\n<code_block>\n# 查找指定的div元素\n${div_elem}  FindElem  div.view-lines.monaco-mouse-cursor-text\n\n# 获取元素的文本内容\n${div_text}  Get Text  ${div_elem}\n\n# 校验文本内容不为空\nShould Not Be Empty  ${div_text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on Redis under '日志详情'.",
        "output": "<thought>\n在这个场景中，我们的目标是点击“日志详情”下面的“Redis”。根据给定的关键字描述，我们可以使用`ClickTextToTheDirectionOf`关键字。该关键字可以用来点击基准元素给定方位的目标文本。在这里，“日志详情”是基准元素，“Redis”是我们要点击的目标文本。我们需要点击基准元素“日志详情”下方的文本“Redis”。因此，这里使用`ClickTextToTheDirectionOf`关键字，direction参数选择“bottom”。\n</thought>\n\n<code_block>\n# 点击日志详情下方的Redis\nClickTextToTheDirectionOf | 日志详情 | bottom | Redis\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Hadoop should be present below the '日志详情'.",
        "output": "<thought>\n为了验证“日志详情”下方是否存在“Hadoop”文本，可以使用CheckHasTextToTheDirectionOf关键字来完成。这个关键字能够在指定基准元素的给定方向上检查文本是否存在。我们将“日志详情”作为基准元素，并选取方向为“bottom”来查找下方的“Hadoop”。\n</thought>\n\n<code_block>\n# 校验在 ‘日志详情’ 的下方应该存在Hadoop\nCheckHasTextToTheDirectionOf | 日志详情 | bottom | Hadoop\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Under '组件列表', there are: Redis, ClickHouse",
        "output": "<thought>\n要实现这个场景，我们需要检查特定的文本是否出现在页面上的组件列表下方。根据给定的关键字集，我们可以选择使用`CheckHasTextToTheDirectionOf`关键字来确认特定文本是否存在于指定基准元素的方向上。由于方向是\"下方\"，所以我们用`bottom`。这里涉及两个文本——Redis和ClickHouse，因此需要分别进行校验。\n</thought>\n\n<code_block>\n# 校验组件列表下方存在 Redis\nCheckHasTextToTheDirectionOf | 组件列表 | bottom | Redis\n\n# 校验组件列表下方存在 ClickHouse\nCheckHasTextToTheDirectionOf | 组件列表 | bottom | ClickHouse\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '火山引擎证书中心' below '上传证书', enter Base in the \"请输入模块名称进行搜索\" field, and click the icon to the left of '配置证书'",
        "output": "<thought>\n考虑到需要点击“上传证书”下方的“火山引擎证书中心”，可以使用`ClickTextToTheDirectionOf`关键字，指定方向为`bottom`。然后，在“请输入模块名称进行搜索”输入框中输入\"Base\"，可以使用`SetField`关键字，并指定该输入框的名称为\"请输入模块名称进行搜索\"。最后，点击“配置证书”左边的icon，可以使用`ClickIconToTheDirectionOf`关键字完成。\n</thought>\n\n<code_block>\n# 点击“上传证书”下方的“火山引擎证书中心”\nClickTextToTheDirectionOf | 上传证书 | bottom | 火山引擎证书中心\n\n# 在“请输入模块名称进行搜索”里输入\"Base\"\nSetField | 请输入模块名称进行搜索 | Base\n\n# 点击“配置证书”左边的icon\nClickIconToTheDirectionOf | 配置证书 | left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find the div element on the page with class='css-wgd6t3' and scroll the element up and down by 300px.",
        "output": "<thought>\n完成这个任务的第一步是使用可用的关键字来找到页面上的指定元素。对于这个问题，可以使用\"FindElem\"关键字，并通过jQuery选择器来指定查找元素的条件。在本例中，选择器应该是 div[class='css-wgd6t3']。\n\n第二步是对找到的元素进行滚动操作。根据提供的关键字，ScrollUpDown 可以用来对某个元素进行上下滚动操作。这个关键字需要传入元素的选择器和滚动比例或者滚动的具体像素值。在要求中，需要滚动300px，因此我们可以使用该关键字来完成这一操作。\n\n</thought>\n\n<code_block>\n# 查找class='css-wgd6t3'的div元素\n${elem}  FindElem | div[class='css-wgd6t3']\n\n# 将找到的元素上下滚动300px\nScrollUpDown | ${elem} | 300\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that the text of each item in the ${elements} list contains today's date in the format yyyy/mm/dd",
        "output": "<thought>\n首先，我们需要获取当前的日期，并将其格式化为yyyy/mm/dd的格式。可以使用Robot Framework的内置关键字来获取当前日期并格式化。之后，我们需要遍历${elements}列表，对于列表中的每一个元素，使用关键字检查其文本是否包含格式化后的日期。\n</thought>\n\n<code_block>\n# 获取当前日期并格式化为yyyy/mm/dd\n${today}  Get Current Date  result_format=%Y/%m/%d\n\n# 遍历${elements}列表，校验每个元素的文本是否包含今天的日期\nFOR  ${element}  IN  @{elements}\n    ${text}  GetElemText  ${element}\n    Should Contain  ${text}  ${today}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on \"近30天\", select \"今日\", click '确认', and verify that the current page contains the keywords \"绩效进度\", \"常规提成\", and \"补充激励\".",
        "output": "<thought>\n根据任务要求，需要完成以下几个步骤：\n\n1. 点击文本“近30天”。\n2. 选择一个选项“今日”。\n3. 点击“确认”按钮。\n4. 校验页面上是否包含文本“绩效进度”、“常规提成”和“补充激励”。\n\n为了实现这些步骤，我计划使用以下关键字：\n- 使用`Click`关键字点击“近30天”文本。\n- 使用`SelectOption`关键字选择“今日”。\n- 使用`Click`关键字点击“确认”文本。\n- 使用`CheckHasText`关键字校验页面上是否同时包含“绩效进度”、“常规提成”和“补充激励”。\n</thought>\n\n<code_block>\n# 点击“近30天”\nClick | 近30天\n\n# 选择“今日”\nSelectOption | 今日\n\n# 点击“确认”\nClick | 确认\n\n# 校验页面包含“绩效进度”、“常规提成”、“补充激励”关键字\nCheckHasText | 绩效进度 | 常规提成 | 补充激励\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If '点击查看' appears on the page, click it and check that '已关联域名' is present on the page",
        "output": "<thought>\n首先，我们需要检测页面上是否存在文本\"点击查看\"。如果它存在，我们将点击该文本。之后，我们需要检查页面上是否存在\"已关联域名\"文本。为实现第一步，我们可以使用`IsAnyTextExisting`关键字来判断\"点击查看\"是否存在，然后根据结果使用`Click`关键字进行点击操作。对于第二步，使用`CheckHasText`关键字即可判断\"已关联域名\"是否在页面上。\n</thought>\n\n<code_block>\n# 检查页面上是否存在\"点击查看\"\n${exist}  IsAnyTextExisting | 点击查看\n\n# 如果\"点击查看\"存在，点击该文本\nIF  $exist\n    Click  点击查看\n\n    # 校验页面上存在\"已关联域名\"\n    CheckHasText  已关联域名\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the question mark next to '浮动收入'",
        "output": "<thought>\n我们需要点击“浮动收入”后面的问号。在RF中，我们可以使用`ClickIconToTheDirectionOf`关键字来实现这一操作。具体步骤如下：\n\n1. 确定“浮动收入”文本的位置。\n2. 找到该文本右方的问号图标。\n3. 使用`ClickIconToTheDirectionOf`关键字执行点击操作，参数包括基准元素“浮动收入”、方向“right”和目标图标名称“问号”。\n\n因此，测试步骤代码可以很简洁地使用该关键字来实现。\n</thought>\n\n<code_block>\n# Click the question mark icon to the right of \"浮动收入\"\nClickIconToTheDirectionOf | 浮动收入 | right | question\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the span element with the exact name 'LIVE Anchor'",
        "output": "<thought>\n在这个场景中，我们需要点击一个文本为“LIVE Anchor”的span元素。由于文本需要精准匹配，我们可以使用Click关键字配合FindByText关键字来实现这一操作，确保不会点击到其他不相关的元素。我们使用FindByText定位到元素，然后使用Click进行点击。\n</thought>\n\n<code_block>\n# 查找名称精准为'LIVE Anchor'的span元素，然后进行点击\n${elem}  FindByText | LIVE Anchor | tag=span | strict=True\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '前往告警配置'. Then click on '购买加量包', and click '续费'. Wait for '创建订单中' to disappear",
        "output": "<thought>\n在这个场景中，首先我们需要依次点击几个特定的文本按钮：前往告警配置、购买加量包、续费。这些操作可以使用`Click`关键字完成。最后，我们需要等待一个特定文本“创建订单中”消失，可以使用`WaitTextDisappear`关键字。确保每个操作顺序执行。\n</thought>\n\n<code_block>\n# 点击前往告警配置\nClick | 前往告警配置\n\n# 点击购买加量包\nClick | 购买加量包\n\n# 点击续费\nClick | 续费\n\n# 等待 创建订单中 消失\nWaitTextDisappear | 创建订单中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that there is a popup on the page, and the popup content includes \"Result exported, please click the URL below to open at new tab\" and \"Got it\".",
        "output": "<thought>\n为了验证页面上是否出现弹窗，并且弹窗内容包括指定的文本，我们可以使用`CheckHasText`关键字。这个关键字允许我们在页面或基于特定基准元素（如弹窗）中检查多个文本的存在。根据提示，我们需要在弹窗中确认两个文本\"Result exported, please click the URL below to open at new tab\"和\"Got it\"同时存在。因此，我们应设置`base=POPUP`来指定检查弹窗内容。\n</thought>\n\n<code_block>\n# 校验弹窗内容包含指定文本\nCheckHasText | Result exported, please click the URL below to open at new tab | Got it | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "parse string to json",
        "output": "<thought>\n解决问题思路: 应该使用RF的内置关键字来解析字符串为JSON对象。如果没有直接的关键字，可以考虑使用Evaluate执行Python的json.loads方法。\n</thought>\n\n<code_block>\n# 解析字符串为JSON对象\n${json_obj}  Evaluate  json.loads($json_str)  modules=json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '了解详情' located at the bottom left of '告警根因即时分析'",
        "output": "<thought>\n在这个场景中，我们需要点击\"告警根因即时分析\"左下方的\"了解详情\"。根据关键词，我们可以使用`ClickTextToTheDirectionOf`来实现这一点。这个关键词可以帮助我们从基准文本元素的特定方向选择并点击目标文本。因此，我们的基准元素是\"告警根因即时分析\"，目标文本是\"了解详情\"，方向是\"bottomLeft\"。\n</thought>\n\n<code_block>\n# 点击告警根因即时分析左下方的了解详情\nClickTextToTheDirectionOf | 告警根因即时分析 | bottomLeft | 了解详情\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that each item in the ${elements} list contains the text: '新开'",
        "output": "<thought>\n为了校验`${elements}`列表中的每一个都包含文本“新开”，我们需要遍历`${elements}`列表，并对每个元素使用`CheckHasText`关键字进行校验。由于`CheckHasText`关键字支持基准元素选择器，我们可以直接将`${element}`作为基准元素传入。\n\n具体步骤如下：\n1. 遍历`${elements}`列表。\n2. 对于每个`${element}`，使用`CheckHasText`关键字校验其包含文本“新开”。\n</thought>\n\n<code_block>\n# 遍历 `${elements}` 列表中的每一个元素\nFOR  ${element}  IN  @{elements}\n    # 校验每个元素包含文本“新开”\n    CheckHasText  新开  base=${element}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '新开' below '拜访阶段'",
        "output": "<thought>\n在这个场景中，根据描述，“新开”位于“拜访阶段”的下方。这可以通过ClickTextToTheDirectionOf关键字来实现。我们将“拜访阶段”作为基准元素，然后选择“新开”为目标文本，在“拜访阶段”的下方进行点击。\n</thought>\n\n<code_block>\n# 点击拜访阶段下方的新开\nClickTextToTheDirectionOf | 拜访阶段 | bottom | 新开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Define a lists containing 6 list elements, iterate through the lists, and print the list",
        "output": "<thought>\n在这个场景中，我们需要定义一个包含6个list元素的列表，并遍历它们以打印每个列表。RobotFramework本身没有直接用于循环和打印列表元素的关键字，因此我们需要使用Python代码来实现。我们可以使用Evaluate关键字来执行Python代码来创建和打印列表。\n</thought>\n\n<code_block>\n# 定义lists，包含6个list类型的元素\n${lists}=  Evaluate  [[1, 2, 3], ['a', 'b', 'c'], [True, False], ['x', 'y', 'z'], [10, 20, 30], ['apple', 'banana', 'cherry']]\n\n# 遍历lists并打印每个list\nFOR  ${list}  IN  @{lists}\n   Log  ${list}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write a keyword named \"统计分析域名排行跳转验证\" that accepts a parameter as a list containing two elements, with the following logic:\n1. Click on the domain ranking to the right of the first element in the list.\n2. Navigate to the new page.\n3. Verify that the second element in the list exists within the class \"cloud-ti-fe-spin\" on the page.\n4. Switch back to the previous window",
        "output": "<thought>\n在这个场景中，我们需要实现几个关键步骤。首先，我们需要点击列表中第一个元素右边的 \"域名排行\"。这可以通过使用 `ClickTextToTheDirectionOf` 关键字完成。接下来，我们需要跳转到新页面，这在 Robot Framework 中通常会自动完成。然后，我们验证新页面中的特定元素是否包含列表中的第二个元素，我们可以使用 `CheckHasElem` 关键字来实现这一点。最后，我们需要切换回到之前的窗口，我们可以使用 `ToPrevWindow` 关键字。在实现过程中，应注意选择适当的方向和定位元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n统计分析域名排行跳转验证\n    [Arguments]  ${list}\n    # Step 1: 点击list中的第一个元素右边的域名排行\n    ClickTextToTheDirectionOf  ${list[0]}  right  域名排行\n    \n    # Step 2: 跳转到新的页面\n    ToNewWindow\n    \n    # Step 3: 验证页面中class为cloud-ti-fe-spin中存在list中的第二个元素\n    CheckHasElem  [class=cloud-ti-fe-spin]:contains(${list[1]})\n    \n    # Step 4: 切换到之前的窗口\n    ToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on \"内容助推\" and then click on \"助推详情\" on the right side of the page.",
        "output": "<thought>\n针对场景中给出的操作步骤，首先需要点击文本“内容助推”。这是一个简单的文本点击操作，可以使用`Click`关键字来实现。接下来，需要点击页面右侧的\"助推详情\"。为了定位\"助推详情\"，我们可以假定它位于基准位置的某一方向。因此，可以使用`ClickTextToTheDirectionOf`这个关键字来实现。基准位置选择为屏幕中心(SCREEN_CENTER)的右侧。\n</thought>\n\n<code_block>\n# 点击“内容助推”文本\nClick | 内容助推\n\n# 点击页面右侧的“助推详情”\nClickTextToTheDirectionOf | SCREEN_CENTER | right | 助推详情\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Define a list where the elements are also of list type, and the elements within the inner lists are strings",
        "output": "<thought>\n在这个场景下，我们需要定义一个list，它里面的元素也是list类型，而内层list的元素是string类型。这个任务不涉及使用RobotFramework中的关键字，因为它只是一个Python数据结构的定义问题。我们可以直接在RobotFramework中使用Evaluate关键字来执行Python代码，定义这个list。\n</thought>\n\n<code_block>\n# 使用Evaluate关键字定义包含内层list的list\n${outer_list}=  Evaluate  [['string1', 'string2'], ['string3', 'string4'], ['string5']]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find \"助推详情\" below \"新建助推\" and click on it.",
        "output": "<thought>\n分析步骤：\n\n1. 我们需要找到“新建助推”这个元素。假设该元素是唯一的或者可以通过某个选择器定位。\n2. 然后，我们需要查找“新建助推”下方的“助推详情”。根据提供的关键字描述，适合使用“FindTextToTheDirectionOf”来查找“新建助推”下方的“助推详情”。\n3. 找到“助推详情”后，需要对其进行点击操作。\n\n选择的关键字：\n- FindTextToTheDirectionOf：用于查找“新建助推”下方的“助推详情”。\n- ClickElem：用于点击找到的“助推详情”。\n</thought>\n\n<code_block>\n# 查找新建助推下方的助推详情\n${elem}  FindTextToTheDirectionOf | 新建助推 | bottom | 助推详情\n\n# 点击找到的助推详情\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Create a list containing multiple dict objects.",
        "output": "<thought>\n为了创建一个list，其中包含多个dict对象，我们需要使用Python的内置数据结构。Robot Framework的BuiltIn库提供了关键字，比如 `Create List` 和 `Create Dictionary`，可以用来创建列表和字典。我们可以通过Evaluate关键字来执行Python代码来创建这样的嵌套数据结构。\n</thought>\n\n<code_block>\n# 使用Python代码创建一个包含多个字典的列表\n${list_with_dicts}=    Evaluate    [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}, {\"key3\": \"value3\"}]    \n\n# 打印创建的列表用于验证\nLog    ${list_with_dicts}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Find \"已完成\" and click on it.",
        "output": "<thought>\n要找到并点击文本为 \"已完成\" 的元素，可以直接使用 Click 关键字，因为通过 Click 关键字可以直接点击文本为指定内容的元素。此外，如果要先找到 \"已完成\" 元素再点击，也可以使用 FindByText 关键字配合 ClickElem 来实现，但在这个场景中是等效的，只需使用 Click 关键字即可实现要求。\n</thought>\n\n<code_block>\n# 直接点击文本为 \"已完成\" 的元素\nClick | 已完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If ${vs_benchmark_val} is converted to a float type after removing the percentage sign and is less than 0, output True; otherwise, output False",
        "output": "<thought>\n在这个场景中，我们需要对变量`${vs_benchmark_val}`进行处理。首先，我们要去掉百分号，然后将其转换为float类型，再进行数值比较。如果这个值小于0，我们应该输出True，否则输出False。Robot Framework支持使用Python语句来处理复杂的逻辑，因此我们可以使用Evaluate关键字来执行这些操作。\n</thought>\n\n<code_block>\n# 去掉百分号并转换为float，然后判断结果是否小于0并输出\n${result}=  Evaluate  float(${vs_benchmark_val}.replace('%', '')) < 0\n\n# 根据${result}的值输出True或False\nIF  ${result}\n    Log  True\nELSE\n    Log  False\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write a keyword named \"Cookies登录\" that accepts a parameter cookie_file with a default value of COOKIE_FILE, with the following actions:\n\n1. Open the browser.\n2. Inject cookies into the page ${MAIN_PAGE}.\n3. Visit the page ${MAIN_PAGE}",
        "output": "<thought>\n要实现“Cookies登录”关键字，我们需要处理以下步骤：\n1. 打开浏览器。\n2. 在浏览器中打开指定的URL，并注入cookie。\n3. 访问指定的URL。\n\n我们可以使用`OpenBrowser`关键字来实现打开浏览器并注入cookie的功能，`OpenUrl`关键字用于访问页面。由于`OpenBrowser`关键字提供了`cookie_file`参数，我们可以直接利用这个功能来注入cookie。\n\n组合这些需求，我们可以编写出最终实现的RF代码。\n</thought>\n\n<code_block>\n*** Keywords ***\nCookies登录\n    [Arguments]  ${cookie_file}=COOKIE_FILE\n    # 使用cookie_file参数打开浏览器并注入cookie\n    OpenBrowser  ${MAIN_PAGE}  cookie_file=${cookie_file}\n    \n    # 访问主页面\n    OpenUrl  ${MAIN_PAGE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Take a screenshot comparison of the element with class \"ranking-arco-spin\" and text \"Video Profile\", and save it as \"视频封面\".",
        "output": "<thought>\n要对指定的元素进行截图对比，我们可以首先使用`FindElem`关键字来定位元素，然后使用`ImageDiff`来进行截图对比并保存为文件。根据提示，需要查找class为\"ranking-arco-spin\"且文本为\"Video Profile\"的元素，并保存截图文件为\"视频封面\"。我们可以构建一个jquery选择器`ranking-arco-spin:contains(Video Profile)`来精确定位目标元素。\n</thought>\n\n<code_block>\n# 查找class为\"ranking-arco-spin\"且文本为\"Video Profile\"的元素\n${elem}  FindElem | [class=ranking-arco-spin]:contains(Video Profile)\n\n# 对找到的元素进行截图对比，保存为\"视频封面\"文件\nImageDiff | ${elem} | pic_name=视频封面\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If ${vs_benchmark_val} is greater than 0, raise an error.",
        "output": "<thought>\n在这个场景中，我们需要判断一个变量${vs_benchmark_val}是否大于0，如果大于0就报错。为了实现这个功能，我们可以使用Robot Framework的IF语句判断条件。当${vs_benchmark_val}大于0时，我们可以利用RF内置的\"Fail\"关键字来触发错误。对于RF的IF/ELSE语法，条件判断结束后需要用END结束。\n</thought>\n\n<code_block>\n# 如果${vs_benchmark_val}大于0则报错\nIF  ${vs_benchmark_val} > 0\n    Fail  Value is greater than 0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the value of the \"Vs Benchmark\" field from the card containing the text \"A2人群\" and assign it to the variable A.",
        "output": "<thought>\n为了实现目标，我们需要首先找到包含文本\"A2人群\"的卡片，假设卡片是 class包含card的元素，这可以使用`[class*=card]:contains(A2人群)`来选择。然后，我们需要在这个卡片元素的基础上获取\"Vs Benchmark\"字段的值。`GetFieldVal`关键字接受一个`base`参数，我们可以将先前找到的卡片元素作为`base`传入。需要确保字段名是`Vs Benchmark`，这样我们就能获取其值。\n</thought>\n\n<code_block>\n# 查找包含文本'A2人群'的卡片元素\n${card_elem}  FindElem | [class*=card]:contains(A2人群)\n\n# 在卡片元素中查找'Vs Benchmark'字段的值\n${A}  GetFieldVal | Vs Benchmark | base=${card_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "1. Open Google Chrome, inject the variable `SWITCH_ROLE_VERSION_STORAGE=100` into Local Storage, and access `${APP_SIGNIN_PAGE}` using `cookies=${ZZR_SSO_COOKIES}`.\n2. Wait for the page to load completely",
        "output": "<thought>\n首先，我们需要使用`OpenBrowser`关键字打开谷歌浏览器，并设置Local Storage中的`SWITCH_ROLE_VERSION_STORAGE`变量为100。然后使用cookies访问指定的登录页面`${APP_SIGNIN_PAGE}`。之后，我们需要等待页面加载完成，可以使用`WaitLoading`关键字来实现。\n</thought>\n\n<code_block>\n# 打开谷歌浏览器并访问登录页面，同时注入cookies\nOpenBrowser | ${APP_SIGNIN_PAGE} | cookies=${ZZR_SSO_COOKIES} | name=chrome\n\n# 设置Local Storage变量\nLocalStorageSetItem | SWITCH_ROLE_VERSION_STORAGE | 100\n\n# 等待页面加载完成\nWaitLoading | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Inject the variable `SWITCH_ROLE_VERSION_STORAGE=100` into the browser's Local Storage.",
        "output": "<thought>\n在这个场景中，我们需要将一个键值对注入到浏览器的localStorage中。这个过程可以通过使用关键字LocalStorageSetItem来完成，SWITCH_SHOW_Welcome的值需要设置为字符串\"false\"。该过程不涉及选择器和其他复杂逻辑，只需直接调用指定关键字即可完成需求。\n</thought>\n\n<code_block>\n# 将SWITCH_SHOW_Welcome的值设置为false\nLocalStorageSetItem  SWITCH_SHOW_Welcome  false\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the \"海报设计\" button below \"灵感\"",
        "output": "<thought>\n要点击“灵感”下方的“海报设计”按钮，基于描述和提示信息，我需要使用`ClickElemToTheDirectionOf`关键字。此关键字允许我指定基准元素（在这种情况下是“灵感”）和方向（\"bottom\"），以定位目标元素“海报设计”按钮。由于按钮是目标，我将使用选择器`button:contains(海报设计)`来确保匹配正确元素。\n</thought>\n\n<code_block>\n# 点击“灵感”下方的“海报设计”按钮\nClickElemToTheDirectionOf | 灵感 | bottom | button:contains(海报设计)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Open Google Chrome, navigate to the {salary_url} page, and click the close button at the top right corner of the popup",
        "output": "<thought>\n在这个场景中，我们需要执行以下步骤：\n1. 使用`OpenBrowser`关键字打开谷歌浏览器并访问指定的URL。\n2. 点击位于弹窗右上角的关闭按钮。这需要使用`ClickIconToTheDirectionOf`，基准是弹窗，需要点击右上方的“close”小图标。\n\n可以使用直接的关键字操作，而不是用复杂的选择器。\n</thought>\n\n<code_block>\n# 打开谷歌浏览器并访问薪资页面\nOpenBrowser | ${salary_url} | name=google\n\n# 点击弹窗右上角的关闭按钮\nClickIconToTheDirectionOf | POPUP | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write a keyword named \"跳转文档页面字段验证\" that accepts a parameter as a string, with the following logic:\n\n1. Navigate to a new page.\n2. Verify that the string exists on the page.\n3. Switch back to the previous window",
        "output": "<thought>\n对于这个场景，需要编写一个名为“跳转文档页面字段验证”的关键字，并接受一个参数string。逻辑分为三个步骤：\n1. 使用ToNewWindow关键字跳转到新的页面。\n2. 使用CheckHasText来验证页面中存在传入的参数string。\n3. 最后切换回之前的窗口，使用ToPrevWindow关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n跳转文档页面字段验证\n    [Arguments]    ${string}\n    # 跳转到新的页面\n    ToNewWindow\n    # 验证页面中存在传入的参数string\n    CheckHasText    ${string}\n    # 切换到之前的窗口\n    ToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the second \"测试\" below \"归我所有\"",
        "output": "<thought>\n根据需求，需要点击“归我所有”下面的第2个“测试”。这意味着“测试”文本位于“归我所有”下方。可以使用`FindTextToTheDirectionOf`关键字来查找“归我所有”下方的“测试”文本，并使用idx参数指定要点击第2个“测试”。\n</thought>\n\n<code_block>\n# 点击“归我所有”下方的第2个“测试”\nClickTextToTheDirectionOf | 归我所有 | bottom | 测试 | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Select the first item from the page search results.",
        "output": "<thought>\n在这个场景中，我们需要选择搜索结果的第一个。假设这些结果展示在一个表格中，我们可以通过选择表格的第一行来实现这一操作。根据可用关键字，我们可以使用 `SelectTableRow` 来选择表格的行。通过指定 `row_name_or_id=1`，可以选择表格的第一行。\n</thought>\n\n<code_block>\n# 选择搜索结果的第一行\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on \"工单链接\", then click on \"请选择\" below \"拜访客户\"",
        "output": "<thought>\n这个场景的目标是让测试脚本首先点击名为“工单”的链接，然后在“拜访客户”文本下方找到一个选择框并点击。\n\n1. 对于点击“工单”链接，可以使用`Click`关键字，并且用链接的文本来识别元素。\n\n2. 对于在“拜访客户”下方的“请选择”框，我们应该使用`ClickTextToTheDirectionOf`关键字，将“拜访客户”作为基准元素，然后在其下方点击“请选择”。\n\n```\n1. 使用`Click`关键字点击链接工单。\n2. 使用`ClickTextToTheDirectionOf`在“拜访客户”的下方点击“请选择”。\n```\n\n</thought>\n\n<code_block>\n# 点击工单链接\nClick | 工单\n\n# 点击拜访客户下方的请选择\nClickTextToTheDirectionOf | 拜访客户 | bottom | 请选择\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Return the data from the row where \"Play List\" is located and store it as a list",
        "output": "<thought>\n为了获取特定行的数据，我们可以使用`GetRowValues`关键字。该关键字允许我们通过行中的文本或行号来获取该行的所有值，并且返回一个列表。在这个场景中，我们需要找到包含文本\"Play List\"的行，并获取该行的数据。因此，我们将使用`GetRowValues | Play List`来获取数据。由于没有特别指明表格的标识符或基准元素，我们假定默认表格或不需要特别指定。\n</thought>\n\n<code_block>\n# 获取“Play List”所在行的所有值，并存储为列表\n@{play_list_data}  GetRowValues | Play List\n\n# 打印获取到的值（可选步骤，主要用于验证）\nLog  ${play_list_data}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check that all data in the `play_list_values` list is not empty",
        "output": "<thought>\n为了验证play_list_values列表中的所有数据都不为空，可以使用Robot Framework中内置的循环结构和条件判断关键字。首先，需要遍历列表中的每一项，然后检查每项是否非空。在Robot Framework中，这可以通过FOR循环结构来实现，并结合Should Not Be Empty关键字或者使用IF/ELSE结构来判断每一个元素是否为空。如果发现任何一个元素为空，就应该在测试中断言失败。\n</thought>\n\n<code_block>\n# 校验play_list_values列表所有数据都不为空\nFOR    ${item}    IN    @{play_list_values}\n    Should Not Be Empty    ${item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search for the last POST request sent to `/mweb/v1/get_history_by_ids` and verify that the `task_id` field in the `data` field of the response is not equal to 0",
        "output": "<thought>\n首先，我们需要找到发送到特定URL的最后一个POST请求。这个可以通过使用 `Search Requests` 关键字来实现。我们会搜索URL中包含 `/mweb/v1/get_history_by_ids`，并且请求方式为 `POST` 的最后一个请求。之后，我们需要验证响应中的 `data` 字段下的 `task_id` 是否不等于 0。可以使用 `GetValuesFromJson` 关键字来提取 `task_id` 的值，并使用 `Should Not Be Equal As Numbers` 关键字来进行断言。\n</thought>\n\n<code_block>\n# 搜索发送到/mweb/v1/get_history_by_ids的最后一个POST请求\n${resp_json}  Search Requests  /mweb/v1/get_history_by_ids  POST  last\n\n# 从响应中获取data字段下的task_id\n${task_id}  GetValuesFromJson  ${resp_json}  data:task_id\n\n# 校验task_id字段不等于0\nShould Not Be Equal As Numbers  ${task_id}  0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"下一个\" on the page four times, then click \"立即体验\".",
        "output": "<thought>\n为了完成这个任务，我们需要在页面中点击“下一个”按钮四次，然后点击“立即体验”按钮。我们可以首先使用`Click`关键字来实现对“下一个”按钮的多次点击，由于页面上“下一个”按钮可能有多个，我们可以直接使用`Click`关键字指定点击策略。接着，再使用`Click`关键字点击“立即体验”按钮。\n</thought>\n\n<code_block>\n# 依次点击四次“下一个”\nClick | 下一个\nClick | 下一个\nClick | 下一个\nClick | 下一个\n\n# 点击“立即体验”\nClick | 立即体验\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search for all POST requests sent to `/mweb/v1/get_history_by_ids` and verify that the `ret` field value in the response is equal to 0",
        "output": "<thought>\n这个场景需要我们执行以下几个步骤：\n1. 使用`Search Requests`关键字搜索发送到`/mweb/v1/get_history_by_ids`的所有POST请求。\n2. 使用`GetValuesFromJson`关键字从每个请求的响应中提取`ret`字段。\n3. 使用`Should Be Equal As Strings`关键字校验提取的`ret`字段值等于0。\n\n由于`Search Requests`关键字支持通过设置`mode`参数为`all`获取所有符合条件的请求，因此我们可以用它来获取所有请求，接下来逐个提取响应中`ret`字段值进行校验。\n</thought>\n\n<code_block>\n# 搜索请求url中包含/mweb/v1/get_history_by_ids, 且请求方式为POST的所有请求\n${responses}  Search Requests  /mweb/v1/get_history_by_ids  POST  all\n\n# 对每个响应执行以下步骤\nFOR  ${response}  IN  @{responses}\n    # 获取响应中的ret字段的值\n    ${ret_value}  GetValuesFromJson  ${response}  ret\n    \n    # 校验ret字段值等于0\n    Should Be Equal As Strings  ${ret_value}  0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the value of the Vs Benchmark field in the card that contains the 'A2人群' text.",
        "output": "<thought>\n首先需要查找文案包含'A2人群'的card，然后在该card中查找字段名为'Ves Benchmark'的字段值。可以使用`FindElem`来定位card，再使用`GetFieldVal`获取字段值。\n</thought>\n\n<code_block>\n# 查找文案包含'A2人群'的card\n${a2_card}  FindElem | [class*=card]:contains(A2人群)\n\n# 获取'A2人群'card中的'Ves Benchmark'字段的值\n${vs_benchmark_val}  GetFieldVal | Ves Benchmark | base=${a2_card}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set '请选择' as '预算科目'.",
        "output": "<thought>\n在这个场景中，我们需要将一个字段“请选择”设置为预算科目。看起来这是一个直接的选择操作，可以使用`SelectOptionForField`关键字来实现，因为我们知道字段名是“请选择”，选项值是“预算科目”。\n</thought>\n\n<code_block>\n# 设置字段“请选择”为“预算科目”\nSelectOptionForField | 请选择 | 预算科目\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set the search box under '标准字段' to '预算科目'",
        "output": "<thought>\n需要将搜索框设置为“预算科目”，在标准字段下方定位搜索框，可以利用`FindElemToTheDirectionOf`来定位标准字段下方的搜索框，然后通过`FillArea`填入值。\n</thought>\n\n<code_block>\n# 查找标准字段下方的搜索框\n${search_box}  FindElemToTheDirectionOf | 标准字段 | bottom | input\n\n# 在搜索框中输入预算科目\nFillArea | ${search_box} | 预算科目\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the '图片生成' button, then click '描述'. Enter the text \"apples\" and click '立即生成'",
        "output": "<thought>\n首先分析需求，我们需要在网页上依次进行几步操作。首先是点击一个名为“图片生成”的按钮，然后点击“描述”文本，接着输入“apples”这个文本，最后点击“立即生成”按钮。根据这些步骤，我们需要使用多个关键字来实现功能。\n\n1. 点击“图片生成”按钮：使用`Click`关键字来实现。\n2. 点击“描述”文本：同样使用`Click`关键字来实现。\n3. 输入文字“apples”：由于是向光标处输入文本，用`SendText`。\n4. 点击“立即生成”按钮：再次使用`Click`关键字。\n\n通过这些分析，我们可以得出解决方案。\n</thought>\n\n<code_block>\n# 点击图片生成按钮\nClick | 图片生成\n\n# 点击描述\nClick | 描述\n\n# 输入文字 \"apples\"\nSendText | apples\n\n# 点击立即生成\nClick | 立即生成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the \"x\" button on the page popup.",
        "output": "<thought>\n在这个场景中，我们需要点击页面弹窗中的“x”按钮。“x”按钮是一个关闭图标（close icon）。我们应该使用ClickIcon关键字来实现这一操作。\n\n由于这是一个弹窗中的操作，我们需要设置base参数为POPUP，以指向弹窗中的元素。同时，因为我们只需要点击第一个“x”按钮（即关闭图标），所以可以使用默认值idx=0。\n</thought>\n\n<code_block>\n# 点击弹窗中的“x”小图标\nClickIcon | close | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the input box below '业务BP负责人', enter '凤银洁', and select the dropdown value.",
        "output": "<thought>\n在这个场景中，我们需要先点击一个特定输入框或文本区域，然后输入名字“凤银洁”，最后选择相应的下拉值。首先可以通过定位文本“业务BP负责人”下方的input或textarea元素进行点击，接着在该输入框中输入文本“凤银洁”，最后选择下拉列表中的一个值。我们可以使用`FindElemToTheDirectionOf`来查找元素，然后用`FillArea`输入文本，最后使用`SelectOption`选择下拉值。具体步骤如下：\n</thought>\n\n<code_block>\n# 查找\"业务BP负责人\"下方的输入框\n${input_elem}  FindElemToTheDirectionOf | 业务BP负责人 | bottom | input,textarea\n\n# 在找到的输入框中输入\"凤银洁\"\nFillArea | ${input_elem} | 凤银洁\n\n# 选择下拉选项（假设需要选择第一个选项）\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the small icon to the left of the first '沟通状态'. If '代建联' appears, click on '代建联'",
        "output": "<thought>\n首先，我们需要定位到第一个包含“沟通状态”文本的元素，然后通过关键字ClickIconToTheDirectionOf在其左边点击一个icon。接下来，我们需要判断文本“代建联”是否存在页面上。如果存在，我们就点击“代建联”文本。\n\n需要用到的关键字有：\n\n1. ClickIconToTheDirectionOf：用于点击“沟通状态”左边的icon。\n2. IsAnyTextExisting：用于检查“代建联”文本是否存在。\n3. IF语句：用于在条件成立时执行相应动作。\n4. Click：用于在存在“代建联”时进行点击操作。\n</thought>\n\n<code_block>\n# 点击第一个“沟通状态”左边的icon\nClickIconToTheDirectionOf | :contains(沟通状态):eq(0) | left\n\n# 判断“代建联”是否存在\n${exist}  IsAnyTextExisting | 代建联\n\n# 如果“代建联”存在，点击“代建联”文本\nIF  ${exist}\n    Click  代建联\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Create a keyword '操作多选Select' that accepts key and value parameters. The operation logic is to set the value of the Select component to the right of the key to the specified value",
        "output": "<thought>\n对于这个问题，我们需要创建一个关键字，该关键字接受两个参数：key和value。逻辑是将key右侧的Select组件的值设置为value。根据提示信息，这里可以使用SetField关键字。由于SetField有能力直接依据名字定位并设置，因此这里可以直接使用SetField关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n操作多选Select\n    [Arguments]  ${key}  ${value}\n    # 使用SetField关键字找到key右侧关联区域，将其设置为提供的值\n    SetField  ${key}  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Enter '凤银洁' and click to select the value that appears in the search results",
        "output": "<thought>\n这个场景涉及到输入值并选择搜索出来的结果。首先，我们需要在某个输入框中输入\"凤银洁\"，然后等待搜索结果出现并选择它。对于输入操作，我们可以使用`SendText`关键字。如果搜索结果是通过文字显示的，我们可以假设结果是需要通过文本点击来选择的，因此可以使用`Click`关键字来选择搜索结果。由于题目中没有给出具体的选择条件或定位方式，我将默认选择第一个出现的搜索结果。\n</thought>\n\n<code_block>\n# 在光标位置输入“凤银洁”\nSendText | 凤银洁\n\n# 选择搜索出来的第一个结果（假设出现结果后选择第一个）\nClick | 凤银洁\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the element with the role of \"treeitem\" that contains the text \"giraffe_db_01\"",
        "output": "<thought>\n要在页面中点击一个文案包含“giraffe_db_01”的元素，并且属性为roll=treeitem，可以通过CSS选择器来实现。我们可以组合使用属性选择器和内容选择器来定位该元素。具体来说，CSS选择器可以使用带属性的选择器加上\":contains\"函数。如果需要特定第几个元素，比如第一个或最后一个元素，可以使用\":eq\"选择器。但是题目中未指定需要点击第几个，因此我们将默认点击第一个匹配的元素。\n</thought>\n\n<code_block>\n# 点击roll=treeitem且文案包含“giraffe_db_01”的元素\nClickElem | [roll=treeitem]:contains(giraffe_db_01)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the text from the span element to the right of the '标签' field",
        "output": "<thought>\n在这个场景中，我们需要获取‘标签’字段右侧的span元素里的文本。首先，我们可以使用`FindElemToTheDirectionOf`关键字查找‘标签’字段右侧的span元素。查找到目标元素后，我们就可以使用`GetElemText`关键字来获取该元素中的文本。这个过程需要两个主要步骤：1. 找到‘标签’字段右侧的span元素；2. 获取该span元素的文本。\n</thought>\n\n<code_block>\n# 查找‘标签’右侧的span元素\n${span_elem}  FindElemToTheDirectionOf | 标签 | right | span\n\n# 获取该span元素的文本\n${span_text}  GetElemText | ${span_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the attributes of the arrow to the left of '共享看板'",
        "output": "<thought>\n在这个任务中，我们需要获取某个元素的属性。给定的任务是“获取共享看板左侧箭头的属性”。根据现有关键字和说明，任务描述中并没有直接提供获取属性的方法，但我们可以通过查找到特定元素，然后利用`GetElemAttr`关键字来获取其属性。\n\n首先，我们需要找到“共享看板”这个基准元素，而“左侧箭头”是相对于这个基准元素的，所以我们可以使用`FindElemToTheDirectionOf`关键字获取到左侧箭头元素。然后通过`GetElemAttr`来获取这个箭头元素的属性。\n\n接下来，我们需要考虑“左侧箭头”相对“共享看板”的方向，一般情况下，左侧箭头可能位于共享看板的左侧，所以我们的方向参数可以设为“left”。\n\n最后，我们可以使用`GetElemAttr`关键字获取左侧箭头的属性。\n\n总结起来：使用`FindElemToTheDirectionOf`来定位箭头元素，然后使用`GetElemAttr`来获取属性。\n</thought>\n\n<code_block>\n# 获取共享看板左侧箭头元素\n${arrow_elem}  FindElemToTheDirectionOf | 共享看板 | left | [class*=arrow]\n\n# 获取左侧箭头的属性，比如获取class属性\n${arrow_attr}  GetElemAttr | ${arrow_elem} | class\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click each of the following lists in sequence: Play List, Like List, Review List, Share List, Favorite List, GMV List, and Order List. Check if each list contains data",
        "output": "<thought>\n为了实现该需求，我们需要依次点击指定的列表，然后判断每个列表展示出的表格是否有数据。首先，我们可以使用 `Click` 关键字依次点击每个列表项。为了判断表格是否有数据，我们可以在每次点击后使用 `WaitLoading` 来等待页面加载完成，然后使用 `GetRowCount` 来获取表格的行数，最后使用 `Should Be True` 来确保行数大于0。为了避免重复代码，我们可以使用循环来简化操作。\n</thought>\n\n<code_block>\n# 定义要依次点击的列表\n@{lists} =  Create List  Play List  Like List  Review List  Share List  Favorite List  GMV List  Order List\n\n# 遍历每个列表并执行点击和验证操作\nFOR  ${list}  IN  @{lists}\n    # 点击当前列表\n    Click  ${list}\n    \n    # 等待加载完成\n    WaitLoading\n    \n    # 获取表格行数\n    ${rowCount}  GetRowCount\n    \n    # 验证表格行数大于0\n    Should Be True  ${rowCount} > 0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Create a keyword '校验多选标签' that accepts key and value parameters. The operation logic is to check if the data for the key is equal to the value within the container where the class is equal to 'volc-design-mtl-tags'",
        "output": "<thought>\n我们需要创建一个关键字，用于在指定的容器中检查某个字段的值。首先，我们需要在类名为 \"volc-design-mtl-tags\" 的容器中找到 key 字段。然后从这个字段中获取值，并检查其是否等于给定的 value。可拆解为以下步骤：\n\n1. 查找类名为 \"volc-design-mtl-tags\" 的容器。\n2. 在该容器中，查找名为 key 的字段。\n3. 获取该字段的值。\n4. 校验获取的值是否等于参数 value。\n\n我们可以使用 `FindElem` 来查找容器和字段，使用 `GetFieldVal` 来获取字段值，并使用 `Should Be Equal As Strings` 来进行值的比较。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验多选标签\n    [Arguments]  ${key}  ${value}\n    # 查找class为volc-design-mtl-tags的容器\n    ${container}  FindElem  [class=volc-design-mtl-tags]\n\n    # 在容器中查找key字段并获取其值\n    ${field_value}  GetFieldVal  ${key}  base=${container}\n\n    # 校验获取的字段值是否等于value\n    Should Be Equal As Strings  ${field_value}  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '高意愿', then click the input box below '业务BP负责人', enter '章江虹', and select the option.",
        "output": "<thought>\n首先，我们需要点击文本“高意愿”，这可以通过使用`Click`关键字来实现。接下来，我们需要点击文本“业务BP负责人”下方的`input`或`textarea`，这可以通过使用`ClickElemToTheDirectionOf`关键字并设置基准元素和方向来实现。然后，我们需要在光标激活位置输入文本“章江虹”，这可以通过使用`SendText`关键字来实现。最后，我们需要选择这个选项，由于实现选择的操作可以通过`SelectOption`关键字来实现。\n</thought>\n\n<code_block>\n# 点击高意愿\nClick | 高意愿\n\n# 点击业务BP负责人下方的input/textarea\nClickElemToTheDirectionOf | 业务BP负责人 | bottom | input,textarea\n\n# 输入章江虹\nSendText | 章江虹\n\n# 选择此选项\nSelectOption | 章江虹\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Iterate through list1, list2, and list3, and check that the data in each list is not empty",
        "output": "<thought>\n我们需要遍历三个列表list1, list2, list3，并检查这些列表中的元素是否都不为空。在Robot Framework中，我们可以使用FOR循环来遍历列表，并结合IF/ELSE结构来判断元素是否为空。如果为空，则输出一个错误消息，或者在非空时继续执行后续操作。\n</thought>\n\n<code_block>\n# 遍历每个列表\n    FOR    ${element1}    IN    @{list1}\n        FOR    ${element2}    IN    @{list2}\n            FOR    ${element3}    IN    @{list3}\n                # 检查是否为空\n                IF    '${element1}' == '' or '${element2}' == '' or '${element3}' == ''\n                    FAIL    One or more elements are empty: ${element1}, ${element2}, ${element3}\n                ELSE\n                    Log    All elements are not empty: ${element1}, ${element2}, ${element3}\n                END\n            END\n        END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the input box below '业务BP负责人' and delete the existing content in the input box",
        "output": "<thought>\n为了解决这个问题，我们需要点击业务BP负责人下方的input或textarea元素，然后清空该元素的内容。具体步骤如下：\n\n1. 使用 `ClickElemToTheDirectionOf` 关键字点击业务BP负责人下方的input或textarea元素。\n2. 使用 `SendText` 关键字输入回车来清空内容。\n</thought>\n\n<code_block>\n# 点击业务BP负责人下方的input/textarea\nClickElemToTheDirectionOf | 业务BP负责人 | bottom | input,textarea\n\n# 清空input/textarea内容\nSendText | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "make title varible AUTOMATION plus ${PROJECT_NUMBER}",
        "output": "<thought>\n在这个任务中，我们需要生成一个变量 `${title}`，它的值为 `AUTOMATION` 加上 `${PROJECT_NUMBER}` 的值。我们可以使用 RF 的内置关键字 `Set Variable` 来实现这一点，将字符串 `AUTOMATION` 与变量 `${PROJECT_NUMBER}` 进行拼接。\n</thought>\n\n<code_block>\n# 创建变量 title 并设置为 AUTOMATION 加上 PROJECT_NUMBER\n${title}    Set Variable    AUTOMATION${PROJECT_NUMBER}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "The module selects OpenSearch FluenBit.",
        "output": "<thought>\n要解决这个问题，我们需要将“模块”字段选择为“OpenSearch FluenBit”这个选项。可以使用`SelectOptionForField`关键字，因为它允许我们为指定字段选择一个文本选项。在此场景中，字段名为“模块”，选项为“OpenSearch FluenBit”。\n</thought>\n\n<code_block>\n# 将‘模块’字段选择为‘OpenSearch FluenBit’\nSelectOptionForField | 模块 | OpenSearch FluenBit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the page text content and print it out",
        "output": "<thought>\n为了获取页面的全部文本内容，我们可以直接使用`GetPageText`关键字。这个关键字会提取页面中的所有文本内容，然后我们可以使用`Log`关键字将获取的文本打印出来。\n</thought>\n\n<code_block>\n# 获取页面的所有文本内容\n${page_text}  GetPageText\n\n# 将获取的页面文本内容打印出来\nLog  ${page_text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on \"模块管理\" in the row where MiniBase is located, then click on \"证书中心\" to the left of \"托管\", click on \"定制管报\" and then click \"确认\" again",
        "output": "<thought>\n首先，我们需要使用`ClickTextOfRow`关键字点击表格中\"MiniBase\"所在行的\"模块管理\"。接下来，应采用`ClickTextToTheDirectionOf`关键字来点击\"托管\"左边的\"证书中心\"。最后，使用`Click`关键字依次点击\"定制管报\"和\"确认\"。\n</thought>\n\n<code_block>\n# 点击 MiniBase 所在行的模块管理\nClickTextOfRow | MiniBase | 模块管理\n\n# 点击托管左边的证书中心\nClickTextToTheDirectionOf | 托管 | left | 证书中心\n\n# 点击定制管报\nClick | 定制管报\n\n# 点击确认\nClick | 确认\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set \"数据源名称\" in the popup to \"自动化数据源\" + a random 3-digit number",
        "output": "<thought>\n首先，题目的要求是设置弹窗内的数据源名称为“自动化数据源”加随机3位数字。首先可以使用`GenerateRandom`关键字来生成一个长度为3的随机数字字符串。然后使用`SetPopupField`关键字在弹窗中设置数据源名称为“自动化数据源”加上生成的随机字符串。\n</thought>\n\n<code_block>\n# 生成3位随机数字字符串\n${random_digits}  GenerateRandom  3  [NUMBERS]\n\n# 设置弹窗内数据源名称为自动化数据源+随机3位数字\nSetPopupField  数据源名称  自动化数据源${random_digits}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Randomly select an option from the Video Consumption Region dropdown menu",
        "output": "<thought>\n在这个场景中，我们需要在“Video Consumption Region”字段中随机选择一个下拉选项。这可以通过将字段中的选项数目作为上限生成一个随机数来实现，然后选择相应的选项。使用RobotFramework的内置关键字可以生成随机数。生成随机数的关键字是Generate Random String。然后结合SelectOptionForField来选择生成的选项。\n</thought>\n\n<code_block>\n# 例如假设有 5 个选项，则随机选择一个\n${random_index}  GenerateRandom  | 1 | [NUMBERS]12345\nSelectOptionForField | Video Consumption Region | OPTIONS_${random_index}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the cursor to a blank area.",
        "output": "<thought>\n鼠标移动到空白处，和点击空白处效果一样，在RobotFramework中，点击空白处可以通过使用`ClickWhiteArea`关键字来实现。该关键字不需要任何参数，直接调用即可。\n</thought>\n\n<code_block>\n# 点击空白处，即光标移动到空白处\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the \"导出飞书文档\" button to the right of the \"取消\" button",
        "output": "<thought>\n为了实现点击取消按钮右侧的“导出飞书文档”按钮，我们可以使用`ClickTextToTheDirectionOf`关键字。该关键字能够根据基准文本的方向信息来定位目标文本。这里的基准文本是“取消”，目标文本是“导出飞书文档”，方向是右侧。\n</thought>\n\n<code_block>\n# 点击取消按钮右侧的导出飞书文档按钮\nClickTextToTheDirectionOf | 取消 | right | 导出飞书文档\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that the page field contains \"待发布\"",
        "output": "<thought>\n题目要求校验页面字段包含“待发布”文案，但并未给出具体字段名，因此可以直接校验页面上存在该文案即可。使用关键字CheckHasText可以实现这一点。这个关键字会检查整个页面是否包含特定的文本。\n</thought>\n\n<code_block>\n# 校验页面包含“待发布”\nCheckHasText | 待发布\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the input box below \"业务BP负责人\", enter \"凤银洁\", and click on the information that appears in the search results below",
        "output": "<thought>\n在这个场景中，我们需要对\"业务BP负责人\"文本右下方的input或textarea元素进行输入操作，然后对出现的结果进行点击操作。首先，我们使用`FindElemToTheDirectionOf`关键字查找\"业务BP负责人\"下方的输入区域，接着将文本输入到该元素中。最后，我们使用`ClickElemToTheDirectionOf`或`ClickTextToTheDirectionOf`关键字来点击搜索结果。假设搜索结果出现在下方。\n</thought>\n\n<code_block>\n# 定位并输入文本到业务BP负责人的输入框中\n${input_elem}  FindElemToTheDirectionOf | 业务BP负责人 | bottom | input,textarea\nFillArea | ${input_elem} | 凤银洁\n\n# 点击下方搜索结果\nClickDirection | ${input_elem} | bottom\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check the box for '应用场景' as \"通用管报\".",
        "output": "<thought>\n根据给出的应用场景，我们需要将字段‘应用场景’设置为‘通用管报’。对于这种简单的字段设置操作，可以使用`SetField`关键字来完成。字段名为‘应用场景’，值为‘通用管报’。\n</thought>\n\n<code_block>\n# 设置应用场景为通用管报\nSetField | 应用场景 | 通用管报\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set \"所属业务线\" in the popup to '火山引擎与BytePlus'.",
        "output": "<thought>\n首先，我们需要在弹窗内设置字段 '所属业务线' 的值。根据已知关键字信息，SetPopupField 是最适合用于操作弹窗字段的关键字。我们可以使用 SetPopupField 来设置 '所属业务线' 的值为 '火山引擎与BytePlus'。由于没有其他的选项或特殊位置要求，所以不需要使用 idx, enter 或 near 这些选项。\n</thought>\n\n<code_block>\n# 设置弹窗内所属业务线为 '火山引擎与BytePlus'\nSetPopupField | 所属业务线 | 火山引擎与BytePlus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set \"数据源名称\" in the popup to \"自动化数据源\" + a random number",
        "output": "<thought>\n这个任务要求在弹窗中设置数据源名称，并在名称后面附加一个随机数字。为此，我需要使用`SetField`关键字来选取需要设置的字段并将其标记为基于弹窗。为了生成随机数字，我将使用`GenerateRandom`生成一串数字，并附加在名称后。\n</thought>\n\n<code_block>\n# 生成随机数字，长度为5，仅包含数字\n${random_number}  GenerateRandom  | 5 | [NUMBERS]\n\n# 设置弹窗内数据源名称为自动化数据源+随机数字\nSetField | 数据源名称 | 自动化数据源${random_number} | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Select the option that includes offline-image-package-all-MiniBase for '升级包文件'",
        "output": "<thought>\n在这个场景中，我们需要在\"升级包文件\"字段中选择一个包含文本\"offline-image-package-all-MiniBase\"的选项。我们可以使用关键字`SelectOptionForField`，将其应用在\"升级包文件\"上，并传入包含所需文本的选项值。由于提示并未提供选项的具体序号，而是提供了选项值的一部分，我们需要确保使用与该文本匹配的选项。假设匹配项完整文本已知为\"offline-image-package-all-MiniBase\"，直接使用文本进行匹配。\n</thought>\n\n<code_block>\n# 在“升级包文件”字段中选择包含offline-image-package-all-MiniBase的选项\nSelectOptionForField | 升级包文件 | offline-image-package-all-MiniBase\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"新增数据源\" and verify that \"自动化分组1\" is not present on the page",
        "output": "<thought>\n为了实现“点击新增数据源，校验页面无自动化分组1”的操作，我们需要选择合适的关键字。\n\n首先，我们需要使用“Click”关键字点击“新增数据源”按钮。假设“新增数据源”是页面上的一个文本按钮，我们可以直接使用“Click”关键字。\n\n接下来，我们需要校验操作的结果，即页面中不应包含“自动化分组1”这个文本。对于这种情况，我们可以使用“CheckNotHasText”关键字来检查页面上是否没有该文本。\n\n因此，脚本的逻辑是：\n1. 点击“新增数据源”。\n2. 校验页面不含“自动化分组1”。\n</thought>\n\n<code_block>\n# 点击新增数据源按钮\nClick | 新增数据源\n\n# 校验页面上不包含自动化分组1\nCheckNotHasText | 自动化分组1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the small icon next to \"自动化分组1\" and select \"解除分组\".",
        "output": "<thought>\n根据给出的场景，我们需要点击“自动化分组1”后面的某个图标，并选择解除分组。\n\n首先，假设“自动化分组1”旁边的图标和解除分组选项都是通过鼠标操作的。\n\n1. 使用`ClickIconToTheDirectionOf`关键字，点击“自动化分组1”右边的图标，因为我们不知道图标的具体名称，所以不能使用特定名称。\n2. 然后，使用`SelectOption`选择解除分组选项。\n</thought>\n\n<code_block>\n# 点击\"自动化分组1\"右边的图标\nClickIconToTheDirectionOf | 自动化分组1 | right\n\n# 选择“解除分组”选项\nSelectOption | 解除分组\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set the \"分组名称\" to three random fields connected by underscores",
        "output": "<thought>\n为了实现这个操作，我们可以使用`GenerateRandom`关键字生成三个随机字符串。每个字符串由指定的字符集合构成。然后，我们可以使用`Catenate`关键字将这三个字符串连接在一起，中间用下划线作为分隔符。最后，我们使用`SetField`关键字将生成的字符串设置为分组名称。需要注意的是，`GenerateRandom`的字符集合需要根据具体需求进行定义。\n</thought>\n\n<code_block>\n# 生成三个不同的随机字符串\n${part1}  GenerateRandom  | 5 | [LETTERS][NUMBERS]\n${part2}  GenerateRandom  | 5 | [LETTERS][NUMBERS]\n${part3}  GenerateRandom  | 5 | [LETTERS][NUMBERS]\n\n# 将三个字符串用下划线连接起来\n${group_name}  Catenate  SEPARATOR=_  ${part1}  ${part2}  ${part3}\n\n# 设置分组名称\nSetField | 分组名称 | ${group_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Create a keyword for \"校验多选标签\" that accepts key and value parameters. The operation logic is: check if the text to the right of the key next to the \"已选\" text is equal to the value",
        "output": "<thought>\n要解决这个问题，我们需要执行以下步骤：\n\n1. 使用`FindTextToTheDirectionOf`关键字查找\"已选\"右边的key。\n2. 使用`FindElemToTheDirectionOf`关键字查找key右边的元素。\n3. 使用`Should Be Equal As Strings`关键字验证文案是否等于value。\n\n我们将创建一个自定义关键字，并通过参数化来接受key和value作为输入。通过组合以上关键字达到功能需求。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验多选标签\n    [Arguments]  ${key}  ${value}\n    \n    # 查找“已选”右边的key\n    ${key_element}  FindTextToTheDirectionOf  已选  right  ${key}\n    \n    # 查找key右边的元素\n    ${actual_value_element}  FindElemToTheDirectionOf  ${key_element}  right\n    \n    # 获取实际文案文本\n    ${actual_value}  Get Text  ${actual_value_element}\n    \n    # 校验实际文案是否等于期望value\n    Should Be Equal As Strings  ${actual_value}  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"退出登录\" in the dropdown menu",
        "output": "<thought>\n为了点击下拉弹框里的\"退出登录\"选项，我们可以使用Click关键字。因为需要明确这个文本是在弹框中，可以使用base参数指定为POPUP来表示操作的目标是在弹框中内容。通过这种方式，我们能够准确地找到并点击\"退出登录\"。\n</thought>\n\n<code_block>\n# 点击弹框中的退出登录\nClick | 退出登录 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Enter the key: TITAN_INSTALL_OFFLINE_MODE, and verify that the page contains the words \"输码核销\"",
        "output": "<thought>\n首先，根据需求，我们需要以某种方式在页面上输入\"TITAN_INSTALL_OFFLINE_MODE\"。使用`SendText`关键字可以在光标激活的位置输入文本。接下来，我们需要校验页面上存在文本“输码核销四个字”，可以使用`CheckHasText`关键字来检查页面中是否包含指定的文本。\n\n选择关键字的逻辑：\n1. 使用`SendText | TITAN_INSTALL_OFFLINE_MODE`在光标处输入指定的文本。\n2. 使用`CheckHasText | 输码核销`来验证文本的存在。\n\n这些操作完成后，我们就能确保输入文本成功，且页面存在指定的校验文本。\n</thought>\n\n<code_block>\n# 在光标位置输入\"TITAN_INSTALL_OFFLINE_MODE\"\nSendText | TITAN_INSTALL_OFFLINE_MODE\n\n# 校验页面存在文本\"输码核销\"\nCheckHasText | 输码核销\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the dropdown arrow next to \"测试POI-香菜1\" in the top right corner",
        "output": "<thought>\n首先，需要找到“测试POI-香菜1”这个元素的位置。然后点击该元素后面的“下拉箭头”图标。最合理的方案是使用ClickIconToTheDirectionOf关键字，因为字面上有一个“下拉箭头”图标，且位于“测试POI-香菜1”的右边。\n</thought>\n\n<code_block>\n# 点击“测试POI-香菜1”右侧的下拉箭头\nClickIconToTheDirectionOf | 测试POI-香菜1 | right | arrow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Define a string variable as \"源站配置\"",
        "output": "<thought>\n要为Robot Framework中的源站配置创建一个字符串参数，我们需要定义一个字符串类型的变量。Robot Framework提供了一个内置关键字`Set Variable`来创建并设置变量。我们可以使用这个关键字来创建一个`string`类型的变量并赋值为\"源站配置\"。\n</thought>\n\n<code_block>\n# 创建一个 string 类型的变量并设置值为\"源站配置\"\n${source_config}  Set Variable  源站配置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Take a screenshot of the element with a class that includes \"h-full relative\" and name it \"曲线图1\" for comparison",
        "output": "<thought>\n为了完成这个任务，我需要找到class包含\"h-full relative\"的元素。可以使用FindElem来查找这个元素。然后，使用ImageDiff关键字对找到的元素进行截图并与基准图进行对比。这次截图应命名为“曲线图1”。\n</thought>\n\n<code_block>\n# 查找class包含h-full relative的元素\n${elem}  FindElem | [class*=\"h-full relative\"]\n\n# 截取 ${elem} 的图片，命名为：曲线图1，并和基准图对比\nImageDiff | ${elem} | pic_name=曲线图1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"立即登录\" after \"已有账号？\"",
        "output": "<thought>\n在这个场景中，我们需要点击“已有账号？”后面的“立即登录”。根据关键字的定义，我们可以使用ClickTextToTheDirectionOf关键字，因为它允许我们点击某个基准文本给定方向上的目标文本。我们将“已有账号？”作为基准文本，方向设为right，然后指定目标文本为“立即登录”。\n</thought>\n\n<code_block>\n# 点击已有账号？右边的立即登录\nClickTextToTheDirectionOf | 已有账号？ | right | 立即登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write a keyword named \"域名配置文档链接\" that accepts a parameter as a list, where the list contains two elements. The logic is as follows:\n1. Click \"查看详情\" below the first element of the list.\n2. Navigate to a new page.\n3. Verify that the second element of the list is present on the page.\n4. Switch back to the previous window",
        "output": "<thought>\n为了实现这个场景，首先需要使用`ClickTextToTheDirectionOf`来点击第一个参数元素下方的\"查看详情\"链接。然后，使用`ToNewWindow`关键字切换到新页面。接着，验证新页面中是否存在第二个参数元素，使用`CheckHasText`关键字。最后，需要使用`ToPrevWindow`关键字切换回之前的窗口。\n</thought>\n\n<code_block>\n*** Keywords ***\n域名配置文档链接\n    [Arguments]  ${list}\n    \n    # 点击第一个元素下方的查看详情\n    ClickTextToTheDirectionOf  ${list}[0]  bottom  查看详情\n    \n    # 跳转到新的页面\n    ToNewWindow\n    \n    # 验证页面中存在第二个元素\n    CheckHasText  ${list}[1]\n    \n    # 切换到之前的窗口\n    ToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the hyperlink text \"立即登录\"",
        "output": "<thought>\n首先，根据场景要求，我们需要点击一个超链接，超链接通常用<a>标签表示。因此，我们可以通过查找文本为“立即登录”的<a>元素来实现点击操作。在RobotFramework中，可以使用Click关键字来执行点击操作。根据提供的关键字说明，Click关键字适用于通过文本定位的情况，并且若需进一步精确定位到特定元素，可以结合FindByText关键字来获取特定的超链接元素，然后执行点击操作。\n</thought>\n\n<code_block>\n# 查找文本为“立即登录”的超链接元素\n${elem}  FindByText | 立即登录 | tag=a\n\n# 点击该超链接\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"查看详情\" below \"源站清单\".  \nNavigate to a new page.  \nVerify that \"源站配置\" is present on the page.  \nSwitch back to the previous window.",
        "output": "<thought>\n为了解决这个问题，我们需要进行以下步骤：\n1. 首先，点击“源站清单”下方的“查看详情”。\n2. 假设“源站清单”是一个已知的基准元素，我们需要使用`ClickTextToTheDirectionOf`关键字来实现该操作。\n3. 然后切换到新的窗口，我们使用`ToNewWindow`关键字。\n4. 验证新页面中是否存在“源站配置”这个文本，可以使用`CheckHasText`关键字。\n5. 最后，切换回之前的窗口，使用`ToPrevWindow`关键字。\n</thought>\n\n<code_block>\n# 点击源站清单下方的查看详情\nClickTextToTheDirectionOf | 源站清单 | bottom | 查看详情\n\n# 切换到新的窗口\nToNewWindow\n\n# 校验页面中包含“源站配置”\nCheckHasText | 源站配置\n\n# 切换回之前的窗口\nToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check the box for \"已阅读并同意用户协议和隐私条款\"",
        "output": "<thought>\n在这个场景中，我们需要勾选“已阅读并同意用户协议和隐私条款”复选框。首先，我们需要使用 `CheckBoxOn` 关键字。根据给出的关键字说明，我们可以通过复选框的名称来勾选。因此可以直接使用该名称来触发操作。\n</thought>\n\n<code_block>\n# 勾选“已阅读并同意用户协议和隐私条款”复选框\nCheckBoxOn | 已阅读并同意用户协议和隐私条款\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Enter VER_CODE into the \"验证码\" field",
        "output": "<thought>\n根据问题描述，需要在页面中将某个字段设置为 ${VER_CODE}。这里给出的提示是将“VER_CODE”输入到验证码字段中。可以使用`SetField`关键字来实现这个操作。需要确保填写的是验证码字段，因此需要在SetField中指定name为验证码。\n</thought>\n\n<code_block>\n# 设置验证码字段为VER_CODE\nSetField | 验证码 | ${VER_CODE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Enter PHONE_NUM into the \"手机号码\" field",
        "output": "<thought>\n在这个场景中，我们需要将变量`${PHONE_NUM}`中的值输入到一个名为手机号码的字段中。可以直接使用`SetField`关键字，该关键字用于将值输入到指定的页面字段中。变量`${PHONE_NUM}`会自动解析为其值，因此可以直接使用。\n</thought>\n\n<code_block>\n# 将变量${PHONE_NUM}的值输入到手机号码字段\nSetField | 手机号码 | ${PHONE_NUM}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Return to the previous page and verify that the text \"源站配置\" is present",
        "output": "<thought>\n要实现返回前一个页面并检查页面上是否存在“源站配置”这段文案，我们可以使用以下步骤：\n\n1. 使用`PageBack`关键字返回到前一个页面。\n2. 使用`CheckHasText`关键字检查返回的页面是否包含“源站配置”。\n\n这两个步骤将确保我们正确地返回到上一个页面并验证页面内容。\n</thought>\n\n<code_block>\n# 返回前一个页面\nPageBack\n\n# 校验页面包含“源站配置”文案\nCheckHasText | 源站配置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Switch back to the previously opened page, click \"了解更多\", then click \"不感兴趣\", and take a screenshot",
        "output": "<thought>\n这个场景需要解决以下几个步骤：首先，我们需要返回到前一个页面，这可以通过使用PageBack关键字来完成。其次，点击\"了解更多\"文本，可以使用Click关键字。然后，点击\"不感兴趣\"文本，同样使用Click关键字。最后，需要截图，可以使用Screenshot关键字来完成。这个过程涉及到页面导航、元素点击和页面截屏的操作。\n</thought>\n\n<code_block>\n# 返回到之前的页面\nPageBack\n\n# 点击了解更多\nClick | 了解更多\n\n# 点击不感兴趣\nClick | 不感兴趣\n\n# 截图\nScreenshot\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Generate a random string of length 5 and set it as the \"数据源名称\" in the \"新增数据源\" popup",
        "output": "<thought>\n在这个场景中，我们首先需要生成一个长度为5的随机字符串，并将其用作数据源名称。这个字符串需要在一个特定的弹窗中设置为数据源名称字段的值。基于需求，我会首先使用`GenerateRandom`关键字生成随机字符串，然后通过`SetPopupField`关键字将其设置为数据源名称。因为涉及到弹窗，所以需要使用`SetPopupField`关键字，这个关键字可以直接用于弹窗中的字段操作。\n</thought>\n\n<code_block>\n# 生成长度为5的随机字符串\n${random_name}  GenerateRandom  | 5 | [LETTERS][NUMBERS]\n\n# 设置新增数据源弹窗内的数据源名称为生成的随机字符串\nSetPopupField | 数据源名称 | ${random_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"业务线\" to the left of \"应用场景\", then click \"导出\". Wait for 1 second, and check if the message \"下载中,稍后请在消息中心查看结果\" appears on the page. If it does, take a screenshot",
        "output": "<thought>\n在该场景中，我们需要完成几步操作：首先，点击应用场景左边的业务线，然后点击导出按钮。接着需要等待1秒，以确保点击后的状态更新。最后，我们需要检查页面上是否出现了包含“下载中,稍后请在消息中心查看结果”的文本，如果出现该文本，则进行截图操作。\n\n为此我们将使用以下关键字：\n1. `ClickTextToTheDirectionOf`：用于点击应用场景左边的业务线。\n2. `ClickTextOneByOne`：用于依次点击导出。\n3. `Sleep`：用于等待1秒。\n4. `IsAllTextExisting`：用于判断页面上是否存在指定文本。\n5. `Screenshot`：用于截图。\n\n我们需要注意的是，由于应用场景和业务线是相对位置，所以使用`ClickTextToTheDirectionOf`来完成点击操作，剩余的步骤可以直接根据文本内容进行操作。\n</thought>\n\n<code_block>\n# 点击应用场景左边的业务线\nClickTextToTheDirectionOf | 应用场景 | left | 业务线\n\n# 点击导出\nClickTextOneByOne | 导出\n\n# 等待1秒\nSleep | 1s\n\n# 检查页面是否包含文本“下载中,稍后请在消息中心查看结果”\n${exist} | IsAllTextExisting | 下载中 | 稍后请在消息中心查看结果\n\n# 如果文本存在，则截图\nIF | ${exist}\n    Screenshot\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"参考文档\" to the right of \"调整解析\".  \nNavigate to the new page and verify that it contains '测试域名的访问'.  \nReturn to the previous page.",
        "output": "<thought>\n首先，我们需要点击“调整解析”右边的“参考文档”。这可以通过使用`ClickTextToTheDirectionOf`关键字来实现。然后，切换到新打开的页面，我们使用`ToNewWindow`关键字实现窗口切换。在新页面中，我们需要检查页面是否包含“测试域名的访问”文本，可以使用`CheckHasText`关键字。最后，返回到之前的页面，使用`ToPrevWindow`关键字。\n</thought>\n\n<code_block>\n# 点击“调整解析”右边的“参考文档”\nClickTextToTheDirectionOf | 调整解析 | right | 参考文档\n\n# 切换到新打开的窗口\nToNewWindow\n\n# 校验新页面包含“测试域名的访问”\nCheckHasText | 测试域名的访问\n\n# 返回到先前的窗口\nToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"预热\" below \"文件预取\".  \nVerify that the new page contains \"提交预热任务\"",
        "output": "<thought>\n根据场景描述，首先需要点击“文件预取”下方的“预热”按钮。我们可以使用`ClickTextToTheDirectionOf`关键字来实现这一操作。接下来，需要验证是否跳转到了一个新的页面，并且页面中包含文本“提交预热任务”。为了验证页面的跳转，可以使用`ToNewWindow`来切换到新页面，然后使用`CheckHasText`关键字来检查页面中是否存在“提交预热任务”。\n</thought>\n\n<code_block>\n# 点击文件预取下方的预热\nClickTextToTheDirectionOf | 文件预取 | bottom | 预热\n\n# 切换到新页面\nToNewWindow\n\n# 校验页面包含提交预热任务\nCheckHasText | 提交预热任务\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the \"线索是否对本公会有效\" filter box, then select \"无效\"",
        "output": "<thought>\n我们需要点击筛选框“线索是否对本公会有效”，然后选择“无效”选项。根据描述，我们可以假设“线索是否对本公会有效”是一个下拉框或可点击的元素，点击后会显示选项列表中的“无效”选项。我们需要：\n\n1. 使用`Click`关键字，点击文本“线索是否对本公会有效”。\n2. 之后再使用`Click`关键字，点击“无效”这个选项。\n\n如果“无效”在弹出层或弹窗中，则需要指定`base=POPUP`。如果没有明确的弹出层指示，可以首先尝试直接点击“无效”。\n</thought>\n\n<code_block>\n# 点击“线索是否对本公会有效”筛选框\nClick | 线索是否对本公会有效\n\n# 点击“无效”选项\nClick | 无效\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"添加域名\" within the area where the class is \"cloud-ti-fe-space-item\"",
        "output": "<thought>\n为了实现点击 class 为 cloud-ti-fe-space-item 中的‘添加域名’按钮，我们可以使用 Click 关键字。根据问题描述，我们需要指定 base 参数，来选择特定的 class 选择器中的元素。在这种情况下，应该使用 base 来指定选择 class 为 cloud-ti-fe-space-item 的容器元素，然后在这个范围内点击文本‘添加域名’。\n</thought>\n\n<code_block>\n# 点击 class 为 cloud-ti-fe-space-item 中的 ‘添加域名’元素\nClick | 添加域名 | base=[class=cloud-ti-fe-space-item]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check if the URL is `https://www.douyin.com/user/MS4wLjABAAAAc0CL7ZdBiVKO2N41W7SWxGrIsGrQ94MtpP4uyr8iwFC8YqUlZlQCOCZmsu8daxCy?imToSecUid=MS4wLjABAAAAc0CL7ZdBiVKO2N41W7SWxGrIsGrQ94MtpP4uyr8iwFC8YqUlZlQCOCZmsu8daxCy`",
        "output": "<thought>\n在这个场景中，我们需要获取当前页面的URL，然后检查其是否等于指定的URL。RobotFramework提供了一个名为`GetCurrentUrl`的关键字，可以用于获取当前的URL。获取到URL后，我们可以使用`Should Be Equal As Strings`关键字来验证获取到的URL是否与预期的URL相符。\n</thought>\n\n<code_block>\n# 获取当前页面的URL\n${current_url}  GetCurrentUrl\n\n# 校验获取到的URL是否为预期值\nShould Be Equal As Strings  ${current_url}  https://www.douyin.com/user/MS4wLjABAAAAc0CL7ZdBiVKO2N41W7SWxGrIsGrQ94MtpP4uyr8iwFC8YqUlZlQCOCZmsu8daxCy?imToSecUid=MS4wLjABAAAAc0CL7ZdBiVKO2N41W7SWxGrIsGrQ94MtpP4uyr8iwFC8YqUlZlQCOCZmsu8daxCy\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the first \"私信主播\" button, then click the \"参考文档\" near \"URL访问诊断\"",
        "output": "<thought>\n首先，我们需要点击第一个 '私信主播' 按钮。根据描述，我们可以使用 `Click` 关键字，并指定 `idx=0` 来点击第一个包含该文本的按钮。然后，我们需要在 'URL访问诊断' 附近点击 '参考文档'，这可以通过 `Click` 关键字和 `near` 参数来实现。\n</thought>\n\n<code_block>\n# 点击第一个'私信主播'按钮\nClick | 私信主播 | idx=0\n\n# 点击'URL访问诊断'附近的'参考文档'\nClick | 参考文档 | near=URL访问诊断\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the \"创建私有网络\" button.  \nChange \"名称\" to \"自动化测试Vpc-beijing\", select \"可用区A\" from the \"可用区\" dropdown, and click \"确定\".  \nClick \"自动化测试Vpc-beijing\".  \nClick the edit icon next to \"名称\".  \nSet \"名称\" to \"修改自动化测试Vpc\" and press Enter.  \nReturn to the previous page",
        "output": "<thought>\n为了完成此任务，我们需要依次执行以下步骤：\n\n1. 点击“创建私有网络”按钮。\n2. 修改名称字段为“自动化测试Vpc-beijing”。\n3. 从“可用区”下拉框中选择“可用区A”。\n4. 点击“确定”按钮。\n5. 点击“自动化测试Vpc-beijing”文本。\n6. 找到并点击名称后面的编辑图标。\n7. 将名称设置为“修改自动化测试Vpc”并回车。\n8. 返回上一页。\n\n我们将利用关键字 `Click`，`SetField`，`SelectOptionForField`，和 `SendText` 来完成这些交互操作。\n</thought>\n\n<code_block>\n# 点击“创建私有网络”按钮\nClick | 创建私有网络\n\n# 修改名称字段为“自动化测试Vpc-beijing”\nSetField | 名称 | 自动化测试Vpc-beijing\n\n# 从“可用区”下拉框中选择“可用区A”\nSelectOptionForField | 可用区 | 可用区A\n\n# 点击“确定”按钮\nClick | 确定\n\n# 点击“自动化测试Vpc-beijing”文本\nClick | 自动化测试Vpc-beijing\n\n# 找到并点击名称后面的编辑icon\nClickIconToTheDirectionOf | 自动化测试Vpc-beijing | right | edit\n\n# 将名称设置为“修改自动化测试Vpc”并回车\nSetField | 名称 | 修改自动化测试Vpc | enter=True\n\n# 返回上一页\nPageBack\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Return to the previous page, set \"名称\" to \"123456\", press Enter, and click the edit icon to the right of \"123456\".",
        "output": "<thought>\n此问题要求我们执行以下任务：首先返回上一页，接着在一个输入字段中设置名称为“123456”并按回车，然后点击文本“123456”右边的编辑图标。解决这个问题可以分解为几个步骤：使用PageBack关键字来返回上一页，使用SetField关键字输入“123456”并回车，最后使用ClickIconToTheDirectionOf关键字来点击“123456”右边的编辑图标。\n</thought>\n\n<code_block>\n# 返回上一页\nPageBack\n\n# 设置名称为“123456”并按回车\nSetField | 名称 | 123456 | enter=True\n\n# 点击123456右边的编辑icon\nClickIconToTheDirectionOf | 123456 | right | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"应用场景\", select \"通用管报\" from the dropdown menu, then click \"分组\" and select \"分组1\"",
        "output": "<thought>\n首先需要点击“应用场景”文本，可以使用`Click`关键字，然后在下拉框中选择“通用管报”，为此可以使用`SelectOption`关键字。最后，需要点击“分组”选择“分组1”，这里同样使用`SelectOptionForField`关键字来完成。\n</thought>\n\n<code_block>\n# 点击“应用场景”\nClick | 应用场景\n\n# 在下拉框中选择“通用管报”\nSelectOption | 通用管报\n\n# 在“分组”下拉框选择“分组1”\nSelectOptionForField | 分组 | 分组1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"状态\" and select \"待发布\" from the dropdown menu",
        "output": "<thought>\n在这个场景中，我们需要完成两个步骤：首先点击文本\"状态\"，然后从下拉框中选择\"待发布\"选项。首先，可以使用`Click`关键字来点击\"状态\"文本。接下来，使用`SelectOption`关键字来选择下拉框中的选项\"待发布\"。两个步骤要紧密结合，以确保在选择选项时正确关联到点击的下拉框。\n</thought>\n\n<code_block>\n# 点击状态文本\nClick | 状态\n\n# 在下拉框中选择待发布选项\nSelectOption | 待发布\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the current URL and cookies",
        "output": "<thought>\n要获取当前的URL和Cookies，我们可以使用SeleniumLibrary提供的关键字。对于URL，SeleniumLibrary有一个内置的`Get Location`关键字可以直接获取当前页面的URL。而对于Cookies，SeleniumLibrary提供了`Get Cookies`关键字，可以返回所有的Cookies信息。\n</thought>\n\n<code_block>\n# 获取当前的URL\n${url}  Get Location\n\n# 获取所有的Cookies\n${cookies}  Get Cookies\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the current timestamp and keep the first 10 digits",
        "output": "<thought>\n要获取当前时间戳并保留前10位，可以使用Python的time库获取当前时间的时间戳。Robot Framework支持通过Evaluate关键字来执行Python代码，因此可以通过Evaluate调用Python代码获取当前时间戳，之后使用字符串切片保留前10位即可。\n</thought>\n\n<code_block>\n# 获取当前时间戳并保留前10位\n${timestamp}   Evaluate  str(int(time.time()))[:10]  modules=time\nLog  ${timestamp}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Set the start date to ${current_date} and the end date to 14 days later",
        "output": "<thought>\n在这个问题中，我们需要设置两个日期字段：开始日期和结束日期。开始日期为当前日期，可以通过Robot Framework的内置关键字`Get Current Date`来获取。结束日期需要设置为开始日期之后的第14天，因此可以使用`Add Time To Date`关键字来进行日期的相加操作。\n\n首先，我们获取当前日期，然后在它的基础上加14天，最终将这两个日期分别填入相应的字段中。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 计算结束日期（14天后）\n${end_date}  Add Time To Date  ${current_date}  14d  result_format=%Y-%m-%d\n\n# 假设存在相关的字段来设置开始日期和结束日期\n\n# 设置开始日期为当前日期\nSetField  开始日期  ${current_date}\n\n# 设置结束日期为计算后的日期\nSetField  结束日期  ${end_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the current date in the format Y-M-D",
        "output": "<thought>\n为了获取当前日期，Robot Framework 标准库中已经提供了相关的关键字可以直接获取并格式化日期。这里可以使用 `Get Current Date` 关键字来获取当前日期，关键字可以将日期格式化为指定的格式Y-M-D。\n</thought>\n\n<code_block>\n# 获取当前时间，格式化为Y-M-D\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 打印格式化后的当前日期\nLog  ${current_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If \"下一步\" exists on the page, click it, and then check the page; if \"跳过\" also exists, click it as well.",
        "output": "<thought>\n首先，我们需要判断页面上是否存在文本“下一步”。如果存在，就点击它。然后，我们需要再次检查页面上是否存在“跳过”这个文本。如果存在，我们也点击它。使用`IsAnyTextExisting`来判断文本是否存在，并使用`Click`关键字点击文本文字。\n</thought>\n\n<code_block>\n# 判断页面是否存在“下一步”\n${exist}  IsAnyTextExisting | 下一步\n\n# 如果存在“下一步”，则点击\nIF  ${exist}\n    Click  下一步\n\n    # 再次判断页面是否存在“跳过”\n    ${exist}  IsAnyTextExisting | 跳过\n    \n    # 如果存在“跳过”，则点击\n    IF  ${exist}\n        Click  跳过\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the \"个\" to the right of \"次日\"",
        "output": "<thought>\n在这个场景中，我们需要点击“次日”右侧的“个”。这意味着我们要使用 ClickTextToTheDirectionOf 关键字，因为我们要在“次日”这个文本的右边找一个文本“个”进行点击。需要确保选择 idx=0，因为默认情况下，我们希望点击第一个找到的符合条件的元素。\n</thought>\n\n<code_block>\n# 点击 次日 右侧的 个\nClickTextToTheDirectionOf | 次日 | right | 个 | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the \"投放渠道\" filter box and clear its contents.",
        "output": "<thought>\n给出的场景是点击\"投放渠道\"筛选框并清除其内容。在这个场景中，我们需要首先通过合适的关键字来定位并点击筛选框，然后清除筛选框中的内容。\n\n1. 点击\"投放渠道\"筛选框：可以使用`Click`关键字来点击筛选框。\n2. 清除筛选框内容：可以使用`SetField`关键字将筛选框的内容设置为空，这可以通过传递特殊键`${KEY_BACKSPACE}`来实现。\n\n在这个场景中，我们假设\"投放渠道\"筛选框在页面上有一个可识别的字段名称，如`投放渠道`，我们可以直接使用`SetField`关键字。\n\n所以流程如下：\n- 确定筛选框名称，比如假设为`投放渠道`。\n- 使用`Click`进行点击。\n- 使用`SetField`对其内容进行清除。\n\n如果\"投放渠道\"筛选框不在弹出窗口中或附近有其他特殊标识，直接使用这些关键字即可。\n</thought>\n\n<code_block>\n# 点击投放渠道筛选框\nClick | 投放渠道\n\n# 清空投放渠道筛选框的内容\nSetField | 投放渠道 | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click \"立即新增\" below \"专属Server\"",
        "output": "<thought>\n在这个场景中，我们需要点击位于\"专属Server\"下方的\"立即新增\"。根据提供的关键字信息，\"ClickTextToTheDirectionOf\"关键字最适合用于这种通过相对定位进行点击的场景。具体来说，我们可以使用\"专属Server\"作为基准文本，并选择\"bottom\"方向进行查找和点击\"立即新增\"。\n</thought>\n\n<code_block>\n# 点击 专属Server 下方的 立即新增\nClickTextToTheDirectionOf | 专属Server | bottom | 立即新增\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write the value of the variable ${xx} into the file1.txt file",
        "output": "<thought>\n解决这个问题需要将变量的值写入一个文本文件。在Robot Framework中，可以使用\"Create File\"关键字来创建文件，并写入内容。\"Append To File\"关键字也可以用于追加内容到文件中。由于需求是将变量的值写入文件，选择\"Create File\"会更好，因为它会直接写入而不是追加。首先，我需要确保变量${xx}已经被声明和初始化。然后，我将使用\"Create File\"来完成写入任务。\n</thought>\n\n<code_block>\n# 假设变量${xx}已经被声明和初始化为某个值\n\n# 将变量${xx}的值写入到文件file1.txt\nCreate File  file1.txt  ${xx}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Read the contents from the file1.txt file and write them into the variable ${xx}",
        "output": "<thought>\n为了从文件中读取内容并将其存入变量，我们可以使用Robot Framework中的BuiltIn库和OperatingSystem库中的关键字。具体来说，我们可以使用OperatingSystem库中的\"Get File\"关键字来读取文件内容，然后将结果存入变量中。根据给出的代码示例，可以使用\"Set Variable\"关键字将读取的内容赋值给目标变量。\n</thought>\n\n<code_block>\n# 从文件file1.txt读取内容并赋值给变量${xx}\n${xx}  Get File  file1.txt\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the name of the current test case",
        "output": "<thought>\n为了获取当前用例的名称，我们可以使用Robot Framework中内置的变量`${TEST NAME}`。这个变量会自动包含当前正在执行的测试用例的名称。因此，不需要使用复杂的选择器或自定义关键字，直接使用该内置变量即可解决问题。\n</thought>\n\n<code_block>\n# 获取当前用例的名称\n${test_case_name}  Set Variable  ${TEST NAME}\nLog  当前用例的名称是：${test_case_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the input box above \"请输入\"",
        "output": "<thought>\n在这个场景中，我们需要点击一个位于\"请输入\"上方的input或textarea元素。根据提供的关键字描述，适合的关键字是`ClickElemToTheDirectionOf`，因为我们需要指定基准元素的方向，然后对该方向上的元素进行操作。在这里，我们将使用\"请输入\"作为基准，然后向上方寻找满足条件的input或textarea元素。\n</thought>\n\n<code_block>\n# 点击 请输入 上方的 input 或 textarea\nClickElemToTheDirectionOf | 请输入 | top | input,textarea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the first element with the class \"semi-icons semi-icons-caretdown semi-icons-small\"",
        "output": "<thought>\n在这个场景中，我们需要点击第一个符合特定class选择器的元素。指定的类名是\"semi-icons semi-icons-caretdown semi-icons-small\"。我们可以使用RF提供的ClickElem关键字，并结合jQuery选择器来定位该元素。需要注意的是，由于jQuery选择器返回的是零基索引的元素，因此要点击第一个元素，我们需要使用:eq(0)。\n</thought>\n\n<code_block>\n# 点击第一个class等于semi-icons semi-icons-caretdown semi-icons-small的元素\nClickElem | [class=\"semi-icons semi-icons-caretdown semi-icons-small\"]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Split the result ${res_str} into a list using a comma as the delimiter",
        "output": "<thought>\n为了实现将字符串`${res_str}`分割成一个列表，我们可以使用Robot Framework的内置关键字`Split String`。该关键字能够将一个字符串根据指定的分隔符分割为一个列表。在这个场景中，我们将使用`,`作为分隔符。以下就是实现这一功能的代码。\n</thought>\n\n<code_block>\n# 将返回的结果 ${res_str} 分割成list，用,分隔\n${result_list}=    Split String    ${res_str}    ,\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Trim the leading and trailing spaces from the string, split it into a list, and then loop through the list to print each element",
        "output": "<thought>\n这个任务要求将字符串去掉前后空格后，切割成列表然后循环打印。首先，我们可以使用Python内建的字符串方法来去掉前后空格，接着可以使用split方法将字符串切割成列表。最后，我们需要循环地打印列表中的每个元素。由于Robot Framework本身并没有直接的字符串处理关键字，但是提供了Evaluate关键字，可以执行Python代码，我们可借此来实现去除空格并分割的操作。对于打印操作，Robot Framework可以直接使用Log关键字。\n</thought>\n\n<code_block>\n# 定义字符串变量\n${input_string}=    Set Variable    示例字符串 前后有空格\n\n# 去掉前后空格并切割成列表\n@{string_list}=    Evaluate    ${input_string}.strip().split()\n\n# 循环打印列表中的每个元素\nFOR    ${element}    IN    @{string_list}\n    Log    ${element}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search for all POST requests sent to https://qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery and verify that the \"message\" in the response is \"success\"",
        "output": "<thought>\n在这个场景中，我们需要完成以下几个任务：\n1. 使用 `Search Requests` 关键字搜索发送到特定 URL 的所有 POST 请求。\n2. 对于每一个请求，我们需要检查响应消息中的 \"message\" 字段。\n3. 验证 \"message\" 是否等于 \"success\"。\n\n我们可以先使用 `Search Requests` 关键字来获取所有匹配条件的请求响应数据，然后使用 `GetValuesFromJson` 关键字提取响应中的 \"message\" 字段，最后使用 `Should Be Equal As Strings` 来验证 \"message\" 是否为 \"success\"。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery 且请求方式为 POST 的所有请求\n${responses}  Search Requests  qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery  POST  all\n\n# 对于搜索到的每一个响应，校验 message 是否为 success\nFOR  ${resp}  IN  @{responses}\n    ${message}  GetValuesFromJson  ${resp}  message\n    Should Be Equal As Strings  ${message}  success\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search for all POST requests sent to https://qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery and verify that in the response, the \"status_code\" within the \"data\" field is 200 and the \"message\" is \"success\"",
        "output": "<thought>\n首先，我们需要搜索发送到指定URL的POST请求，然后从每个响应中提取data字段。接着，需要检查这些响应中的status_code是否都是200，并且message字段是否都是\"success\"。我们可以使用Search Requests关键字来找到这些请求，然后使用GetValuesFromJson关键字从响应中提取所需字段的值。最后，我们可以使用Should Be Equal As Strings关键字来验证这些字段的值是否符合预期。\n</thought>\n\n<code_block>\n# 搜索请求URL包含 https://qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery 的所有POST请求\n${all_responses}  Search Requests  qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery  POST  all\n\n# 对于每一个响应，校验data字段的status_code是200，message是\"success\"\nFOR  ${resp_json}  IN  @{all_responses}\n    ${status_code}  GetValuesFromJson  ${resp_json}  data:status_code\n    ${message}  GetValuesFromJson  ${resp_json}  data:message\n    Should Be Equal As Strings  ${status_code}  200\n    Should Be Equal As Strings  ${message}  success\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that \"dp.data_service.api\" exists within ${value}",
        "output": "<thought>\n在这个场景中，我们需要校验变量`${value}`中是否包含字符串`dp.data_service.api`。RF提供了一个名为`Should Contain`的关键字可以用来验证一个字符串是否包含在另一个字符串中，因此我们可以直接使用这个关键字来实现这次校验。\n</thought>\n\n<code_block>\n# 校验变量${value}中包含字符串'dp.data_service.api'\nShould Contain  ${value}  dp.data_service.api\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Invoke the keyword 校验任务中心单据 and verify that the return value is 存在",
        "output": "<thought>\n为了完成这个任务，我们需要调用一个名为`校验任务中心单据`的关键字，并校验其返回值为“存在”。在Robot Framework中，我们可以通过直接调用关键字并获取其返回值，然后使用`Should Be Equal As Strings`关键字来比较返回值和期望的字符串“存在”。这是一个典型的关键字调用和返回值校验的任务。\n</thought>\n\n<code_block>\n# 调用关键字 校验任务中心单据，并将返回值存储在变量 ${result} 中\n${result}  校验任务中心单据\n\n# 校验返回值为 \"存在\"\nShould Be Equal As Strings  ${result}  存在\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the arrow to the right of '旗下主播总音浪(火力)'",
        "output": "<thought>\n在这个问题中，我们需要点击与“旗下主播总音浪(火力)”文本右侧的箭头。可以使用`ClickIconToTheDirectionOf`关键字，给定`the_base`为“旗下主播总音浪(火力)”，给定方向为`right`，目标图标为箭头。假设箭头图标标识为`arrow`。\n</thought>\n\n<code_block>\n# 点击“旗下主播总音浪(火力)”右边的箭头图标\nClickIconToTheDirectionOf | 旗下主播总音浪(火力) | right | arrow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Upload the file: https://tosv.byted.org/obj/giraffe-longtime-tos/2025_02_11_14_50_13_XlmP_海鸥飞.png, and click the input box to the left of 导出数据",
        "output": "<thought>\n首先，根据问题描述，我们需要执行两个操作：上传文件和点击元素。第一个操作是上传指定的文件URL，这可以通过`UploadFile`关键字完成。接着，需要点击文本“导出数据”左侧的输入框或文本区域。要实现这个操作，可以使用`ClickElemToTheDirectionOf`关键字，指定方向为`left`，选择器为`input,textarea`。\n</thought>\n\n<code_block>\n# 上传文件\nUploadFile | https://tosv.byted.org/obj/giraffe-longtime-tos/2025_02_11_14_50_13_XlmP_海鸥飞.png\n\n# 点击导出数据左侧的 input 或 textarea\nClickElemToTheDirectionOf | 导出数据 | left | input,textarea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the input box to the right of the third '运营经纪人'",
        "output": "<thought>\n为了完成这一任务，首先需要通过文本“运营经纪人”定位到基准元素。然后，我需要在这个基准元素的右侧寻找目标元素。在问题描述中，我们需要点击的是第三个“运营经纪人”右侧的input/textarea元素。这意味着我们需要用`ClickElemToTheDirectionOf`关键字来实现这个操作，并指定`right`方向和idx为2（因为索引从0开始）。\n</thought>\n\n<code_block>\n# 点击第三个运营经纪人右侧的input/textarea元素\nClickElemToTheDirectionOf | :contains(运营经纪人):eq(2) | right | input,textarea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Wait for 批量上传多个合同文件 to appear, then close the current window",
        "output": "<thought>\n在此场景中，需要等待页面上出现“批量上传多个合同文件”文本，然后执行关闭当前窗口的操作。根据给定的关键字列表，首先使用`WaitText`来等待指定文本出现，之后使用`Close Window`来关闭当前浏览器窗口。\n</thought>\n\n<code_block>\n# 等待页面上出现“批量上传多个合同文件”\nWaitText | 批量上传多个合同文件\n\n# 关闭当前窗口\nClose Window\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click '生成长图' to the right of '聊天室', then click '导出数据' to the right of '嘉宾榜'",
        "output": "<thought>\n在这个场景中，我们需要点击两个不同的元素，分别是“聊天室”右侧的“生成长图”和“嘉宾榜”右侧的“导出数据”。根据提供的关键字，最合适的选择是使用`ClickTextToTheDirectionOf`，因为我们要基于相对位置（右侧）来找到并点击目标文本。因此，第一个操作是找到文本“聊天室”右侧的“生成长图”，第二个操作是找到文本“嘉宾榜”右侧的“导出数据”。\n</thought>\n\n<code_block>\n# 点击聊天室右侧的生成长图\nClickTextToTheDirectionOf | 聊天室 | right | 生成长图\n\n# 点击嘉宾榜右侧的导出数据\nClickTextToTheDirectionOf | 嘉宾榜 | right | 导出数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the \"复制\" button within the element whose class contains either “${contract_list}” or “${contract_list_button}”",
        "output": "<thought>\n在给定的场景中，我们需要点击 \"复制\" 按钮，该按钮位于 class 属性包含 `${contract_list}` 或者 `${contract_list_button}` 的元素中。根据关键字说明，我们可以使用 `ClickElem` 关键字，通过构造合适的 jQuery 选择器来实现这个需求。\n\n首先，我们需要设计一个符合条件的选择器。`[class*=${contract_list}]` 和 `[class*=${contract_list_button}]` 是我们根据 class 属性选择元素的方式。为了选择 \"复制\" 按钮，我们可以进一步缩小选择范围，假设 \"复制\" 按钮是这些元素中的一部分（例如一个包含 \"复制\" 文本的按钮），可以构造选择器 `button:contains(复制)` 来定位具体的按钮。\n\n因此，选择器可以构造为 `[class*=${contract_list}] button:contains(复制), [class*=${contract_list_button}] button:contains(复制)`。接下来，我们使用 `ClickElem` 来点击获得的第一个符合条件的元素。\n</thought>\n\n<code_block>\n# 点击 class 包含 ${contract_list} 或 ${contract_list_button} 中的 \"复制\" 按钮\nClickElem | [class*=${contract_list}] button:contains(复制), [class*=${contract_list_button}] button:contains(复制)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Wait for the \"复制\" button to appear in the area where the class includes either ${contract_list_button} or ${class1}",
        "output": "<thought>\n要等待在某个包含特定class的区域中出现某个按钮，我们需要构造一个jQuery选择器来找到该按钮所在的元素。这里提到了一个变量`${contract_list_button}`，它应该是一个字符串，代表需要的class名称。假设复制按钮的标识是通过按钮的文本内容（如“复制”）来定位，那我们可以使用`:contains`选择器来定位。此外，由于不清楚复制按钮具体在该区域的第几个位置，如果没有特别指明就用默认选择第一个，可以省略`:eq`。\n\n关键字 `WaitElem` 能够结合 jQuery 选择器，等待某个元素出现，可以用来解决这个场景。\n</thought>\n\n<code_block>\n# 等待class中包括${contract_list_button}的区域中出现复制按钮\nWaitElem  | [class*=\"${contract_list_button}\"] :contains(\"复制\")\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Execute the local command: `make approve_sourcing`",
        "output": "<thought>\n对于这个问题，我们需要在RF中执行一个本地命令 `make approve_sourcing`。Robot Framework 的 `OperatingSystem` 库提供了一个名为 `Run` 的关键字，可以用于在测试期间执行本地系统命令。因此，我们可以直接使用 `Run` 来执行该命令。\n</thought>\n\n<code_block>\n# 执行本地命令 make approve_sourcing\nRun | make approve_sourcing\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Execute the shell command: `ls -la`",
        "output": "<thought>\n在Robot Framework中，为了执行shell命令，我们可以使用OperatingSystem库中的Run关键字。根据提示，${output}变量用于存储命令执行后的输出。因此，我们需要调用Run关键字并传递要执行的shell命令，即\"ls -la\"。为了确保代码的可读性和清晰性，我们应该在代码中添加注释，以指明使用了哪种关键字和为何使用它。\n</thought>\n\n<code_block>\n# 使用OperatingSystem库中的Run关键字执行shell命令`ls -la`\n${output}  Run | ls -la\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Define a list with \"调度策略\" and \"成本优先策略\"",
        "output": "<thought>\n为了解决这个问题，我需要创建一个包含两个策略的列表变量。在Robot Framework中，可以使用“Create List”关键字来创建列表变量。列表中的每个元素可以是一个字符串，代表不同的策略。在这个特定的场景中，我们需要在列表中包含“调度策略”和“成本优先策略”。使用“Create List”关键字可以有效地创建这样的变量。\n</thought>\n\n<code_block>\n# 创建包含两个策略的列表变量\n@{策略列表}  Create List  调度策略  成本优先策略\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "1. Iterate through the list and get each value.  \n2. Wait for the page to load completely.  \n3. Check if the page contains the value.  \n4. If the value is present, click on each occurrence of the value on the page in sequence",
        "output": "<thought>\n为了解决这个问题，我们需要遵循以下步骤：\n\n1. 遍历列表并获取每一个值。这可以通过Python的循环或内建关键字实现。\n2. 确保页面加载完成，这可以通过 `WaitLoading` 关键字实现。\n3. 对于列表中的每一个值，判断页面是否存在该值。我们可以使用 `IsAnyTextExisting` 关键字来实现。\n4. 如果页面中包含该值，则依次点击页面中的该值。我们可以使用 `Click` 关键字完成此操作。\n\n在实现过程中，我们会使用Robot Framework的内置Python语法为循环和判断构建逻辑。\n</thought>\n\n<code_block>\n# 定义一个列表，列表中包含需要验证的值\n${list}  Create List  value1  value2  value3\n\n# 遍历列表中的每个值\nFOR  ${value}  IN  @{list}\n    # 等待页面加载完成\n    WaitLoading\n\n    # 判断页面是否存在当前的值\n    ${exist}  IsAnyTextExisting  ${value}\n    \n    # 如果存在则点击该值\n    IF  ${exist}\n        Click  ${value}\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on the 30 below 00",
        "output": "<thought>\n为了点击文本\"00\"下方的文本\"30\"，我们可以使用ClickTextToTheDirectionOf关键字。这个关键字需要指定基准元素、方向和目标文本。基于题目要求，基准元素是文本\"00\"，方向是下方，所以使用\"bottom\"。需要确保如果存在多个\"30\"，应选择正确的idx。\n</thought>\n\n<code_block>\n# 点击 00 下方的 30\nClickTextToTheDirectionOf | 00 | bottom | 30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Read the contents of the file `variables.yaml` and save it to a variable",
        "output": "<thought>\n在Robot Framework中，可以使用BuiltIn库的`Get File`关键字来读取文件的内容。该关键字会直接读取文件内容，并返回为字符串。我们可以将读取的内容放入一个变量中以便后续使用。\n</thought>\n\n<code_block>\n# 从文件variables.yaml读取内容并存入变量\n${file_content}  Get File  variables.yaml\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Read the contents of the variables.yaml file to obtain the value of the DB_NAME field",
        "output": "<thought>\n在这个场景中，我们需要读取一个YAML文件`variables.yaml`，并获取其中的字段`DB_NAME`的值。在Robot Framework中，通常会使用`YAMLLibrary`来处理YAML文件。然而，由于目前我们没有提供合适的内建或自定义关键字，我们可以使用Python代码的执行来读取YAML文件并提取所需字段。这可以通过`Evaluate`来执行Python代码完成。\n</thought>\n\n<code_block>\n# 从YAML文件中获取`DB_NAME`字段的值\n&{yaml_data}  Evaluate  yaml.safe_load(open('variables.yaml'))  modules=yaml\n${db_name}  Set Variable  ${yaml_data['DB_NAME']}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Determine whether the current page title is \"物料下载\"",
        "output": "<thought>\n要判断当前页面的标题是否为\"物料下载\"，我们需要获取页面的标题并进行比较。Robot Framework 中有一个内置库叫做 \"SeleniumLibrary\"，它提供了一个关键字 \"Title Should Be\" 可以直接用于检查页面标题是否符合预期。因此，我们可以直接使用这个关键字来完成任务。\n</thought>\n\n<code_block>\n# 检查当前页面标题是否为\"物料下载\"\nTitle Should Be    物料下载\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on the \"扫码数据\" in the left menu to enter the \"扫码数据菜单\"",
        "output": "<thought>\n解决这个问题的思路是首先根据提供的关键词，找到一个可以帮助我们点击菜单的关键字。在给定的关键词中，`ClickMenu`可以用于点击菜单路径。因此，我们可以使用`ClickMenu`依次点击\"扫码数据\"来进入相应的页面。\n</thought>\n\n<code_block>\n# 点击左侧菜单\"扫码数据\"，然后进入\"扫码数据菜单\"\nClickMenu | 扫码数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Determine whether the current page title is \"物料下载\" and check if the page contains the tabs: 优惠码, 评价码, 商品码, 投稿码, 预约直播码, and 职人码",
        "output": "<thought>\n要判断页面标题是否为\"物料下载\"，可以使用`IsTitleContains`关键字。为了验证页面中是否存在所有指定的tab文案，我们可以使用`CheckHasText`关键字，因为它可以校验页面同时包含指定的多个文本。这样可以有效地确定页面上的这些tab是否都存在。\n</thought>\n\n<code_block>\n# 判断页面标题是否为“物料下载”\n${status}  IsTitleContains  物料下载\nShould Be True  ${status}  # 如果标题不准确，这一步会失败\n\n# 校验页面存在指定的所有tab文案\nCheckHasText  优惠码  评价码  商品码  投稿码  预约直播码  职人码\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Determine whether the header names of the \"历史补贴\" list on the current page are: 补贴规则, 补贴类型, 任务类型, 规则状态, 参与状态, and 规则生效时间",
        "output": "<thought>\n首先，我们需要获取历史补贴这个列表的表头行，来判断其是否包含指定的文案。使用`GetRowValues`可以获取特定行的所有列内容。因为是获取表头行的内容，所以在这个场景中可以使用特殊值`HEAD`来表示表头行。然后，我们可以使用`Evaluate`来执行Python代码判断获取的表头内容是否包含所有指定文案。\n</thought>\n\n<code_block>\n# 获取历史补贴列表的表头行的内容\n@{header_values}  GetRowValues | HEAD | tbl=历史补贴\n\n# 定义期望的表头名称列表\n@{expected_headers}  Create List  补贴规则  补贴类型  任务类型  规则状态  参与状态  规则生效时间\n\n# 判断表头是否包含指定的文案\n${result}  Evaluate  all(item in $header_values for item in ['补贴规则', '补贴类型', '任务类型', '规则状态', '参与状态', '规则生效时间'])\n\n# 如果包含，打印成功，否则打印失败\nIF  ${result}\n    Log  表头包含所有指定文案\nELSE\n    Log  表头不包含所有指定文案\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Determine whether the current page contains the text \"当前生效补贴\" and \"历史补贴\"",
        "output": "<thought>\n为了校验页面是否同时包含两个指定的文本，我们可以使用Robot Framework的专用关键字来实现这一功能。在这里，我们可以利用`CheckHasText`关键字。该关键字可以直接校验页面中是否包含多个给定的文本。我们将在代码中直接应用这个关键字来满足场景中的需求。\n</thought>\n\n<code_block>\n# 校验页面同时包含文本 \"当前生效补贴\" 和 \"历史补贴\"\nCheckHasText  当前生效补贴  历史补贴\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on the first row, second column of the table",
        "output": "<thought>\n对于这个场景，我们需要点击表格中的一个特定单元格，第1行和第2列的交集就是该特定单元格。在给出的关键字列表中，`ClickTextOfCell` 和 `ClickElemOfCell` 都可以用来点击单元格内的文本或元素。因为没有给定单元格内具体的文本或元素信息，我们可以选择点击单元格中的任意位置。为此，我们可以使用默认的参数来点击单元格中的任何文本或元素。\n</thought>\n\n<code_block>\n# 点击表格第1行、第2列的单元格中的任意元素\nClickElemOfCell | 1 | 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on '请输入成本归属部门' and then select '抖音-运营-影视综'",
        "output": "<thought>\n在这个场景中，我们需要先点击一个文本‘请输入成本归属部门’，然后从下拉选项中选择‘抖音-运营-影视综’。我们可以使用`Click`关键字来点击文本，然后使用`SelectOption`关键字来选择特定的选项。具体操作步骤如下：\n1. 使用`Click`关键字点击‘请输入成本归属部门’。\n2. 使用`SelectOption`关键字选择‘抖音-运营-影视综’。\n</thought>\n\n<code_block>\n# 点击 '请输入成本归属部门'\nClick | 请输入成本归属部门\n\n# 选择 '抖音-运营-影视综' 选项\nSelectOption | 抖音-运营-影视综\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "In the \"选择你的公司\" selector on the page, select the first option \"北京巨量引擎网络技术有限公司\"",
        "output": "<thought>\n想要在页面中选择“北京巨量引擎网络技术有限公司”，首先需要确认该元素是在一个选择器中。这种情况下，使用`SelectOption`关键字来选择特定选项。如果是一个特定字段内的选择器，可以使用`SelectOptionForField`。我们假设“你的公司”是一个页面字段，因此可以使用`SelectOptionForField`关键字直接选择该选项。需要确保选择器的选项文本与目标一致。\n</thought>\n\n<code_block>\n# 在“你的公司”选择器中选择\"北京巨量引擎网络技术有限公司\"\nSelectOptionForField | 你的公司 | 北京巨量引擎网络技术有限公司\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "In the pop-up window, perform the following action: in the \"项目类型\" field, enter \"无量化目标与收益\"",
        "output": "<thought>\n为了在弹窗中操作并输入\"无量化目标与收益\"到项目类型字段，可以使用`SetField`关键字。因为操作是在弹窗中进行的，所以应使用参数`base=POPUP`。`SetField`关键字适用于填写字段，这是最合适的选择。\n</thought>\n\n<code_block>\n# 在弹窗中输入无量化目标与收益到项目类型字段\nSetField | 项目类型 | 无量化目标与收益 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Write a function called \"下载插件\" that accepts a parameter `names`. The logic is as follows:\n\nFor each `name` in `names`:\n1. Enter `name` in the \"请输入插件名称关键词\" input field and press Enter.\n2. Click the '下载' icon in the row of the table corresponding to `name`",
        "output": "<thought>\n我们需要创建一个名为“下载插件”的关键字，该关键字接受一个参数`names`，并依次处理每个`name`。处理的逻辑为：在一个特定的输入框中输入`name`并回车，然后在表格行中点击与`name`对应的“下载”icon。\n\n首先，我们需要使用`SetField`关键字来填写插件名称的关键词输入框，并设置`enter=True`以模拟回车操作。接下来，使用`ClickIconOfRow`关键字在表格行中点击“下载”icon。\n\n为确保关键字的灵活性和可复用性，应该迭代处理传入的`names`参数列表。Robot Framework的`FOR`循环语法可以很方便地实现这个逻辑。\n</thought>\n\n<code_block>\n*** Keywords ***\n下载插件\n    [Arguments]  @{names}\n    FOR  ${name}  IN  @{names}\n      # 在请输入插件名称关键词中输入name并回车\n      SetField  插件名称关键词  ${name}  enter=True\n      # 点击name表格行中的‘下载’icon\n      ClickIconOfRow  ${name}  下载\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the values from the \"资源类型\" selector on the right side, not the placeholder",
        "output": "<thought>\n首先，我们需要定位到\"资源类型\"字段。根据描述，它是一个选择器，我们需要获取其值而不是placeholder。为了实现这一点，可以使用`GetFieldVal`关键字，该关键字可以获取字段关联的页面控件的值。\n</thought>\n\n<code_block>\n# 获取 '资源类型' 字段的值\n${res_type_val}  GetFieldVal | 资源类型\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Use OCR to obtain the values of the 资源类型",
        "output": "<thought>\n在这个场景中，我们需要获取资源类型字段的值，并且明确要求使用OCR，即通过光学字符识别方式来获取字段关联的页面控件的值。通过查看提供的关键字列表，可以使用GetFieldVal关键字来实现这个功能，其中use_ocr参数设置为True。没有其他复杂的操作，直接调用关键字即可完成任务。\n</thought>\n\n<code_block>\n# 使用OCR方式获取资源类型字段的值\n${val}  GetFieldVal | 资源类型 | use_ocr=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Create a function named \"登录来客首页_12342914357_step_1\" with the following logic:\n\n1. Enter `{12342914357_name}` in the \"手机号码\" field and `{12342914357_password}` in the \"密码\" field.\n2. Check the box for \"已阅读并同意用户协议和隐私条款\" and click \"登录\"",
        "output": "<thought>\n这个任务需要在登录页面输入手机号码和密码，然后勾选用户协议复选框并点击登录。这可以通过几个关键字来实现：\n\n1. 使用`SetField`关键字输入手机号码和密码。\n2. 使用`CheckBoxOn`关键字来勾选“已阅读并同意用户协议和隐私条款”。\n3. 使用`Click`关键字点击“登录”按钮。\n\n具体实现时，我们需要：\n- 确定手机号码和密码输入区域的名称，以便使用`SetField`。\n- 确认“已阅读并同意用户协议和隐私条款”的复选框的名称或标识。\n- “登录”按钮的文本或标识符，用于`Click`关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n登录来客首页_12342914357_step_1\n    [Arguments]  ${12342914357_name}  ${12342914357_password}\n    # 输入手机号码和密码\n    SetField  手机号码  ${12342914357_name}\n    SetField  密码  ${12342914357_password}\n    \n    # 勾选已阅读并同意用户协议和隐私条款\n    CheckBoxOn  已阅读并同意用户协议和隐私条款\n    \n    # 点击登录\n    Click  登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the current page URL, then print the current page cookies",
        "output": "<thought>\n根据任务要求，我们需要使用RobotFramework来获取当前页面的URL以及打印当前页面的cookies。首先可以使用GetCurrentUrl关键字来获取URL。然后，利用SeleniumLibrary中的Get Cookies关键字来获取cookies并打印。通过使用Builtin库中的Log关键字，我们可以将cookies输出到日志，以便查看。\n</thought>\n\n<code_block>\n# 获取当前页面的URL\n${url}  GetCurrentUrl\n\n# 打印当前页面的cookie\n${cookies}  Get Cookies\nLog  ${cookies}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the current page URL and cookies",
        "output": "<thought>\n需要使用RobotFramework来获取当前页面的URL以及页面的cookies。首先可以使用GetCurrentUrl关键字来获取URL。然后，利用SeleniumLibrary中的Get Cookies关键字来获取cookies。\n</thought>\n\n<code_block>\n# 获取当前页面的URL\n${url}  GetCurrentUrl\n\n# 获取当前页面的cookie\n${cookies}  Get Cookies\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click on \"前 30 名\", then \"前 10 名\", \"自定义\", \"前 50 名\", and finally \"前 100 名\" in sequence",
        "output": "<thought>\n根据提供的关键字列表，我们可以使用ClickTextOneByOne关键字来依次点击给定的多个文本。该关键字适合用于依次点击一组文本，并且可以指定基准元素，但在此场景中不需要指定基准元素。为此场景，可以直接将这些文本作为参数传递给ClickTextOneByOne关键字。\n</thought>\n\n<code_block>\n# 依次点击前 30 名,前 10 名,自定义,前 50 名,前 100 名\nClickTextOneByOne | 前 30 名 | 前 10 名 | 自定义 | 前 50 名 | 前 100 名\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Clear the \"成本归属部门\" input field.  \nEnter \"抖音-运营-影视综\" in the \"成本归属部门\" field and select the department.  \nClick on \"项目类型\" and choose \"无量化目标与收益\".  \nClick \"确定\"",
        "output": "<thought>\n首先需要清空成本归属部门的输入框或文本区域，可以使用`SetField`关键字与`${KEY_BACKSPACE}`来达到清空的效果。接下来，需要在成本归属部门中输入具体的文本“抖音-运营-影视综”，并利用`SendText`来完成这个操作。随后，假设需要选择该文本选项，使用`SelectOption`关键字。接下来，点击项目类型，可以使用`Click`关键字。然后选择项目类型“无量化目标与收益”，可以使用`SelectOption`。最后，点击确定按钮，使用`Click`关键字。\n</thought>\n\n<code_block>\n# 清空成本归属部门字段的内容\nSetField | 成本归属部门 | ${KEY_BACKSPACE}\n\n# 在成本归属部门中输入“抖音-运营-影视综”\nSetField | 成本归属部门 | 抖音-运营-影视综\n\n# 选择成本归属部门的选项\nSelectOption | 抖音-运营-影视综\n\n# 点击项目类型\nClick | 项目类型\n\n# 选择 '无量化目标与收益'\nSelectOption | 无量化目标与收益\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check if the text in the selector to the right of \"资源类型\" is empty",
        "output": "<thought>\n为了检查资源类型右侧的选择器里的文本是否为空，首先需要获取这个字段的当前值。可以使用`GetFieldVal`关键字来获取字段值，然后使用`Should Be Empty`关键字来校验获取到的值是否为空。\n</thought>\n\n<code_block>\n# 获取资源类型字段的值\n${value}=  GetFieldVal  资源类型\n\n# 校验资源类型字段的值为空\nShould Be Empty  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the value of the '使用率（金额' field and verify that it contains: 55",
        "output": "<thought>\n首先，题目要求获取字段‘使用率（金额’的值，然后校验此值中是否包含‘55’。因此，可以按照以下步骤实现：\n\n1. 使用`GetFieldVal`关键字获取字段‘使用率（金额’的值。\n2. 使用`Should Contain`关键字校验获取的值中是否包含‘55’。\n\n这两步已经涵盖了题目中的所有要求。\n</thought>\n\n<code_block>\n# 获取字段‘使用率（金额’的值\n${value}  GetFieldVal  使用率（金额\n\n# 校验获取的值中是否包含‘55’\nShould Contain  ${value}  55\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get the current timestamp in seconds and verify whether the text \"UI自动化${timestamp}\" exists",
        "output": "<thought>\n要获取当前时间的秒级时间戳，可以使用RF的`Get Current Date`关键字或Python代码执行当前时间的获取。然后，我们需要构造要校验的文本`UI自动化${timestamp}`，并使用`IsAnyTextExisting`关键字来检查页面上是否存在该文案。\n</thought>\n\n<code_block>\n# 使用Python获取当前时间的秒级时间戳\n${timestamp}=  Evaluate  int(time.time())  time\n\n# 构造要校验的文案\n${ui_text}  Set Variable  UI自动化${timestamp}\n\n# 判断页面上是否存在该文案\n${exist}  IsAnyTextExisting  ${ui_text}\n\n# 如果存在，记录日志确认\nIF  ${exist}\n    Log  文案UI自动化${timestamp}存在\nELSE\n    Log  文案UI自动化${timestamp}不存在\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If \"立即新增\" exists on the page, click on \"专属Server\". If \"立即新增\" is not present, wait for 30 seconds. Repeat this process up to 20 times",
        "output": "<thought>\n首先，通过使用IsAnyTextExisting关键字判断页面上是否存在\"立即新增\"文本。如果存在，则使用ClickTextToTheDirectionOf关键字点击\"专属Server\"右下方的\"立即新增\"。如果不存在，则使用Sleep关键字等待30秒。这一过程需要在一个循环中执行最多20次，因此可以使用一个计数器和Robot Framework的内置IF/ELSE结构来实现。\n</thought>\n\n<code_block>\n# 初始化计数器为0\n${counter}  Set Variable  0\n\n# 开始重复最多20次的循环\nWHILE  ${counter} < 20\n    # 检查页面上是否存在文本\"立即新增\"\n    ${exist}=  IsAnyTextExisting  立即新增\n    IF  ${exist}\n        # 如果存在，点击\"专属Server\"右下方的\"立即新增\"\n        ClickTextToTheDirectionOf  专属Server  bottomRight  立即新增\n        # 跳出循环\n        BREAK\n    ELSE\n        # 如果不存在，等待30秒\n        Sleep  30s\n    END\n    # 增加计数器\n    ${counter}  Set Variable  ${counter + 1}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Retrieve the contents of the '客户信息' table",
        "output": "<thought>\n为了获取客户信息表格的内容，我们需要循环遍历表格的每一行，并获取每一行的值。首先，我们使用GetRowCount关键字来获取表格的总行数。然后，我们可以使用一个循环，从第一行到最后一行，依次调用GetRowValues关键字来获取每行的值。获取到的每行内容可以存储在一个列表中，以便后续使用。\n</thought>\n\n<code_block>\n# 获取客户信息表格的总行数\n${total_rows}  GetRowCount | tbl=客户信息\n\n# 初始化客户信息列表\n@{customer_info_list}  Create List\n\n# 循环获取每一行内容\nFOR  ${row_index}  IN RANGE  1  ${total_rows}+1\n    # 获取当前行的值\n    @{row_values}  GetRowValues | ${row_index} | tbl=客户信息\n\n    # 将当前行的值加入客户信息列表\n    Append To List  ${customer_info_list}  ${row_values}\nEND\n\n# 打印获取的客户信息列表\nLog  ${customer_info_list}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check if the first row of the table contains \"张三\". If it does, click on \"李四\"",
        "output": "<thought>\n首先，我们需要判断表格的第一行中是否包含“张三”。这可以通过关键字`IsRowContainsText`来实现。根据需求，如果第一行包含“张三”，我们就需要点击文本“李四”。为此，我们可以使用`Click`关键字来完成操作。使用`IF`语句来确保只有在包含“张三”时才执行点击操作。\n</thought>\n\n<code_block>\n# 判断表格第一行中是否存在\"张三\"\n${exist}  IsRowContainsText | 1 | 张三\n\n# 如果存在张三，就点击李四\nIF  ${exist}\n    Click  李四\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If the table contains \"张三\", then click on \"建联\"",
        "output": "<thought>\n要解决这个问题，首先需要判断表格中是否包含文本'张三'。可以使用关键字`IsAnyTextExisting`或`IsRowContainsText`来确认'张三'是否存在于表格中。假设这是一个单表格，我们可以直接用`IsRowContainsText`来判断。如果存在，就使用`Click`关键字来点击'建联'按钮。\n</thought>\n\n<code_block>\n# 判断表格中是否有“张三”这一行\n${exist}  IsRowContainsText | 张三\n\n# 如果存在张三，则点击“建联”\nIF  ${exist}\n    Click  建联\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Enter `${current_date}` in the \"开始日期\" field and `${yesterday_date}` in the \"结束日期\" field",
        "output": "<thought>\n在这个任务中，我们需要在页面中输入开始日期和结束日期。这可以通过使用`SetField`关键字来实现，其中开始日期的字段名和结束日期的字段名我们假设是“开始日期”和“结束日期”。假设我们已经通过其他方式计算出当前日期`${current_date}`和昨天的日期`${yesterday_date}`。\n</thought>\n\n<code_block>\n# 设置开始日期为当前日期\nSetField | 开始日期 | ${current_date}\n\n# 设置结束日期为昨天日期\nSetField | 结束日期 | ${yesterday_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Get January 1st of the current year, formatted as y-m-d",
        "output": "<thought>\n要获取当前年份的1月1号的日期，可以使用Robot Framework内置的时间处理关键字。首先，我们需要获取当前年份，然后构造1月1号的日期。`Get Current Date`关键字可以用来获取当前的完整日期。之后，我们可以使用`Convert Date`或其他时间处理方法来修改日期为1月1号。\n</thought>\n\n<code_block>\n# 获取当前年份\n${current_year}  Get Current Date  result_format=%Y\n\n# 构造1月1号的日期\n${first_day_of_year}  Set Variable  ${current_year}-01-01\n\n# 打印结果，格式为 年-月-日\nLog  ${first_day_of_year}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Check whether [10004] exists within ${target_status_code}",
        "output": "<thought>\n在这个场景中，我们需要校验一个变量`${target_status_code}`中是否存在特定数字`10004`。对于这种字符串或列表中是否包含某个元素的校验，RF提供的`Should Contain`关键字非常合适。它能够直接校验一个变量是否包含指定的子字符串或元素，因此可以直接使用这个关键字进行校验。\n</thought>\n\n<code_block>\n# 校验变量${target_status_code}中是否包含字符串\"10004\"\nShould Contain  ${target_status_code}  10004\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Iterate through the ${status_code_list} to check whether 3 exists",
        "output": "<thought>\n要遍历列表并检查是否存在特定的元素，我们可以利用RF的条件语句及列表处理功能。在这里，我们需要检查列表`${status_code_list}`中是否存在元素`3`。RF中可以通过`${list}`来简化条件判断，使代码更具可读性。我们可以利用`FOR`循环遍历列表中的元素，并在循环中使用`Should Be Equal As Strings`来判断当前元素是否等于`3`，如果发现匹配项，在循环中记录一个标志变量即可。使用内置的`IF`语句来检查并输出匹配结果。\n</thought>\n\n<code_block>\n# 遍历${status_code_list}列表内是否存在3\n${exist} =  Set Variable  False\nFOR  ${code}  IN  @{status_code_list}\n    IF  '${code}' == '3'\n        ${exist}   Set Variable  True\n        Exit For Loop\n    END\nEND\n\n# 输出结果\nIF  ${exist}\n    Log  \"Found 3 in the list.\"\nELSE\n    Log  \"3 does not exist in the list.\"\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the option under \"规格\" that contains \"16GiB\"",
        "output": "<thought>\n在这个场景中，我们需要在规格下方点击包含16GiB的选项。这里需要通过查找\"规格\"文本下方的包含特定文本（16GiB）的元素，并点击它。我们可以使用`ClickTextToTheDirectionOf`关键字来实现这一点，其中基准元素是\"规格\"，方向是`bottom`，目标文本是包含\"16GiB\"的文本。由于没有给出目标文本的确切位置，我们可以尝试选择第一个匹配的元素。\n</thought>\n\n<code_block>\n# 点击规格下方包含16GiB的选项\nClickTextToTheDirectionOf | 规格 | bottom | 16GiB | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Enter \"指标卡基础\" in [placeholder:请选择]",
        "output": "<thought>\n要在指定的输入框中输入文本，需要使用`SetField`关键字。根据问题，需要在占位符为“请选择”的输入框中输入“指标卡基础”。通常RF中没有直接根据占位符选择元素的关键字，因此需要构造一个合适的选择器。假设可以通过基于占位符的选择器来定位该输入框。\n</thought>\n\n<code_block>\n# 输入指标卡基础到占位符为‘请选择’的输入框\nFillArea | input[placeholder='请选择'] | 指标卡基础\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify whether \"这是个评论2025/02/11 15:56:23\" exists within ${new_nogotiat_comment_content} in class",
        "output": "<thought>\n首先，我们需要在页面中找到包含类名为`${new_nogotiat_comment_content}`的元素。在Robot Framework中，使用jQuery选择器可以非常方便地查找这样的元素。然后，我们需要检查在该区域中是否存在特定的文本“这是个评论2025/02/11 15:56:23”。为了完成这一任务，我会使用`CheckHasText`关键字来验证文本是否存在。这个关键字允许我们在指定的基准元素中查找文本。\n</thought>\n\n<code_block>\n# 定义一个选择器，指向包含类名为${new_nogotiat_comment_content}的元素\n${selector}  Set Variable  [class*=\"${new_nogotiat_comment_content}\"]\n\n# 校验在该元素中是否存在特定文本\nCheckHasText  这是个评论2025/02/11 15:56:23  base=${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Create a keyword called \"查询客户信息\" that takes parameters text and value. Its function is to input multiple values: text and value, into the first area where the class contains either index-module__table-format-filter or index-module__searchItem",
        "output": "<thought>\n为了实现查询客户信息的关键字，接收两个参数text和value，我们需要在页面中找到第一个class包含`index-module__table-format-filter`或`index-module__searchItem`的区域，并向该区域输入这两个值。根据提供的关键字列表，`FillArea`关键字可以根据jquery选择器在指定的区域输入多个值。我们可以利用该关键字来完成任务。需要注意的是，jQuery选择器中`:eq(0)`表示选择第一个元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n查询客户信息\n    [Arguments]  ${text}  ${value}\n    # 在第一个 class 含有 index-module__table-format-filter 或 index-module__searchItem 区域中输入参数\n    ${selector}  Set Variable  [class*=index-module__table-format-filter]:eq(0), [class*=index-module__searchItem]:eq(0)\n    FillArea  ${selector}  ${text}  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Mouse hover over the div with the class vc-input-submit",
        "output": "<thought>\n为了完成这个任务，我们需要让鼠标移动到特定的元素上，通常对于这种需求我们可以使用MoToElem关键字。给定元素的选择器是class为vc-input-submit的div，我们可以利用jquery选择器来指定这个元素，因此选择器为div.vc-input-submit。我们将使用MoToElem来实现鼠标的hover行为。\n</thought>\n\n<code_block>\n# 鼠标hover到class为vc-input-submit的div\nMoToElem | div[class=vc-input-submit]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "If the 'ByteArtist 2.0 重磅升级' popup exists, click the first button within the div with the class message-center-card-button",
        "output": "<thought>\n首先，我需要判断页面是否存在“ByteArtist 2.0 重磅升级”的文本，以确定弹窗是否存在。可以使用`IsAnyTextExisting`关键字来判断这个文本是否存在。当确认存在这个文本时，就需要对特定的元素进行操作。根据问题描述，我需要点击class为`message-center-card-button`的div中的第一个button。这个可以通过组合使用`ClickElem`和jQuery选择器来实现。\n</thought>\n\n<code_block>\n# 检查页面是否存在“ByteArtist 2.0 重磅升级”\n${exist}  IsAnyTextExisting | ByteArtist 2.0 重磅升级\nIF  ${exist}\n    # 点击 class 为 message-center-card-button 的 div 中的第一个 button\n    ClickElem  div[class=message-center-card-button] button:eq(0)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the cell in the first row and second column, and then click the dropdown icon.",
        "output": "<thought>\n在这个场景中，我们需要点击表格中第一行和第二列的单元格，然后点击该单元格中的下拉icon。我们可以使用`ClickTextOfCell`或`ClickElemOfCell`来点击单元格，取决于单元格中包含文本还是元素。假设下拉icon是一个特定的小图标，我们可以使用`ClickIconOfCell`来点击该图标。首先点击单元格，然后点击其中的下拉icon。\n</thought>\n\n<code_block>\n# 点击第一行第2列单元格中的任意元素，确保选中单元格\nClickElemOfCell | 1 | 2\n\n# 点击第一行第2列单元格中的下拉icon\nClickIconOfCell | 1 | 2 | dropdown\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the cell in the first row and second column and enter \"预算科目_A0\" into this cell.",
        "output": "<thought>\n在这个任务中，我们需要首先点击表格中的一个特定单元格——第一行的第二列。然后，在这个单元格中输入文本“预算科目_A0”。首先我们会使用`ClickElemOfCell`来点击指定的单元格，接下来我们会使用`FillCell`来向单元格中输入指定内容。\n</thought>\n\n<code_block>\n# 点击第一行第二列的单元格\nClickElemOfCell | 1 | 2\n\n# 在刚刚点击的单元格中输入：预算科目_A0\nFillCell | 1 | 2 | 预算科目_A0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the cell in the fifth row and first column, then enter 收入证明 into the cell",
        "output": "<thought>\n为了完成这个场景，我们需要依次进行以下操作：首先，使用`ClickElemOfCell`关键字来点击表格中的一个特定单元格，这个单元格位于第5行的第1列。然后，使用`FillCell`关键字在这个单元格中输入文本\"收入证明\"。\n</thought>\n\n<code_block>\n# 点击第5行第1列的单元格\nClickElemOfCell | 5 | 1\n\n# 在点击后的单元格中输入\"收入证明\"\nFillCell | 5 | 1 | 收入证明\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Enter 100 into the cell in the first row and second column",
        "output": "<thought>\n在这个场景中，我们需要向表格的特定单元格（第一行，第二列）输入一个值“100”。根据提供的关键字描述，我们可以使用`FillCell`关键字来实现这个功能。这个关键字允许我们指定具体的行和列，然后填写/设置该单元格的值。我们将使用`FillCell | 1 | 2 | 100`来完成此任务，其中“1”表示第一行，“2”表示第二列，“100”是需要输入的值。\n</thought>\n\n<code_block>\n# 向第一行第2列单元格中输入：100\nFillCell | 1 | 2 | 100\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the cell in the third row and fourth column, then enter 55 into the cell",
        "output": "<thought>\n首先，我们需要使用`ClickTextOfCell`关键字来点击表格中第3行第4列的单元格，这个关键字需要提供行号和列号。接着，使用`FillCell`关键字向点击后的单元格中输入数字55。需要确保每个关键字的参数设置正确，确保定位到正确的单元格位置。\n</thought>\n\n<code_block>\n# 点击第3行第4列的单元格\nClickElemOfCell | 3 | 4\n\n# 向选中的单元格中输入55\nFillCell | 3 | 4 | 55\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the dropdown icon in the cell in the first row and second column",
        "output": "<thought>\n在给定的场景中，我们需要点击位于表格第一行第二列中的下拉图标。根据我们所拥有的关键字，我们可以使用`ClickIconOfCell`，因为它用于在指定的单元格中点击小图标。需要指定行号、列号和目标图标。假设图标的名称是“down”，那么我们可以通过指定行号为1，列号为2，并使用图标名称“down”来完成此操作。\n</thought>\n\n<code_block>\n# 点击第一行第二列中的下拉icon\nClickIconOfCell | 1 | 2 | down\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the cell in the first row and sixth column",
        "output": "<thought>\n在这个场景中，我们的目标是点击某个具体表格单元格中的任意元素。根据提供的关键字和方法签名，我们需要使用`ClickElemOfCell`这个关键字。根据给定的参数要求，我们应该确定行号和列号，然后使用该关键字。这里提到的是\"第一行第六列单元格\"，因此行号是1，列号是6。我们将使用`ClickElemOfCell`来实现这个任务，并且由于没有指定具体要点击的元素，所以我们可以使用默认的`selector=*`来表示单元格中的任意元素。这个点击操作不涉及任何弹窗，也不需要指定基准元素或表格标识符。\n</thought>\n\n<code_block>\n# 点击第一行第六列单元格中的任意元素\nClickElemOfCell | 1 | 6\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Verify that the fourth column of the table contains only \"libra\"",
        "output": "<thought>\n为了校验表格第四列只包含libra，我们可以使用GetColValues关键字获取第四列的所有值。然后，我们可以遍历这些值，使用RF内置的Should Contain关键字校验每一项是否包含\"libra\"。为了实现这个过程，可以用RF的FOR循环结构来迭代每一个值，并进行校验。\n</thought>\n\n<code_block>\n# 获取表格第四列的所有值\n@{col_values}  GetColValues | 4\n\n# 遍历获取的值，校验每一个都应该包含\"libra\"\nFOR  ${val}  IN  @{col_values}\n    Should Contain  ${val}  libra\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Move the mouse to the icon to the right of \"自动化分组1\" and click it",
        "output": "<thought>\n根据场景描述，我们需要先移动鼠标到一个元素上，然后点击该元素。目标是“自动化分组1”右边的一个icon。因此，我们可以使用“MoveToIconToTheDirectionOf”关键字来移动鼠标，然后使用“ClickIconToTheDirectionOf”关键字来进行点击。我们假设该icon在“自动化分组1”右边且为第一个icon。\n</thought>\n\n<code_block>\n# 移动到“自动化分组1”右边的第一个icon\nMoveToIconToTheDirectionOf | 自动化分组1 | right | idx=0\n\n# 点击“自动化分组1”右边的第一个icon\nClickIconToTheDirectionOf | 自动化分组1 | right | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the button to the right of \"合同类型\" in the popup window",
        "output": "<thought>\n为了完成这个任务，我们需要在弹窗中找到“合同类型”文本，并点击它右边的按钮。这需要用到`ClickElemToTheDirectionOf`关键字，以“合同类型”为基准元素（`the_base`），并设置方向为`right`。目标元素是一个按钮，通常用按钮的选择器`button`来指定。如果有多个按钮，我们需要根据需求选择特定的按钮，但在这里没有指定具体的按钮索引，因此我们可以利用默认值（第一个按钮）。基准元素在弹窗中，故`base`应设置为`POPUP`。\n</thought>\n\n<code_block>\n# 点击弹窗中“合同类型”右边的按钮\nClickElemToTheDirectionOf | 合同类型 | right | button | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the switch next to \"订阅设置\" in the popup window",
        "output": "<thought>\n为了完成这个任务，我们需要在弹窗中查找文本为“订阅设置”的元素，然后点击其右边的开关。由于开关通常是通过class包含“switch”的元素来表示，因此我们可以使用ClickElemToTheDirectionOf关键字来实现这个操作。具体操作步骤如下：\n1. 使用ClickElemToTheDirectionOf关键字，以“订阅设置”为基准元素。\n2. 指定方向为“right”表示向右边查找。\n3. 设置目标元素的jQuery选择器为[class*=switch]。\n4. 将base设置为POPUP以确保在弹窗中操作。\n这样可以实现点击订阅设置后面的开关。\n</thought>\n\n<code_block>\n# 点击弹窗中订阅设置右边的开关\nClickElemToTheDirectionOf | 订阅设置 | right | [class*=switch] | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the second button after \"赠送礼物\"",
        "output": "<thought>\n在这个场景中，我们需要实现点击\"赠送礼物\"文本后面的第二个按钮。可以借助ClickElemToTheDirectionOf关键字完成。首先要确保\"赠送礼物\"是基准文本，然后根据需求点击其右侧第二个按钮，因此我们需要使用direction参数设置为right，selector参数设置为button，idx参数设置为1（因为选择第二个按钮）。这样可以精确定位到目标元素并完成操作。\n</thought>\n\n<code_block>\n# 点击赠送礼物后面的第二个按钮\nClickElemToTheDirectionOf | 赠送礼物 | right | button | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Generate a second-level timestamp",
        "output": "<thought>\n在Robot Framework中，如果需要获取当前的秒级时间戳，可以使用Python的time模块来实现。通过使用Evaluate关键字执行Python代码，我们可以调用time.time()函数来获取当前的时间戳（自1970年1月1日以来的秒数）。由于该函数返回的是一个浮点数，因此需要转换为整数。这可以通过int()函数来实现。最终的实现是将int(time.time())作为参数传递给Evaluate关键字，并指定使用time模块。\n</thought>\n\n<code_block>\n# 生成秒级时间戳\n${timestamp}  Evaluate  int(time.time())  modules=time\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Generate a millisecond-level timestamp",
        "output": "<thought>\n为了生成毫秒级时间戳，我们可以利用Python的time模块。通过time.time()可以获得当前时间的秒级时间戳，将其乘以1000就能得到毫秒级时间戳。Robot Framework支持使用Evaluate关键字来执行Python代码，因此该方法可以直接用于生成所需的时间戳。\n</thought>\n\n<code_block>\n# 生成毫秒级时间戳\n${timestamp}  Evaluate  int(time.time() * 1000)  modules=time\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Generate a millisecond-level timestamp and then fill it into the \"Creation Time (ms)\" column of the \"蓝莓果酱\" row",
        "output": "<thought>\n为了在表格中填写时间戳，我需要先生成一个当前时间的毫秒级时间戳，然后找到表格中“蓝莓果酱”这一行的“创建时间(ms)”列，并使用关键字 `FillCell` 将生成的时间戳填入对应单元格中。根据提供的提示，可以使用 `Evaluate` 关键字结合 Python 的 `time` 模块来获取当前的毫秒级时间戳。\n</thought>\n\n<code_block>\n# 生成毫秒级时间戳\n${timestamp}  Evaluate  int(time.time() * 1000)  modules=time\n\n# 将生成的毫秒级时间戳填写到“蓝莓果酱”这一行的“创建时间(ms)”列中\nFillCell | 蓝莓果酱 | 创建时间(ms) | ${timestamp}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "First, click the cell at (3, 4) and then enter 888 into this cell",
        "output": "<thought>\n根据给定的场景，我需要先点击表格中指定的单元格 (3, 4)，然后在该单元格中输入值888。我将使用 `ClickElemOfCell` 关键字来点击特定的单元格，然后使用 `FillCell` 关键字来输入值。\n</thought>\n\n<code_block>\n# 点击第3行第4列的单元格\nClickElemOfCell | 3 | 4\n\n# 在第3行第4列的单元格中输入888\nFillCell | 3 | 4 | 888\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click the canvas under \"耗时趋势\"",
        "output": "<thought>\n在该场景中，目标是在“耗时趋势”文本的下方点击canvas元素。对于这个操作，可以考虑使用\"ClickElemToTheDirectionOf\"关键字，因为我们需要点击一个特定方向的元素。基于关键字的说明，该关键字可以用来在一个基准元素的特定方向寻找其他元素。这里我们可以指定“耗时趋势”作为基准，指定方向为下方（bottom），然后通过选择器选择canvas元素。\n</thought>\n\n<code_block>\n# 点击在“耗时趋势”下方的canvas元素\nClickElemToTheDirectionOf | 耗时趋势 | bottom | canvas\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "find date 2 days ago",
        "output": "<thought>\n要找到两天前的日期，可以使用Python的datetime模块来计算。由于RobotFramework支持直接执行Python代码，我们可以使用Evaluate关键字来实现这个功能。具体步骤如下：\n1. 导入datetime模块\n2. 获取当前日期\n3. 使用timedelta减去2天\n4. 格式化输出日期\n</thought>\n\n<code_block>\n# 获取两天前的日期\n${two_days_ago}    Evaluate    (datetime.datetime.now() - datetime.timedelta(days=2)).strftime('%Y-%m-%d')    modules=datetime\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "remove '' from list",
        "output": "<thought>\n这个问题需要从列表中移除空字符串''。由于RobotFramework本身没有直接提供这样的列表操作关键字，我们可以考虑以下几种解决方案：\n\n1. 使用Evaluate关键字执行Python代码来处理列表\n2. 使用RobotFramework的列表操作关键字组合实现\n3. 使用FOR循环遍历列表并过滤空字符串\n\n最简单直接的方法是使用Evaluate执行Python的列表推导式来过滤空字符串，这种方法简洁高效。我们也可以创建一个变量来存储处理后的列表。\n</thought>\n\n<code_block>\n# 使用Python列表推导式移除空字符串\n${filtered_list}    Evaluate    [x for x in $original_list if x != '']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "iterate through a list and only keep elements that do not contain '-' and strip the remaining elements of non-numeric character except ('.', '万','%'))",
        "output": "<thought>\n这个问题需要处理一个列表，筛选出不包含'-'的元素，并对保留的元素进行清理，只保留数字、小数点、'万'和'%'字符。分析如下：\n\n1. 首先需要遍历列表，可以使用RF的FOR循环\n2. 对每个元素检查是否包含'-'，可以使用Evaluate结合Python的'in'操作符\n3. 对保留的元素进行字符过滤，可以使用Evaluate结合正则表达式或字符串操作\n4. 最终将处理后的元素组成新列表\n\n由于RF本身没有直接处理这种字符串操作的关键字，我们需要使用Evaluate来执行Python代码实现这些功能。\n</thought>\n\n<code_block>\n# 初始化原始列表\n@{original_list}=    Create List    123-456    78.90%    abc-123    45万    67.89    -100%\n\n# 创建空列表存放结果\n@{filtered_list}=    Create List\n\n# 遍历原始列表\nFOR    ${item}    IN    @{original_list}\n    # 检查元素是否不包含'-'\n    ${contains_dash}=    Evaluate    '-' in '${item}'\n    IF    not ${contains_dash}\n        # 清理非数字字符(保留.万%)\n        ${cleaned_item}    Evaluate    ''.join(c for c in $item if c.isdigit() or c in ('.','万','%'))\n        # 添加到结果列表\n        Append To List    ${filtered_list}    ${cleaned_item}\n    END\nEND\n</code_block>"
    }
]