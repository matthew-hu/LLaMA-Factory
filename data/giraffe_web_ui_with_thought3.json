[
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 '需求类型' 为：模型训练/评估，‘详细原因’ 为：“主要场景：自动化测试使用；使用方式：自动化测试使用”，然后点击 ‘提交’",
        "output": "<thought>\n首先，我需要使用 `SetField` 关键字来设置“需求类型”和“详细原因”字段的值。接着，通过 `Click` 关键字来点击“提交”按钮。\n</thought>\n\n<code_block>\n# 设置需求类型为“模型训练/评估”\nSetField | 需求类型 | 模型训练/评估\n\n# 设置详细原因为指定的文本\nSetField | 详细原因 | 主要场景：自动化测试使用；使用方式：自动化测试使用\n\n# 点击提交按钮\nClick | 提交\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在‘数据类型’输入‘Float’",
        "output": "<thought>\n对于这个任务，我需要将值‘Float’填写到名称为‘数据类型’的字段中。可以使用SetField关键字，直接输入数据类型和值。\n</thought>\n\n<code_block>\n# 设置数据类型为Float\nSetField | 数据类型 | Float\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 alert 中包含 ‘customClickAction’",
        "output": "<thought>\n为了验证警告弹窗中是否包含文本“customClickAction”，我们可以使用“CheckAlertHas”关键字。这个关键字用来检查警告弹窗中的文本内容，我们只需要指定需要检查的文本即可。\n</thought>\n\n<code_block>\n# 校验 alert 弹窗中包含 'customClickAction'\nCheckAlertHas  customClickAction\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断是否存在class=\"byted-Table-Body\"的tbody下的class=\"byted-Table-Row\"的tr标签，如果存在，则点击'商品详情'",
        "output": "<thought>\n需要判断目标元素tr是否存在，可以用IsAnyElemExisting关键字。然后根据判断结果，决定是否点击文本'商品详情'。\n</thought>\n\n<code_block>\n# 判断是否存在目标tr元素\n${exist}  IsAnyElemExisting | tbody[class='byted-Table-Body'] tr[class='byted-Table-Row']\n\n# 如果存在，则点击'商品详情'\nIF  ${exist}\n    Click  商品详情\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间戳",
        "output": "<thought>\n考虑到需求是获取当前时间戳，可以使用RF标准库中获取当前时间的关键字 \"Get Current Date\" 并通过指定format参数为epoch来实现。\n</thought>\n\n<code_block>\n# 获取当前时间的时间戳\n${current_time}  Get Current Date  result_format=epoch\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格的表头行中的 checkbox",
        "output": "<thought>\n要点击表格的表头行中的 checkbox，可以使用 ClickElemOfRow 关键字，row_name_or_id 使用特殊值 HEAD 表示表头行，selector 选择 checkbox 元素。\n</thought>\n\n<code_block>\n# 点击表格的表头行中的 checkbox\nClickElemOfRow | HEAD | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击修改登录设置右侧的小图标",
        "output": "<thought>\n为了实现“点击修改登录设置右侧的icon”，我们需要先定位“修改登录设置”文本，然后在其右侧找到目标icon并点击。根据关键字描述，我们可以使用 `ClickIconToTheDirectionOf` 关键字。这个关键字允许我们指定基准文本，然后在指定的方向（例如“right”）查找并点击目标icon。\n</thought>\n\n<code_block>\n# 点击“修改登录设置”右侧的图标\nClickIconToTheDirectionOf | 修改登录设置 | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将元素elem 拖拽到 elem2",
        "output": "<thought>\n需要使用`DAndD`关键字，将元素`elem`拖拽到`elem2`。首先需要获取这两个元素。\n</thought>\n\n<code_block>\n# 将elem元素拖拽到elem2元素上\nDAndD | ${elem} | ${elem2}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 确定 或 下一步 的按钮",
        "output": "<thought>\n本场景是要查找文本为\"确定\"或\"下一步\"的按钮。对于这种场景，我们可以使用FindByText关键字，这个关键字可以查找/定位/获取给定文本的元素，默认返回第一个满足的元素。这里我们需要查找的文本是\"确定\"或者\"下一步\"，所以这两个文本就是FindByText关键字的参数。最后返回的元素将存储在变量${elem}中。\n</thought>\n\n<code_block>\n# 查找文本为\"确定\"或\"下一步\"的按钮\n${elem}  FindByText | 确定 | 下一步\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "遍历页面上所有data-tabkey包含semiTab的元素并点击",
        "output": "<thought>\n首先，我们需要找到所有符合条件的元素，即data-tabkey包含semiTab的元素。我们可以使用FindElem关键字配合jQuery选择器来定位这些元素。查找到这些元素后，我们需要遍历它们，并对每一个元素执行点击操作。为此，我们可以使用Robot Framework的FOR循环结构来遍历这些元素，并使用ClickElem关键字来点击每一个元素。\n</thought>\n\n<code_block>\n# 查找所有data-tabkey包含semiTab的元素\n${elements}  FindElem  [data-tabkey*=semiTab]\n\n# 遍历找到的元素并点击\nFOR  ${elem}  IN  @{elements}\n  ClickElem  ${elem}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“至”左侧10px像素位置\n\n提示：鼠标移动到文本 “至” 左侧10px像素位置点击",
        "output": "<thought>\n在该场景中，我们需要将鼠标移动到文本“至”位置，然后向左偏移10个像素的位置进行点击。为此，我们可以使用`MoTo`关键字先将鼠标移动到“至”文本上，然后再用`MClick`关键字在当前位置点击。`MoTo`关键字的`dx`参数设置为-10，以实现向左移动10个像素。\n</thought>\n\n<code_block>\n# 移动到文本“至”左侧10px\nMoTo | 至 | dx=-10\n\n# 在当前位置点击\nMClick\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "想依次点击表格里的查看详情 如果 没有报错 就点击返回 如果有报错获取当前页面的url中的taskId={taskId} 追加到一个列表里 然后点击返回 继续访问",
        "output": "<thought>\n解决问题思路：\n1. 使用循环依次点击表格中的“查看详情”按钮。\n2. 使用TRY/EXCEPT结构来捕捉可能出现的错误。\n3. 如果没有报错，则点击“返回”。\n4. 如果有报错，获取当前页面的URL，并从中提取`taskId`。\n5. 将提取到的`taskId`追加到一个列表中。\n6. 点击“返回”后继续循环。\n\n关键字选择：\n- 使用`ClickTextOfRow`点击“查看详情”。\n- 使用IF/ELSE结构来判断是否有报错。\n- 使用`GetCurrentUrl`来获取当前页面URL。\n- 使用Evaluate执行Python代码从URL中提取`taskId`。\n- 使用`PageBack`模拟返回按钮。\n</thought>\n\n<code_block>\n# 声明一个列表，用于存储taskIds\n${taskIds}  Create List\n\n# 获取行数，以便循环\n${row_count}  GetRowCount | tbl=1\n\nFOR  ${row_index}  IN  Range  1  ${row_count}\n    TRY\n        # 点击表格行中的“查看详情”\n        ClickTextOfRow | ${row_index} | 查看详情 | tbl=1\n        \n        # 点击返回\n        Click | 返回\n\n    EXCEPT\n        # 获取当前页面的URL\n        ${url}  GetCurrentUrl\n        \n        # 使用Evaluate从URL中提取taskId\n        ${taskId}  Evaluate  re.search(r'taskId=([^&]+)', '${url}').group(1)  re\n        \n        # 将taskId追加到列表中\n        Append To List  ${taskIds}  ${taskId}\n        \n        # 点击返回\n        Click | 返回\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送post请求  https://mon.zijieapi.com/monitor_browser/collect/batch/?biz_id=awacs_web，请求体为 sex: 女",
        "output": "<thought>\n我们需要向指定的URL发送POST请求，并且请求体包含一个JSON格式的数据，key为\"sex\"而value为\"女\"。可以使用提供的UiSendRequest关键字来实现。\n</thought>\n\n<code_block>\n# 发送 post 请求, 请求体: {\"sex\": \"女\"}\n${resp_json}  UiSendRequest | POST | https://mon.zijieapi.com/monitor_browser/collect/batch/?biz_id=awacs_web | {\"sex\": \"女\"} | ${None}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“审批流设置”，等待页面加载完成，然后点击页面第一个元素为“class=arco-icon-plus-circle”",
        "output": "<thought>\n为了实现任务，首先需要点击文本“审批流设置”，使用Click关键字。接着，等待页面加载完成，使用WaitLoading关键字。最后，点击页面第一个class为arco-icon-plus-circle的元素，使用ClickElem关键字并选择对应的jquery选择器:eq(0)。\n</thought>\n\n<code_block>\n# 点击审批流设置\nClick | 审批流设置\n\n# 等待页面加载完成\nWaitLoading\n\n# 点击第一个class=arco-icon-plus-circle的元素\nClickElem | [class=arco-icon-plus-circle]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击投放时间下面的input，输入今天的日期",
        "output": "<thought>\n首先需要找到\"投放时间\"文本，然后在该文本下方寻找输入框(input元素)。接着在该输入框中输入当前日期。可以使用`FindElemToTheDirectionOf`查找元素，然后使用`FillArea`输入日期。获取当前日期可以使用RF标准库中的关键字`Get Current Date`。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}    Get Current Date    result_format=%Y-%m-%d\n\n# 查找投放时间下方的 input 元素\n${input_elem}    FindElemToTheDirectionOf    投放时间    bottom    input\n\n# 向 input 元素输入今天的日期\nFillArea    ${input_elem}    ${current_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "清空姓名字段",
        "output": "<thought>\n对于清空姓名字段，我们可以使用SetField关键字，设置其值为${KEY_BACKSPACE}，以达到清空的效果。\n</thought>\n\n<code_block>\n# 清空姓名字段\nSetField | 姓名 | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验变量 value 和 变量 ${大屏URL} 相等",
        "output": "<thought>\n首先需要判断如何校验两个变量的相等性。在Robot Framework中，可以使用`Should Be Equal As Strings`关键字来比较两个字符串变量的值是否相同。因此，这里可以使用`Should Be Equal As Strings`关键字来解决这个问题，传入变量`value`和`${大屏URL}`作为参数。\n</thought>\n\n<code_block>\n# 校验变量 value 和变量 ${大屏URL} 相等\nShould Be Equal As Strings  ${value}  ${大屏URL}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格操作里的删除",
        "output": "<thought>\n该操作涉及到点击表格操作列中的“删除”按钮。我们可以使用`ClickTextOfCell`关键字来点击单元格中的文本。假设表格的列名为‘操作’，我们需要在操作列中点击“删除”按钮。\n</thought>\n\n<code_block>\n# 点击表格第一行的操作列中的删除\nClickTextOfCell | 1 | 操作 | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断a等于30",
        "output": "<thought>\n使用RF的Should Be Equal As Strings关键字来校验变量a的值是否等于30。\n</thought>\n\n<code_block>\n# 校验变量a字符串表示等于30\nShould Be Equal As Strings  ${a}  30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面应该包含abnormal、recommend、insight，设置属性分组 module，校验”订单编号“为：1072571872012188944，最后点击“已退款”右边的“已撤销核销”",
        "output": "<thought>\n首先，我们使用`CheckHasText`关键字校验页面同时包含文本abnormal、recommend、insight。接下来，使用`SetField`关键字设置“属性分组”字段的值为module。然后，通过`CheckFieldContains`来校验“订单编号”字段的值为1072571872012188944。最后，我们使用`ClickTextToTheDirectionOf`关键字点击“已退款”右边的“已撤销核销”。\n</thought>\n\n<code_block>\n# 校验页面出现文本abnormal, recommend, insight\nCheckHasText | abnormal | recommend | insight\n\n# 设置属性分组为module\nSetField | 属性分组 | module\n\n# 校验订单编号为1072571872012188944\nCheckFieldContains | 订单编号 | 1072571872012188944\n\n# 点击已退款右边的已撤销核销\nClickTextToTheDirectionOf | 已退款 | right | 已撤销核销\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击查询",
        "output": "<thought>\n在查询文本中，可以直接使用Click关键字\n</thought>\n\n<code_block>\n# 点击查询文本\nClick | 查询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在第二个弹框中输入：GameOver",
        "output": "<thought>\n在给定的场景中，我们需要在第二个弹框中输入文本“GameOver”。因为这是在弹窗中输入，且明确指出是在第二个弹窗中，我们可以使用`FillPopup`关键字，并指定`popup_index=1`，因为弹框的索引是从0开始的。`FillPopup`允许我们直接在指定的弹窗中输入文本而不需要指定具体的字段名。\n</thought>\n\n<code_block>\n# 在第二个弹框中输入GameOver\nFillPopup | GameOver | popup_index=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把左侧菜单滑到最上方",
        "output": "<thought>\n首先，我们需要找到左侧菜单元素。根据提示，左侧菜单的元素的class通常包含\"menu\"。我们可以使用FindElemToTheDirectionOf来查找左侧菜单元素，然后使用ScrollUpDown将该元素滚动到顶部。\n</thought>\n\n<code_block>\n# 查找屏幕左侧菜单元素\n${menu_elem}  FindElemToTheDirectionOf | SCREEN_CENTER | left | [class*=menu]\n\n# 滚动菜单元素到顶部\nScrollUpDown | ${menu_elem} | 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验class=panel-card元素下存在class=arco-empty-description元素",
        "output": "<thought>\n我们需要检查一个页面元素的层级关系。在这种情况下，我们寻找class为panel-card元素下有无class为arco-empty-description的元素。我们可以使用CheckHasElem关键字和FindElem关键字。首先，构建一个选择器以定位目标元素。\n</thought>\n\n<code_block>\n# 定义选择器以查找panel-card元素下的arco-empty-description元素\nCheckHasElem | [class=panel-card] [class=arco-empty-description]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个关键字：“添加事件指标过滤条件”，接受参数 name, step_name, args，主要作用是：\n# 0. 将 step_name 映射为index，如果‘始’在step_name中，那么index=0, 否则index=1\n# 1. 在lable class包含FilterLabel__label，且文本为name的元素的祖先中找到 div class=FilterContainer__container__dyWbm 的元素${elem1}\n# 2. 在elem1中找到第index个 class包含styles__icon__AyeC1 的span元素elem2\n# 3. 向elem2中输入一个或多个给定的args",
        "output": "添加事件指标过滤条件\n    [Arguments]  ${name}  ${step_name}  @{args}\n\n    # 将 step_name \n    IF   '始' in $step_name\n        ${index}  Set Variable  0\n    ELSE\n        ${index}  Set Variable  1\n    END\n\n    # 在class包含FilterLabel__label，且文本为name的lable元素的祖先中找到 div class=FilterContainer__container__dyWbm的元素elem1\n    ${label_elem}  FindElem  label[class*=FilterLabel__label]:contains(${name})\n    ${elem1}  FindParentElem  ${label_elem}  div[class=FilterContainer__container__dyWbm]\n\n    # 在elem1中找到第index个class包含styles__icon的span元素elem2\n    ${elem2}  FindElem  ${elem1} span[class*=styles__icon]:eq(${index})\n\n    # 最后向elem2中输入给定的args\n    FillArea  ${elem2}  @{args}"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表达式内容右侧输入框，休息3s，向class包含feature-variant_value的元素且包含文本取值1的元素输入：test10，等待保存按钮消失",
        "output": "<thought>\n我们需要使用 `ClickElemToTheDirectionOf` 来点击 \"表达式内容\" 右侧的输入框。之后用 `Sleep` 关键字休息3秒，接着使用 `FillArea` 关键字向指定的元素输入 `test10`。最后，我们使用 `WaitElemDisappear` 关键字等待包含文本“保存”的按钮消失。\n</thought>\n\n<code_block>\n# 点击表达式内容右侧的输入框\nClickElemToTheDirectionOf | 表达式内容 | right | input, textarea\n\n# 休息3秒\nSleep | 3s\n\n# 向指定的元素输入 test10\nFillArea | [class*=feature-variant_value]:contains(取值1) | test10\n\n# 等待保存按钮消失\nWaitElemDisappear | button:contains(保存)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果datetime.datetime.now()秒钟小于30，分钟+1，如果秒钟>30,分钟+2",
        "output": "<thought>\n要解决这个问题，我们需要获取当前时间的秒数，并根据秒数条件来修改分钟数。由于Robot Framework本身没有直接处理datetime的功能，我们需要使用Python的datetime模块。具体步骤如下：\n1. 使用Evaluate关键字调用Python的datetime.now()获取当前时间\n2. 提取当前时间的秒数和分钟数\n3. 使用IF条件判断秒数是否小于30\n4. 根据条件分别对分钟数进行+1或+2操作\n</thought>\n\n<code_block>\n# 获取当前时间\n${now}    Evaluate    datetime.datetime.now()    modules=datetime\n\n# 提取秒数和分钟数\n${seconds}    Evaluate    ${now}.second\n${minutes}    Evaluate    ${now}.minute\n\n# 根据秒数条件修改分钟数\nIF    ${seconds} < 30\n    ${minutes}    Evaluate    ${minutes} + 1\nELSE\n    ${minutes}    Evaluate    ${minutes} + 2\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击最后一个弹框中的第二个删除按钮",
        "output": "<thought>\n为了实现目标，我们需要使用`Click`关键字来完成操作。从描述中，我们知道需要操作多个弹框，并选取最后一个弹框中的第二个“删除”按钮。为了实现这一点，我们需要正确计算与定位弹框和按钮的位置。首先，使用`Click`关键字结合`base=POPUP`来定位弹框中的元素，指定最后一个弹框的索引为-1，并选择第二个“删除”按钮。因此，选择Idx=1（因为索引从0开始）来代表第二个“删除”按钮。\n</thought>\n\n<code_block>\n# 点击最后一个弹框中的第二个‘删除’按钮\nClick | 删除 | base=POPUP | idx=1 | popup_index=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面有弹窗就点击弹窗中的确定",
        "output": "<thought>\n在这个场景中，需要判断页面是否存在弹窗，然后在弹窗中执行点击操作。因此可以使用`IsPopupExists`来判断弹窗是否存在。如果存在，则使用`Click`关键字点击弹窗中的确定按钮。可以使用IF语句来控制流程。\n</thought>\n\n<code_block>\n# 判断页面是否存在弹窗\n${exist}  IsPopupExists\n\n# 如果弹窗存在，点击弹窗中的确定按钮\nIF  $exist\n    Click  确定  | base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在文本为coral_auto_hive_em_table_tmp的a元素，就点击coral_auto_hive_em_table_tmp所在行的第一个class包含的dprc-btn-link元素",
        "output": "<thought>\n首先，我们需要确认文本为coral_auto_hive_em_table_tmp的a元素是否存在。然后，若存在，则点击coral_auto_hive_em_table_tmp所在行的第一个class包含dprc-btn-link的元素。我们可以使用IsAnyElemExisting来判断元素是否存在，然后使用ClickElemOfRow在条件为真的情况下进行点击操作。\n</thought>\n\n<code_block>\n# 判断文本为coral_auto_hive_em_table_tmp的a元素是否存在\n${exist}  IsAnyElemExisting  | a:contains(coral_auto_hive_em_table_tmp)\n\n# 如果存在，则点击所在行的第一个class包含dprc-btn-link的元素\nIF  ${exist}\n    ClickElemOfRow  | coral_auto_hive_em_table_tmp  | [class*=dprc-btn-link]:eq(0)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将文本为 ‘资产门户’ 的元素向下滚动 50%",
        "output": "<thought>\n首先需要定位文本为“资产门户”的元素，然后使用ScrollUpDown关键字对该元素进行向下滚动50%的操作。\n</thought>\n\n<code_block>\n# 查找文本为‘资产门户’的元素\n${elem}  FindByText | 资产门户\n\n# 对该元素向下滚动50%\nScrollUpDown | ${elem} | 50%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对第三个 canvas 截图对比，相似度为 0.99，命名为：时间分析图表",
        "output": "<thought>\n首先，我们需要找到第三个canvas元素，可以用jquery选择器\"canvas:eq(2)\"来选取。然后，我们可以使用关键字ImageDiff来截取这个元素的图片，并和基准图进行比较，相似度为0.99。同时，我们需要将截图命名为“时间分析图表”。\n</thought>\n\n<code_block>\n# 找到第三个canvas元素并截图对比，相似度为0.99，命名为：时间分析图表\nImageDiff | selector=canvas:eq(2) | pic_name=时间分析图表 | sim=0.99\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "${text} 包含 诊断",
        "output": "<thought>\n根据需求，需要校验变量`${text}`中是否包含“诊断”文本。可以使用RF的内置关键字`Should Contain`来实现此校验。\n</thought>\n\n<code_block>\n# 校验变量text中包含“诊断”\nShould Contain  ${text}  诊断\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用 审批节点审批 关键字，然后调用 合同组审批页面点击无需比对 关键字，最后调用 上级领导审批 关键字",
        "output": "<thought>\n根据任务要求，首先需要调用三个不同的关键字：审批节点审批、合同组审批页面点击无需比对、上级领导审批。由于这些关键字名称非常具体，说明它们是自定义关键字，我们只需要按顺序调用这些自定义关键字即可。\n</thought>\n\n<code_block>\n# 调用审批节点审批\n审批节点审批\n\n# 调用合同组审批页面点击无需比对\n合同组审批页面点击无需比对\n\n# 调用上级领导审批\n上级领导审批\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击展开更多，点击去退还，点击第一个<label>元素，等加载，在“请输入模糊匹配的信息”文本框内填写A",
        "output": "<thought>\n首先，使用`ClickTextOneByOne`依次点击“展开更多”和“去退还”。接下来，用`ClickElem`点击第一个`<label>`元素。然后，使用`WaitLoading`等待页面加载完成。最后，使用`SetField`在“请输入模糊匹配的信息”字段中输入\"A\"。\n</thought>\n\n<code_block>\n# 依次点击展开更多和去退还\nClickTextOneByOne | 展开更多 | 去退还\n\n# 点击第一个<label>元素\nClickElem | label:eq(0)\n\n# 等待加载完成\nWaitLoading\n\n# 在“请输入模糊匹配的信息”字段中输入A\nSetField | 请输入模糊匹配的信息 | A\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“【自动化测试创建】请勿操作”所在表格行的更多小图标，点击删除，点击确定，等待1s后校验表格中不包含“【自动化测试创建】请勿操作”",
        "output": "\n    \n<thought>\n 首先，我们需要找到“【自动化测试创建】请勿操作”所在的表格行，并点击该行的更多icon。接着，依次点击删除和确定按钮。最后，等待1秒后，验证表格中不包含“【自动化测试创建】请勿操作”。\n </thought>\n \n <code_block>\n # 点击“【自动化测试创建】请勿操作”所在表格行的更多icon\n ClickIconOfRow | 【自动化测试创建】请勿操作 | more\n \n # 点击删除\n Click | 删除\n \n # 点击确定\n Click | 确定\n \n # 等待1秒\n Sleep | 1s\n \n # 校验表格中不包含“【自动化测试创建】请勿操作”\n CheckTableNotHas | 【自动化测试创建】请勿操作\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击data_source_eu右侧的 选择框",
        "output": "<thought>\n通过分析需求，解决问题的思路是：首先需要找到“data_source_eu”这个基准文本，然后点击其右侧的选择框。可以使用“ClickElemToTheDirectionOf”关键字来实现这一操作。\n</thought>\n\n<code_block>\n# 点击 data_source_eu 右侧的选择框\nClickElemToTheDirectionOf | data_source_eu | right | [class*=select]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击agent设置，校验class=sysd_ste_image_upload元素内包含图片，校验应用的名称不为空。设置应用的描述为：今天的日期。点击确定，页面出现“编辑基本信息成功”。",
        "output": "\n    \n<thought>\n 首先需要点击文本“agent设置”。然后检查class为sysd_ste_image_upload的元素内是否包含图片。再检查应用的名称是否不为空。接着，将应用的描述设置为今天的日期。最后，点击“确定”按钮，并确认页面显示“编辑基本信息成功”。\n </thought>\n \n <code_block>\n # 点击agent设置\n Click | agent设置\n \n # 校验class=sysd_ste_image_upload元素内包含图片\n CheckHasElem | [class=sysd_ste_image_upload] img\n \n # 校验应用名称不为空\n ${app_name}  GetFieldVal | 应用名称\n Should Not Be Empty | ${app_name}\n \n # 设置应用的描述为今天的日期\n ${today}  Get Current Date | result_format=%Y-%m-%d\n SetField | 应用描述 | ${today}\n \n # 点击确定\n Click | 确定\n \n # 校验页面出现“编辑基本信息成功”\n WaitText | 编辑基本信息成功\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选 Select all 并点击 OK，校验 Summary 表 有3行，获取 Summary 表 第1行的数据，点击 第一个“Export CSV”左边的小图标",
        "output": "<thought>\n该场景的任务分为几个步骤：\n1. 勾选“Select all”选项，我们可以使用 `CheckBoxOn` 关键字。\n2. 点击“OK”按钮，可以使用 `Click` 关键字。\n3. 校验“Summary”表有3行，使用 `CheckRowCount` 关键字。\n4. 获取“Summary”表第1行的数据，使用 `GetRowValues` 关键字。\n5. 点击第一个“Export CSV”左边的icon，可以先找到“Export CSV”元素，然后使用 `ClickIconToTheDirectionOf` 关键字在左边点击相应的icon。\n</thought>\n\n<code_block>\n# 勾选“Select all”\nCheckBoxOn | Select all\n\n# 点击“OK”\nClick | OK\n\n# 校验“Summary”表有3行\nCheckRowCount | 3 | tbl=Summary\n\n# 获取“Summary”表第1行的数据\n@{vals}  GetRowValues | 1 | tbl=Summary\n\n# 点击第一个“Export CSV”左边的icon\nClickIconToTheDirectionOf | :contains(Export CSV):eq(0) | left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 Appid 的 span 的下一个 button 元素，并点击该元素",
        "output": "<thought>\n为了查找文本为 Appid 的 span 的下一个 button 元素，我们可以使用 FindElem 关键字，使用jquery选择器 \"span:contains(Appid) + button\" 来获取 span 下一个 button 元素。然后我们将获取到的元素存储在一个变量中，之后我们可以使用 ClickElem 关键字来点击这个元素。\n</thought>\n\n<code_block>\n# 查找文本为 Appid 的 span 的下一个 button 元素\n${button}  FindElem  | span:contains(Appid) + button\n\n# 点击找到的元素\nClickElem | ${button}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写页面的第10个表格，表格第一行分别填写 1 2 3 4 5",
        "output": "<thought>\n为了填写页面的第10个表格，我们可以使用FillRow关键字，将row_name_or_id设为1，表格编号设为10，然后依次填入1、2、3、4、5作为参数。这个关键字将会找到页面第10个表格的第一行，然后把这行的值分别设为1、2、3、4、5。\n</thought>\n\n<code_block>\n# 填写页面第10个表格的第一行\nFillRow | 1 | 1 | 2 | 3 | 4 | 5 | tbl=10\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格行数, 点击表格1第行中的复制小图标，在表格第二行中输入多个值：age  name  sex",
        "output": "<thought>\n首先，我们可以使用`GetRowCount`关键字来获取表格的行数。接着，根据这个行数来动态确定需要点击的行。我们可以使用`ClickIconOfRow`关键字来点击指定行中的复制icon。最后，使用`FillRow`关键字在表格的第二行中输入多个值：age、name和sex。\n</thought>\n\n<code_block>\n# 获取表格行数\n${row_count}  GetRowCount\n\n# 点击表格第一行中的复制icon\nClickIconOfRow | 1 | copy\n\n# 在表格第二行中输入多个值：age, name, sex\nFillRow | 2 | age | name | sex\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "id 为 a 的 button 的后代元素 a 是否存在",
        "output": "<thought>\n为了检查id为a的button的后代元素a是否存在，我们可以使用IsAnyElemExisting关键字。其中的jQuery选择器\"button[id='a'] a\"，代表选取id为a的button元素的后代元素a。\n</thought>\n\n<code_block>\n# 判断id为a的button的后代元素a是否存在\n${exist}  IsAnyElemExisting | button[id='a'] a\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将分辨率设置为 4000 * 2000",
        "output": "<thought>\n为了设置浏览器窗口的分辨率，我们可以使用提供的关键字`SetWindowSize`，直接设置宽度和高度为给定的数字。\n</thought>\n\n<code_block>\n# 设置浏览器尺寸为 4000 x 2000\nSetWindowSize | 4000 | 2000\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 趋势图，设置 可选择指标为 通用指标，校验 弹窗中 存在 \"5 Item\"，点击 弹窗中 OK",
        "output": "<thought>\n为了实现该场景，首先需要使用Click关键字点击“趋势图”，然后使用SetField关键字设置“可选择指标”为“通用指标”。接下来，利用CheckHasText关键字校验弹窗中是否存在“5 Item”。最后，使用Click关键字点击弹窗中的“OK”按钮。\n</thought>\n\n<code_block>\n# 点击趋势图\nClick | 趋势图\n\n# 设置可选择指标为通用指标\nSetField | 可选择指标 | 通用指标\n\n# 校验弹窗中存在 \"5 Item\"\nCheckHasText | 5 Item | base=POPUP\n\n# 点击弹窗中的OK\nClick | OK | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 syd0219这个表格第一行的内容",
        "output": "<thought>\n要获取表格第一行的内容，可以使用GetRowValues关键字。这个关键字需要指定表格的行标识（可以是行号或行文本）和表格标识（tbl参数）。对于syd0219这个表格，我们需要获取第一行，因此row_name/id参数可以是1（表示第一行），tbl参数为syd0219。\n\n由于没有提到表格所在的基准元素（base参数），我们可以省略这个参数，使用默认值。\n</thought>\n\n<code_block>\n# 获取syd0219表格第一行的内容\n@{row_values}  GetRowValues  1  tbl=syd0219\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 如果页面包含实验报告字段，执行代码体1，如果不包含实验报告字段，执行代码体2",
        "output": "<thought>\n 首先需要判断页面是否包含“实验报告”字段，可以使用`IsAnyTextExisting`关键字。如果存在，执行代码体1，否则执行代码体2。使用RF的IF/ELSE结构来控制逻辑分支。\n </thought>\n \n <code_block>\n # 检查页面是否存在“实验报告”字段\n ${exist}  IsAnyTextExisting | 实验报告\n \n # 根据存在性执行不同的代码体\n IF  $exist\n  # 代码体1\n  Log  执行代码体1\n ELSE\n  # 代码体2\n  Log  执行代码体2\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取get接口profile_platform/api/v3/global/config的body中的data.finderEnable,如果该值为0，就跳过",
        "output": "<thought>\n1. 首先需要使用`Search Requests`关键字搜索指定接口的请求，这里需要搜索URL包含\"profile_platform/api/v3/global/config\"且方法为GET的请求\n2. 从搜索结果中获取响应体JSON数据\n3. 使用`GetValuesFromJson`关键字从JSON中提取data.finderEnable的值\n4. 使用RF的IF条件判断该值是否为0，如果是则使用Skip关键字跳过测试\n5. 需要注意处理可能没有找到请求的情况\n</thought>\n\n<code_block>\n# 搜索GET请求profile_platform/api/v3/global/config的最后一个请求\n${resp_json}  Search Requests  profile_platform/api/v3/global/config  GET  last\n\n# 从响应JSON中获取data.finderEnable的值\n${finder_enable}  GetValuesFromJson  ${resp_json}  data:finderEnable\n\n# 如果finderEnable为0则跳过测试\nIF  \"${finder_enable}\" == \"0\"\n    Skip  finderEnable is 0, skip this test case\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的确定按钮",
        "output": "<thought>\n我们需要点击弹窗中的确定按钮。因此，我们需要使用Click关键字，其中\"确定\"是我们需要点击的文本，base参数应设置为POPUP表示在弹窗中操作。\n</thought>\n\n<code_block>\n# 点击弹窗中的确定按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击颜值,等待2秒,检查当前是否含有“公会当前无符合服务信息的主播”字符,有的话截图,如果没有则检查是否有“发起沟通”字符,有的话截图",
        "output": "<thought>\n首先，我们需要找到点击“颜值”的方式，可以使用`Click`关键字。在点击之后，我们需要等待2秒，这可以通过`Sleep`关键字实现。接着，我们需要检查页面上是否包含特定的文本：首先检查“公会当前无符合服务信息的主播”，如果存在，则截图；如果不存在，则检查“发起沟通”，如果存在，则同样截图。这些步骤可以通过`CheckHasText`和条件语句实现。\n</thought>\n\n<code_block>\n# 点击颜值\nClick | 颜值\n\n# 等待2秒\nSleep | 2s\n\n# 检查当前是否含有“公会当前无符合服务信息的主播”字符\n${exist}  IsAnyTextExisting | 公会当前无符合服务信息的主播\nIF  ${exist}\n    # 如果存在，截图\n    Screenshot\nELSE\n    # 如果“公会当前无符合服务信息的主播”不存在，检查“发起沟通”\n    ${exist}  IsAnyTextExisting | 发起沟通\n    IF  ${exist}\n        # 如果存在“发起沟通”，截图\n        Screenshot\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义一个lists，里面包含6个list元素，遍历lists，打印list",
        "output": "<thought>\n在这个场景中，我们需要定义一个包含6个list元素的列表，并遍历它们以打印每个列表。RobotFramework本身没有直接用于循环和打印列表元素的关键字，因此我们需要使用Python代码来实现。我们可以使用Evaluate关键字来执行Python代码来创建和打印列表。\n</thought>\n\n<code_block>\n# 定义lists，包含6个list类型的元素\n${lists}=  Evaluate  [[1, 2, 3], ['a', 'b', 'c'], [True, False], ['x', 'y', 'z'], [10, 20, 30], ['apple', 'banana', 'cherry']]\n\n# 遍历lists并打印每个list\nFOR  ${list}  IN  @{lists}\n   Log  ${list}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击项目控制台，并切换至新窗口，再点击复查配置",
        "output": "<thought>\n首先需要点击“项目控制台”，然后切换到新窗口，最后在新窗口中点击“复查配置”。使用`Click`关键字点击“项目控制台”，用`ToNewWindow`切换窗口，再用`Click`关键字点击“复查配置”。\n</thought>\n\n<code_block>\n# 点击项目控制台\nClick | 项目控制台\n\n# 切换到新窗口\nToNewWindow\n\n# 点击复查配置\nClick | 复查配置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面包含文本暂无描述信息，点击最后一个class包含rich-text的元素且包含文本暂无描述信息的右边的编辑icon",
        "output": "<thought>\n首先，我们需要判断页面中是否包含文本“暂无描述信息”。如果页面中包含此文本，然后我们定位最后一个class包含rich-text的元素且包含文本“暂无描述信息”，并点击其右边的编辑图标。这可以通过使用关键字IsAnyTextExisting，FindElem，及ClickIconToTheDirectionOf实现。\n</thought>\n\n<code_block>\n# 判断页面中是否包含文本“暂无描述信息”\n${exist}  IsAnyTextExisting | 暂无描述信息\n# 如果存在，则执行以下代码\nIF  $exist\n    # 定位最后一个class包含rich-text的元素且包含文本“暂无描述信息”\n    ${elem}  FindElem | [class*=rich-text]:contains(暂无描述信息):eq(-1)\n    # 点击元素右边的编辑图标\n    ClickIconToTheDirectionOf | ${elem} | right | edit\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截图整个屏幕图片并对比，相似度取 0.92",
        "output": "<thought>\n此场景较为简单，只需要使用ImageDiff关键字就可以实现。对于截图比较，我们首先需要使用ImageDiff关键字，无需提供选择器，因为想要截取的是整个屏幕。然后需要设置相似度sim=0.92。\n</thought>\n\n<code_block>\n# 截图整个屏幕并和基准图对比，相似度取0.92\nImageDiff | sim=0.92\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二个class包含arco-input-size-small的元素，并输入${layer_child_name}",
        "output": "<thought>\n需要选取ClickElem关键字来点击第二个class包含arco-input-size-small的元素，再使用SetField关键字输入${layer_child_name}。\n</thought>\n\n<code_block>\n# 点击第二个class包含arco-input-size-small的元素\nClickElem | [class*=arco-input-size-small]:eq(1)\n\n# 输入变量${layer_child_name}\nSendText | ${layer_child_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击 class=text-ellipsis 右侧的第1个元素",
        "output": "<thought>\n 在这个场景中，我们需要点击一个特定class类名（text-ellipsis）右侧的第一个元素。根据这个需求，我们可以选择使用RF框架中的关键字ClickElemToTheDirectionOf。这个关键字可以点击基于基准元素给定方向的目标元素。在这里，基准元素是class=text-ellipsis，方向是right，目标元素是第一个元素，因此我们可以使用selector \":eq(0)\" 来获取第一个元素。\n </thought>\n \n <code_block>\n # 点击 class=text-ellipsis 右侧的第1个元素\n ClickElemToTheDirectionOf | .text-ellipsis | right | :eq(0)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面顶部第一个下拉框，并选择服务商控制台",
        "output": "<thought>\n首先点击页面顶部第一个下拉框，然后选择服务商控制台选项。\n</thought>\n\n<code_block>\n# 点击页面顶部第一个下拉框，假设下拉框为 input或select\nClickElemToTheDirectionOf | SCREEN_CENTER | top | input:eq(0),select:eq(0)\n\n# 选择服务商控制台\nSelectOption | 服务商控制台\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击 解决任务",
        "output": "<thought>\n 这是一个基础点击操作，可以直接使用Click关键字来解决。\n </thought>\n \n <code_block>\n # 点击 解决任务\n Click | 解决任务\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切入到allowfullscreen=\"true\"的元素里面的iframe",
        "output": "<thought>\n要切入到具有allowfullscreen=\"true\"属性的元素内部的iframe元素中，我们需要首先查找这个iframe元素，然后使用ToFrame关键字进入该iframe。在jQuery选择器中，我们可以使用属性选择器来定位具有特定属性值的标签，因此可以使用[allowfullscreen=\"true\"] iframe来选择目标iframe。\n</thought>\n\n<code_block>\n# 切入到allowfullscreen=\"true\"属性的元素里面的iframe\nToFrame | [allowfullscreen=\"true\"] iframe\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“查看用户列表下载”的关键字；接受参数：name，操作逻辑为：\n1.点击name所在表格行的查看用户列表按钮\n2.切换到新窗口\n3.点击‘下载’\n4.校验页面提示：正在导出用户，请耐心等候\n5.校验页面无错误提示",
        "output": "<thought>\n要实现“查看用户列表下载”的关键字，可以使用以下步骤：\n1. 利用 `ClickTextOfRow` 点击指定行的“查看用户列表”按钮。\n2. 使用 `ToNewWindow` 切换到新窗口。\n3. 使用 `Click` 点击“下载”按钮。\n4. 使用 `CheckHasText` 校验提示信息。\n5. 使用 `CheckErrMsg` 校验页面无错误提示。\n</thought>\n\n<code_block>\n*** Keywords ***\n查看用户列表下载\n    [Arguments]  ${name}\n    # 点击用户行的查看用户列表按钮\n    ClickTextOfRow  ${name}  查看用户列表\n\n    # 切换到新窗口\n    ToNewWindow\n\n    # 点击‘下载’\n    Click  下载\n\n    # 校验页面提示：正在导出用户，请耐心等候\n    CheckHasText  正在导出用户，请耐心等候\n\n    # 校验页面无错误提示\n    CheckErrMsg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 标签列 为 dependent_count",
        "output": "<thought>\n为了在页面字段\"标签列\"中设置值，可以使用`SetField`关键字。需要在字段名称\"标签列\"中填入\"dependent_count\"。\n</thought>\n\n<code_block>\n# 设置标签列为dependent_count\nSetField | 标签列 | dependent_count\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把 ${current_time} 和 ${future_time} 都设置成全局变量",
        "output": "<thought>\n我们需要将两个变量`${current_time}`和`${future_time}`设置为全局变量。在Robot Framework中，可以通过使用`Set Global Variable`关键字来实现这一功能。\n</thought>\n\n<code_block>\n# 将current_time设置为全局变量\nSet Global Variable  ${current_time}\n\n# 将future_time设置为全局变量\nSet Global Variable  ${future_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问产品页面",
        "output": "<thought>\n根据场景，访问产品页面可以使用OpenUrl关键字。需要将产品地址作为变量，以便于代码的复用性和可读性。\n</thought>\n\n<code_block>\n# 打开产品页面\nOpenUrl | ${产品地址}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找class 为navi-title-logo-img-onpremise navi-title-logo-onpremise-gap的 img左侧的元素，然后点击这个元素",
        "output": "<thought>\n首先需要找到class为`navi-title-logo-img-onpremise navi-title-logo-onpremise-gap`的img元素。然后利用`FindParentElem`或jQuery选择器找出其左侧的元素，再使用`ClickElemToTheDirectionOf`关键字进行点击操作。\n</thought>\n\n<code_block>\n# 查找目标img元素\n${imgElem}  FindElem | img[class='navi-title-logo-img-onpremise navi-title-logo-onpremise-gap']\n\n# 点击img左侧的元素\nClickElemToTheDirectionOf | ${imgElem} | left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击文本返回旧版, 点击编辑，输入版本号：3.1.2，回车，页面展示：保存成功",
        "output": "<thought>\n点击文本\"返回旧版\"，点击编辑，输入版本号，回车，等待页面展示保存成功\n</thought>\n\n<code_block>\n# 点击文本\"返回旧版\"\nClick | 返回旧版\n\n# 点击编辑\nClick | 编辑\n\n# 输入版本号：3.1.2，并回车\nSetField | 版本号 | 3.1.2 | enter=True\n\n# 等待页面展示保存成功\nWaitText | 保存成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格头“曝光数”列中的第一个小图标 ",
        "output": "<thought>\n我们需要在表格头行找到“曝光数”列，并点击该列中的第一个icon。对于表格头行的操作，需要使用`ClickIconOfCell`关键字。因为我们要点击的是表头，所以可以使用特殊值`HEAD`来表示行号。此外，列名为“曝光数”，并且我们要点击的icon是该列中的第一个。\n</thought>\n\n<code_block>\n# 点击表头“曝光数”列中的第一个icon\nClickIconOfCell | HEAD | 曝光数 | icon='' | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "从 ${resp_json} 中读取 title、subject:common_name等字段，并校验其中的每个值都包含在页面上",
        "output": "<thought>\n在这个场景中，我会首先使用自定义的GetValuesFromJson关键字从resp_json中获取字段值，然后使用CheckHasText关键字来校验这些值是否在页面上。\n</thought>\n\n<code_block>\n# 从 ${resp_json} 中获取 title 的值\n${title}  GetValuesFromJson  ${resp_json}  title\n\n# 校验 title 的值在页面上\nCheckHasText  ${title}\n\n# 从 ${resp_json} 中获取 subject:common_name 的值\n${common_name}  GetValuesFromJson  ${resp_json}  subject:common_name\n\n# 校验 subject:common_name 的值在页面上\nCheckHasText  ${common_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（abc, 操作）中的设置",
        "output": "<thought>\n需要点击表格中指定单元格的文本\"设置\"。根据输入信息，我们需要使用`ClickTextOfCell`关键字，指定行名为\"abc\"和列名为\"操作\"。\n</thought>\n\n<code_block>\n# 点击行名为abc、列名为操作的单元格中的文本设置\nClickTextOfCell | abc | 操作 | 设置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传主办单位负责人信息下的负责人证件为 ${IMAGE_URL}",
        "output": "<thought>\n考虑到我们要上传文件，所以应该使用UploadFile关键字。但是，该操作需要在主办单位负责人信息下的负责人证件进行，所以我们应该使用SetField关键字，SetFiled关键字能自动检测字段关联的控件类型为上传控件，并自动完成上传操作。调用 SetField关键字时，其中字段名为“负责人证件”，值为${IMAGE_URL}，并且靠近的文本为“主办单位负责人信息”。\n</thought>\n\n<code_block>\n# 上传主办单位负责人信息下的负责人证件为 ${IMAGE_URL}\nSetField | 负责人证件 | ${IMAGE_URL} | near=主办单位负责人信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 3 个月前的日期，年-月-日",
        "output": "<thought>\n为了解决这个问题，我们可以使用RF标准库中的日期处理关键字。可以利用 Get Current Date 获取当前日期，然后用 Subtract Time From Date 减去3个月。由于日期格式通常是年-月-日格式，我们可以通过设置日期格式来得到最期望的输出格式。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}    Get Current Date    result_format=%Y-%m-%d\n\n# 计算3个月前的日期\n${three_months_ago}  Subtract Time From Date  ${current_date}  3 months  result_format=%Y-%m-%d\n\n# 输出3个月前的日期\nLog    ${three_months_ago}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "先进入什么页面然后点击什么东西向某一个字段里面输入啥然后我就描述一下这个业务逻辑",
        "output": "<thought>\n首先，需要进入一个页面，这里假设页面地址为`${页面地址}`。然后点击一些文本，接着向一个字段输入内容。最后描述业务逻辑。将使用`OpenUrl`打开页面，`ClickTextOneByOne`点击文本，`SetField`输入字段内容。\n</thought>\n\n<code_block>\n# 访问页面\nOpenUrl | ${页面地址}\n\n# 依次点击文本\nClickTextOneByOne | txt1 | txt2 | txt3\n\n# 输入字段\nSetField | 字段名 | 内容\n\n# 业务逻辑描述\n# 先进入${页面地址}页面，然后点击文本txt1，点击txt2，再点击txt3，最后向字段名输入内容\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开名称为 ‘限速’ 的开关",
        "output": "<thought>\n这个测试场景需要两步完成，首先要找到名称为‘限速’的开关，而后进行操作。这里选择使用SetField，将‘限速’字段设置为开，进而达到打开开关的效果。\n</thought>\n\n<code_block>\n# 找到名称为‘限速’的字段，并将其设置为开，即打开开关\nSetField | 限速 | 开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击第一个class=arco-icon-more",
        "output": "<thought>\n 根据题目，我们需要点击class=arco-icon-more的第一个元素。考虑到我们有一个关键字 ClickElem 可以接受jquery选择器，我们可以使用它来定位到具有class=arco-icon-more的第一个元素进行点击。在jquery中，选择器:eq(0)用于获取第一个元素。\n </thought>\n \n <code_block>\n # 点击第一个class=arco-icon-more的元素\n ClickElem | [class=arco-icon-more]:eq(0)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标双击取消",
        "output": "<thought>\n在这个任务中，我们要双击\"取消\"元素。通过DClick关键字，我们可以实现鼠标的双击操作。需要使用的关键字是DClick，并需要提供对应的选择器或文本。这里可以直接使用\"取消\"。\n</thought>\n\n<code_block>\n# 鼠标双击取消\nDClick | 取消\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到文本 页面1 上",
        "output": "<thought>\n对于这个场景，我们需要将鼠标移动到文本“页面1”上，使用MoTo关键字是最合适的。参数txt设置为“页面1”。\n</thought>\n\n<code_block>\n# 鼠标移动到文本 页面1 上\nMoTo | 页面1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成毫秒级时间戳，然后填写到 蓝莓果酱 这一行的 创建时间(ms) 中",
        "output": "<thought>\n为了在表格中填写时间戳，我需要先生成一个当前时间的毫秒级时间戳，然后找到表格中“蓝莓果酱”这一行的“创建时间(ms)”列，并使用关键字 `FillCell` 将生成的时间戳填入对应单元格中。根据提供的提示，可以使用 `Evaluate` 关键字结合 Python 的 `time` 模块来获取当前的毫秒级时间戳。\n</thought>\n\n<code_block>\n# 生成毫秒级时间戳\n${timestamp}  Evaluate  int(time.time() * 1000)  modules=time\n\n# 将生成的毫秒级时间戳填写到“蓝莓果酱”这一行的“创建时间(ms)”列中\nFillCell | 蓝莓果酱 | 创建时间(ms) | ${timestamp}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 元素//*[@id=\"arco-tabs-0-panel-2\"]",
        "output": "<thought>\n解决问题思路：\n1. 观察到目标元素的XPath是 `//*[@id=\"arco-tabs-0-panel-2\"]`。\n2. 需要将XPath转换为jQuery选择器。\n3. 根据XPath语法，`//*[@id=\"arco-tabs-0-panel-2\"]` 等价于jQuery选择器 `[id=arco-tabs-0-panel-2]`。\n4. 使用 `ClickElem` 关键字点击该元素。\n</thought>\n\n<code_block>\n# 点击id为arco-tabs-0-panel-2的元素\nClickElem | [id=arco-tabs-0-panel-2]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击搜索icon",
        "output": "<thought>\n要实现点击搜索icon的功能，我们可以使用给定的关键字`ClickIcon`。需要传入参数`name=''`，其中`name`应该是搜索icon的名称。如果没有指定名称，我们假设icon是唯一的，使用默认参数即可。\n</thought>\n\n<code_block>\n# 点击搜索icon\nClickIcon | search\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向合同金额中输入多个值：0.01、CNY",
        "output": "<thought>\n为了向合同金额字段中输入多个值：0.01和CNY，我可以使用`SetField`关键字。该关键字允许我们为指定的字段输入多个值。我们可以将0.01和CNY分别作为参数传递给`SetField`关键字。由于没有指定需要点击回车或是选择特定的字段索引，我们使用默认值即可。\n</thought>\n\n<code_block>\n# 向合同金额字段中输入0.01和CNY\nSetField | 合同金额 | 0.01 | CNY\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “Enter the instance ID”并输入“CDN7410318757837689117”",
        "output": "<thought>\n根据描述的操作，首先需要点击文本“Enter the instance ID”，然后在光标激活的位置输入指定的文本“CDN7410318757837689117”。可以使用Click关键字点击文本，然后使用SendText关键字在光标位置输入文本。\n</thought>\n\n<code_block>\n# 点击 \"Enter the instance ID\"\nClick | Enter the instance ID\n\n# 输入实例ID\nSendText | CDN7410318757837689117\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验单元格（auto_test_name1, 状态）中包含：已完成",
        "output": "<thought>\n这个任务可以使用已有的关键字 \"CheckCellHas\" 来完成。我们需要将行名 \"auto_test_name1\" 和列名 \"状态\" 作为参数，然后传入我们希望的单元格内容 \"已完成\"。这样，关键字就会校验单元格（auto_test_name1, 状态）中是否包含 \"已完成\"。\n</thought>\n\n<code_block>\n# 校验 \"auto_test_name1\" 所在行的 \"状态\" 列的单元格中包含 \"已完成\"\nCheckCellHas | auto_test_name1 | 状态 | 已完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用 abc 关键字，参数为 name  value",
        "output": "<thought>\n我们需要调用自定义关键字 `abc`，并传递参数 `name` 和 `value`。由于没有其他信息需要处理，直接执行关键字即可。\n</thought>\n\n<code_block>\n# 调用关键字 abc，参数为 name 和 value\nabc  name  value\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将字符串a和b拼接",
        "output": "<thought>\n为了将字符串a和b拼接，应该使用Robot Framework中内置的`Catenate`关键字。通过指定分隔符，可以将多个字符串连接在一起。在这个例子中，不需要使用分隔符，因此可以直接使用默认的空分隔符。\n</thought>\n\n<code_block>\n# 使用Catenate关键字将字符串a和b拼接\n${result}  Catenate  SEPARATOR=  ${a}  ${b}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取第二个表格中的第一列的第一行内容，检查此内容包含 2024-11-11",
        "output": "<thought>\n此问题需要从第二个表格中获取第一列的第一行内容，首先使用GetCellValue关键字来获取该内容，然后使用Should Contain关键字检查其是否包含\"2024-11-11\"。\n</thought>\n\n<code_block>\n# 获取第二个表格第一列第一行的内容\n${val}  GetCellValue | 1 | 1 | tbl=2\n\n# 检查内容是否包含2024-11-11\nShould Contain  ${val}  2024-11-11\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问 www.126.com",
        "output": "<thought>\n为了访问`www.126.com`，我们可以使用`OpenUrl`关键字，直接打开指定的URL。这个操作不涉及复杂的元素选择或操作，仅仅是简单的页面访问。\n</thought>\n\n<code_block>\n# 打开126邮箱主页\nOpenUrl | https://www.126.com\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取姓名的值。提示可用 GetFieldVal 获取字段的值",
        "output": "<thought>\n根据题目提示，应使用 GetFieldVal 获取字段的值。因此，我们只需要将\"姓名\"作为参数传递给 GetFieldVal 即可获取姓名的值。\n</thought>\n\n<code_block>\n# 获取字段'姓名'的值\n${val}  GetFieldVal | 姓名\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：筛选内容 的关键字，接受 text，val 参数，val的默认值为空值，操作逻辑是，往输入text里面输入val值，然后点击查询，等待页面加载完成",
        "output": "<thought>\n在这个场景中，我们需要实现一个关键字：筛选内容。首先，我们需要在给定的文本输入框中输入值，然后点击查询按钮，最后等待页面加载完成。可以使用SetField关键字来输入值，Click关键字来点击查询按钮，以及WaitLoading关键字来等待页面加载。\n</thought>\n\n<code_block>\n*** Keywords ***\n筛选内容\n    [Arguments]  ${text}  ${val}=''\n    # 在给定的文本输入框中输入值\n    SetField  ${text}  ${val}\n    \n    # 点击查询按钮\n    Click  查询\n    \n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取${elem} 元素中所有标签为 svg 的元素，遍历点击svg元素",
        "output": "<thought>\n首先,我会使用FindElem获取${elem}中的所有svg元素，并把返回的元素列表存储在${svg_elements}中。然后使用内置的FOR循环关键字遍历${svg_elements}。在每一次迭代中，I 使用ClickElem关键字来点击每一个svg元素。这里使用了FindElem是因为我们需要找到${elem}元素下的所有svg子元素，而内置的FOR与ClickElem则用于遍历并点击所有的svg元素。\n</thought>\n\n<code_block>\n#获取${elem}中的所有svg元素\n${svg_elements}  FindElem  ${elem} svg\n\n#遍历svg元素\nFOR  ${svg}  IN  @{svg_elements}\n  #点击svg元素\n  ClickElem  ${svg}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置带宽峰值附近的输入框的值为2",
        "output": "<thought>\n为了在“带宽峰值”附近的input/textarea设置值为2，我们可以使用SetField关键字并指定near参数为“带宽峰值”。该关键字可以帮助我们定位到带宽峰值下方的控件，进而操作它并设置值为2。\n</thought>\n\n<code_block>\n# 设置带宽峰值附近的input/textarea的值为2\nSetField | input,textarea | 2 | near=带宽峰值\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "从页面 cookie 中获取 session_id",
        "output": "<thought>\n为了解决从页面cookie中获取session_id的问题，我们可以利用SeleniumLibrary中的Get Cookie关键字。首先，我们将获取名为session_id的cookie信息，然后提取其value属性，以获取具体的session_id的值。\n</thought>\n\n<code_block>\n# 获取名为session_id的cookie的信息\n${cookie}  Get Cookie  session_id\n\n# 打印cookie的值\nLog  Cookie value: ${cookie.value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找页面frame的个数",
        "output": "<thought>\n要查找页面中iframe的个数，我们可以直接使用GetElemCount关键字，并传入iframe选择器。这样可以获取页面中所有iframe元素的数量。\n</thought>\n\n<code_block>\n# 获取页面中iframe的数量\n${cnt}  GetElemCount | iframe\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 编辑域名 关键字，接受参数 domain ,业务逻辑如下\n# 1、点击 domain\n# 2、点击 编辑\n# 3、点击 基础配置\n# 4、设置 业务场景 为 页面\n# 5、设置 加速区域 为 全球\n# 6、设置 源站类型 自有源",
        "output": "<thought>\n要解决这个问题，我们需要编写一个关键字 `编辑域名`，该关键字接受一个参数 `domain`。首先需要依次点击 `domain`、`编辑`、和`基础配置`。随后，需要设置多个字段，利用 `BatchSetFields` 可以批量设置字段值，将 `业务场景` 设置为 `页面`，`加速区域` 设置为 `全球`，`源站类型` 设置为 `自有源`。\n</thought>\n\n<code_block>\n*** Keywords ***\n编辑域名\n    [Arguments]  ${domain}\n    # 依次点击 domain, 编辑, 基础配置\n    ClickTextOneByOne  ${domain}  编辑  基础配置\n    # 批量设置字段\n    BatchSetFields  业务场景=页面  加速区域=全球  源站类型=自有源\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置单元格（phone_id,状态）为不显示",
        "output": "<thought>\n首先，需要确定设置单元格的值，可以使用FillCell关键字。这里需要定位phone_id行和状态列的单元格，然后将其设为不显示。\n</thought>\n\n<code_block>\n# 将phone_id行的状态列单元格内容设置为不显示\nFillCell | phone_id | 状态 | 不显示\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果检查页面包含审批工单信息不完整，点击改文本右侧第一个的编辑icon",
        "output": "<thought>\n首先使用CheckHasText关键字检查页面是否包含\"审批工单信息不完整\"文本。然后，使用ClickIconToTheDirectionOf关键字指定基准元素为该文本，并在右侧点击第一个编辑icon。\n</thought>\n\n<code_block>\n# 检查页面包含\"审批工单信息不完整\"\nCheckHasText | 审批工单信息不完整\n\n# 点击\"审批工单信息不完整\"右侧第一个编辑icon\nClickIconToTheDirectionOf | 审批工单信息不完整 | right | edit | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在选择数据库中输入：EMR",
        "output": "<thought>\n为了在选择数据库中输入\"EMR\"，可以使用`SetField`关键字，因为`SetField`可以用于向指定的页面字段填入值。如果需要在特定的位置输入该值，应当确定操作的具体字段名称或使用相邻文本定位。\n</thought>\n\n<code_block>\n# 在选择数据库字段中输入EMR\nSetField | 选择数据库 | EMR\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面包含 ‘已停止’",
        "output": "<thought>\n为了等待页面包含‘已停止’的文本，可以使用RobotFramework提供的关键字`WaitText`，并设置等待的超时时间。这个关键字会在指定的时间内等待页面上出现指定的文本，满足题目要求。\n</thought>\n\n<code_block>\n# 等待页面包含‘已停止’\nWaitText | 已停止 | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加一行，设置表格最后一行的字段Key为user_map_key，设置表格最后一行的字段值为ip",
        "output": "\n    \n<thought>\n 首先，使用Click关键字点击“添加一行”按钮。然后使用GetRowCount关键字获取当前表格的行数，以确定最后一行的编号。接着，使用FillCell关键字分别设置最后一行的“Key”和“值”字段。\n </thought>\n \n <code_block>\n # 点击添加一行\n Click | 添加一行\n \n # 获取当前表格的行数\n ${row_count} =  GetRowCount\n \n # 设置表格最后一行的字段Key为user_map_key\n FillCell | ${row_count} | Key | user_map_key\n \n # 设置表格最后一行的字段值为ip\n FillCell | ${row_count} | 值 | ip\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "返回上一个窗口",
        "output": "<thought>\n为了实现返回上一个窗口的功能，可以使用关键字ToPrevWindow。该关键字用于切换回之前的窗口。\n</thought>\n\n<code_block>\n# 切换回之前的窗口\nToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入线上经营 10% 输入线下经营 5%",
        "output": "<thought>\n我们需要向两个不同的字段中输入百分比值。可以使用SetField关键字来完成这一任务。假设“线上经营”和“线下经营”是页面上可识别的字段名称。\n</thought>\n\n<code_block>\n# 输入线上经营：10%\nSetField | 线上经营 | 10%\n\n# 输入线下经营：5%\nSetField | 线下经营 | 5%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择售卖内容为：图书",
        "output": "<thought>\n我们可以通过使用SetField关键字来处理这个测试场景。我们可以假设\"售卖内容\"是一个下拉选择框或是一个可以输入内容的文本框。我们需要将其设置为\"图书\"。\n</thought>\n\n<code_block>\n# 选择售卖内容为：图书\nSetField | 售卖内容 | 图书\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对class=\"ranking-arco-spin\"，text=Video Profile元素进行截图对比，保存为视频封面文件",
        "output": "<thought>\n要对指定的元素进行截图对比，我们可以首先使用`FindElem`关键字来定位元素，然后使用`ImageDiff`来进行截图对比并保存为文件。根据提示，需要查找class为\"ranking-arco-spin\"且文本为\"Video Profile\"的元素，并保存截图文件为\"视频封面\"。我们可以构建一个jquery选择器`ranking-arco-spin:contains(Video Profile)`来精确定位目标元素。\n</thought>\n\n<code_block>\n# 查找class为\"ranking-arco-spin\"且文本为\"Video Profile\"的元素\n${elem}  FindElem | [class=ranking-arco-spin]:contains(Video Profile)\n\n# 对找到的元素进行截图对比，保存为\"视频封面\"文件\nImageDiff | ${elem} | pic_name=视频封面\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 查询刷新预热记录 的关键字，接受参数 domain，业务逻辑如下\n1、点击 操作记录\n2、设置 输入域名搜索 为 domain\n3、校验页面存在 URL/目录 操作类型 任务状态 操作时间\n4、点击 操作时间",
        "output": "<thought>\n要实现“查询刷新预热记录”的关键字，需要按照给定的业务逻辑步骤操作页面：\n\n1. 首先，需要使用`Click`关键字点击“操作记录”。\n2. 然后，使用`SetField`关键字将“输入域名搜索”设置为给定的参数`domain`。\n3. 接下来，需要校验页面是否存在“URL/目录”、“操作类型”、“任务状态”、“操作时间”这几个文本元素，使用`CheckHasText`关键字即可。\n4. 最后，需要点击“操作时间”，同样使用`Click`关键字。\n\n要特别注意的是，所有操作都是在当前页面上下文中进行的，不需要指定基准元素。\n</thought>\n\n<code_block>\n# 查询刷新预热记录的关键字\n\n*** Keywords ***\n查询刷新预热记录\n    [Arguments]  ${domain}\n\n    # Step 1: 点击操作记录\n    Click  操作记录\n\n    # Step 2: 设置输入域名搜索为 domain\n    SetField  输入域名搜索  ${domain}\n\n    # Step 3: 校验页面存在 URL/目录 操作类型 任务状态 操作时间\n    CheckHasText  URL/目录  操作类型  任务状态  操作时间\n\n    # Step 4: 点击操作时间\n    Click  操作时间\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向当前位置粘贴文本：休闲鞋",
        "output": "<thought>\n直接在当前位置粘贴文本“休闲鞋”，可以使用Paste关键字，提供空选择器和文本内容即可。\n</thought>\n\n<code_block>\n# 向当前位置粘贴文本：休闲鞋\nPaste | ${EMPTY} | 休闲鞋\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面是否存在包含：开学典礼 的弹窗",
        "output": "<thought>\n为了判断页面是否存在包含文本“开学典礼”的弹窗，我们可以使用提供的关键字IsPopupExists | text=。这个关键字允许我们指定一个文本，如果页面上有包含该文本的弹窗，则返回True，否则返回False。这个关键字直接提供了所需的功能，因此不用组合其他关键字。\n</thought>\n\n<code_block>\n# 判断页面是否存在包含“开学典礼”的弹窗\n${status}  IsPopupExists  开学典礼\nShould Be True  ${status}  # 校验弹窗存在\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向弹框中输入：旗开得胜",
        "output": "在这个场景中，我们的目标是在弹框中输入文本“旗开得胜”。根据提供的关键字说明，当我们需要将一系列值输入到弹框中，而未指定具体的字段名或区域选择器时，可以使用`FillPopup`关键字。因此在此场景中，使用`FillPopup`关键字是最合适的选择。\n</thought>\n\n<code_block>\n# 在弹框中输入“旗开得胜”\nFillPopup 旗开得胜\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击办公平台 跳转切换到一个新窗口",
        "output": "<thought>\n首先需要点击“办公平台”以触发新窗口，然后使用`ToNewWindow`切换到新窗口。\n</thought>\n\n<code_block>\n# 点击办公平台文本\nClick | 办公平台\n\n# 切换到新窗口\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "敲击回车",
        "output": "<thought>\n此任务仅需要敲击回车，可以使用SendText关键字并设置enter=True来完成。\n</thought>\n\n<code_block>\n# 敲击回车\nSendText | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标hover 第二个UUID",
        "output": "<thought>\n在这个场景中，需要实现的是鼠标hover到页面上第二个出现的文本'UUID'。这里我们可以使用MoTo关键字来实现鼠标移动动作。MoTo关键字允许我们指定文本和它的序列位置。因此，我们将使用MoTo | UUID | idx=1。因为第二个元素的序号在RobotFramework中为1（第一个是0）。\n</thought>\n\n<code_block>\n# 鼠标移动到第二个UUID\nMoTo | UUID | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 id 为 a 的 button",
        "output": "<thought>\n为了解决这个问题，我将使用关键字FindElem。它允许我通过jquery选择器定位到元素。在这种情况下，我需要查找id为a的按钮，所以jquery选择器应该是button[id=a]。\n</thought>\n\n<code_block>\n# 使用FindElem关键字，通过jquery选择器定位到id为a的按钮\n${element}  FindElem  |  button[id=a]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前页面 URL，然后截取URL中 的网络位置部分并存储到domain中",
        "output": "<thought>\n要获取当前页面的URL，可以使用`GetCurrentUrl`关键字，然后使用Python的`urlparse`库解析该URL，并提取网络位置部分（即域名）。由于Robot Framework没有直接提供这个功能，可以利用`Evaluate`关键字在Python中执行相关操作。\n</thought>\n\n<code_block>\n# 获取当前页面URL\n${url}  GetCurrentUrl\n\n# 使用Python的urlparse库解析URL，并获取网络位置部分（域名）\n${domain}  Evaluate  urllib.parse.urlparse($url).netloc  modules=urllib\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向第二个表格第一行输入 ${EMPTY} jpg 1",
        "output": "<thought>\n首先，我会先分析题目要求，题目要求是向第二个表格的第一行输入 ${EMPTY} jpg 1。因此我首先会想到使用FillRow关键字，这个关键字可以用来填充表格中的数据。然后在使用FillRow关键字时，我会设置参数 row_name_or_id=1, 表示填充的数据是在第一个表格行，然后通过 @args 参数传入我要填充的数据 ${EMPTY} jpg 1。最后，因为是要填充第二个表格，所以我会设置 tbl=2。\n</thought>\n\n<code_block>\n# 向第二个表格第一行输入 ${EMPTY} jpg 1\nFillRow | 1 | ${EMPTY} | jpg | 1 | tbl=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置云资源为：授权码、xxxxx",
        "output": "<thought>\n要设置云资源为“授权码”并输入“xxxxx”，可以使用SetField关键字来实现。首先，需要识别页面字段名称为“云资源”，然后依次输入“授权码”和“xxxxx”。\n</thought>\n\n<code_block>\n# 设置云资源为授权码\nSetField | 云资源 | 授权码 | xxxxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索框输入 变量req，回车",
        "output": "<thought>\n使用SetField关键字对搜索框进行输入，并设置enter参数为True来触发回车操作。\n</thought>\n\n<code_block>\n# 在搜索框中输入变量req并回车\nSetField | 搜索 | ${req} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在class包含A的div中输入\"ct\" \"=\" \"NY\"",
        "output": "<thought>\n在此场景中，需要利用FillArea关键字向指定的jquery选择器中填入值。选择器的构建基于class包含\"A\"的div，所以可以使用jquery选择器语法\"div[class*=A]\"来表示。然后通过FillArea将\"ct\"、\"=\"和\"NY\"依次填入。\n</thought>\n\n<code_block>\n# 在class包含A的div中输入\"ct\" \"=\" \"NY\"\nFillArea | div[class*=A] | ct | = | NY\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查 name 所在的行的 状态列 的内容为禁用",
        "output": "<thought>\n为了检查某行中特定列的内容，可以使用 `CheckCellHas` 关键字。首先需要找到包含 `name` 的行，然后检查该行的 `状态` 列中是否包含 `禁用`。这涉及行和列的定位。\n</thought>\n\n<code_block>\n# 校验 name 所在行的状态列包含禁用\nCheckCellHas | name | 状态 | 禁用\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 args 中的第一个参数为 ‘用户依次做过’ , 就要先把 ${target} 元素设置为 ‘用户依次做过’，然后计算 args 总长度 n, 点击 n-1次 ‘后续行为’",
        "output": "<thought>\n首先需要检查`args`的第一个参数是否为‘用户依次做过’，如果是，则设置${target}元素值为‘用户依次做过’。接着计算`args`的总长度n，并点击‘后续行为’n-1次。\n</thought>\n\n<code_block>\n# 如果 args 第一个参数为 ‘用户依次做过’\nIF  \"${args[0]}\" == \"用户依次做过\"\n    # 设置 ${target} 的值为 ‘用户依次做过’\n    SetField  ${target}  用户依次做过\n    # 计算 args 总长度 n\n    ${n}  Evaluate  len(${args})\n    # 点击 n-1 次 ‘后续行为’\n    FOR  ${i}  IN RANGE  1  ${n}\n        Click  后续行为\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个 \"Mac 笔记本 高配\" 右边的 class为semi-badge的对象",
        "output": "<thought>\n首先需要通过文本 \"Mac 笔记本 高配\" 定位第一个元素，然后再通过对应的关键字 \"ClickElemToTheDirectionOf\" 找到该元素右边的并且class为semi-badge的对象，并进行点击操作。\n</thought>\n\n<code_block>\n# 点击第一个 \"Mac 笔记本 高配\" 右边的 class为semi-badge的对象\nClickElemToTheDirectionOf | :contains(Mac 笔记本 高配):eq(0) | right | [class=semi-badge]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "开启浏览器",
        "output": "<thought>\n我们要使用的关键字是OpenBrowser，其参数包括url、cookies和name。这里不需要指定特定的url或cookies，我们只需简单地打开一个默认浏览器。\n</thought>\n\n<code_block>\n# 打开浏览器\nOpenBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待分群服务在线配置出现，然后点击“新增AP”按钮，然后等待页面出现“AP信息”文字",
        "output": "<thought>\n首先需要等待页面出现\"分群服务在线配置\"，然后点击\"新增AP\"按钮，最后再等待页面出现\"AP信息\"文字。我们可以使用WaitText来等待文本出现，使用Click关键字来点击按钮，再次使用WaitText来等待文本出现。\n</thought>\n\n<code_block>\n# 等待分群服务在线配置出现\nWaitText | 分群服务在线配置\n\n# 点击新增AP按钮\nClick | 新增AP\n\n# 等待AP信息文字出现\nWaitText | AP信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印${if_whitelist_1}的数据类型",
        "output": "<thought>\n为了打印变量 `${if_whitelist_1}` 的数据类型，可以使用 `Evaluate` 关键字执行 Python 代码。通过 `type()` 函数获取数据类型，然后打印出来。\n</thought>\n\n<code_block>\n# 打印${if_whitelist_1}的数据类型\nEvaluate | print(type(${if_whitelist_1}))\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左上角 退出icon，点击弹窗中的确定",
        "output": "<thought>\n首先，我需要点击左上角的退出icon，这可以通过`ClickIconToTheDirectionOf`方法来实现，其中基准元素是屏幕中心，方向是topLeft，icon是退出。接下来，我需要点击弹窗中的确定按钮，这可以通过使用`Click`方法，指定基准元素为POPUP。\n</thought>\n\n<code_block>\n# 点击左上角的退出icon\nClickIconToTheDirectionOf | SCREEN_CENTER | topLeft | exit\n\n# 点击弹窗中的确定\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第八个data-auto-id=oc-dropdown的位置，鼠标停留在此",
        "output": "<thought>\n对于这个场景，我们需要先点击第八个data-auto-id为oc-dropdown的元素，然后将鼠标停留在该元素上。我们可以使用ClickElem关键字来点击特定的元素，然后使用MoToElem关键字来将鼠标移动到该元素上。\n</thought>\n\n<code_block>\n# 点击第八个data-auto-id为oc-dropdown的元素\nClickElem | [data-auto-id='oc-dropdown']:eq(7)\n\n# 将鼠标移动到第八个data-auto-id为oc-dropdown的元素上\nMoToElem | [data-auto-id='oc-dropdown']:eq(7)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "有一个下拉框里边写着请选择状态 我想点击这个元素",
        "output": "<thought>\n在这个场景中，我们需要点击一个包含 \"请选择状态\" 的下拉框元素。根据提示信息，这个下拉框通常被实现为一个 class 包含 select 的元素。因此，我将使用 `ClickElem` 关键字来选择带有该 class 的元素。同时，我们会查找包含文本 \"请选择状态\" 的符合条件的第一个元素。\n</thought>\n\n<code_block>\n# 点击class包含select并且文本为“请选择状态”的元素\nClickElem | [class*=select]:contains(请选择状态)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入凤银洁并点击选择搜索出来的值",
        "output": "<thought>\n这个场景涉及到输入值并选择搜索出来的结果。首先，我们需要在某个输入框中输入\"凤银洁\"，然后等待搜索结果出现并选择它。对于输入操作，我们可以使用`SendText`关键字。如果搜索结果是通过文字显示的，我们可以假设结果是需要通过文本点击来选择的，因此可以使用`Click`关键字来选择搜索结果。由于题目中没有给出具体的选择条件或定位方式，我将默认选择第一个出现的搜索结果。\n</thought>\n\n<code_block>\n# 在光标位置输入“凤银洁”\nSendText | 凤银洁\n\n# 选择搜索出来的第一个结果（假设出现结果后选择第一个）\nClick | 凤银洁\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把请输入设置成${rule_name}，然后再设置class=\"ibf-fin-dropdownSelector-iconWrapper\"为：${rule_name}，校验页面列表页中有${rule_status}的表格行",
        "output": "<thought>\n首先，我们需要将名为\"请输入\"的字段设置为变量`${rule_name}`的值。接下来，使用选择器`class=\"ibf-fin-dropdownSelector-iconWrapper\"`设置为名称`${rule_name}`。最后，校验页面列表页中是否有包含`${rule_status}`的表格行。可以使用关键字`SetField`、`FillArea`和`CheckTableHas`来解决这些任务。\n</thought>\n\n<code_block>\n# 设置字段\"请输入\"为${rule_name}\nSetField | 请输入 | ${rule_name}\n\n# 设置\"class=ibf-fin-dropdownSelector-iconWrapper\"为名称：${rule_name}\nFillArea | [class=ibf-fin-dropdownSelector-iconWrapper] | ${rule_name}\n\n# 校验页面列表页中有${rule_status}的表格行\nCheckTableHas | ${rule_status}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 已选中 右边的编辑",
        "output": "<thought>\n在这个场景中，需要实现点击文本“已选中”右边的“编辑”。可以使用`ClickTextToTheDirectionOf`关键字，指定方向为“right”，并选择目标文本“编辑”。这个关键字能够根据基准文本“已选中”去定位其右边的文本“编辑”，并执行点击操作。\n</thought>\n\n<code_block>\n# 点击“已选中”右边的“编辑”\nClickTextToTheDirectionOf | 已选中 | right | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置全局变量‘StartTime’为上月1号的日期，格式为：2024/07/21 10:00",
        "output": "<thought>\n需要解决的问题是如何将全局变量`StartTime`设置为上个月的1号，时间格式为“2024/07/21 10:00”。可以使用RF的`Evaluate`关键字执行Python代码来完成这个任务。\n</thought>\n\n<code_block>\n# 设置全局变量StartTime为上个月1号的日期，格式为：2024/07/21 10:00\n${StartTime}  Evaluate  (datetime.datetime.now() - dateutil.relativedelta.relativedelta(months=1)).replace(day=1).strftime(\"%Y/%m/%d %H:%M\")\n\n# 设置为全局变量\nSet Global Variable  ${StartTime} \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击删除按钮 基准元素：内容包括 popconfirm-content 的class",
        "output": "<thought>\n要解决这个问题，我们需要点击一个删除按钮，该按钮位于一个具有特定class的基准元素中。首先，我们需要使用适当的选择器来定位该基准元素，即class中包含popconfirm-content的元素。然后在这个基准元素中寻找删除按钮并进行点击操作。可以使用Click关键字结合base参数来完成这个操作。\n</thought>\n\n<code_block>\n# 点击class包含popconfirm-content的基准元素中的删除按钮\nClick | 删除 | base=[class*=popconfirm-content]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待一秒后输入验证码 CODE_ONLINE。提示：这是要在验证码输入框中输入文本，是对有名称的页面字段的输入操作",
        "output": "<thought>\n首先需要等待一秒，然后找到验证码字段并输入验证码 \"CODE_ONLINE\"。由于验证码字段是有名称的页面字段，可以使用 `SetField` 关键字来完成输入操作。为了等待一秒，使用 `Sleep` 关键字。\n</thought>\n\n<code_block>\n# 等待一秒\nSleep 1s\n\n# 输入验证码 CODE_ONLINE\nSetField | 验证码 | CODE_ONLINE\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印 ${idx}",
        "output": "<thought>\n此场景需要输出一个已有变量，可以使用RF内置的Log关键字将变量值打印到日志中。\n</thought>\n\n<code_block>\n# 打印变量${idx}的值\nLog | ${idx}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘导入’ 下方的规则组",
        "output": "<thought>\n要实现点击“导入”下方的“规则组”这一操作，可以使用`ClickTextToTheDirectionOf`关键字。该关键字允许我们指定一个基准文本，比如“导入”，以及相对于这个基准文本的方向，比如“下方”（bottom），然后点击在这个方向上的目标文本“规则组”。\n</thought>\n\n<code_block>\n# 点击导入下方的规则组\nClickTextToTheDirectionOf | 导入 | bottom | 规则组\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器访问：https://www.feishu.cn/product/corehr\n等待页面加载完成后，点击data-elem-id=\"SY157Dq3kw\"的登录按钮",
        "output": "<thought>\n首先，我们需要使用OpenBrowser关键字打开指定的URL。然后，等待页面加载完成。接下来，使用ClickElem关键字点击data-elem-id为SY157Dq3kw的登录按钮。\n</thought>\n\n<code_block>\n# 打开飞书产品页面\nOpenBrowser | https://www.feishu.cn/product/corehr\n\n# 等待页面加载完成\nWaitLoading\n\n# 点击登录按钮\nClickElem | [data-elem-id='SY157Dq3kw']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在表格中填入秒杀价1，库存1",
        "output": "<thought>\n在这个任务中，我们需要在表格中输入两个值：秒杀价和库存。假设“秒杀价”和“库存”是表格中的列名，我们可以使用FillCell关键字来填写具体的单元格。首先，我们需要确定表格的行和列，然后使用FillCell关键字来完成输入操作。\n</thought>\n\n<code_block>\n# 填写表格第一行的秒杀价为1\nFillCell | 1 | 秒杀价 | 1 \n\n# 填写表格第一行的库存为1\nFillCell | 1 | 库存 | 1 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面包含中至少有2个${xx}文本",
        "output": "<thought>\n获取页面文本后，统计`${xx}`出现的次数，使用内置关键字检查次数是否大于等于2。\n</thought>\n\n<code_block>\n# 获取页面文本\n${page_text}  GetPageText\n\n# 计算`${xx}`出现的次数\n${count}  Evaluate  ${page_text}.count(\"${xx}\")\n\n# 校验`${xx}`出现次数是否至少为2\nShould Be True  ${count} >= 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${evop_name}左侧的icon，查找并点击class为arco-select-view-value-mirror的最后一个元素，点击开启",
        "output": "<thought>\n根据问题描述，我们需要依次执行以下操作：\n1. 点击 `${evop_name}` 左侧的 icon。这个可以通过 `ClickIconToTheDirectionOf` 实现。\n2. 查找 class 为 `arco-select-view-value-mirror` 的最后一个元素并点击。可以使用 `FindElem` 配合 `ClickElem` 实现。\n3. 点击文本为 \"开启\" 的元素，可以直接使用 `Click` 实现。\n</thought>\n\n<code_block>\n# 点击 ${evop_name} 左侧的 icon\nClickIconToTheDirectionOf | ${evop_name} | left\n\n# 查找 class 为 arco-select-view-value-mirror 的最后一个元素\n${last_elem}  FindElem | [class*=arco-select-view-value-mirror]:eq(-1)\n\n# 点击查找到的最后一个元素\nClickElem | ${last_elem}\n\n# 点击文本为 \"开启\" 的元素\nClick | 开启\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "返回表格一共有多少行",
        "output": "<thought>\n这个场景需要了解表格的行数，可以使用`GetRowCount`关键字来获取。\n</thought>\n\n<code_block>\n# 获取表格的总行数\n${row_count}  GetRowCount\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面有弹出“【组织切换】 搬到这里了”的弹窗，点击右上方的 x 取消掉",
        "output": "<thought>\n首先，我们需要检测特定文本“【组织切换】 搬到这里了”是否在页面上存在。这将帮助我们判断弹窗是否已经显示。如果检测到文本存在，则说明弹窗显示了，接着，我们需要点击弹窗右上方的关闭图标x来取消弹窗。给定的关键字中有ClickIconToTheDirectionOf可以用来点击基准元素右上方的icon，这个可以用于我们的需求。\n</thought>\n\n<code_block>\n# 检查页面是否出现“【组织切换】 搬到这里了”的文本\n${exist}  IsAnyTextExisting | 【组织切换】 搬到这里了\n\n# 如果弹窗存在，点击弹窗中“【组织切换】 搬到这里了”右上方的关闭图标\nIF  ${exist}\n    ClickIconToTheDirectionOf | :contains(【组织切换】 搬到这里了) | topRight | close\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击更多小图标，点击复制，页面包含“复制成功”。设置搜索Agent关键字为：“【自动化测试专用】请勿操作(copy)”，等待0.5s后，点击更多小图标，点击删除，点击确认。等待0.5s后，检测页面中class=ste-card的元素不存在。",
        "output": "\n    \n<thought>\n 要解决这个问题，我们可以按照以下步骤操作：\n 1. 使用ClickIcon关键字点击更多icon。\n 2. 点击复制选项。\n 3. 使用CheckHasText关键字验证页面包含“复制成功”。\n 4. 使用SetField设置搜索Agent关键字。\n 5. 使用Sleep等待0.5秒。\n 6. 再次点击更多icon。\n 7. 点击删除选项并确认。\n 8. 再次使用Sleep等待0.5秒。\n 9. 使用CheckNotHasElem验证class=ste-card的元素不存在。\n </thought>\n \n <code_block>\n # 点击更多icon\n ClickIcon | more\n \n # 点击复制\n Click | 复制\n \n # 验证页面包含“复制成功”\n CheckHasText | 复制成功\n \n # 设置搜索Agent关键字\n SetField | 搜索Agent | 【自动化测试专用】请勿操作(copy)\n \n # 等待0.5秒\n Sleep | 0.5s\n \n # 再次点击更多icon\n ClickIcon | more\n \n # 点击删除\n Click | 删除\n \n # 点击确认\n Click | 确认\n \n # 等待0.5秒\n Sleep | 0.5s\n \n # 验证class=ste-card的元素不存在\n CheckNotHasElem | .ste-card\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "循环@{checked_list}长度这么多次",
        "output": "<thought>\n1. 问题要求循环执行与列表长度相同的次数，这可以通过RobotFramework的FOR循环结构实现\n2. 使用`Get Length`关键字获取列表长度\n3. 使用`FOR`循环配合`IN RANGE`来创建指定次数的循环\n4. 由于是循环列表长度次数，可以直接使用列表变量本身作为循环范围\n</thought>\n\n<code_block>\n# 循环执行与checked_list列表长度相同的次数\nFOR  ${item}  IN  @{checked_list}\n    # 循环体内容\n    Log  ${item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面包含文本严格匹配‘视频’的元素",
        "output": "<thought>\n为了解决这个问题，需要使用提供的关键字来找到页面中包含文本“视频”的元素。考虑到要求严格匹配文本“视频”，应该使用FindByText关键字，并设置strict=True参数。\n</thought>\n\n<code_block>\n# 查找文本为'视频'的元素，严格匹配\n${elem}  FindByText | 视频 | strict=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将成本归属部门输入框清空\n# 在成本归属部门中输入：抖音-运营-影视综,并选中该部门\n# 点击项目类型，选择：无量化目标与收益\n# 点击确定",
        "output": "<thought>\n首先需要清空成本归属部门的输入框或文本区域，可以使用`SetField`关键字与`${KEY_BACKSPACE}`来达到清空的效果。接下来，需要在成本归属部门中输入具体的文本“抖音-运营-影视综”，并利用`SendText`来完成这个操作。随后，假设需要选择该文本选项，使用`SelectOption`关键字。接下来，点击项目类型，可以使用`Click`关键字。然后选择项目类型“无量化目标与收益”，可以使用`SelectOption`。最后，点击确定按钮，使用`Click`关键字。\n</thought>\n\n<code_block>\n# 清空成本归属部门字段的内容\nSetField | 成本归属部门 | ${KEY_BACKSPACE}\n\n# 在成本归属部门中输入“抖音-运营-影视综”\nSetField | 成本归属部门 | 抖音-运营-影视综\n\n# 选择成本归属部门的选项\nSelectOption | 抖音-运营-影视综\n\n# 点击项目类型\nClick | 项目类型\n\n# 选择 '无量化目标与收益'\nSelectOption | 无量化目标与收益\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验“请选择单个选项”这个表格，第一行包含：“选项 1”、“1”、“50%”",
        "output": "<thought>\n1. 首先需要明确要校验的是一个表格的第一行是否包含特定文本\n2. 根据需求，应该使用CheckRowHas关键字来校验表格行包含多个文本\n3. 表格名为\"请选择单个选项\"，行号为1(第一行)\n4. 需要校验的文本有三个：\"选项 1\"、\"1\"、\"50%\"\n5. 不需要指定base参数，因为不是弹窗中的表格\n</thought>\n\n<code_block>\n# 校验\"请选择单个选项\"表格第一行包含\"选项 1\"、\"1\"、\"50%\"\nCheckRowHas | 1 | 选项 1 | 1 | 50% | tbl=请选择单个选项\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：火山登录，接受 ${user}, ${password}, ${sub_account} 参数，默认值分别为 ${ADMIN_ACCOUNT}, ${ADMIN_PASSWORD}, ${SUB_ACCOUNT}, \n业务逻辑：\n等待页面加载好之后，如果${sub_account}为真，就先点击子用户登录，然后输入主账号用户名，子用户用户名，否则只需要输入用户名。\n然后输入密码，最后点击登录，等待页面出现 ‘快捷导航’",
        "output": "<thought>\n首先，创建一个名为“火山登录”的新关键字，接受 ${user}, ${password}, ${sub_account} 三个参数，并设置默认值。\n然后，等待页面加载完成，使用WaitLoading关键字。\n然后，使用IF...ELSE...END语法，判断 ${sub_account} 是否为真，如果为真，则意味着需要先登录子账户，因此我们需要点击“子用户登录”按钮，然后输入主账号用户名和子账号用户名。使用Click和SetField关键字来完成这些操作。如果 ${sub_account} 不为真，则只需要输入用户名，使用SetField关键字。\n然后，无论 ${sub_account} 是否为真，都需要输入密码，使用SetField关键字。\n然后，点击“登录”按钮，使用Click关键字。\n最后，等待页面出现“快捷导航”，使用WaitText关键字。\n</thought>\n\n<code_block>\n火山登录\n    [Arguments]  ${user}=${ADMIN_ACCOUNT}  ${password}=${ADMIN_PASSWORD}  ${sub_account}=${SUB_ACCOUNT}\n    \n    #等待页面加载完成\n    WaitLoading\n\n    #判断是否需要先点击子用户登录\n    IF  ${sub_account}\n        Click  子用户登录\n        SetField | 主账号用户名 | ${user}\n        SetField | 子用户用户名 | ${sub_account}\n    ELSE\n        SetField | 用户名 | ${user}\n    END\n   \n    #输入密码\n    SetField  | 密码 | ${password}\n   \n    #点击登录\n    Click  登录\n   \n    #等待页面出现“快捷导航”\n    WaitText  快捷导航\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到button class包含arco-switch-type-circle的第4个元素，然后判断他的aria-checked是否等于true，等于true 则点击确认 不等于true 就点击取消",
        "output": "<thought>\n 首先，我们需要使用FindElem关键字来找到class包含arco-switch-type-circle的第4个元素。然后，我们将使用Get Element Attribute关键字来获取该元素的aria-checked属性，并检查其是否等于true。最后，我们将使用IF/ELSE语句来根据aria-checked的值来点击确认或取消。\n </thought>\n \n <code_block>\n # 查找class包含arco-switch-type-circle的第4个元素\n ${elem} FindElem | button[class*=arco-switch-type-circle]:eq(3)\n \n # 获取元素的aria-checked属性值\n ${aria_checked} Get Element Attribute ${elem} aria-checked\n \n # 如果aria-checked等于true，则点击确认；否则，点击取消\n IF '${aria_checked}' == 'true'\n  Click | 确认\n ELSE\n  Click | 取消\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第2个标签名称左面，class包含checkbox的元素",
        "output": "<thought>\n在给定场景中，“点击第2个标签名称左面，class包含checkbox的元素”意味着我们需要确定一个基准元素并在其左侧点击一个特定的元素。我们可以使用`ClickElemToTheDirectionOf`关键字，它允许我们在指定基准元素的某个方向上点击目标元素。首先，我们需要找到基准元素“标签名称”，然后使用该元素作为基准，选择左侧方向并点击目标元素。目标元素是class包含checkbox的元素。在jQuery中，选择器可以通过[class*=checkbox]来表示。\n</thought>\n\n<code_block>\n# 点击第2个标签名称左面的class包含checkbox的元素\nClickElemToTheDirectionOf | :contains(标签名称):eq(1) | left | [class*=checkbox]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待一会，如果${approve_type} 为 盖章，获取页面上的“未比对”文案有${unmatched_count}个，然后执行${unmatched_count}+1次下面的操作：\n点击“盖章”按钮后，如果弹窗中出现“其他”字样时则点击“合同页数过多”再点击“确定”按钮，若弹窗中出现“审批意见”的话就点击弹窗中的“盖章”按钮",
        "output": "<thought>\n首先，我们需要等待一段时间, 可以使用Sleep关键字。在检查${approve_type}是否为\"盖章\"时，利用RF的IF语句。如果条件满足，获取页面上\"未比对\"文案的个数，使用GetElemCount关键字。将${unmatched_count}赋值给该值，并通过循环执行${unmatched_count}+1次操作。每次循环中，点击\"盖章\"按钮后，要判断弹窗中是否出现\"其他\"或者\"审批意见\"字样，然后执行相应的操作。可以使用IsAnyTextExisting判断文本存在与否，根据结果点击不同的按钮。\n</thought>\n\n<code_block>\n# 等待一段时间\nSleep  2s\n\n# 如果${approve_type}为盖章\nIF  \"${approve_type}\" == \"盖章\"\n    # 获取页面上“未比对”文案个数\n    ${unmatched_count}  GetElemCount  :contains(未比对)\n    \n    # 计算总次数\n    ${total_count}=  Evaluate  ${unmatched_count} + 1\n    \n    # 执行操作 ${unmatched_count}+1 次\n    FOR  ${index}  IN RANGE  ${total_count}\n        # 点击“盖章”按钮\n        Click  盖章\n        \n        # 判断弹窗是否出现“其他”\n        ${exist_other}  IsAnyTextExisting  其他  base=POPUP\n\n        # 判断弹窗是否出现“审批意见”\n        ${exist_opinion}  IsAnyTextExisting  审批意见  base=POPUP\n        \n        # 如果出现“其他”\n        IF  ${exist_other}\n            # 点击“合同页数过多”\n            Click  合同页数过多  base=POPUP\n\n            # 点击“确定”按钮\n            Click  确定  base=POPUP\n            \n        # 否则如果出现“审批意见”\n        ELSE IF  ${exist_opinion}\n            # 点击弹窗中的“盖章”按钮\n            Click  盖章  base=POPUP\n        END\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击下拉弹框里的退出登录",
        "output": "<thought>\n为了点击下拉弹框里的\"退出登录\"选项，我们可以使用Click关键字。因为需要明确这个文本是在弹框中，可以使用base参数指定为POPUP来表示操作的目标是在弹框中内容。通过这种方式，我们能够准确地找到并点击\"退出登录\"。\n</thought>\n\n<code_block>\n# 点击弹框中的退出登录\nClick | 退出登录 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “输入我方名称进行搜索”中输入${supplier}，等待页面中出现${supplier}，勾选 5 行日志文件，点击 批量下载按钮，校验页面书否存在下载 API 文档成功",
        "output": "<thought>\n首先输入供应商名称以触发搜索，可以使用SetField关键字。然后使用WaitText等待页面中出现该供应商名称，确认搜索正常进行。\n接着需要在表格中勾选前5行的日志文件，这里使用循环和CheckBoxOn关键字。\n最后，点击批量下载按钮，并通过CheckHasAnyText关键字校验页面是否存在“下载 API 文档成功”。\n</thought>\n\n<code_block>\n# 在指定位置输入供应商名称以触发搜索\nSetField | 输入我方名称进行搜索 | ${supplier}\n\n# 等待页面加载，确认搜索结果中出现供应商名称\nWaitText | ${supplier}\n\n# 循环勾选表格前5行中的checkbox\nFOR    ${i}    IN RANGE    1    6\n    ClickElemOfRow | ${i} | :checkbox\nEND\n\n# 点击批量下载按钮\nClick | 批量下载\n\n# 校验页面中是否存在“下载 API 文档成功”\nCheckHasAnyText | 下载 API 文档成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面上包含 同时对比 文案的按钮",
        "output": "<thought>\n在页面上寻找一个包含“同时对比”文案的按钮。可以使用 `Click` 关键字来点击包含该文本的元素。\n</thought>\n\n<code_block>\n# 点击包含“同时对比”的按钮\nClick | 同时对比\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将A元素移动页面中间",
        "output": "<thought>\n对于这一任务，我们需要使用关键字将元素移动到视野内。考虑到我们需要将A元素放到可见区域，我们可以通过使用`MoveIntoView`关键字来实现。\n</thought>\n\n<code_block>\n# 将A元素移动到视野内\nMoveIntoView | ${A}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击text为删除的div.arco-dropdown-menu-item元素",
        "output": "<thought>\n首先需要选择一个关键字来定位具有特定文本的元素。在这种情况下，使用 `FindElem` 来定位具有 `class=arco-dropdown-menu-item` 的 `div` 元素且文本为“删除”。然后，使用 `ClickElem` 点击该元素。\n</thought>\n\n<code_block>\n# 查找class包含arco-dropdown-menu-item, 文本为删除的div元素\n${elem}  FindElem | div.arco-dropdown-menu-item:contains(删除)\n\n# 点击找到的元素\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中 Amount due 并选择 Pre-tax amount(payment currency)",
        "output": "<thought>\n首先需要点击弹窗中的\"Amount due\"文本，然后选择\"Pre-tax amount(payment currency)\"选项。可以使用Click关键字来点击\"Amount due\"文本，并指定base为POPUP表示弹窗中的元素。然后使用SelectOption关键字选择\"Pre-tax amount(payment currency)\"选项。\n</thought>\n\n<code_block>\n# 点击弹窗中的 Amount due\nClick | Amount due | base=POPUP\n\n# 选择 ‘Pre-tax amount(payment currency)’\nSelectOption | Pre-tax amount(payment currency)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中 第2个“下载” 的右边图标",
        "output": "<thought>\n首先需要点击弹窗中第二个“下载”，然后再点击其右边的icon。使用ClickIconToTheDirectionOf关键字并指定基准元素和方向。因为是弹窗中操作，base参数设置为POPUP。方向是右边，icon参数为空表示点击任意icon。\n</thought>\n\n<code_block>\n# 点击弹窗中第二个“下载”右边的icon\nClickIconToTheDirectionOf | :contains(下载):eq(1) | right | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将文本为 sales 的元素，拖拽到 ${elem} 中",
        "output": "<thought>\n首先需要找到文本为 \"sales\" 的元素，然后将其拖拽到已知的 `${elem}` 元素上。可以使用 `FindByText` 来获取 \"sales\" 元素，再用 `DAndD` 进行拖拽操作。\n</thought>\n\n<code_block>\n# 查找文本为 sales 的元素\n${sales_elem}  FindByText | sales\n\n# 将 sales 元素拖拽到变量 ${elem} 指向的目标元素\nDAndD | ${sales_elem} | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "随机一个8位字符串，赋值给变量packeg_id",
        "output": "<thought>\n要生成一个8位长的随机字符串并赋值给变量`packeg_id`，可以使用`GenerateRandom`关键字。该关键字允许我们指定字符串的长度和字符集。在这里，我们可以使用`[LETTERS][NUMBERS]`来生成包含字母和数字的随机字符串。\n</thought>\n\n<code_block>\n# 生成8位随机字符串并赋值给变量packeg_id\n${packeg_id}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“用户登录并访问大屏页面” 的关键字，接受参数user, password, url，默认值分别为变量：ADMIN_ACCOUNT、ADMIN_PASSWORD 和 大屏URL，\n关键字作用是：\n打开浏览器访问给定的 url，然后输入账号和密码，点击登录，并等待页面URL中不再包含 login 或 auth",
        "output": "<thought>\n首先分析这个场景所需的步骤：\n\n1. 打开浏览器并访问给定的 URL。\n2. 输入账号和密码。\n3. 点击登录按钮。\n4. 等待页面 URL 中不再包含 \"login\" 或 \"auth\"。\n\n根据这些步骤，我会选择以下关键字：\n- `OpenBrowser`：打开浏览器并访问 URL。\n- `BatchSetFields`：批量填写账号和密码字段。\n- `Click`：点击登录按钮。\n- `WaitURLNotContains`：等待 URL 不包含 \"login\" 或 \"auth\"。\n\n接着，创建一个自定义关键字 `用户登录并访问大屏页面`，该关键字接受三个参数 `user`、`password` 和 `url`，并为它们设置默认值。\n</thought>\n\n<code_block>\n*** Keywords ***\n用户登录并访问大屏页面\n    [Arguments]  ${user}=${ADMIN_ACCOUNT}  ${password}=${ADMIN_PASSWORD}  ${url}=${大屏URL}\n    # 打开浏览器并访问给定的 URL\n    OpenBrowser  ${url}\n    # 批量填写账号和密码字段\n    BatchSetFields  账号=${user}  密码=${password}\n    # 点击登录按钮\n    Click  登录\n    # 等待 URL 不再包含 \"login\" 或 \"auth\"\n    WaitURLNotContains  login  auth\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击启动分层存储右侧按钮",
        "output": "<thought>\n首先，看到需求中的“点击启动分层存储右侧按钮”，我们可以知道需要点击的不是某一个具体的文本，而是“启动分层存储”这个文本的右侧的某一个按钮。在这个情况下，我们可以使用RF框架中的`ClickElemToTheDirectionOf`关键字。\"启动分层存储\"作为基准元素，方向为右边，selector可以设为button，表示要寻找的是一个按钮。\n\n于是我们可以有以下的思路：\n1. 根据提供的关键字，我们可以使用`ClickElemToTheDirectionOf`来寻找到\"启动分层存储\"右边的按钮并点击，所以首先调用这个关键字。\n2. 在调用`ClickElemToTheDirectionOf`的时候，需要传入的参数有基准元素、方向和选择器，这里基准元素就是\"启动分层存储\"，方向是\"right\"，选择器是\"button\"。\n</thought>\n\n<code_block>\n# 点击\"启动分层存储\"右侧的按钮\nClickElemToTheDirectionOf | :contains(启动分层存储) | right | button\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“检查飞书匹配新增user_id字段”的关键字，业务逻辑为：先点击页面上的飞书字样，然后点击用户绑定右侧的class 为arco-icon arco-icon-edit的元素，等待 1 秒，然后点击增量更新，鼠标往下滚动1次，点击placeholder 为办公平台字段的输入框，检查页面包含User Id 字段，最后点击取消按钮",
        "output": "<thought>\n首先点击飞书字样，然后点击用户绑定右侧的class 为arco-icon arco-icon-edit的元素，等待 1 秒，点击增量更新，鼠标往下滚动1次，点击placeholder 为办公平台字段的input/textarea，检查页面包含User Id 字段，最后点击取消按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n检查飞书匹配新增user_id字段\n    Click | 飞书\n    ClickElemToTheDirectionOf | 用户绑定 | right | [class=arco-icon.arco-icon-edit]\n    Sleep | 1s\n    Click | 增量更新\n    PageDown | 1\n    ClickElem | input[placeholder=\"办公平台字段\"],textarea[placeholder=\"办公平台字段\"]\n    CheckHasText | User Id\n    Click | 取消\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "清空经办人选项",
        "output": "<thought>\n 此任务要求清空“经办人”选项，通常这可以通过在该字段中输入删除键来实现。我们可以使用`SetField`关键字，通过传递`${KEY_BACKSPACE}`来清空字段。\n </thought>\n \n <code_block>\n # 清空经办人选项\n SetField | 经办人 | ${KEY_BACKSPACE}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘选择节点范围’ 右边的按钮",
        "output": "<thought>\n在这个场景中，我们要点击的是一个位于\"选择节点范围\"右边的按钮。由于没有明确的按钮名称，因此我们需要使用`ClickElemToTheDirectionOf`关键字，通过指定\"选择节点范围\"作为基准文本，方向为\"right\"，目标选择器为`button`来实现点击操作。这样可以准确地识别并点击目标按钮。\n</thought>\n\n<code_block>\n# 点击 ‘选择节点范围’ 右边的按钮\nClickElemToTheDirectionOf | 选择节点范围 | right | button\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class含有base-version-select的div,并且点击后弹出的下拉框中选择v3这个选项",
        "output": "<thought>\n1. 首先需要点击class包含base-version-select的div元素，可以使用ClickElem关键字\n2. 点击后会弹出下拉框，需要在弹窗(POPUP)中选择v3选项，可以使用SelectOption关键字并指定base=POPUP\n3. 由于是下拉框选择操作，使用SelectOption比Click更合适\n4. 需要注意jquery选择器的写法，class选择器使用[class*=base-version-select]\n</thought>\n\n<code_block>\n# 点击class包含base-version-select的div\nClickElem | div[class*=base-version-select]\n\n# 在弹窗中选择v3选项\nSelectOption | v3 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送以下请求，从其响应的 json 中取出 original, payable, discount 字段，请求如下：curl 'https://xxx.yyy.zzz.com/api/# top/certificate_service/cn-north-1/2021-06-01/VolcanoCertificateQueryPrice' \\\n-H 'accept: application/json, text/plain, */*' \\\n-H 'content-type: application/json; charset=UTF-8' \\\n-H 'x-upstream: volcano' \\\n--data-raw '{\"number\":1,\"plan\":\"geotrust_wildcard_dv\",\"cert_type\":1,\"standard_count\":0,\"wildcard_count\":0,\"project\":\"default\"}'",
        "output": "<thought>\n首先，我需要使用关键字\"UiSendRequest\"来发送POST请求，并获取响应中的json信息。然后，借助于\"GetValuesFromJson\"关键字，我可以方便地从Json中获取指定键的值。具体来说，我需要获取'original', 'payable', 'discount'这三个键的值。\n</thought>\n\n<code_block>\n# 发送POST请求\n${header}  Set Variable  {\"accept\": \"application/json, text/plain, */*\", \"content-type\": \"application/json; charset=UTF-8\", \"x-upstream\": \"volcano\"}\n${body}  Set Variable  {\"number\":1,\"plan\":\"geotrust_wildcard_dv\",\"cert_type\":1,\"standard_count\":0,\"wildcard_count\":0,\"project\":\"default\"}\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/api/# top/certificate_service/cn-north-1/2021-06-01/VolcanoCertificateQueryPrice | ${body} | ${header}\n\n# 从响应的json中获取指定的键值\n${original}  GetValuesFromJson | ${resp_json} | original\n${payable}  GetValuesFromJson | ${resp_json} | payable\n${discount}  GetValuesFromJson | ${resp_json} | discount\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 设置一个变量testName为：“自动化测试专用”加上此刻时间戳",
        "output": "<thought>\n为了完成这个任务，我需要将当前时间戳与字符串“自动化测试专用”组合成一个变量。首先，我会使用RF的时间关键字获取当前时间戳，然后使用内置关键字来连接字符串和时间戳。\n</thought>\n\n<code_block>\n# 获取当前时间戳\n${timestamp} Get Current Date result_format=epoch\n\n# 将“自动化测试专用”与时间戳组合成变量testName\n${testName} Set Variable 自动化测试专用${timestamp}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为退出登录的关键字，操作逻辑是 点击顶部导航栏最右边的头像，然后点击退出登录，等待页面加载完成",
        "output": "<thought>\n首先需要点击顶部导航栏最右边的头像，可以通过定位[class*=avatar]的元素来实现。然后需要点击弹出的“退出登录”文本，最后等待页面加载完成。可以依次使用ClickElem、Click和WaitLoading关键字来实现操作。\n</thought>\n\n<code_block>\n*** Keywords ***\n退出登录\n    # 点击顶部导航栏最右边的头像\n    ClickElem | [class*=avatar]:eq(-1)\n    \n    # 点击退出登录\n    Click | 退出登录\n    \n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹窗的账务账期 2024-09 ~ 2024-09",
        "output": "<thought>\n解决问题思路：首先需要设置弹窗中的账务账期字段，可以使用SetField关键字，设置base=POPUP表示操作弹窗中的字段，然后填写相应的值。\n</thought>\n\n<code_block>\n# 设置弹窗的账务账期 2024-09 ~ 2024-09\nSetField | 账务账期 | 2024-09 ~ 2024-09 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击DNS安全，等待页面加载完成 超时时间60s，检查在线下载按钮是否置灰禁用",
        "output": "<thought>\n在这个场景中，我们需要模拟点击“DNS安全”这个文本，接着等待页面加载完成，最后检查页面上的“在线下载”按钮是否处于禁用状态。可以使用关键字Click来点击“DNS安全”，然后使用WaitLoading来等待页面加载。最后使用IsElementDisabled来判断“在线下载”按钮的状态。\n</thought>\n\n<code_block>\n# 点击DNS安全\nClick | DNS安全\n\n# 等待页面加载完成，最多等60秒\nWaitLoading | timeout=60\n\n# 检查在线下载按钮是否置灰禁用\n${status}  IsElementDisabled | button:contains(在线下载)\n\n# 断言按钮置灰禁用\nShould Be True  ${status}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格的表头包含：分摊月、账务账期、实例ID/名称",
        "output": "<thought>\n我们需要验证表格的表头是否包含特定的文本。可以使用CheckRowHas关键字，通过指定HEAD作为行标识符来检查表头行中是否包含“分摊月”、“账务账期”、“实例ID/名称”这些文本。\n</thought>\n\n<code_block>\n# 校验表格的表头包含：分摊月、账务账期、实例ID/名称\nCheckRowHas | HEAD | 分摊月 | 账务账期 | 实例ID/名称\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个关键字“切换页数”，接受参数num，代表第几页。默认值为1。思路是使用定位title包含“Page”的div元素，并点击其中的：‘第 num 页’",
        "output": "<thought>\n为了解决这个问题，我们需要创建一个关键字“切换页数”，它接受一个参数num，表示要切换到的页码。默认值为1。我们将使用RF的Click关键字来模拟点击操作，以便导航到指定的页码。首先，我们需要查找到包含“Page”的div元素。为了实现这一点，我们可以使用FindElem关键字来定位这个div，然后在它的范围内，点击“第 num 页”，这需要在选择器中构建一个条件来选择正确的页码元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n切换页数\n    [Arguments]  ${num}=1\n    # 获取title包含Page的div元素\n    ${div_elem}  FindElem  div[title*='Page']\n    # 点击其中包含“第 num 页”的文本\n    Click  第 ${num} 页  base=${div_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格中的第一行第一列包含{evop_name}，检查页面操作人一列不包含admin",
        "output": "<thought>\n对于这个场景，我们需要进行两项检查：\n1. 检查表格中的第一行第一列是否包含变量{evop_name}。\n2. 检查页面的“操作人”一列不包含文本“admin”。\n\n我们可以使用`CheckCellHas`关键字来验证第一行第一列是否包含指定文本。同时，可以使用`CheckColNotHas`关键字来验证特定列中不包含指定文本。需要假设“操作人”是页面上的一个表格列。\n</thought>\n\n<code_block>\n# 检查表格中的第一行第一列包含变量evop_name\nCheckCellHas | 1 | 1 | ${evop_name}\n\n# 检查操作人列不包含文本admin\nCheckColNotHas | 操作人 | admin\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击class为ovui-tabs__tab的页面元素\n ",
        "output": "<thought>\n 要点击class为ovui-tabs__tab的页面元素，可以使用ClickElem关键字。需要创建一个jquery选择器来定位该元素，即通过class选择器.ovui-tabs__tab。\n </thought>\n \n <code_block>\n # 点击class为ovui-tabs__tab的元素\n ClickElem | [class=ovui-tabs__tab]\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "清除 搜索关键词 内容",
        "output": "<thought>\n根据给定的关键字描述，我们需要清除“搜索关键词”字段的内容。可以使用SetField关键字，通过传递${KEY_BACKSPACE}来删除字段内容。\n</thought>\n\n<code_block>\n# 清空搜索关键词字段\nSetField | 搜索关键词 | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "浏览器滚动到最底部",
        "output": "<thought>\n解决问题思路：使用PageDown关键字滚动页面，直到无法再向下滚动。由于问题描述没有提供如何检测页面是否滚动到最底部的机制，因此我们只能持续滚动一个合理的次数，假设这个次数能够将页面滚动到最底部。\n</thought>\n\n<code_block>\n# 页面向下滚动10次，假定页面在此次数内可滚动到最底部\nPageDown | 10\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送 post 请求到 https://www.126.com, 参数为：id=x, name=y, 如果响应中的 data 字段中包含 x 则成功，否则就失败",
        "output": "<thought>\n首先需要使用`UiSendRequest`关键字发送POST请求到指定的URL，并传递请求体参数`id=x, name=y`。接收到响应后，检查响应中的`data`字段是否包含`x`。如果包含则记录成功，否则记录失败。\n</thought>\n\n<code_block>\n# 向 https://www.126.com 发送 post 请求, 请求体: {\"id\": \"x\", \"name\": \"y\"}\n${resp_json}  UiSendRequest | POST | https://www.126.com | {\"id\": \"x\", \"name\": \"y\"}\n\n# 检查响应中的 data 字段是否包含 x\n${data_exists}  Evaluate  'x' in ${resp_json}['data']\n\n# 根据检查结果记录成功或失败\nIF  ${data_exists}\n    Log  成功\nELSE\n    Log  失败\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 时间输入框的小图标",
        "output": "<thought>\n为了点击时间输入框的icon，我们需要先确定icon的选择器。假设时间input/textarea的icon名称是clock。我们会使用`ClickIcon`关键字点击这个icon。因为`ClickIcon`关键字可以直接点击小图标，所以它是最合适的选择。\n</thought>\n\n<code_block>\n# 点击时间输入框的icon\nClickIcon | clock\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查元素 class=\"arco-spin c-m-table-spin\" 内包含 域名 加速场景 状态 CNAME",
        "output": "<thought>\n解决问题思路：\n1. 使用`CheckHasElem`关键字检查页面中是否存在class=\"arco-spin c-m-table-spin\"的元素。\n2. 使用`CheckHasText`关键字检查该元素内是否包含指定的文本。\n</thought>\n\n<code_block>\n# 检查页面是否包含class=\"arco-spin c-m-table-spin\"的元素\nCheckHasElem | [class=\"arco-spin c-m-table-spin\"]\n\n# 检查该元素内是否包含指定的文本\nCheckHasText | 域名 | 加速场景 | 状态 | CNAME | base=[class=\"arco-spin c-m-table-spin\"]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取模块 近30天数据概况 中 音浪(火力) 指标的值",
        "output": "<thought>\n为了获取目标数据，我们首先需要通过一些关键词来定位到“近30天数据概况”模块中的“音浪(火力)”指标。由于GetFieldVal关键字能够直接获取字段的值并且支持near参数，因此可以利用该关键字来获取“音浪(火力)”的值。\n</thought>\n\n<code_block>\n# 获取音浪(火力)指标的值，在“近30天数据概况”模块附近\n${val}  GetFieldVal | 音浪(火力) | near=近30天数据概况\n\n# 输出获取的值以供验证\nLog  音浪(火力)的值为：${val}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选 ‘张三’ 所在表格行，然后点击删除",
        "output": "<thought>\n为了实现这个步骤，分别需要选取张三所在的表格行，然后点击删除。选择张三所在的表格行使用`SelectTableRow`，之后点击删除使用`Click`。\n</thought>\n\n<code_block>\n# 选中张三所在的表格行\nSelectTableRow | 张三\n\n# 点击删除\nClick | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “关闭浏览器” 的关键字，作用是将浏览器关闭",
        "output": "<thought>\n 为了关闭浏览器，可以直接使用提供的CloseBrowser关键字。这个关键字已经实现了关闭浏览器的功能，因此不需要额外的操作。\n </thought>\n \n <code_block>\n 关闭浏览器\n  # 使用CloseBrowser关键字关闭浏览器\n  CloseBrowser\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "提取url中的user-cohort/history和?lastTime中间的内容",
        "output": "<thought>\n首先获取当前的URL。然后使用Python的正则表达式库re从URL中提取\"user-cohort/history\"和\"?lastTime\"之间的内容。\n</thought>\n\n<code_block>\n# 获取当前URL\n${current_url}  GetCurrentUrl\n\n# 使用Python的正则表达式库re提取URL中的特定内容\n${content}  Evaluate  re.search(r'user-cohort/history(.*?)\\?lastTime', '${current_url}').group(1)  re\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在输入框 回显为 未命名报表_1 中 输入 今天统计结果-1",
        "output": "<thought>\n在这个场景中，我们需要在一个input或者textarea中输入文本。因为没有提到具体的字段名称，只提及了回显文本为\"未命名报表_1\"，这意味着我们需要通过选择器找到这个特定的控件。可以使用jquery选择器结合回显文本来定位，然后使用`FillArea`关键字来输入文本。\n</thought>\n\n<code_block>\n# 在回显为未命名报表_1的输入框中输入今天统计结果-1\nFillArea | input[placeholder='未命名报表_1'], textarea:contains('未命名报表_1') | 今天统计结果-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验len(@{jixiao_info})-1大于5",
        "output": "<thought>\n1. 首先需要使用RF内置的`Get Length`关键字获取列表`@{jixiao_info}`的长度\n2. 然后需要将长度减1，可以使用`Evaluate`关键字执行Python表达式\n3. 最后使用RF的`Should Be True`关键字校验结果是否大于5\n4. 整个过程需要分步进行，先获取长度，再计算减1后的值，最后进行校验\n</thought>\n\n<code_block>\n# 获取列表长度\n${length}  Get Length  ${jixiao_info}\n\n# 计算长度减1\n${result}  Evaluate  ${length} - 1\n\n# 校验结果大于5\nShould Be True  ${result} > 5\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面上的“清除缓存”按钮",
        "output": "<thought>\n分析任务是在页面上找到“清除缓存”按钮并点击。可以使用`ClickElem`关键字结合jQuery选择器定位该按钮。假设该按钮是一个带有文本的标准按钮元素，可以使用`:contains(清除缓存)`选择器。\n</thought>\n\n<code_block>\n# 点击包含文本“清除缓存”的按钮\nClickElem | button:contains(清除缓存)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向下滚动",
        "output": "<thought>\n对于“向下滚动”这一要求，首先考虑使用RobotFramework的PageDown关键字。该关键字实现页面滚动，可以设置滚动的次数。默认情况下，PageDown滚动一次既能满足要求。\n</thought>\n\n<code_block>\n# 向下滚动1次\nPageDown | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 包含催办的按钮 位置",
        "output": "<thought>\n要移动鼠标到包含“催办”按钮的位置，可以使用MoToElem关键字，结合具体的元素识别方式。这里，使用jquery选择器来定位button元素，选择器为button:contains(催办)\n\n选择器可以通过MoveIntoView来确保元素在视野内，以便鼠标可以移动到该元素上。\n</thought>\n\n<code_block>\n# 将包含“催办”的button移动到视野内以确保元素可见\nMoveIntoView | button:contains(催办)\n\n# 鼠标移动到包含“催办”的button\nMoToElem | button:contains(催办)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面右侧存在 删除 小图标, 点击它，校验存在购买次日起360天，购买当天默认可用",
        "output": "<thought>\n分析这个场景，需要判断页面右侧是否存在“删除”icon，然后点击它，最后校验文本。可以使用HasIconToTheDirectionOf判断icon是否存在，ClickIconToTheDirectionOf点击icon，CheckHasText校验文本。\n</thought>\n\n<code_block>\n# 判断页面右侧是否存在“删除”icon\n${exist}  HasIconToTheDirectionOf | SCREEN_CENTER | right | delete\n\n# 如果“删除”icon存在，那么点击它并校验文本\nIF  ${exist}\n    # 点击“删除”icon\n    ClickIconToTheDirectionOf | SCREEN_CENTER | right | delete\n\n    # 校验存在指定的文本\n    CheckHasText | 购买次日起360天 | 购买当天默认可用\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “查找canvas” 的关键字，接受参数 text, idx, 其中 idx 的默认值为1，表示给定文案text下方的第一个canvas元素，关键字的逻辑是：\n# 1. 查找文本严格匹配 text 的元素，然后查找其祖先中最近的一个含有第 idx 个 canvas 的div祖先元素\n# 2. 在这个祖先元素中查找第 idx 个 canvas 元素并返回",
        "output": "<thought>\n首先，需要查找文本严格匹配 text 的元素。接着，从这个元素开始查找其祖先中包含第 idx 个 canvas 的 div 祖先元素。最后，在这个祖先元素中查找第 idx 个 canvas 元素并返回。因此，可以使用 FindByText 来查找文本元素，FindParentElem 查找祖先元素，再用 FindElem 查找目标 canvas。\n</thought>\n\n<code_block>\n*** Keywords ***\n查找canvas\n    [Arguments]  ${text}  ${idx}=1\n\n    # 查找文本严格匹配 text 的元素\n    ${elem}  FindByText  ${text}  strict=True\n    \n    # 查找包含第 ${idx} 个 canvas 的 div 祖先元素\n    ${ancestor}  FindParentElem  ${elem}  div:has(canvas:eq(${idx}-1))\n    \n    # 在这个祖先元素中查找第 ${idx} 个 canvas 元素并返回\n    ${canvas}  FindElem  canvas:eq(${idx}-1)  base=${ancestor}\n    [Return]  ${canvas}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用“任务中心审批” 的关键字，入参： ${USER_LFF_CLM1_PRE} ${ENV} ${search_value}",
        "output": "<thought>\n首先需要调用“任务中心审批”关键字，并传入参数。假设这个关键字执行一些审批操作。我们需要确保参数正确传递并调用关键字。\n</thought>\n\n<code_block>\n# 调用“任务中心审批”关键字，传入参数：${USER_LFF_CLM1_PRE}, ${ENV}, ${search_value}\n任务中心审批 | ${USER_LFF_CLM1_PRE} | ${ENV} | ${search_value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格的所有行的 授权编号 列的值 和${LisnNo}一致",
        "output": "<thought>\n首先，可以通过关键字 GetRowCount 获取表格的行数，然后通过循环来获取每行中的“授权编号”列的值，然后使用 RF 的内置关键字 Should Be Equal As Strings 来验证获取的值和${LisnNo}是否一致。\n</thought>\n\n<code_block>\n# 获取表格行数\n${rows}  GetRowCount\n# 使用 FOR 循环遍历每一行\nFOR  ${i}  IN RANGE  1  ${rows}+1\n    # 获取每一行的列的值\n    ${val}  GetCellValue  ${i}  授权编号\n    # 验证获取的值和${LisnNo}是否一致\n    Should Be Equal As Strings  ${val}  ${LisnNo}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验产品服务正下方包含增长分析",
        "output": "<thought>\n在这个场景中，我们需要验证在“产品服务”正下方的元素是否包含“增长分析”文本。我们可以使用CheckHasTextToTheDirectionOf关键字，该关键字通常用来验证特定文本是否存在于基准元素的给定方向。在目前的场景中，我们将“产品服务”作为基准元素，并指定方向为“bottom”，然后校验其中是否存在“增长分析”。\n</thought>\n\n<code_block>\n# 校验产品服务正下方包含文案：增长分析\nCheckHasTextToTheDirectionOf | 产品服务 | bottom | 增长分析\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 每日消费时段 右侧存在 全天可用",
        "output": "<thought>\n我们需要验证\"每日消费时段\"右侧是否存在文本\"全天可用\"。使用\"CheckHasTextToTheDirectionOf\"关键字，可以有效地完成文本校验任务，指定方向为\"right\"。在这个场景中，我们不需要使用复杂的Selector，因为我们仅校验特定文本在预期位置存在。\n</thought>\n\n<code_block>\n# 校验“每日消费时段”右侧存在“全天可用”\nCheckHasTextToTheDirectionOf | 每日消费时段 | right | 全天可用\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置可预约有效期为：${start_date} ~ ${end_date}",
        "output": "<thought>\n为了设置可预约有效期，我将使用`SetField`关键字，输入`${start_date} ~ ${end_date}`到名称为\"可预约有效期\"的字段。\n</thought>\n\n<code_block>\n# 设置可预约有效期为：${start_date} ~ ${end_date}\nSetField | 可预约有效期 | ${start_date} ~ ${end_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "从${module_list}里随机找一个参数作为变量A",
        "output": "<thought>\n对于这个场景，我们需要从一个变量列表${module_list}中随机选择一个参数并将其分配给变量A。首先，我们需要确定如何从列表中随机选择一个元素。在Robot Framework中，没有直接用于从列表中随机选择元素的关键字，但我们可以通过使用Evaluate关键字调用Python的random模块来实现这个功能。然后，将随机选择的元素赋值给变量A。\n</thought>\n\n<code_block>\n# 使用Python的random.choice从${module_list}中随机选择一个元素，并将其赋值给变量A\n${A}  Evaluate  random.choice(${module_list})  modules=random\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求：curl 'https://vengine-console.bytedance.net/datarangers/api/projects/2113476/events:batchOperate' \\\n--data-raw '{\"operation_type\":7,\"events\":[{\"name\":\"event2OIfKc9pl9\"}]}'",
        "output": "<thought>\n分析这个请求，我们需要发送一个POST请求，并且请求体是JSON格式。我们可以使用提供的关键字UiSendRequest来实现。要特别注意构建请求体的JSON格式。\n</thought>\n\n<code_block>\n# 向 https://xxx.yyy.zzz.com/datarangers/api/projects/2113476/events:batchOperate 发送 POST 请求，带有请求体\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/datarangers/api/projects/2113476/events:batchOperate | {\"operation_type\": 7, \"events\": [{\"name\": \"event2OIfKc9pl9\"}]}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向新增接入左侧的input输入sayid自动化测试专用2025Q4",
        "output": "<thought>\n解决这个问题我们需要定位到\"新增接入\"左侧的input元素，然后将文本\"siyid自动化测试专用2025Q4\"输入进去。可以使用`FindElemToTheDirectionOf`关键字来找到这个位置的input元素，然后使用`FillArea`关键字输入文本。\n</thought>\n\n<code_block>\n# 查找新增接入左侧的input元素\n${input_elem}  FindElemToTheDirectionOf | 新增接入 | left | input\n\n# 向找到的input元素中输入文本\nFillArea | ${input_elem} | sayid自动化测试专用2025Q4\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置分析时段”，接受参数 args, 主要逻辑是向class为PeriodControl__container__DRHj2的div中输入给定的一个或多个参数",
        "output": "<thought>\n首先我会创建一个关键字“设置分析时段”，这个关键字会接受一个参数，也就是args。我会使用FillArea关键字来进行操作，因为这个关键字可以操作页面上jquery选择器代表的控件区域，并向其中输入给定的一个或多个参数。我会用jquery选择器来选择class为PeriodControl__container__DRHj2的div。\n</thought>\n\n<code_block>\n设置分析时段\n    [Arguments]  @{args}\n    FillArea  |  div[class=PeriodControl__container__DRHj2]  |  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面是否有错误，‘失败’ 不算错误",
        "output": "<thought>\n在这个场景中，我们需要校验页面是否有错误，但是要排除 '失败' 这个词。我们可以使用 RF 框架的 'CheckErrExclude' 关键字来实现这个需求。\n</thought>\n\n<code_block>\n# 使用 'CheckErrExclude' 关键字校验页面错误，排除 '失败' 这个词\nCheckErrExclude | 失败\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ‘确认’ 按钮不可点击",
        "output": "<thought>\n为了校验一个按钮是否可点击，我们可以使用CheckElemDisabled关键字。关键在于找到确认按钮的正确选择器。推测选择器应该是包含文本\"确认\"的按钮元素，即\"button:contains(确认)\"。\n</thought>\n\n<code_block>\n# 校验确认按钮不可点击\nCheckElemDisabled    button:contains(确认)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格第一行中 ‘音浪’ 这一列的值，只保留所有数字部分",
        "output": "<thought>\n首先，我们需要获取第一行中名为“音浪”的列的值。我们可以使用`GetCellValue`关键字来获取特定单元格的值。然后，我们需要通过Python的字符串处理提取所有的数字。由于Robot Framework对Python代码的支持，我们可以使用`Evaluate`来完成这一任务。\n</thought>\n\n<code_block>\n# 获取表格第一行中‘音浪’这一列的值\n${yinlang_val}  GetCellValue | 1 | 音浪\n\n# 保留值中的所有数字部分\n${numbers_only}  Evaluate | ''.join(c for c in $yinlang_val if c.isdigit())\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 ‘日均有流水新主播成材率’ 下面的 span class包含card-main-value 元素的文本",
        "output": "<thought>\n在这个场景中，我们需要查找特定文本下方的元素，然后获取该元素的文本。这个任务可以通过以下步骤来解决：\n\n1. 使用`FindElemToTheDirectionOf`关键字查找文本“日均有流水新主播成材率”下方的目标元素，该元素的选择器为“span[class*=card-main-value]”。\n2. 使用`GetElemText`关键字获取所找到元素的文本。\n\n我们将以“日均有流水新主播成材率”为基准，查找其下方的符合选择器的元素。然后获取该元素的文本内容。\n</thought>\n\n<code_block>\n# 查找“日均有流水新主播成材率”下方的目标元素\n${elem}  FindElemToTheDirectionOf | 日均有流水新主播成材率 | bottom | span[class*=card-main-value]\n\n# 获取目标元素的文本\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 求和(销售额) 拖拽到 求和(利润) 后面",
        "output": "<thought>\n要将元素“求和(销售额)”拖拽到“求和(利润)”的后面，需确保准确定位这两个元素，可以使用jquery选择器。在这里，可以为这两个元素创建变量，以便提高代码的可读性和复用性。\n</thought>\n\n<code_block>\n# 定义元素变量\n${sum_sales}     Set Variable    求和(销售额)\n${sum_profit}    Set Variable    求和(利润)\n\n# 将“求和(销售额)”拖拽到“求和(利润)”后面（在 dx 方向有点偏移量，假设为20）\nDAndD    ${sum_sales}    ${sum_profit}    dx=20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间戳 保留前10位",
        "output": "<thought>\n要获取当前时间戳并保留前10位，可以使用Python的time库获取当前时间的时间戳。Robot Framework支持通过Evaluate关键字来执行Python代码，因此可以通过Evaluate调用Python代码获取当前时间戳，之后使用字符串切片保留前10位即可。\n</thought>\n\n<code_block>\n# 获取当前时间戳并保留前10位\n${timestamp}   Evaluate  str(int(time.time()))[:10]  modules=time\nLog  ${timestamp}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${DELIVERY_MODE}是循环投放,xxx",
        "output": "<thought>\n首先需要判断变量${DELIVERY_MODE}是否等于\"循环投放\"，若等于，则执行xxx操作。使用Robot Framework的IF/ELSE语法来实现这个逻辑。\n</thought>\n\n<code_block>\n# 判断${DELIVERY_MODE}是否为\"循环投放\"\nIF  \"${DELIVERY_MODE}\" == \"循环投放\"\n    # 执行xxx操作\n    # 例子中xxx操作用Log关键字表示\n    Log  xxx\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击华为前面的勾选框,在编辑筛选下面输入XXX，判断收款计划下方存在：周期",
        "output": "<thought>\n对于这个场景，可以分成三个步骤来实现：\n1. 使用`ClickElemToTheDirectionOf`关键字，点击“华为”前面的勾选框。\n2. 使用`SetField`关键字，在“编辑筛选”下面输入“XXX”。\n3. 使用`CheckHasTextToTheDirectionOf`关键字，判断“收款计划”下方存在“周期”。\n</thought>\n\n<code_block>\n# 点击华为前面的勾选框\nClickElemToTheDirectionOf | 华为 | left | :checkbox\n\n# 在编辑筛选下面输入XXX\nSetField | 编辑筛选 | XXX \n\n# 判断收款计划下方存在：周期\nCheckHasTextToTheDirectionOf | 收款计划 | bottom | 周期\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在‘时间周期’输入‘最近1天’",
        "output": "<thought>\n要在“时间周期”字段输入“最近1天”，可以直接使用SetField关键字，将值设置为“最近1天”。\n</thought>\n\n<code_block>\n# 在‘时间周期’字段输入‘最近1天’\nSetField | 时间周期 | 最近1天\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到name为空的iframe中",
        "output": "<thought>\n解决问题思路：根据要求，需要切换到name为空的iframe中。可以使用ToFrame关键字，并通过jquery选择器选择name为空的iframe。选择器可以使用iframe:not([name])来选择所有name属性为空的iframe。为了确保选择的是第一个name为空的iframe，可以使用:eq(0)来指定第一个。\n</thought>\n\n<code_block>\n# 切换到name为空的iframe中\nToFrame | iframe:not([name]):eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 e2e-auto-test-加速域名接入-sr 上方的文字",
        "output": "<thought>\n需要点击文本“e2e-auto-test-加速域名接入-sr”上方的文本，可以使用`ClickTextToTheDirectionOf`关键字，基准文本为“e2e-auto-test-加速域名接入-sr”，方向为top，目标文本为“*”，表示任意文本。\n</thought>\n\n<code_block>\n# 点击 e2e-auto-test-加速域名接入-sr 上方的文字\nClickTextToTheDirectionOf | e2e-auto-test-加速域名接入-sr | top | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面中‘灵感’下方存在‘视频’、‘国风美学’按钮",
        "output": "<thought>\n为了校验页面中‘灵感’下方存在‘视频’、‘国风美学’按钮，首先我们需要使用CheckHasTextToTheDirectionOf关键字。这个关键字可以用于验证在基准元素某个方向上存在特定文本。在这个场景中，我们将选择‘灵感’作为基准元素，并且检查其下方是否存在‘视频’和‘国风美学’按钮。\n</thought>\n\n<code_block>\n# 校验‘灵感’下方存在‘视频’按钮\nCheckHasTextToTheDirectionOf | 灵感 | bottom | 视频\n\n# 校验‘灵感’下方存在‘国风美学’按钮\nCheckHasTextToTheDirectionOf | 灵感 | bottom | 国风美学\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量${TITAN_INSTALL_OFFLINE_MODE}为'0',该测试case直接算过",
        "output": "<thought>\n根据问题描述，如果变量${TITAN_INSTALL_OFFLINE_MODE}为'0'，那么测试用例直接通过。我们可以使用Robot Framework的IF语句来判断变量的值。如果为'0'，则直接使用Pass Execution关键字结束测试用例。\n</thought>\n\n<code_block>\n# 判断变量${TITAN_INSTALL_OFFLINE_MODE}是否为'0'\nIF  \"${TITAN_INSTALL_OFFLINE_MODE}\" == \"0\"\n    # 如果为'0'，则测试用例通过\n    Pass Execution  测试用例通过\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送一个 post 请求到 https://asset-mig-pre.bytedance.net/api/m/batchApply，body是 {\"a\": 1, \"b\": 2}",
        "output": "<thought>\n这是一个比较简单的场景，只需要调用我们的自定义关键字\"UiSendRequest\"，将请求方法设置为\"POST\"，请求的URL填写为\"https://asset-mig-pre.bytedance.net/api/m/batchApply\"，并且将body设置为{\"a\": 1, \"b\": 2}。不需要额外的请求头，所以headers可以设置为${None}。\n</thought>\n\n<code_block>\n# 发送POST请求\n${resp_json}  UiSendRequest  |  POST  |  https://asset-mig-pre.bytedance.net/api/m/batchApply  |  {\"a\": 1, \"b\": 2}  |  ${None}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表中男士所在行中包含香烟、wine",
        "output": "<thought>\n要检查表中男士所在行中是否包含“香烟”和“wine”，可以使用CheckRowHas关键字。该关键字可以验证指定行中是否包含给定的文本。\n</thought>\n\n<code_block>\n# 检查表中男士所在行中包含香烟、wine\nCheckRowHas | 男士 | 香烟 | wine\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "#点击class为lsmc-pc-image-item lsmc-pc-image-upload__add的div标签，第1个节点",
        "output": "<thought>\n 要点击class为lsmc-pc-image-item lsmc-pc-image-upload__add的div标签，可以使用ClickElem关键字，因为它允许我们使用jquery选择器。div标签的class可以直接写在jquery选择器里，通过添加:eq(0)来选择第一个节点。\n </thought>\n \n <code_block>\n # 点击class为lsmc-pc-image-item lsmc-pc-image-upload__add的div标签，第1个节点\n ClickElem | div.lsmc-pc-image-item.lsmc-pc-image-upload__add:eq(0)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向简单匹配下方单元格输入 test",
        "output": "<thought>\n在这个场景中，我们需要在“简单匹配”下方的单元格中输入“test”。可以使用“FindElemToTheDirectionOf”关键字来定位“简单匹配”下方的输入框元素，然后使用“FillArea”关键字向该元素中输入“test”。\n</thought>\n\n<code_block>\n# 找到简单匹配下方的输入框元素\n${elem}  FindElemToTheDirectionOf | 简单匹配 | bottom | input\n\n# 向定位到的元素输入test\nFillArea | ${elem} | test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现 “概览”，然后在搜索中输入 “UI自动化” 并按下回车",
        "output": "<thought>\n首先，使用WaitText关键字等待页面上出现“概览”文本。然后，通过SetField关键字在搜索字段中输入“UI自动化”并按下回车。\n</thought>\n\n<code_block>\n# 等待页面包含“概览”\nWaitText | 概览\n\n# 在搜索字段中输入“UI自动化”并回车\nSetField | 搜索 | UI自动化 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置保存至为：任务开发 > dorado_test",
        "output": "<thought>\n根据要求，需要在页面上设置“保存至”字段的值为“任务开发 > dorado_test”。这可以通过使用SetField关键字来实现。字段名为“保存至”，值为“任务开发 > dorado_test”。\n</thought>\n\n<code_block>\n# 设置保存至为：任务开发 > dorado_test\nSetField | 保存至 | 任务开发 > dorado_test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格手机号，是不是都包含 8612342624025",
        "output": "<thought>\n首先需要获取表格的总行数，然后遍历每一行，获取手机号列的值，并检查它们是否都包含目标手机号“8612342624025”。\n</thought>\n\n<code_block>\n# 获取表格行数\n${row_count}  GetRowCount\n\n# 遍历每一行，检查手机号列是否包含目标手机号\nFOR  ${i}  IN RANGE  1  ${row_count}+1\n    # 获取每一行手机号列的值\n    ${phone_number}  GetCellValue  ${i}  手机号\n\n    # 检查手机号列是否包含目标手机号\n    Should Contain  ${phone_number}  8612342624025\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ‘指标组名称’ 表格中的 23年春节_入口滲透行 状态列 中包含 等待中",
        "output": "<thought>\n为了实现对指定行和列的校验，可以使用`CheckCellHas`关键字。首先需要找到目标行和列，这里目标行是‘23年春节_入口滲透’，目标列是‘状态’，要校验的文本是‘等待中’。\n</thought>\n\n<code_block>\n# 校验‘指标组名称’表格‘23年春节_入口滲透’行的‘状态’列中包含‘等待中’\nCheckCellHas | 23年春节_入口滲透 | 状态 | 等待中 | tbl=指标组名称\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置证书标准为：国际证书，密钥算法为：RSA/ECC 算法，备注名称为：UIautotest上传证书",
        "output": "<thought>\n首先需要使用`SetField`关键字来设置证书标准、密钥算法和备注名称的字段。可以使用`BatchSetFields`关键字来批量设置这些字段，以提高代码的可读性和简洁性。\n</thought>\n\n<code_block>\n# 设置证书标准为：国际证书，密钥算法为：RSA/ECC 算法，备注名称为：UIautotest上传证书\nBatchSetFields  证书标准=国际证书  密钥算法=RSA/ECC 算法  备注名称=UIautotest上传证书\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向下滑动到__current_id=\"标题_9\"的div的元素展示在页面内，即让它可见",
        "output": "<thought>\n为了将特定的元素移动到视野内，可以使用`MoveIntoView`关键字。在这之前，我们需要查找目标元素，这里使用`FindElem`来获取`__current_id=\"标题_9\"`的div元素。\n</thought>\n\n<code_block>\n# 查找__current_id=\"标题_9\"的div元素\n${elem}  FindElem | div[__current_id=\"标题_9\"]\n\n# 将元素移动到视野内\nMoveIntoView | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选表格第一行第一列的复选框",
        "output": "<thought>\n由于表格的第一行第一列通常是复选框用于选择，因此我们可以使用ClickElemOfCell关键字，row_name_or_id和col_name_or_id都设为1，选择器设为`:checkbox`。\n</thought>\n\n<code_block>\nClickElemOfCell | 1 | 1 | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "导出当前的 cookies",
        "output": "<thought>\n在RobotFramework中，导出当前的cookies可以使用内置的`Get Cookies`关键字。为了查看这些cookies，我们可以使用`Log`关键字记录下来。\n</thought>\n\n<code_block>\n# 获取当前的cookies\n${cookies}    Get Cookies\n\n# 记录获取到的cookies\nLog    ${cookies}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${cert} 中的 \"\\n\" 替换为 \"\\\\n\"",
        "output": "<thought>\n这个问题不需要使用关键字，可以直接使用RobotFramework自带的Replace String关键字完成对字符串的替换。\n</thought>\n\n<code_block>\n# 使用Replace String关键字替换字符串中的\"\\n\"为\"\\\\n\"\n${cert}    Replace String    ${cert}    \\n    \\\\n\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 当日大盘流水 的元素，然后找到其祖先中 文本包含 Revenue 的元素",
        "output": "<thought>\n首先需要查找文本为“当日大盘流水”的元素，然后找到其祖先中包含文本“Revenue”的元素。可以通过FindByText查找“当日大盘流水”元素，再使用FindParentElem查找其祖先中包含“Revenue”的元素。\n</thought>\n\n<code_block>\n# 查找文本为当日大盘流水的元素\n${elem}  FindByText | 当日大盘流水\n\n# 查找当日大盘流水元素的祖先中包含Revenue的元素\n${parent}  FindParentElem | ${elem} | :contains(Revenue)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "然后勾选我已阅读",
        "output": "<thought>\n需要勾选名为“我已阅读”的复选框，使用关键字`CheckBoxOn`，直接使用该关键字指定复选框的名称即可。\n</thought>\n\n<code_block>\n# 勾选“我已阅读”复选框\nCheckBoxOn | 我已阅读\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置事件指标”，接受参数 name, args, 主要作用是:\n# 1. 先判断span class包含FilterEvent__label且文本包含name的元素${elem1}是否存在（1s超时）,如果不存在就点击事件指标按钮，此过程最多进行4次\n# 2. 如果元素${elem1}已经存在，就向字段name中输入给定的一个或多个 args",
        "output": "<thought>\n我们需要创建一个新的关键字“设置事件指标”，这个关键字需要接受两个参数：name和args。首先，我们需要判断是否存在一个指定的span元素，该元素的类包含'FilterEvent__label'且文本包含name。我们使用FindElem关键字来查找这个元素，如果该元素不存在，我们就点击'事件指标'按钮，我们循环进行这个过程最多4次。如果在4次尝试后该元素仍不存在，我们就记录日志并退出。如果该元素存在，我们就使用SetField关键字将args输入到name字段中。\n</thought>\n\n<code_block>\n设置事件指标\n    [Arguments]  ${name}  @{args}\n    ${selector}  Set Variable  span[class*='FilterEvent__label']:contains(${name})\n    ${cnt}  Set Variable  0\n    FOR  ${i}  IN RANGE  4\n        ${existing}  IsElemExisting  ${selector}  timeout=1\n        Exit For Loop If  ${existing}\n        Click  事件指标\n        ${cnt}  Set Variable  ${cnt+1}\n    END\n    IF  ${cnt} < 4\n        SetField  ${name}  @{args}\n    ELSE\n        Log  经过4次循环目标元素仍不存在\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 ‘用户登录’ 关键字，接受 user, password 参数，默认值分别为 USERNAME, PASSWORD 变量，作用是：\n1. 访问 MAIN_PAGE\n2. 输入账号名，密码，点击登录\n3. 等 url 中不再包含 login",
        "output": "<thought>\n1. 首先需要使用 OpenUrl 关键字访问 MAIN_PAGE\n2. 输入账号名和密码可以使用 BatchSetFields 关键字批量设置字段值\n3. 点击登录可以使用 Click 关键字点击\"登录\"文本\n4. 等待URL变化可以使用 WaitURLNotContains 关键字检查URL中不再包含\"login\"\n5. 需要为参数设置默认值，使用 [Arguments] 和 ${变量名} 语法\n6. 整个过程需要等待页面加载完成，使用 WaitLoading 关键字\n</thought>\n\n<code_block>\n*** Keywords ***\n用户登录\n    [Arguments]    ${user}=${USERNAME}    ${password}=${PASSWORD}\n    OpenUrl    ${MAIN_PAGE}\n    WaitLoading\n    BatchSetFields    账号名=${user}    密码=${password}\n    Click    登录\n    WaitURLNotContains    login\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击卡片归还，点击人工还卡，输入卡号“100200300”，点击归还办公室input/textarea，选择“北京市-盈都大厦C座（测试）”，最后点击确定",
        "output": "<thought>\n解决问题思路：\n首先，通过调用Click或ClickTextOneByOne关键字点击\"卡片归还\"和\"人工还卡\"。然后，使用SetField关键字输入卡号\"100200300\"。接着，使用Click点击归还办公室，并使用SetField关键字设置归还办公室为\"北京市-盈都大厦C座（测试）\"。最后，再次使用Click关键字点击\"确定\"。\n</thought>\n\n<code_block>\n# 点击卡片归还和人工还卡\nClickTextOneByOne | 卡片归还 | 人工还卡\n\n# 输入卡号\nSetField | 卡号 | 100200300\n\n# 点击归还办公室\nClick | 归还办公室\n\n# 选择归还办公室\nSetField | 归还办公室 | 北京市-盈都大厦C座（测试）\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击空白处，点击重命名，输入：名称1，鼠标移动到新会话右边的图标，判断 ${video_id} 日期时间(2022-09-22 11:12:13格式)在 ${video_id1}之后",
        "output": "<thought>\n首先，点击空白处可以使用`ClickWhiteArea`关键字。然后，点击“重命名”文本，使用`Click`。接着，在相关字段中输入\"名称1\"，可以用`SetField`。鼠标移动到“新会话”右边的icon，使用`MoveToIconToTheDirectionOf`。最后，使用`Should Be True`比较日期时间字符串。\n</thought>\n\n<code_block>\n# 点击空白处\nClickWhiteArea\n\n# 点击重命名\nClick | 重命名\n\n# 输入“名称1”\nSetField | 名称 | 名称1\n\n# 鼠标移动到新会话右边的icon\nMoveToIconToTheDirectionOf | 新会话 | right | icon\n\n# 断言 ${video_id} 日期时间在 ${video_id1}之后\nShould Be True  ${video_id} > ${video_id1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "30秒内，顶部 class 包含 insight-box-header 的 div 中，出现文字 \"Copilot 找到了用户软件的详细信息，帮助你尽快处理问题\"",
        "output": "<thought>\n首先，这个场景需要验证在指定时间内，页面的特定元素中是否出现特定的文本。可以使用 `WaitText` 关键字等待特定文本出现。为了指定特定的元素，可以使用 jQuery 选择器来定位此元素。根据描述，我们需要在 class 包含 `insight-box-header` 的 div 中查找文本。因此可以组合使用 `WaitText` 和 jQuery 选择器。\n</thought>\n\n<code_block>\n# 等待 class 包含 insight-box-header 的 div 中 出现指定文本\nWaitText | Copilot 找到了用户软件的详细信息，帮助你尽快处理问题 | timeout=30 | base=div[class*=insight-box-header]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取26小时3分钟5秒前的时间，格式为：年-月-日 时:分:秒",
        "output": "<thought>\n计算26小时3分钟5秒前的时间，我们可以使用`Get Current Date`关键字，并通过`increment`参数传递一个负值来调整时间。格式化为“年-月-日 时:分:秒”。\n</thought>\n\n<code_block>\n# 获取26小时3分钟5秒前的时间\n${past_time}    Get Current Date    result_format=%Y-%m-%d %H:%M:%S    increment=-26h3m5s\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在input的placeholder是“抖音短视频”或者“TikTok”，就选择Libra",
        "output": "<thought>\n首先，我们需要判断页面上是否存在placeholder为“抖音短视频”或“TikTok”的input元素。使用`IsAnyElemExisting`来判断这些元素是否存在即可。然后，根据判断结果，如果存在这样的元素，我们使用`SelectOption`选择Libra。\n</thought>\n\n<code_block>\n# 定义选择器变量\n${selector_douyin}    input[placeholder='抖音短视频']\n${selector_tiktok}    input[placeholder='TikTok']\n\n# 判断是否存在抖音短视频或TikTok的输入框\n${exist}  IsAnyElemExisting  ${selector_douyin}  ${selector_tiktok}\n\n# 根据存在性选择Libra\nIF  ${exist}\n    SelectOption  Libra\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“填写事件信息”，参数为：name, show_name, type, desc, 默认值都为空，逻辑是：\n0. 参数 name, show_name, type, desc 对应的中文分别为：属性名称、展示名、属性类型、描述\n1. 点击“添加属性”\n2. 查找 div class包含formContainer的元素ele\n3. 对于关键字中的每一个参数，如果它不为空，就把 ele 中此参数对应的中文名称字段设置为该参数值",
        "output": "<thought>\n要解决这个问题，我们需要创建一个关键字“填写事件信息”，并处理参数。首先，我们点击“添加属性”按钮。然后，我们查找特定的元素来作为基准元素。对于每一个参数，如果它有值，我们将使用`SetField`关键字在基准元素中设置相应的字段。\n</thought>\n\n<code_block>\n*** Keywords ***\n填写事件信息\n    [Arguments]  ${name}=${EMPTY}  ${show_name}=${EMPTY}  ${type}=${EMPTY}  ${desc}=${EMPTY}\n    # 点击添加属性\n    Click  添加属性\n\n    # 查找目标元素并存储\n    ${ele}  FindElem  div[class*=formContainer]\n\n    # 设置属性名称\n    IF  '${name}' != ''\n        SetField  属性名称  ${name}  base=${ele}\n    END\n\n    # 设置展示名\n    IF  '${show_name}' != ''\n        SetField  展示名  ${show_name}  base=${ele}\n    END\n\n    # 设置属性类型\n    IF  '${type}' != ''\n        SetField  属性类型  ${type}  base=${ele}\n    END\n\n    # 设置描述\n    IF  '${desc}' != ''\n        SetField  描述  ${desc}  base=${ele}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断${date_range1}和 ${val1} 内容一致",
        "output": "<thought>\n在Robot Framework中，判断两个变量是否相等可以使用内置的关键字`Should Be Equal`。这个关键字会比较两个值，如果不相等则会抛出错误。因此，直接使用`Should Be Equal`关键字即可解决这个问题。\n</thought>\n\n<code_block>\n# 判断${date_range1}和${val1}内容是否一致\nShould Be Equal | ${date_range1} | ${val1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 更多 下拉弹框的 编辑",
        "output": "<thought>\n要点击“更多”下拉弹框中的“编辑”，首先需要点击“更多”以打开下拉弹框，然后在下拉弹框中定位到“编辑”并点击。可以使用Click来点击“更多”，然后使用Click | 编辑 | base=POPUP来点击弹框中的“编辑”。\n</thought>\n\n<code_block>\n# 点击 更多 菜单\nClick | 更多\n\n# 点击弹框中的 编辑\nClick | 编辑 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一行第2列的单元格\n向这个单元格中输入：预算科目_A0",
        "output": "<thought>\n在这个任务中，我们需要首先点击表格中的一个特定单元格——第一行的第二列。然后，在这个单元格中输入文本“预算科目_A0”。首先我们会使用`ClickElemOfCell`来点击指定的单元格，接下来我们会使用`FillCell`来向单元格中输入指定内容。\n</thought>\n\n<code_block>\n# 点击第一行第二列的单元格\nClickElemOfCell | 1 | 2\n\n# 在刚刚点击的单元格中输入：预算科目_A0\nFillCell | 1 | 2 | 预算科目_A0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 项目编号 为 EPSPJ20250401001，支出立项编号 为 PJ20250401913736，支出立项金额 为 10000.99",
        "output": "<thought>\n1. 首先需要分析要校验的三个字段：项目编号、支出立项编号和支出立项金额\n2. 这些字段可能出现在页面的表单或表格中，可以使用CheckFieldContains关键字来校验\n3. 每个字段需要单独校验，确保包含指定的文本\n4. 由于是精确匹配，不需要设置strict参数(默认False即可)\n5. 不需要设置base参数，因为默认会检查整个页面\n6. 不需要设置idx参数，因为假设每个字段名在页面上是唯一的\n</thought>\n\n<code_block>\n# 校验项目编号\nCheckFieldContains | 项目编号 | EPSPJ20250401001\n\n# 校验支出立项编号 \nCheckFieldContains | 支出立项编号 | PJ20250401913736\n\n# 校验支出立项金额\nCheckFieldContains | 支出立项金额 | 10000.99\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取共享看板左侧箭头的属性",
        "output": "<thought>\n在这个任务中，我们需要获取某个元素的属性。给定的任务是“获取共享看板左侧箭头的属性”。根据现有关键字和说明，任务描述中并没有直接提供获取属性的方法，但我们可以通过查找到特定元素，然后利用`GetElemAttr`关键字来获取其属性。\n\n首先，我们需要找到“共享看板”这个基准元素，而“左侧箭头”是相对于这个基准元素的，所以我们可以使用`FindElemToTheDirectionOf`关键字获取到左侧箭头元素。然后通过`GetElemAttr`来获取这个箭头元素的属性。\n\n接下来，我们需要考虑“左侧箭头”相对“共享看板”的方向，一般情况下，左侧箭头可能位于共享看板的左侧，所以我们的方向参数可以设为“left”。\n\n最后，我们可以使用`GetElemAttr`关键字获取左侧箭头的属性。\n\n总结起来：使用`FindElemToTheDirectionOf`来定位箭头元素，然后使用`GetElemAttr`来获取属性。\n</thought>\n\n<code_block>\n# 获取共享看板左侧箭头元素\n${arrow_elem}  FindElemToTheDirectionOf | 共享看板 | left | [class*=arrow]\n\n# 获取左侧箭头的属性，比如获取class属性\n${arrow_attr}  GetElemAttr | ${arrow_elem} | class\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹窗中的“导出内容”为：完整表格 ",
        "output": "<thought>\n在弹窗中设置“导出内容”为“完整表格”，我们需要使用SetField关键字，将字段名设置为“导出内容”，值设置为“完整表格”，并且需要指定基准元素为弹窗，所以base参数应设置为POPUP。\n</thought>\n\n<code_block>\n# 在弹窗中设置“导出内容”为“完整表格”\nSetField | 导出内容 | 完整表格 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将PHONE_NUM填入手机号码",
        "output": "<thought>\n在这个场景中，我们需要将变量`${PHONE_NUM}`中的值输入到一个名为手机号码的字段中。可以直接使用`SetField`关键字，该关键字用于将值输入到指定的页面字段中。变量`${PHONE_NUM}`会自动解析为其值，因此可以直接使用。\n</thought>\n\n<code_block>\n# 将变量${PHONE_NUM}的值输入到手机号码字段\nSetField | 手机号码 | ${PHONE_NUM}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找class包含A, id=D, 文本为OK的span",
        "output": "<thought>\n需要使用FindElem关键字查找符合条件的元素，因为条件中包含class, id和文本要求，可以使用jquery选择器来实现。\n</thought>\n\n<code_block>\n# 查找class包含A, id=D, 文本为OK的span\n${elem}  FindElem | span[class*=A][id=D]:contains(OK)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面找到“管理中心”点击，等待3s，校验${status_code_list}列表内是否存在3",
        "output": "<thought>\n首先需要找到页面中的“管理中心”文本并点击，然后等待3秒以确保页面内容加载完成。接着，需要检查变量`${status_code_list}`中是否包含值3。可以使用`Click`进行点击操作，`Sleep`来实现等待时间，`Should Contain`来判断列表中是否包含指定的值。\n</thought>\n\n<code_block>\n# 点击管理中心\nClick  管理中心\n\n# 等待3秒让页面加载完成\nSleep  3s\n\n# 校验${status_code_list}列表内是否存在3\nShould Contain  ${status_code_list}  3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“业务维度分析增加用户属性过滤条件”，逻辑是：\n#1.鼠标移动到class包含ant-row的元素上\n#2.点击“过滤条件”\n#3.点击“请选择属性”\n#4.点击class为ant-cascader-menu-item-expand-icon的最后一个元素\n#5.点击文案为“是否新用户”的class包含ant-cascader-menu-item的元素\n#5.点击“请输入属性值”\n#6.点击文案为“老用户”的class包含dp-select__list-item-option的元素",
        "output": "<thought>\n首先，鼠标移动到class包含ant-row的元素上，可以使用`MoToElem`关键字。接着，点击“过滤条件”文本，使用`Click`关键字。然后，点击“请选择属性”，同样使用`Click`关键字。接着点击class为ant-cascader-menu-item-expand-icon的最后一个元素，可以使用`ClickElem`关键字并指定为最后一个元素。然后，点击文案为“是否新用户”的元素，这个元素的class包含ant-cascader-menu-item，可以使用`ClickElem`关键字。接着点击“请输入属性值”文本，再次使用`Click`关键字。最后，点击文案为“老用户”的元素，该元素的class包含dp-select__list-item-option，可以使用`ClickElem`关键字。\n\n</thought>\n\n<code_block>\n*** Keywords ***\n业务维度分析增加用户属性过滤条件\n    # 1. 鼠标移动到class包含ant-row的元素上\n    MoToElem  [class*=ant-row]\n\n    # 2. 点击“过滤条件”\n    Click  过滤条件\n\n    # 3. 点击“请选择属性”\n    Click  请选择属性\n\n    # 4. 点击class为ant-cascader-menu-item-expand-icon的最后一个元素\n    ClickElem  [class=ant-cascader-menu-item-expand-icon]:eq(-1)\n\n    # 5. 点击文案为“是否新用户”的class包含ant-cascader-menu-item的元素\n    ClickElem  [class*=ant-cascader-menu-item]:contains(是否新用户)\n\n    # 6. 点击“请输入属性值”\n    Click  请输入属性值\n\n    # 7. 点击文案为“老用户”的class包含dp-select__list-item-option的元素\n    ClickElem  [class*=dp-select__list-item-option]:contains(老用户)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取55分钟后时间格式为%Y-%m-%d %H:%M:%S",
        "output": "<thought>\n为了计算55分钟后的时间，并以\"%Y-%m-%d %H:%M:%S\"格式显示，可以使用RF的标准库来处理时间。我们可以使用“Get Current Date”获取当前时间，然后使用“Add Time To Date”将55分钟加入当前时间。\n</thought>\n\n<code_block>\n# 获取当前时间\n${current_time}  Get Current Date  result_format=%Y-%m-%d %H:%M:%S\n\n# 在当前时间上加55分钟\n${future_time}  Add Time To Date  ${current_time}  55 minutes  result_format=%Y-%m-%d %H:%M:%S\n\n# 将结果时间打印或存储以供后续使用\nLog  55分钟后时间为: ${future_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击抽屉中的复制",
        "output": "<thought>\n要点击抽屉中的\"复制\"按钮，需要考虑以下几点：\n1. 抽屉通常是一个弹出层/弹窗组件，因此需要使用base=POPUP参数\n2. 只需要点击\"复制\"文本，不需要考虑多个相同文本的情况，可以直接使用Click关键字\n3. 根据提示，不需要考虑其他复杂情况，直接使用最简单的方式实现\n</thought>\n\n<code_block>\n# 点击抽屉(弹出层)中的复制按钮\nClick | 复制 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面渲染完成，点击 提交至商家处理，校验页面弹框中存在 申请理由，设置申请理由为：物品破损，等待3s，点击提交，等出现‘提交成功’",
        "output": "<thought>\n首先，我们需要等待页面加载完成。然后，点击“提交至商家处理”按钮。接下来，检查弹出的对话框中是否有“申请理由”，并设置其值为“物品破损”。之后，等待3秒，再点击提交按钮，最后等待文本“提交成功”出现来确认操作的成功。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 点击“提交至商家处理”\nClick | 提交至商家处理\n\n# 校验弹窗中存在“申请理由”\nCheckHasText | 申请理由 | base=POPUP\n\n# 设置申请理由为“物品破损”\nSetField | 申请理由 | 物品破损 | base=POPUP\n\n# 等待3秒\nSleep | 3s\n\n# 点击提交按钮\nClick | 提交 | base=POPUP\n\n# 等待“提交成功”文本出现\nWaitText | 提交成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 弹窗中 存在 class=arco-checkbox-mask-icon 的元素",
        "output": "<thought>\n为了校验弹窗中是否存在class为arco-checkbox-mask-icon的元素，我们可以使用CheckHasElem关键字。由于需要校验的是弹窗中的元素，我们可以利用base参数将其设置为POPUP。\n</thought>\n\n<code_block>\n# 校验弹窗中存在 class=arco-checkbox-mask-icon 的元素\nCheckHasElem | [class=arco-checkbox-mask-icon] | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量 x 设置为 3",
        "output": "<thought>\n由于该任务是需要将变量 x 设置为 3，RobotFramework提供了一个内置关键字`Set Variable`可以直接用于这一目的。\n</thought>\n\n<code_block>\n# 设置/创建变量 x = 3\n${x}  Set Variable  3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建列表 args, 值为：页面访问  应用退出  ai-copilot-line",
        "output": "<thought>\n首先，我们需要创建一个列表`args`，包含指定的三个值。我们可以利用Python代码来创建这个列表。使用`Evaluate`关键字来执行Python代码进行列表创建。\n</thought>\n\n<code_block>\n# 创建列表 args，包含指定值\n@{args}  Evaluate  ['页面访问', '应用退出', 'ai-copilot-line']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "尝试点击预览探查",
        "output": "<thought>\n在这个场景中，我们需要尝试点击名为\"预览探查\"的按钮。根据提示，这可以用ClickAny关键字来实现。ClickAny关键字是用于尝试点击给定文本中的任意一个，因此这里只需要提供一个文本\"预览探查\"即可。\n</thought>\n\n<code_block>\n# 尝试点击文本“预览探查”\nClickAny | 预览探查\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传第三个文件${file}",
        "output": "<thought>\n要上传第三个文件，我们可以使用`UploadFile`关键字，该关键字允许通过索引（idx）指定要操作的文件上传控件。因为要上传第三个文件，我们将idx设置为2。\n</thought>\n\n<code_block>\n# 上传第三个文件\nUploadFile | ${file} | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击知道了上方的关闭小图标",
        "output": "<thought>\n任务要求点击“知道了”文本上方的关闭icon。可以使用ClickIconToTheDirectionOf关键字，基准元素为“知道了”，方向为top，目标是close图标。\n</thought>\n\n<code_block>\n# 点击知道了上方的关闭icon\nClickIconToTheDirectionOf | 知道了 | top | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将domain转为小写字符串",
        "output": "<thought>\n在这个任务中，需要将字符串\"domain\"转换为小写字母。RobotFramework 本身没有直接提供字符串转换为小写的关键字，所以我们需要使用 Python 的内置方法来实现这一点。可以通过 Evaluate 关键字执行 Python 的 str.lower() 方法来完成。\n</thought>\n\n<code_block>\n# 将domain转换为小写字符串\n${lower_domain}    Evaluate    $domain.lower()\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置实时调用超时时长，近线调用超时时长，分别为：100，200",
        "output": "<thought>\n在这个任务中，我们需要设置两个字段：“实时调用超时时长”和“近线调用超时时长”，并将其值分别设为100和200。可以使用`BatchSetFields`关键字来批量设置它们。\n</thought>\n\n<code_block>\n# 设置实时调用超时时长为100，近线调用超时时长为200\nBatchSetFields  实时调用超时时长=100  近线调用超时时长=200\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击暂不处理右下方的class包含cancel的元素",
        "output": "<thought>\n首先需要使用`ClickElemToTheDirectionOf`关键字。基准元素是“暂不处理”，并且需要点击该元素右下方的目标元素。目标元素的选择器是`[class*=cancel]`。根据这些信息，可以组合出正确的RF测试步骤。\n</thought>\n\n<code_block>\n# 点击暂不处理右下方的class包含cancel的元素\nClickElemToTheDirectionOf | 暂不处理 | bottomRight | [class*=cancel]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为：“添加变量的关键字”，接受 name, value 参数，逻辑是：\n# 1. 点击变量，0.5s后点击 svg #icon-plus, 然后在 ‘输入关键词搜索’ 中输入 var 并回车\n# 2. 0.5s 后，查找倒数第二个和倒数第一个 input readonly，分别命名为 var_name, var_value\n# 3. 双击 var_name 然后输入 name\n# 3. 双击 var_value 然后输入 value",
        "output": "<thought>\n要完成此任务，我需要按步骤使用提供的关键字。从“变量”到点击新建图标，然后在“输入关键词搜索”中输入内容，再找到对应的输入框进行赋值。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加变量的关键字\n    [Arguments]  ${name}  ${value}\n\n    # 点击变量，0.5s后点击 svg #icon-plus\n    Click | 变量\n    Sleep | 0.5s\n    ClickElem | svg#icon-plus\n\n    # 然后在 ‘输入关键词搜索’ 中输入 var 并回车\n    SetField | 输入关键词搜索 | var | enter=True\n    Sleep | 0.5s\n\n    # 查找倒数第二个和倒数第一个 input readonly，分别命名为 var_name, var_value\n    ${var_name}  FindElem | input[readonly]:eq(-2)\n    ${var_value}  FindElem | input[readonly]:eq(-1)\n\n    # 双击 var_name 然后输入 name\n    DClick | ${var_name}\n    SendText | ${name}\n\n    # 双击 var_value 然后输入 value\n    DClick | ${var_value}\n    SendText | ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击菜单 边缘服务，进行白屏检测，将 Period 改为 By day，2s后验证表格‘开启日期’列的内容依次为：'2024-09-10', '2024-09-11', '2024-09-12'",
        "output": "<thought>\n1. 使用ClickMenu关键字点击菜单'边缘服务'。\n2. 使用CheckWhiteScreen关键字进行白屏检测。\n3. 使用SetField关键字将'Period'字段设置为'By day'。\n4. 使用RF标准库中的'Sleep'关键字等待2秒，以确保页面数据加载完成。\n5. 使用一个循环和GetCellValue关键字获取表格中'开启日期'列的值。\n6. 校验获取到的列值与预期值'2024-09-10', '2024-09-11', '2024-09-12'是否一致。\n</thought>\n\n<code_block>\n# 点击边缘服务菜单\nClickMenu | 边缘服务\n\n# 检测白屏\nCheckWhiteScreen\n\n# 设置Period为By day\nSetField | Period | By day\n\n# 等待2秒以确保页面加载完成\nSleep | 2s\n\n# 预期的开启日期列表\n@{expected_dates}  Create List  2024-09-10  2024-09-11  2024-09-12\n\n# 循环校验表格中'开启日期'列的内容\nFOR  ${index}  IN RANGE  0  3\n   # 获取当前行的开启日期\n   ${actual_date}  GetCellValue | ${index+1} | 开启日期\n\n   # 校验当前行的开启日期是否与预期值一致\n   Should Be Equal As Strings  ${actual_date}  ${expected_dates}[${index}]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送以下请求，从其响应的 json 中取出 TopDataDetails 字段，请求如下：curl 'https://xxx.yyy.zzz.com/api/top/CDN/cn-north-1/2021-03-01/DescribeEdgeStatusCodeRanking' ",
        "output": "<thought>\n要发送HTTP请求，我们可以使用关键字 UiSendRequest。在这里，我们只需要提供请求方法 (GET) 和URL。然后，我们可以使用 GetValuesFromJson 关键字从响应 JSON 中提取 TopDataDetails 字段。\n</thought>\n\n<code_block>\n# 向 https://xxx.yyy.zzz.com/api/top/CDN/cn-north-1/2021-03-01/DescribeEdgeStatusCodeRanking 发送 get 请求\n${resp_json}  UiSendRequest | GET | https://xxx.yyy.zzz.com/api/top/CDN/cn-north-1/2021-03-01/DescribeEdgeStatusCodeRanking\n\n# 从响应 JSON 中获取 TopDataDetails\n${top_data_details}  GetValuesFromJson | ${resp_json} | TopDataDetails\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击URL导入镜像，预期页面存在文案：请输入镜像文件URL，预期页面存在文案：镜像格式：RAW QCOW2 VHDX VMDK，此时选择 VMDK，点击：开始制作",
        "output": "<thought>\n首先，我们需要点击文本“URL导入镜像”，这可以通过使用`Click`关键字来实现。接着，我们需要验证页面上存在两个特定的文本“请输入镜像文件URL”和“镜像格式：RAW QCOW2 VHDX VMDK”，这可以通过`CheckHasText`关键字完成。然后，我们选择“VMDK”作为镜像格式，使用`SelectOption`关键字。最后，点击“开始制作”，再次使用`Click`关键字。\n</thought>\n\n<code_block>\n# 点击URL导入镜像\nClick | URL导入镜像\n\n# 校验页面同时存在“请输入镜像文件URL”和“镜像格式：RAW QCOW2 VHDX VMDK”\nCheckHasText | 请输入镜像文件URL | 镜像格式：RAW QCOW2 VHDX VMDK\n\n# 选择镜像格式为VMDK\nSelectOption | VMDK\n\n# 点击开始制作\nClick | 开始制作\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一行中的删除",
        "output": "<thought>\n这里的问题是需要点击第一行中的删除按钮。根据给定的关键字描述，我们可以使用 `ClickTextOfRow`，因为需要点击特定行中的文本。\n</thought>\n\n<code_block>\n# 点击表格第一行中的删除\nClickTextOfRow | 1 | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 解决时长 字段下的时间值，从第6个字符开始截取，并以‘/’为分割 分成2部分，然后判断第二部分是否和 ${tt} 一致",
        "output": "<thought>\n首先需要获取“解决时长”字段的值，可以使用`GetFieldVal`关键字。然后从获取的字符串中截取第6个字符及之后的部分，使用Python的split方法将其以‘/’分割成两部分。最后，比较第二部分是否与`${tt}`变量一致。\n</thought>\n\n<code_block>\n# 获取解决时长字段的值\n${val}  GetFieldVal | 解决时长\n\n# 从第6个字符开始截取，并以‘/’分割成两部分\n${split_val}  Evaluate  ${val}[5:].split('/')\n\n# 检查第二部分是否和${tt}一致\nIF  \"${split_val}[1]\" == \"${tt}\"\n    Log  一致\nELSE\n    Log  不一致\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击正文下方第一个输入框，并输入“穿越到古代后我的医术震惊全皇宫，御医们都崩溃了，他们束手无策的疑难杂症，我一个女流之辈竟次次药到病除，王爷高烧不退呻吟不止，我反手掏出一盒头孢，王妃月经不调腰膝酸软，我随手就是几个乌鸡白凤丸。”",
        "output": "<thought>\n首先，我们需要定位正文下方的第一个input或textarea元素。可以使用`FindElemToTheDirectionOf`关键字获取该元素，然后使用`FillArea`关键字在该元素中输入指定的文本。\n</thought>\n\n<code_block>\n# 查找正文下方的第一个input或textarea元素\n${elem}  FindElemToTheDirectionOf | 正文 | bottom | input,textarea:eq(0)\n\n# 在找到的元素中输入指定文本\nFillArea | ${elem} | 穿越到古代后我的医术震惊全皇宫，御医们都崩溃了，他们束手无策的疑难杂症，我一个女流之辈竟次次药到病除，王爷高烧不退呻吟不止，我反手掏出一盒头孢，王妃月经不调腰膝酸软，我随手就是几个乌鸡白凤丸。\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击awfeaew该行的编辑",
        "output": "<thought>\n要点击表格中awfeaew这一行的'编辑'，我们可以使用`ClickTextOfRow`或`ClickElemOfRow`关键字。因为要点击\"编辑\"，可以直接使用`ClickTextOfRow`，指定awfeaew行和编辑文本。\n</thought>\n\n<code_block>\n# 点击awfeaew所在行的编辑\nClickTextOfRow | awfeaew | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将任务开始时间设置为：今天的后一天（年-月-日 格式）",
        "output": "<thought>\n首先需要获取当前日期，然后在此基础上加一天，最后设置到任务开始时间字段中。使用RF标准库的Get Current Date获取当前日期，再用Add Time To Date增加一天，最后用SetField设置任务开始时间。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date | result_format=%Y-%m-%d\n\n# 增加一天\n${next_day}  Add Time To Date | ${current_date} | 1d | result_format=%Y-%m-%d\n\n# 设置任务开始时间\nSetField | 任务开始时间 | ${next_day}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取${elem}的checkbox状态",
        "output": "<thought>\n要获取一个元素的checkbox状态，可以使用提供的`IsCheckboxSelected`关键字。这个关键字可以接受元素对象作为参数(name_or_index_or_elem)，因此可以直接将${elem}传递给它。不需要额外的定位步骤，因为元素已经通过${elem}变量提供。这是最直接和高效的方法。\n</thought>\n\n<code_block>\n# 获取元素${elem}的checkbox状态\n${status}  IsCheckboxSelected  ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 src 带有 mouse.png 的  img 元素",
        "output": "<thought>\n根据问题描述，我们的任务是点击一个 img 元素，它的 src 属性值包含 mouse.png。这个任务可以通过使用 RF 的 \"ClickElem\" 关键字来完成。\"ClickElem\" 关键字可以让我们通过指定一个 jquery 选择器来模拟点击一个元素。关于选择器，我们可以使用 \"img[src*='mouse.png']\" 来选择 src 属性值包含 mouse.png 的 img 元素，其中 \"*\" 表示包含。\n</thought>\n\n<code_block>\n# 点击 src 带有 mouse.png 的  img 元素\nClickElem  |  img[src*='mouse.png']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验标题=${title}下方，内容包含“选项 1”的元素处于勾选状态",
        "output": "<thought>\n要解决这个问题，我们需要完成以下步骤：\n1. 找到标题元素${title}\n2. 定位到该标题下方的\"选项 1\"复选框\n3. 验证该复选框是否被选中\n\n我们可以使用IsCheckboxSelected关键字来检查复选框状态，并通过near参数指定复选框位于${title}下方。由于题目要求校验复选框已被选中，所以应该使用Should Be True关键字来断言返回值为True。\n\n需要注意：\n- 使用near参数时，值应该是\"选项 1\"而不是\"选项1\"(注意空格)\n- IsCheckboxSelected返回的是状态值，需要配合断言关键字使用\n</thought>\n\n<code_block>\n# 校验${title}下方的\"选项 1\"复选框是否被选中\n${status}  IsCheckboxSelected  选项 1  near=${title}\nShould Be True  ${status} == ${True}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数据测试附近的data_source_va",
        "output": "<thought>\n首先需要点击一个文本“data_source_va”，该文本位于“数据测试”附近。因此可以使用Click关键字，并利用near参数指定“数据测试”作为基准文本。\n</thought>\n\n<code_block>\n# 点击数据测试附近的data_source_va\nClick | data_source_va | near=数据测试\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 app_channel 所在行中 下载",
        "output": "<thought>\n在给定的场景中，我们需要在一个包含 \"app_channel\" 文本的表格行中点击一个名为 \"下载\" 的文本。这可以通过使用 `ClickTextOfRow` 关键字实现，该关键字用于点击表格行中的特定文本。\n</thought>\n\n<code_block>\n# 点击app_channel所在行中的下载\nClickTextOfRow | app_channel | 下载\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间日期，从当天 00:00 - 当前时间，不要秒，将他们输入到有效期中",
        "output": "<thought>\n由于需要获取当前日期和时间，并且将时间范围设置到某个字段中，我们首先需要使用RF的时间关键字来获取和调整日期时间。最后，将时间范围输入到有效期字段中，使用`SetField`关键字。\n</thought>\n\n<code_block>\n# 获取当前的日期和时间，不包括秒\n${current_time}  Get Current Date  result_format=%Y-%m-%d %H:%M\n\n# 获取当天的日期，从00:00开始\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n${start_of_day}  Set Variable  ${current_date} 00:00\n\n# 使用有效期字段设置这两个时间范围\nSetField  有效期  ${start_of_day} ～ ${current_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${AP名称} 所在表格行中的删除icon",
        "output": "<thought>\n为了准确点击 ${AP名称} 所在表格行中的删除icon，我们可以使用 `ClickIconOfRow` 关键字。这个关键字允许在指定的表格行中点击某个图标。由于需要定位到具体行上的图标，必须使用 row_name_or_id 参数指代行，icon 参数指定为删除图标。\n</thought>\n\n<code_block>\n# 点击 ${AP名称} 所在表格行中的删除icon\nClickIconOfRow | ${AP名称} | delete\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成 20天前和20天后的日期，格式为 2024/11/22",
        "output": "<thought>\n要生成20天前和20天后的日期，首先要获取当前日期，然后分别使用Subtract Time From Date和Add Time To Date关键字进行计算。最后，对结果进行格式转换。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y/%m/%d\n\n# 计算20天前的日期\n${date_20_days_ago}  Subtract Time From Date  ${current_date}  20 days  result_format=%Y/%m/%d\n\n# 计算20天后的日期\n${date_20_days_later}  Add Time To Date  ${current_date}  20 days  result_format=%Y/%m/%d\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第三个关闭小图标",
        "output": "<thought>\n根据需求，需要点击第三个关闭icon。使用ClickIcon关键字可以实现点击小图标的功能。根据idx参数设置为2，即可点击第三个。\n</thought>\n\n<code_block>\n# 点击第三个“关闭”小图标\nClickIcon | close | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测Toast出现创建成功\n\n提示：就检查页面有 ‘创建成功’ 提示文案即可",
        "output": "<thought>\n该场景需要检测页面上是否出现了“创建成功”的提示文案，根据提供的关键字描述，可以使用`WaitText`等待文本出现，或者直接使用`CheckHasText`来检查页面是否包含该文本。\n</thought>\n\n<code_block>\n# 检查页面是否出现“创建成功”的提示文案\nCheckHasText | 创建成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格行 ECS-100 中的更多小图标",
        "output": "<thought>\n根据题干要求，我们需要点击表格行 \"ECS-100\" 中的更多图标。我们可以使用框架中的\"ClickIconOfRow\"关键字来实现这个功能。\"ClickIconOfRow\"关键字的参数包括表格行的文本或行号、图标名、图标序号、表格名和基准元素，这里我们要点击的是\"ECS-100\"这一行中的\"更多\"图标，所以我们将\"row_name_or_id\"设置为\"ECS-100\"，\"icon\"设置为\"more\"。\n</thought>\n\n<code_block>\n# 点击表格行 \"ECS-100\" 中的更多图标\nClickIconOfRow | ECS-100 | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面中存在 ‘立即新增’ 就点击‘专属Server’ 右下方存在 ‘立即新增’，如果不存在就等待 30s，这个过程最多重复 20次",
        "output": "<thought>\n首先，通过使用IsAnyTextExisting关键字判断页面上是否存在\"立即新增\"文本。如果存在，则使用ClickTextToTheDirectionOf关键字点击\"专属Server\"右下方的\"立即新增\"。如果不存在，则使用Sleep关键字等待30秒。这一过程需要在一个循环中执行最多20次，因此可以使用一个计数器和Robot Framework的内置IF/ELSE结构来实现。\n</thought>\n\n<code_block>\n# 初始化计数器为0\n${counter}  Set Variable  0\n\n# 开始重复最多20次的循环\nWHILE  ${counter} < 20\n    # 检查页面上是否存在文本\"立即新增\"\n    ${exist}=  IsAnyTextExisting  立即新增\n    IF  ${exist}\n        # 如果存在，点击\"专属Server\"右下方的\"立即新增\"\n        ClickTextToTheDirectionOf  专属Server  bottomRight  立即新增\n        # 跳出循环\n        BREAK\n    ELSE\n        # 如果不存在，等待30秒\n        Sleep  30s\n    END\n    # 增加计数器\n    ${counter}  Set Variable  ${counter + 1}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${数据集列表} 设置为全局变量",
        "output": "<thought>\n要将 `${数据集列表}` 设置为全局变量，可以使用 `Set Global Variable` 关键字。这个关键字将变量设置为全局可用，以便在其他测试用例中使用。\n</thought>\n\n<code_block>\n# 将${数据集列表}设置为全局变量\nSet Global Variable  ${数据集列表}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取id为spinbutton的input的value值",
        "output": "<thought>\n要获取id为spinbutton的input元素的value值，可以使用GetElemAttr关键字。因为value是input元素的属性，所以可以通过jquery选择器定位到该元素后获取其value属性值。\n\n具体步骤：\n1. 使用jquery选择器定位id为spinbutton的input元素\n2. 使用GetElemAttr关键字获取该元素的value属性值\n</thought>\n\n<code_block>\n# 获取id为spinbutton的input元素的value值\n${value}  GetElemAttr  input[id='spinbutton']  value\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 ‘上线通知’ (3s超时)，就点击 叉号",
        "output": "<thought>\n我们需要判断页面是否存在“上线通知”文本，如果存在，则点击关闭图标。我们可以使用 `IsAnyTextExisting` 关键字来判断文本的存在，然后使用 `IF/ELSE` 结构来执行点击操作。点击关闭图标可以使用 `ClickIcon` 关键字。\n</thought>\n\n<code_block>\n# 判断页面是否存在‘上线通知’\n${exist}  IsAnyTextExisting | 上线通知 | timeout=3\n\n# 如果存在‘上线通知’，点击关闭图标\nIF  $exist\n    ClickIcon  close\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 className 为 c-m-sidebar-collapse-ctrl 的元素",
        "output": "<thought>\n根据给出的场景，我们需要点击一个 className 为 c-m-sidebar-collapse-ctrl 的元素。考虑到可以使用 ClickElem 关键字直接通过选择器来点击元素。通过选择器 [class='c-m-sidebar-collapse-ctrl'] 可以精确定位到该元素，因此可以直接使用 ClickElem 来实现。\n</thought>\n\n<code_block>\n# 点击 className 为 c-m-sidebar-collapse-ctrl 的元素\nClickElem | [class='c-m-sidebar-collapse-ctrl']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘上线审核方式’ 为：直接上线",
        "output": "<thought>\n首先需要找到网页中代表“上线审核方式”字段的元素，然后使用`SetField`关键字将其设置为\"直接上线\"。考虑到没有提供更具体的选择条件，比如第几个字段或是否在弹窗中，只需默认设置即可。\n</thought>\n\n<code_block>\n# 设置上线审核方式为：直接上线\nSetField | 上线审核方式 | 直接上线\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“阶段2”的父元素的下一个元素",
        "output": "<thought>\n首先，我们需要找到文本为“阶段2”的元素。然后，使用FindParentElem关键字来获取该元素的父元素。接着，在父元素后查找下一个元素，并进行点击操作。这可以通过创建一个jQuery选择器来表示父元素的下一个元素，并使用ClickElem关键字来点击它。\n</thought>\n\n<code_block>\n# 查找文本为阶段2的元素\n${elem}  FindByText | 阶段2\n\n# 找到阶段2的父元素\n${parent}  FindParentElem | ${elem}\n\n# 点击阶段2父元素的下一个元素\nClickElem | ${parent} + *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击主备容灾左侧的图标，接着设置${approve_type}为盖章，点击空白处，等待3s，如果 ${approve_type} 为 盖章，获取页面有多少个“开始比对”按钮，存在几个就点击几次“无需比对”按钮之后出现弹窗点击“确定”按钮",
        "output": "<thought>\n首先，我们需要使用`ClickIconToTheDirectionOf`来点击主备容灾左侧的icon。然后，利用`SetField`来设置`${approve_type}`为“盖章”。接着，使用`ClickWhiteArea`点击空白处，以便保存或提交数据。通过`Sleep`来进行3秒的等待。如果`${approve_type}`是“盖章”，需要通过`GetElemCount`来获取页面上“开始比对”按钮的数量，并循环点击“无需比对”按钮相同数量的次数。最后，使用`Click`关键字在弹窗中点击“确定”按钮。\n</thought>\n\n<code_block>\n# 点击主备容灾左侧的icon\nClickIconToTheDirectionOf | 主备容灾 | left\n\n# 设置approve_type为盖章\nSetField | ${approve_type} | 盖章\n\n# 点击空白处\nClickWhiteArea\n\n# 等待3秒\nSleep | 3s\n\n# 如果approve_type为盖章\nIF  '${approve_type}' == '盖章'\n    # 获取页面有多少个“开始比对”按钮\n    ${count}  GetElemCount | button:contains(开始比对)\n    \n    # 使用FOR循环点击相同数量的“无需比对”按钮\n    FOR  ${i}  IN RANGE  ${count}\n        Click | 无需比对\n    END\n\n    # 出现弹窗点击“确定”\n    Click | 确定 | base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找包含文本“项目接入测试实验-”或者“test experiment for app access-”的div元素",
        "output": "<thought>\n使用FindByText关键字，可以根据文本查找元素。在此场景中，需要查找包含文本“项目接入测试实验-”或者“test experiment for app access-”的div元素，因此选择FindByText关键字，并传递多个文本参数。\n</thought>\n\n<code_block>\n# 查找包含文本“项目接入测试实验-”或者“test experiment for app access-”的div元素\n${elem}  FindByText | 项目接入测试实验- | test experiment for app access- | tag=div\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击feature状态右侧的开关",
        "output": "<thought>\n首先需要找到\"feature状态\"文本，然后点击其右侧的开关。可以使用 `ClickElemToTheDirectionOf` 关键字，基准元素为 \"feature状态\"，方向为 right，目标元素为代表开关的 jQuery 选择器。\n</thought>\n\n<code_block>\n# 点击feature状态右侧的开关\nClickElemToTheDirectionOf | feature状态 | right | [class*=switch]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 规则内容输入dcctest",
        "output": "<thought>\n 对于这个场景，我将假设“规则内容”是一个字段的名称，我们需要将“dcctest”输入到这个字段中。因此，我将使用“SetField”关键字来解决这个问题。\n </thought>\n \n <code_block>\n # 输入规则内容为dcctest\n SetField | 规则内容 | dcctest\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击规则未启用右侧icon",
        "output": "<thought>\n为了完成这个任务，我们需要找到文本“规则未启用”，然后点击其右侧的图标。可以使用`ClickIconToTheDirectionOf`关键字，该关键字可以指向给定文本的某个方向，并点击该方向的目标图标。\n</thought>\n\n<code_block>\n# 点击\"规则未启用\"右侧的icon\nClickIconToTheDirectionOf | 规则未启用 | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格中最后一行第一列的元素",
        "output": "<thought>\n在这个问题中，我们需要点击最后一行的第一列元素。通过使用`ClickElemOfCell`关键字，我们可以实现这个需求。`row_name_or_id=-1`用于标识最后一行，而`col_name_or_id=1`表示第一列。由于没有提供具体的元素，所以选择器可以设置为`*`，表示任何元素。\n</thought>\n\n<code_block>\n# 点击表格中的最后一行第一列的元素\nClickElemOfCell | -1 | 1 | selector=*\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击浮动收入后面的问号",
        "output": "<thought>\n我们需要点击“浮动收入”后面的问号。在RF中，我们可以使用`ClickIconToTheDirectionOf`关键字来实现这一操作。具体步骤如下：\n\n1. 确定“浮动收入”文本的位置。\n2. 找到该文本右方的问号图标。\n3. 使用`ClickIconToTheDirectionOf`关键字执行点击操作，参数包括基准元素“浮动收入”、方向“right”和目标图标名称“问号”。\n\n因此，测试步骤代码可以很简洁地使用该关键字来实现。\n</thought>\n\n<code_block>\n# Click the question mark icon to the right of \"浮动收入\"\nClickIconToTheDirectionOf | 浮动收入 | right | question\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 退货 的元素，然后打印尺寸信息",
        "output": "<thought>\n为了查找文本为“退货”的元素，可以使用`FindByText`关键字。找到元素后，使用`PrintElemRect`关键字来打印该元素的空间尺寸和位置信息。\n</thought>\n\n<code_block>\n# 查找文本为\"退货\"的元素\n${elem}  FindByText | 退货\n\n# 打印元素的尺寸信息\nPrintElemRect | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 验证审批中文案出现",
        "output": "<thought>\n 为了验证审批中文案出现，我们可以使用CheckHasText关键字来检查页面上是否包含“审批”文本。\n </thought>\n \n <code_block>\n # 校验页面包含文本\"审批\"\n CheckHasText | 审批\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 获取 首次响应时长 字段下的时间值",
        "output": "<thought>\n 首先，需要定位到 首次响应时长 字段，然后获取其对应的时间值。可以使用 GetFieldVal 关键字来完成。\n </thought>\n \n <code_block>\n # 获取首次响应时长字段的值\n ${val} GetFieldVal | 首次响应时长\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含arco-input-clear-wrapper的元素，向鼠标激活处输入昨天的日期格式为：年.月.日",
        "output": "<thought>\n首先，我们需要使用`ClickElem`关键字点击指定的元素。然后，使用Robot Framework的内置关键字获取昨天的日期并格式化为“年.月.日”的形式。最后，使用`SendText`将格式化的日期输入到鼠标激活的位置。\n</thought>\n\n<code_block>\n# 点击class包含arco-input-clear-wrapper的元素\nClickElem | [class*='arco-input-clear-wrapper']\n\n# 获取昨天的日期并格式化为年.月.日\n${yesterday}   Get Current Date    result_format=%Y.%m.%d    increment=-1 days\n\n# 在鼠标激活的地方输入日期\nSendText | ${yesterday}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果第一行的状态为运行中，则xxx,否则yyy",
        "output": "<thought>\n首先，需要判断第一行的状态是否为\"运行中\"，可以使用`IsCellContainsText`关键字来实现。接着，根据判断结果进行分支处理，如果状态为\"运行中\"，则执行xxx操作；否则，执行yyy操作。\n</thought>\n\n<code_block>\n# 判断第一行状态列是否包含\"运行中\"\n${status}  IsCellContainsText | 1 | 状态 | 运行中\n\n# 根据状态执行不同操作\nIF  ${status}\n    # xxx操作\n    # Example: ClickTextOfCell | 1 | 操作 | xxx\n    Log  xxx操作\nELSE\n    # yyy操作\n    # Example: ClickTextOfCell | 1 | 操作 | yyy\n    Log  yyy操作\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 业务需求人(销售) 为 李泽伟，设置 合同名称 为 ui_自动化测试1，设置 具体合同模板 为 标准-采购服务主协议 和 非标-补充协议",
        "output": "<thought>\n首先，我们需要将“业务需求人(销售)”字段设置为“李泽伟”。然后，我们需要将“合同名称”字段设置为“ui_自动化测试1”。接下来，“具体合同模板”是一个字段，但需要填写两个不同的值“标准-采购服务主协议”和“非标-补充协议”。假设此字段可以多次填写或在页面上有多个字段框。我们可以利用`SetField`关键字一次性按序设置这些值。\n</thought>\n\n<code_block>\n# 设置业务需求人为李泽伟\nSetField | 业务需求人(销售) | 李泽伟\n\n# 设置合同名称为 ui_自动化测试1\nSetField | 合同名称 | ui_自动化测试1\n\n# 设置具体合同模板为 标准-采购服务主协议\nSetField | 具体合同模板 | 标准-采购服务主协议 | 非标-补充协议\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 span[draggable=\"true\"] 文本为 ${表信息} 的元素",
        "output": "<thought>\n要解决这个问题，需要查找一个span元素，其属性draggable为\"true\"，并且其文本等于变量${表信息}。我们可以使用FindElem关键字结合jQuery选择器来实现这个查找。\n</thought>\n\n<code_block>\n# 查找draggable=\"true\" 且文本为${表信息}的span元素\n${elem}  FindElem | span[draggable=\"true\"]:contains(${表信息})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "浏览器退后到上一个页面，点击我再想想右边的结束售卖，点击包括同意的 按钮",
        "output": "<thought>\n在这个场景中，我们需要执行几个操作步骤：首先，返回到上一个页面，然后点击特定文本右边的一个按钮，最后点击一个包含特定文本的按钮。根据这些步骤，我们可以使用\"PageBack\"关键字来返回上一页面，然后使用\"ClickTextToTheDirectionOf\"关键字来点击文本右边的按钮。最后，再使用\"ClickElem\"关键字来点击包含特定文本的按钮。\n</thought>\n\n<code_block>\n# 返回到上一个页面\nPageBack\n\n# 点击 \"我再想想\" 右边的 \"结束售卖\"\nClickTextToTheDirectionOf | 我再想想 | right | 结束售卖\n\n# 点击包含 \"同意\" 的按钮\nClickElem | button:contains(同意)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入地址访问页面${url_parameter_pre}，点击 新增，等待1秒，设置 请输入为:${rule_code}，设置 编码为：${rule_code}，设置 状态为：${rule_status}，如果${TAB}等于我的申请或者等于全部申请，就打印111",
        "output": "<thought>\n1. 使用`OpenUrl`关键字访问指定页面。\n2. 通过`Click`点击“新增”按钮。\n3. 使用`Sleep`等待1秒。\n4. 利用`BatchSetFields`批量设置多个字段。\n5. 使用RF的IF关键字检查`TAB`的值，并在条件满足时打印111。\n</thought>\n\n<code_block>\n# 访问指定页面\nOpenUrl | ${url_parameter_pre}\n\n# 点击新增按钮\nClick | 新增\n\n# 等待1秒\nSleep | 1s\n\n# 批量设置字段\nBatchSetFields | 请输入=${rule_code} | 编码=${rule_code} | 状态=${rule_status}\n\n# 判断TAB值打印信息\nIF  \"${TAB}\" == \"我的申请\" or \"${TAB}\" == \"全部申请\"\n    Log  111\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“新建文件夹” 的关键字，接受name，path（默认值为：根目录）参数，作用是：\n# 点击列表\n# 1、列表页面，点击【新建文件夹】按钮，输入文件夹名称 name，选择路径 path\n# 2、点击【确定】按钮 \n# 页面应该包含 name",
        "output": "<thought>\n我们需要实现一个关键字来自动化新建文件夹操作。首先，我们需要点击“列表”按钮，然后在“列表”页面点击“新建文件夹”按钮。接下来，输入文件夹名称并选择路径。最后，点击“确定”按钮，并验证页面包含文件夹名称。可以使用关键字：ClickTextOneByOne、SetField、SelectOptionForField（如果路径需要从下拉列表选择）、Click、CheckHasText。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建文件夹\n    [Arguments]  ${name}  ${path}=根目录\n    # 点击列表页面并新建文件夹\n    ClickTextOneByOne | 列表 | 新建文件夹\n    SetField | 文件夹名称 | ${name}\n    SelectOptionForField | 路径 | ${path}\n    Click | 确定\n    # 校验页面包含文件夹名称\n    CheckHasText | ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找表格第一行中的：用户画像",
        "output": "<thought>\n通过题目描述，我们需要在表格的第一行中查找包含特定文本“用户画像”的元素。这里可以使用`FindTextOfRow`关键字，其允许我们通过行号和指定的文本查找目标元素。由于是查找表格中的文本，不涉及点击或者选择的操作，所以不涉及其他的关键字。\n</thought>\n\n<code_block>\n# 查找表格第一行中的文本 '用户画像'\n${elem}  FindTextOfRow | 1 | 用户画像 | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“新建虚拟事件” 的关键字，接受 name, args 参数：作用是：\n1. 点击 ‘新建虚拟事件’, 然后向 ‘虚拟事件名称’ 中输入 name, 向 ‘展示名’ 输入 name+的展示名\n2. 然后判断 args 长度 length 应该至少为 1，否则就失败，原因是：虚拟事件中至少包含一个一般事件\n3. 如果 args 满足条件，就点击 length - 1 次：‘新建事件’\n4. 最后将 args 中的每一个参数，依次填写到各个：‘请选择事件’ 字段中",
        "output": "<thought>\n我们需要先点击“新建虚拟事件”按钮，然后在指定字段输入参数，判断参数长度，执行必要的点击操作，并将参数填入相应字段。使用的主要关键字包括：`Click`、`SetField`、`Should Be True`、`FOR`循环等。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建虚拟事件\n    [Arguments]  ${name}  @{args}\n\n    # 点击新建虚拟事件\n    Click  新建虚拟事件\n\n    # 向虚拟事件名称中输入name\n    SetField  虚拟事件名称  ${name}\n\n    # 向展示名中输入name+的展示名\n    SetField  展示名  ${name}的展示名\n\n    # 判断args长度应该至少为1，否则失败\n    ${length}=  Get Length  ${args}\n    Should Be True  ${length} > 0  虚拟事件中至少包含一个一般事件\n\n    # 点击length - 1次新建事件\n    ${clickTimes}=  Evaluate  ${length} - 1\n    FOR  ${i}  IN RANGE  ${clickTimes}\n        Click  新建事件\n    END\n\n    # 将args中的每一个参数，依次填写到每一个请选择事件字段中\n    FOR  ${index}  ${value}  IN ENUMERATE  @{args}\n        SetField  |  请选择事件  |  ${value}  |  idx=${index}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器，进入到MAIN_PAGE页面，输入手机号：PHONE_NO的值，判断变量${result} 是否包含 PASS，如不包含则校验页面不是白屏",
        "output": "<thought>\n首先，我们需要使用`OpenBrowser`关键字打开浏览器，并访问MAIN_PAGE页面。接着，用`SetField`设置手机号字段，输入PHONE_NO的值。之后，判断${result}变量是否包含\"PASS\"。如果不包含\"PASS\"，我们需要使用`CheckWhiteScreen`校验页面是否白屏。\n</thought>\n\n<code_block>\n# 打开浏览器并访问MAIN_PAGE页面\nOpenBrowser | MAIN_PAGE\n\n# 输入手机号 PHONE_NO\nSetField | 手机号 | PHONE_NO\n\n# 判断变量${result}是否包含PASS\n${contains_pass}  Evaluate  'PASS' in '''${result}'''\nIF  not ${contains_pass}\n    # 校验页面是否存在白屏\n    CheckWhiteScreen\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二个弹框中的编辑按钮",
        "output": "<thought>\n对于这个场景，我们需要点击第二个弹框中的“编辑”按钮。可以使用Click关键字，并通过base参数指定操作的元素在弹框中。由于有多个弹框，我们将使用popup_index参数来指定是第二个弹框。\n</thought>\n\n<code_block>\n# 点击第二个弹框中的编辑按钮\nClick | 编辑 | base=POPUP | popup_index=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待欢迎",
        "output": "<thought>\n这个任务要求我们等待页面上出现“欢迎”这个文本。我们可以使用`WaitText`关键字，并传入“欢迎”作为参数，因为`WaitText`可以等待页面上出现特定的文本。\n</thought>\n\n<code_block>\n# 等待页面上出现“欢迎”文本\nWaitText | 欢迎\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${dir}中是否包含类似正则模式2.17.0-2.18.x的结果赋值给变量B",
        "output": "<thought>\n要解决这个问题，我们需要：\n1. 使用正则表达式匹配模式\"2.17.0-2.18.x\"\n2. 将匹配结果赋值给变量B\n\n分析可用关键字：\n- 然后使用Evaluate执行Python正则表达式匹配\n- 最后用Set Variable将结果赋值给B\n\n正则表达式模式可以写成r'2\\.17\\.0-2\\.18\\..'来匹配要求的格式\n</thought>\n\n<code_block>\n# 进行正则匹配\nIF  $exist\n    ${B}  Evaluate  re.match(r'2\\\\.17\\\\.0-2\\\\.18\\\\..', '${dir}') is not None  modules=re\nELSE\n    ${B}  Set Variable  ${False}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击回收标准右侧的元素[aria-checked\\='false']",
        "output": "<thought>\n首先，我们需要点击一个位于“回收标准”右侧的特定元素，该元素的属性为`aria-checked='false'`。为了实现这一点，可以使用`ClickElemToTheDirectionOf`关键字。这个关键字允许我们指定一个基准元素和一个方向，然后点击在该方向上的目标元素。在这种情况下，“回收标准”是基准元素，目标元素位于其右侧，选择器为`[aria-checked='false']`。\n</thought>\n\n<code_block>\n# 点击回收标准右侧的aria-checked='false'的元素\nClickElemToTheDirectionOf | 回收标准 | right | [aria-checked='false']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在‘团购售价’则将 团购售价 移动到屏幕中间",
        "output": "<thought>\n我们需要判断页面是否存在文本“团购售价”，并将其移动到屏幕中间。首先，通过`IsAnyTextExisting`关键字判断“团购售价”是否存在。然后，如果存在，我们通过`MoTo`关键字将“团购售价”移动到屏幕中央。`MoveIntoView`关键字可以确保元素在视野内。我们可以选择一个合理的关键字，用于移动操作。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本“团购售价”\n${exist}  IsAnyTextExisting | 团购售价\n\n# 如果“团购售价”存在，将其移到屏幕中间\nIF  $exist\n    MoveIntoView | :contains('团购售价')\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置参数  input placeholder包含请选择属性  赋值= ${name}",
        "output": "<thought>\n该任务要求我们设置一个页面字段，其选择器是一个带有占位符的输入框。由于没有可直接使用的关键字来处理此类选择器，我们需要使用`FillArea`关键字，因为它支持使用jquery选择器来定位元素。我们将使用`input[placeholder*='请选择属性']`作为选择器。\n</thought>\n\n<code_block>\n# 设置具有特定placeholder的输入框的值为${name}\nFillArea | input[placeholder*='请选择属性'] | ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“检查页面包含”的关键字，接受参数 name，name可以是多个，作用是去掉 name 前后的空格，然后校验页面包含 name，name可以为多个",
        "output": "<thought>\n我们需要创建一个关键字，接受多个参数，去除每个参数的前后空格，然后使用CheckHasText来校验页面是否包含处理后的参数。我们可以使用RobotFramework中的`Strip String`来去除字符串的前后空格。\n</thought>\n\n<code_block>\n*** Keywords ***\n检查页面包含\n    [Arguments]  @{names}\n    FOR  ${name}  IN  @{names}\n      ${stripped_name}=  Strip String  ${name}\n      Append To List  ${stripped_names}  ${stripped_name}\n    CheckHasText  @{stripped_names}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“打开页面”，接受参数 url，默认值为${MAIN_PAGE}, 主要完成：打开给定的url, 并等待页面加载完成",
        "output": "<thought>\n我们需要先打开给定的URL，然后等待页面加载完成。可以使用`OpenUrl`关键字打开URL，接着使用`WaitLoading`关键字等待页面加载。参数默认值可以直接在[Arguments]中定义。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开页面\n    [Arguments]  ${url}=${MAIN_PAGE}\n    # 打开给定的URL\n    OpenUrl  ${url}\n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击用户做过右边的新增\n然后向class包含TagCreateInfo__content的区域中输入: 不同时间  用户做过  页面访问",
        "output": "<thought>\n首先，我们需要点击\"用户做过\"右边的\"新增\"，这可以通过使用关键字\"ClickTextToTheDirectionOf\"来实现。然后，我们需要向class包含\"TagCreateInfo__content\"的区域输入一些文本，这可以通过使用关键字\"FillArea\"来实现。\n</thought>\n\n<code_block>\n# 点击\"用户做过\"右边的\"新增\"\nClickTextToTheDirectionOf | 用户做过 | right | 新增\n\n# 向class包含\"TagCreateInfo__content\"的区域输入: 不同时间  用户做过  页面访问\nFillArea | [class*=TagCreateInfo__content] | 不同时间 | 用户做过 | 页面访问\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击编辑小图标",
        "output": "<thought>\n查看问题要求，需要点击编辑icon，根据关键字定义，可以使用ClickIcon关键字，参数name设置为\"edit\"来实现点击编辑icon的操作。\n</thought>\n\n<code_block>\n# 点击编辑icon\nClickIcon | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数量后面的编辑, 输入 100",
        "output": "<thought>\n在这个问题中，我们首先需要找到“数量”后面的“编辑”文本，然后点击它。这样就可以将焦点移动到输入框中。然后，我们可以使用“SendText”关键字将输入设置为“100”。这个关键字允许我们直接在当前光标位置输入某些文本。\n这个问题需要用到的关键字有两个，分别为“ClickTextToTheDirectionOf”和“SendText”。“ClickTextToTheDirectionOf”关键字允许我们点击某个文本相对于给出位置的元素或文本，而“SendText”关键字允许我们在当前光标位置输入文本。\n</thought>\n\n<code_block>\n# 点击数量后面的编辑\nClickTextToTheDirectionOf  | 数量 | right | 编辑\n\n# 输入100\nSendText  | 100    \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${approve_type} 按钮",
        "output": "<thought>\n我们可以使用RF的Click关键字来实现这个任务。我们只需要将 ${approve_type} 作为Click关键字的参数，RF就会自动点击界面上的 ${approve_type} 按钮。\n</thought>\n\n<code_block>\n# 点击 ${approve_type} 按钮\nClick | ${approve_type}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "退出iframe",
        "output": "<thought>\n 在RobotFramework中，退出当前的iframe可以直接使用ExitFrame关键字。这个关键字会让我们从当前iframe返回到主文档。\n </thought>\n \n <code_block>\n # 退出当前iframe，返回主文档\n ExitFrame\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${is_num}为真，就把 ${val} 转化成数值",
        "output": "<thought>\n判断${is_num}是否为真，如果为真则使用Evaluate关键字执行Python代码将${val}转化为数值。\n</thought>\n\n<code_block>\nIF  $is_num\n    ${val} =  Evaluate  int(${val})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${login_user} 不为空，则调用 get_feishu_session 关键字，入参： ${login_user}  ${env}",
        "output": "<thought>\n首先，我需要判断变量${login_user}是否为空，这可以通过RF的内置IF/ELSE语法来实现。如果${login_user}不为空，那么我将使用关键字get_feishu_session，参数是${login_user}和${env}。\n</thought>\n\n<code_block>\n# 判断${login_user}是否为空\nIF  \"${login_user}\" != \"\"\n  # 如果不为空，调用get_feishu_session关键字\n  get_feishu_session  ${login_user}  ${env}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "进入高级分析子页面  事件分析",
        "output": "<thought>\n任务是导航到高级分析的“事件分析”页面。我们需要使用ClickMenu关键字依次点击“高级分析”和“事件分析”菜单项。\n</thought>\n\n<code_block>\n# 进入 高级分析 > 事件分析页面\nClickMenu | 高级分析 | 事件分析\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击立即部署，设置任务名称为【自动化测试新建插件场景专用】，设置负责人为zhangxiaoyu.613，点击下一步",
        "output": "<thought>\n 首先点击“立即部署”按钮，然后设置任务名称为“自动化测试新建插件场景专用”，接着设置负责人为“zhangxiaoyu.613”。最后，点击“下一步”。这一步骤可以通过依次使用`Click`、`SetField`和`Click`关键字来实现。\n </thought>\n \n <code_block>\n # 点击立即部署按钮\n Click | 立即部署\n \n # 设置任务名称为自动化测试新建插件场景专用\n SetField | 任务名称 | 自动化测试新建插件场景专用\n \n # 设置负责人为zhangxiaoyu.613\n SetField | 负责人 | zhangxiaoyu.613\n \n # 点击下一步按钮\n Click | 下一步\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到提示“搜索模版名称/ID”的输入框，填入${template_id}",
        "output": "<thought>\n1. 首先需要定位到\"搜索模版名称/ID\"的输入框，可以使用`FindByText`或`FindNearElem`关键字\n2. 由于输入框有明确的标签文本\"搜索模版名称/ID\"，最适合使用`SetField`关键字直接操作\n3. 需要输入变量${template_id}的值，可以直接作为参数传递给`SetField`\n4. 考虑到可能有多个相同名称的字段，默认使用第一个(idx=0)\n</thought>\n\n<code_block>\n# 在\"搜索模版名称/ID\"输入框中输入模板ID\nSetField | 搜索模版名称/ID | ${template_id}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "按下esc退出",
        "output": "<thought>\n解决问题思路：使用Press Keys关键字按下ESC键\n</thought>\n\n<code_block>\n# 按下 ESC 键\nPress Keys | None | ESC\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找包含OK或下一步的按钮",
        "output": "<thought>\n首先，我们可以使用`FindByText`关键字来查找文本包含OK或下一步的元素，这是因为该关键字可以根据给定的文本查找/定位/获取元素。并且，由于我们是在查找按钮，所以我们可以在`FindByText`关键字中指定tag参数为\"button\"，这样可以缩小查找范围，提高查找效率。\n</thought>\n\n<code_block>\n# 查找包含OK或下一步的按钮\n${elem}  FindByText | OK | 下一步 | tag=button\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 id=function-sider的元素下的class为header的元素下的class为type的元素为：LAS",
        "output": "<thought>\n我们需要创建一个选择器来精确定位目标元素。首先选择 id 为 function-sider 的元素，然后再选择 class 为 header 的元素，接着定位 class 为 type 的元素。最后使用 FillArea 关键字来设置值。\n</thought>\n\n<code_block>\n# 设置目标元素的值为 LAS\nFillArea | [id=function-sider] [class=header] [class=type] | LAS\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开粘贴板的url，检查页面显示跨端导流观测实验-cuped-LT30，点击其右边的第2个复制链接icon",
        "output": "<thought>\n首先，使用`GetCopied`关键字获取粘贴板内容作为URL，然后使用`OpenUrl`打开该URL。接下来，使用`CheckHasText`关键字检查页面中是否存在指定文本。最后，使用`ClickIconToTheDirectionOf`关键字在该元素的右侧点击第二个复制链接图标。\n</thought>\n\n<code_block>\n# 获取粘贴板内容并打开URL\n${url}  GetCopied\nOpenUrl  ${url}\n\n# 检查页面是否包含指定文本\nCheckHasText  跨端导流观测实验-cuped-LT30\n\n# 点击目标文本右边的第二个复制链接 icon\nClickIconToTheDirectionOf  跨端导流观测实验-cuped-LT30  right  copy  idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上角的关闭按钮",
        "output": "<thought>\n根据需求，需要点击右上角的关闭按钮。可以使用`ClickIconToTheDirectionOf`关键字，从屏幕中心开始，选择`topRight`方向，图标名为`close`。\n</thought>\n\n<code_block>\n# 点击右上角的关闭按钮\nClickIconToTheDirectionOf | SCREEN_CENTER | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到客户手机号后面紧跟着的输入框，输入17715268644",
        "output": "<thought>\n根据需求，我们需要在\"客户手机号\"文本后紧跟的input或textarea中输入一个手机号\"17715268644\"。首先，我们可以使用FindElemToTheDirectionOf关键字来找到\"客户手机号\"右边的input或textarea元素，然后使用FillArea关键字来输入手机号。\n</thought>\n\n<code_block>\n# 找到\"客户手机号\"右侧的input或textarea元素\n${elem}  FindElemToTheDirectionOf | 客户手机号 | right | input, textarea\n\n# 在找到的元素中输入手机号\nFillArea | ${elem} | 17715268644\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择 YARN队列：root.default",
        "output": "<thought>\n首先需要选择一个名为“YARN队列”的字段，然后将其设置为“root.default”。可以使用SelectOptionForField关键字来实现。\n</thought>\n\n<code_block>\n# 设置YARN队列为root.default\nSelectOptionForField | YARN队列 | root.default\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新开的页面",
        "output": "<thought>\n要切换到新开的页面，可以使用以下步骤：\n1. 使用ToNewWindow关键字切换到新窗口\n</thought>\n\n<code_block>\n# 切换到新打开的窗口\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "按enter键",
        "output": "<thought>\n要在Robot Framework中模拟按下Enter键，可以使用SeleniumLibrary中的Press Keys关键字。\n</thought>\n\n<code_block>\n# 使用Press Keys键入Enter键\nPress Keys | None | ENTER\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "请求URL，https://oa-boe.bytedance.net/wfc_manage/mock/login?userId=5950169",
        "output": "<thought>\n这个场景只需要访问一个特定的URL，可以直接使用`OpenUrl`关键字来完成。由于没有其他交互需求，代码非常简单直接。\n\n分析步骤：\n1. 使用`OpenUrl`关键字打开指定URL\n2. 设置合理的超时时间（使用默认值80秒即可）\n\n不需要其他关键字，因为场景只要求访问URL，不涉及点击、请求发送或mock等操作。\n</thought>\n\n<code_block>\n# 访问登录mock页面\nOpenUrl | https://oa-boe.bytedance.net/wfc_manage/mock/login?userId=5950169\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 生成一个名为 pic 的变量，变量值为将 1、2、3、4 用 _ 分隔",
        "output": "<thought>\n 可以使用 RobotFramework 的 Set Variable 关键字来创建变量，并通过字符串连接来实现。\n </thought>\n \n <code_block>\n # 使用 Set Variable 生成 pic 变量\n ${pic}  Set Variable  1_2_3_4\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在姓名输入框内输入康豪并点击查询按钮",
        "output": "<thought>\n首先需要在姓名的输入框内输入“康豪”，然后点击查询按钮。可以使用SetField关键字进行输入操作，使用Click关键字点击查询按钮。\n</thought>\n\n<code_block>\n# 输入姓名康豪\nSetField | 姓名 | 康豪\n\n# 点击查询按钮\nClick | 查询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 判断versions是否是string",
        "output": "<thought>\n 要判断变量`versions`是否是字符串类型，我们需要检查其类型。可以使用`Evaluate`关键字来执行Python代码进行类型判断。我们可以通过`isinstance()`函数进行判断。\n </thought>\n \n <code_block>\n # 判断变量versions是否是string\n ${is_string}  Evaluate |  isinstance($versions, str)\n \n # 如果是string，打印是字符串\n IF ${is_string}\n  Log  变量versions是字符串\n ELSE\n  Log  变量versions不是字符串\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "提取元素class=\"arco-col arco-col-19 arco-form-item-wrapper\"的文本",
        "output": "<thought>\n要提取元素class=\"arco-col arco-col-19 arco-form-item-wrapper\"的文本，可以使用GetElemText关键字。首先需要创建一个变量来保存jquery选择器，然后使用GetElemText获取该元素的文本。\n</thought>\n\n<code_block>\n# 创建选择器变量\n${selector}  Set Variable  [class=\"arco-col arco-col-19 arco-form-item-wrapper\"]\n\n# 获取元素文本\n${val}  GetElemText  ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将${clean_desc}中的‘显著’和\\n去掉，然后打印打印${clean_desc}的值",
        "output": "<thought>\n为了去掉字符串中的特定字符并打印结果，我将使用Python的字符串操作功能。可以利用Robot Framework的Evaluate关键字来处理Python代码，将${clean_desc}中的‘显著’和\\n去掉\n</thought>\n\n<code_block>\n# 去掉特定字符并打印\n${cleaned_desc}    Evaluate    ${clean_desc}.replace('显著', '').replace('\\\\n', '')    re\nLog    ${cleaned_desc}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 mon 设置为上个月",
        "output": "<thought>\n为了将字段mon设置为上个月，可以使用RF的日期处理关键字。首先，通过Get Current Date获取当前日期，然后使用Subtract Time From Date减少一个月的时间，得到上个月的日期。接着，使用SetField将解析后的月份设置到字段mon中。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 计算上个月日期\n${last_month_date}  Subtract Time From Date  ${current_date}  1month  result_format=%m\n\n# 设置字段mon为上个月\nSetField  mon  ${last_month}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 对比${text}与${text2}不一致",
        "output": "<thought>\n 为了比较两个变量`${text}`和`${text2}`的值是否不一致，可以使用Robot Framework内置的`Should Not Be Equal`关键字。该关键字可以直接用于比较两个字符串或数值是否不同。\n </thought>\n \n <code_block>\n # 比较${text}与${text2}是否不一致\n Should Not Be Equal | ${text} | ${text2}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "第二个请输入官方下载链接 输入为 https://itkm-pre.bytedance.net/itam2/software-center",
        "output": "<thought>\n首先，我们需要找到\"请输入官方下载链接\"字段，然后在它的控件区域中输入链接。因为题目要求输入第二个\"请输入官方下载链接\"字段，我们需要设置idx为1。此处我们使用SetField关键字，name参数为\"请输入官方下载链接\"，将args参数设置为需要输入的链接，idx参数设置为1。\n</thought>\n\n<code_block>\n# 在第二个\"请输入官方下载链接\"字段中输入链接\nSetField | 请输入官方下载链接 | https://itkm-pre.bytedance.net/itam2/software-center | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 placeholder 带有 请尝试描述目的地 的输入框，输入 自然景点，检查界面出现 推荐内容，且推荐内容列表下，确认有3行内容，其中第一行包含文案：热门",
        "output": "<thought>\n此场景要求在页面的某个输入框(input或textarea)中输入文本，然后检查界面是否出现指定的推荐内容以及推荐列表的行数和特定文本。首先，我们可以使用`FillArea`关键字在`placeholder`属性为\"请尝试描述目的地\"的输入框中输入\"自然景点\"。接下来，我们使用`WaitText`关键字等待页面上出现\"推荐内容\"文本。这可以确保我们在下一步操作前，页面加载出了推荐内容。然后，使用`CheckRowCount`关键字来检查推荐内容列表中是否有3行内容。最后，使用`CheckRowHas`关键字验证第一行是否包含\"热门\"文本。\n</thought>\n\n<code_block>\n# 在占位符为\"请尝试描述目的地\"的输入框中输入\"自然景点\"\nFillArea | [placeholder*=\"请尝试描述目的地\"] | 自然景点\n\n# 等待页面上出现文本\"推荐内容\"\nWaitText | 推荐内容\n\n# 检查推荐内容列表有3行\nCheckRowCount | 3 | tbl=推荐内容\n\n# 确认推荐内容列表的第一行包含\"热门\"\nCheckRowHas | 1 | 热门 | tbl=推荐内容\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 重置",
        "output": "<thought>\n在这个场景中，我们需要点击一个文本为“重置”的按钮。可以直接使用Click关键字，因为它可以通过文本内容定位元素。由于没有指定其他条件（如索引或基准元素），我们可以简单地使用Click | 重置。\n</thought>\n\n<code_block>\n# 点击文本为“重置”的按钮\nClick | 重置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 ‘我已知晓’ 附近的复选框",
        "output": "<thought>\n为了查找“我已知晓”附近的复选框，我们可以使用`FindByText`关键字来定位包含文本“我已知晓”的元素，然后使用`FindNearElem`关键字来查找其附近的复选框元素。根据上下文，复选框通常是一个`input`元素，带有`type=\"checkbox\"`属性 或 用 :checkbox 来表示。\n</thought>\n\n<code_block>\n# 找到文本为“我已知晓”的元素\n${elem}  FindByText | 我已知晓\n\n# 查找“我已知晓”附近的复选框\n${checkbox}  FindNearElem | ${elem} | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "“搜索合同类型”搜索框中输入 ${contract_type}， 等待页面包含 ${contract_type}，然后点击 ${contract_type}",
        "output": "<thought>\n我们需要：\n1. 使用 `SetField` 在“搜索合同类型”搜索框中输入变量 `${contract_type}`。\n2. 使用 `WaitText` 等待页面出现 `${contract_type}`。\n3. 使用 `Click` 点击 `${contract_type}`。\n</thought>\n\n<code_block>\n# 在“搜索合同类型”搜索框中输入合同类型\nSetField | 搜索合同类型 | ${contract_type}\n\n# 等待页面包含合同类型\nWaitText | ${contract_type}\n\n# 点击合同类型\nClick | ${contract_type}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${index}等于0，则xxx，如果${index}等于1，则yy",
        "output": "<thought>\n根据需求，我们需要根据${index}的值来执行不同的操作。我们可以使用Robot Framework的IF/ELSE语法来实现条件判断。在这种情况下，我们有两个条件：当${index}等于0时，执行xxx操作；当${index}等于1时，执行yy操作。\n</thought>\n\n<code_block>\n# 判断${index}是否为0\nIF  \"${index}\" == \"0\"\n    # 执行xxx操作\n    # 例如：Click xxx_button\n    Click  xxx_button\n# 判断${index}是否为1\nELSE IF  \"${index}\" == \"1\"\n    # 执行yy操作\n    # 例如：Click yy_button\n    Click  yy_button\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 右上角的关闭小图标",
        "output": "<thought>\n在这个场景中，我们需要在弹窗中点击右上角的关闭图标。我们可以使用关键字\"ClickIconToTheDirectionOf\"来实现这个功能。首先，我们需要将基准元素设为弹窗，这可以通过\"base=POPUP\"实现。然后，我们需要指定方向为\"topRight\"，表示右上角。最后，我们需要指定要点击的图标为\"close\"，表示关闭图标。\n</thought>\n\n<code_block>\n# 点击 弹窗中的 右上角的关闭图标\nClickIconToTheDirectionOf | POPUP | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "刷新页面，点击${name}后面的svg[class*\\=arco-icon-more]",
        "output": "<thought>\n首先需要刷新页面，可以使用关键字RefreshPage。然后需要点击一个特定的SVG图标。基于问题描述，SVG图标定位在变量${name}文本后面，可以使用ClickElemToTheDirectionOf关键字，选择right方向，使用jQuery选择器[class*=arco-icon-more]来精确定位元素。\n</thought>\n\n<code_block>\n# 刷新页面\nRefreshPage\n\n# 点击 ${name} 右边的svg[class*=arco-icon-more]\nClickElemToTheDirectionOf | ${name} | right | svg[class*=arco-icon-more]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证${name}同一行存在“每日跟随上游同步”，然后点击与${name}在表格同一行第7列的编辑",
        "output": "<thought>\n思路：首先，由于${name}同一行存在“每日跟随上游同步”的条件是验证性质的，我们可以使用 'IsRowContainsText' 关键字来实现。然后，我们使用'ClickTextOfCell'关键字来点击${name}所在行的第7列的'编辑'。这是因为该关键字可以通过行名和列号定位到具体的单元格文本并执行点击操作。\n</thought>\n\n\n<code_block>\n# 验证${name}同一行存在“每日跟随上游同步”\n${result}=  IsRowContainsText | ${name} | 每日跟随上游同步\nShould Be True  ${result}\n\n# 点击与${name}在表格同一行第7列的编辑\nClickTextOfCell  |  ${name}  |  7  |  编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“用户绑定飞书通过UserID匹配”的关键字，作用是先点击class 为arco-link 的元素，然后点击用户绑定，等待 1 秒后点击第 1 个手动绑定，然后点击手机号后点击User Id，检查页面包含placeholder 为请输入完整User Id进行搜索的元素，最后点击确定按钮",
        "output": "<thought>\n为了解决这个问题，我们需要依次执行以下步骤：\n1. 点击class为arco-link的元素。\n2. 点击“用户绑定”。\n3. 等待1秒。\n4. 点击第一个“手动绑定”。\n5. 点击“手机号”。\n6. 点击“User Id”。\n7. 检查页面中是否存在占位符为“请输入完整User Id进行搜索”的元素。\n8. 点击“确定”按钮。\n\n我们可以使用如下关键字：\n- `ClickElem`用于点击元素。\n- `Sleep`用于等待。\n- `CheckHasElem`用于检查页面元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n用户绑定飞书通过UserID匹配\n    # 点击 class 为 arco-link 的元素\n    ClickElem  [class=arco-link]\n    \n    # 点击 用户绑定\n    Click  用户绑定\n    \n    # 等待 1 秒\n    Sleep  1s\n    \n    # 点击第一个 手动绑定\n    Click  手动绑定  idx=0\n    \n    # 点击 手机号\n    Click  手机号\n    \n    # 点击 User Id\n    Click  User Id\n    \n    # 检查页面包含 placeholder 为\"请输入完整User Id进行搜索\"的元素\n    CheckHasElem  input[placeholder=\"请输入完整User Id进行搜索\"]\n    \n    # 点击 确定 按钮\n    Click  确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 检查页面显示操作触发成功",
        "output": "<thought>\n 在这个场景中，我们需要检查页面是否存在\"操作触发成功\"的文字。我们可以使用\"CheckHasText\"关键字来实现这个检查。\n </thought>\n \n <code_block>\n # 检查页面存在\"操作触发成功\"\n CheckHasText | 操作触发成功\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置配置空间：launch_test_hdl,回车",
        "output": "<thought>\n这个任务要求在配置空间中输入文本“launch_test_hdl”并回车。可以使用`SetField`关键字来完成这个任务，因为我们需要将文本输入到指定字段中并按下回车。\n</thought>\n\n<code_block>\n# 设置配置空间为：launch_test_hdl，并回车\nSetField | 配置空间 | launch_test_hdl | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${name}右侧三个点的小图标",
        "output": "<thought>\n要点击${name}右侧三个点的icon，分析如下：\n1. 这是一个基于相对位置的点击操作，需要先定位${name}元素，然后在其右侧找到目标icon\n2. 三个点的icon通常表示\"更多\"操作，常见的icon名称可能是\"more\"或\"ellipsis\"\n3. 根据关键字文档，最适合的是ClickIconToTheDirectionOf关键字，它可以基于基准元素和方向定位icon\n4. 方向参数应为\"right\"，基准元素是${name}，icon名称可能是\"more\"\n5. 不需要指定idx参数，因为默认就是点击第一个匹配的icon\n</thought>\n\n<code_block>\n# 点击${name}右侧的三个点icon\nClickIconToTheDirectionOf    ${name}    right    more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对于变量 checks 中的每一项，调用 ‘AiCheck’ 关键字",
        "output": "<thought>\n在这个任务中，我们需要遍历变量checks中的每一项，并对每一项调用关键字'AiCheck'。Robot Framework中可以通过内置的FOR循环支持来实现这个操作。FOR循环能够很好地处理列表中的每一项并执行相应的关键字调用。在这里，我们将使用FOR循环结构，遍历checks列表，并对于每一个元素使用'AiCheck'关键字。\n</thought>\n\n<code_block>\n# 遍历checks中的每一项\nFOR  ${item}  IN  @{checks}\n    # 调用AiCheck关键字\n    AiCheck  ${item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "    向data-e2e=ad_drawer_range_picker__ocRangePicker的div元素输入2024-08-18～2024-09-12",
        "output": "<thought>\n在这个场景中，我们需要向一个特定的div元素输入一个日期范围。根据提供的关键字，我们可以使用FillArea来实现这一点，因为FillArea允许我们根据jquery选择器指定的元素来输入文本。我们需要构建jquery选择器以选择具有特定属性data-e2e的div元素。在jquery中，可以使用属性选择器来实现这一点：[attribute=value]。因此，我们的选择器将是div[data-e2e=ad_drawer_range_picker__ocRangePicker]。\n</thought>\n\n<code_block>\n# 在具有data-e2e属性的div元素中输入日期范围\nFillArea | div[data-e2e=ad_drawer_range_picker__ocRangePicker] | 2024-08-18～2024-09-12\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 MAIN_PAGE 中包含 ‘maat’ 就打印 111，否则打印 222",
        "output": "<thought>\n如果“MAIN_PAGE”变量中包含“maat”，则需要打印“111”，否则打印“222”。为了实现这个操作，我们可以使用Robot Framework的内置关键字`Should Contain`来检查“MAIN_PAGE”是否包含“maat”。然后，我们可以使用if...else条件来根据结果打印不同的文本。我们也需要确保在开始前“MAIN_PAGE”变量存在。\n</thought>\n\n<code_block>\n# 首先判断MAIN_PAGE变量是否存在\n${exist}  IsVarExisting | MAIN_PAGE\nIF  $exist\n    # 如果存在，则检查是否包含‘maat’\n    ${status}  Should Contain  ${MAIN_PAGE}  maat\n    IF  ${status}\n        # 如果包含‘maat’，则打印111\n        Log  111\n    ELSE\n        # 如果不包含‘maat’，则打印222\n        Log  222\n    END\nELSE\n    # 如果MAIN_PAGE变量不存在，则打印错误信息\n    Fail  Variable MAIN_PAGE does not exist.\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现 质量保障配置更新成功 文案，页面中不存在wps",
        "output": "<thought>\n为了实现当前场景，首先需要使用 WaitText 关键字等待页面中出现“质量保障配置更新成功”文案。接下来，使用 CheckNotHasText 关键字验证页面中不存在“wps”文本。\n</thought>\n\n<code_block>\n# 等待页面出现“质量保障配置更新成功”文案\nWaitText | 质量保障配置更新成功\n\n# 确保页面中不存在“wps”\nCheckNotHasText | wps\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左侧一级菜单 统计分析，然后点击 统计分析下的二级菜单 Dashboard",
        "output": "<thought>\n首先，需要点击左侧的一级菜单“统计分析”。在这种情况下，可以使用`ClickMenu`关键字，该关键字正好适用于这种按顺序点击菜单的情况。接着，需要点击“统计分析”下的二级菜单“Dashboard”，这个步骤同样可以使用`ClickMenu`关键字，因为它支持依次点击多个菜单项。\n</thought>\n\n<code_block>\n# 点击一级菜单统计分析，然后点击二级菜单Dashboard\nClickMenu | 统计分析 | Dashboard\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${elements}列表中的每一个的文本都包含今天，格式为yyyy/mm/dd",
        "output": "<thought>\n首先，我们需要获取当前的日期，并将其格式化为yyyy/mm/dd的格式。可以使用Robot Framework的内置关键字来获取当前日期并格式化。之后，我们需要遍历${elements}列表，对于列表中的每一个元素，使用关键字检查其文本是否包含格式化后的日期。\n</thought>\n\n<code_block>\n# 获取当前日期并格式化为yyyy/mm/dd\n${today}  Get Current Date  result_format=%Y/%m/%d\n\n# 遍历${elements}列表，校验每个元素的文本是否包含今天的日期\nFOR  ${element}  IN  @{elements}\n    ${text}  GetElemText  ${element}\n    Should Contain  ${text}  ${today}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击 app_channel 所在行中，“字典” 所在列中的文本：上传",
        "output": "<thought>\n首先，定位到“app_channel”所在的表格行，然后在该行中找到“字典”列对应的单元格，接着在其中点击“上传”文本。因此需用到`ClickTextOfCell`关键字。\n</thought>\n\n<code_block>\n# 点击app_channel所在行的字典列的上传\nClickTextOfCell | app_channel | 字典 | 上传\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“TOB登录” 的关键字，接受 user, password 参数，默认值分别为 ${USER}, ${PW} 作用是：\n1. 打开浏览器访问页面：https://console.volcengine.com/auth/login/\n2. 输入用户名、密码，然后点击 ‘立即登录’，并等待 url 中不在包含 login\n3. 然后访问页面 ${HOST}，等页面加载完成后，尝试点击 class包含arco-notification-close-btn的元素\n4. 最后，如果页面存在 ‘全局搜索支持API’ 就点击",
        "output": "<thought>\n为了实现自动化登录功能，需要按以下步骤实施：\n\n1. 使用 `OpenBrowser` 打开指定登录页面。\n2. 使用 `BatchSetFields` 输入用户名和密码。\n3. 使用 `Click` 点击“立即登录”按钮。\n4. 使用 `WaitURLNotContains` 确保 URL 中不再包含“login”。\n5. 使用 `OpenUrl` 访问指定页面。\n6. 使用 `WaitLoading` 等待页面加载完成。\n7. 使用 `ClickIfElemExists` 尝试关闭弹出的通知。\n8. 检查页面是否存在文本“全局搜索支持API”并点击。\n\n根据以上思路，编写相应的RF代码。\n</thought>\n\n<code_block>\n*** Keywords ***\nTOB登录\n    [Arguments]  ${user}=${USER}  ${password}=${PW}\n    # 打开浏览器并访问登录页面\n    OpenBrowser  https://console.volcengine.com/auth/login/\n    \n    # 输入用户名和密码\n    BatchSetFields  用户名=${user}  密码=${password}\n    \n    # 点击立即登录按钮\n    Click  立即登录\n    \n    # 等待URL中不再包含login\n    WaitURLNotContains  login\n    \n    # 访问指定页面\n    OpenUrl  ${HOST}\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 尝试点击关闭按钮的元素\n    ClickIfElemExists  [class*=arco-notification-close-btn]\n    \n    # 检查并点击全局搜索支持API\n    ${exist}  IsAnyTextExisting  全局搜索支持API\n    IF  ${exist}\n        Click  全局搜索支持API\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 “确定” 按钮应该处于禁用状态",
        "output": "<thought>\n解决问题思路：由于我们知道按钮的文本是\"确定\"，所以我们可以使用jquery选择器来定位这个按钮。RF框架内置了一个关键字“Element Should Be Disabled”，可以用来检查页面上的某个元素是否被禁用。\n</thought>\n\n<code_block>\n# 创建变量，存储确定按钮的jquery选择器\n${confirmButtonSelector}  Set Variable  button:contains(确定)\n\n# 使用内置关键字，检查确定按钮是否被禁用\nElement Should Be Disabled  ${confirmButtonSelector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：发送邮件，接受 ${emailAddress}, ${subject}, ${body} 参数，分别表示电子邮箱地址，主题和正文，关键字会输入邮箱地址、主题和正文，并点击发送",
        "output": "<thought>\n首先，我们需要分别给\"电子邮件地址\"，\"主题\"和\"正文\"字段设置为对应的参数值。我选择使用BatchSetFields关键字，这个关键字可以接收多个字段值进行设置，使代码更简洁。然后我们点击发送按钮来完成发送。这里我们使用Click关键字，因为\"发送\"可能是文本值。\n</thought>\n\n<code_block>\n发送邮件\n    [Arguments]  ${emailAddress}  ${subject}  ${body}\n    # 设置邮箱地址，邮件主题和正文\n    BatchSetFields | 邮箱地址=${emailAddress} | 主题=${subject} | 正文=${body}\n    # 点击发送按钮\n    Click | 发送\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个用例管理右边的更多icon",
        "output": "<thought>\n我们需要点击第一个包含“用例管理”文本的元素右边的“更多”图标。可以使用 `ClickIconToTheDirectionOf` 关键字，通过选择以“用例管理”为基准元素并指定方向为“right”来实现。\n</thought>\n\n<code_block>\n# 点击第一个用例管理右边的更多icon\nClickIconToTheDirectionOf | :contains(用例管理):eq(0) | right | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间,格式yyyy-mm-dd",
        "output": "<thought>\n我们需要获取当前时间并将其格式化为yyyy-mm-dd格式。Robot Framework的日期和时间处理库提供了一些关键字来帮助完成这个任务。其中，Get Current Date关键字可以用来获取当前日期，并可以通过Convert Date关键字来格式化日期。\n</thought>\n\n<code_block>\n# 获取当前日期并格式化为yyyy-mm-dd\n${current_date}  Get Current Date  result_format=%Y-%m-%d\nLog  ${current_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：新建第${i}组的事件属性，接受kwargs参数，主要逻辑是：\n1. 先判断第 i 个，class包含formContainer的元素ele是否存在，如果不存在就点击 '添加属性'，最多循环5次\n2. 如果ele已经存在，则对 kwargs 的每一个key和value 把元素 ele 中的字段key设置成对应的value",
        "output": "<thought>\n首先，我们需要判断第 i 个特定 class 的元素是否存在。如果不存在，需要点击\"添加属性\"按钮，最多尝试五次。然后，如果元素存在，我们对 kwargs 中的每个键值对，设置元素内相应字段的值。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建第${i}组的事件属性\n    [Arguments]  &{kwargs}\n    ${exist}   IsAnyElemExisting  [class*=formContainer]:eq(${i}-1)\n    FOR  ${counter}  IN RANGE  5\n        Exit For Loop If  ${exist}\n        Click  添加属性\n        ${exist} =  IsAnyElemExisting  [class*=formContainer]:eq(${i}-1)\n    END\n    IF  ${exist}\n        FOR  ${key}  ${value}  IN  &{kwargs}\n            SetField  ${key}  ${value}  base=[class*=formContainer]:eq(${i}-1)\n        END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击包含 公共仪表盘 并且class=arco-input-tag-tag-content的元素",
        "output": "<thought>\n需要使用ClickElem关键字来点击符合条件的元素。通过jquery选择器，选取class为arco-input-tag-tag-content且包含文本公共仪表盘的元素。\n</thought>\n\n<code_block>\n# 点击class为arco-input-tag-tag-content且包含文本公共仪表盘的元素\nClickElem | [class=arco-input-tag-tag-content]:contains(公共仪表盘)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将id 为scrollContainer的元素，滑动到最底部",
        "output": "<thought>\n解决此问题的思路是使用ScrollUpDown关键字将scrollContainer元素滚动到100%，以达到滚动到底部的效果。\n</thought>\n\n<code_block>\n# 使用FindElem关键字查找id为scrollContainer的元素\n${scroll_container}  FindElem  | [id=scrollContainer]\n\n# 使用ScrollUpDown关键字将scrollContainer元素滚动到最底部\nScrollUpDown  | ${scroll_container}  | 100%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置浏览器长宽分别为 1000，800",
        "output": "<thought>\n首先需要设置浏览器的高度和宽度，可以使用SetWindowSize关键字。\n</thought>\n\n<code_block>\n# 设置浏览器尺寸为 1000 x 800\nSetWindowSize | 1000 | 800\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 请选择项目 20s超时",
        "output": "<thought>\n要点击文本为“请选择项目”的元素，并设置超时时间为20秒，可以直接使用`Click`关键字，并通过`timeout`参数设置时间。 \n</thought>\n\n<code_block>\n# 点击 请选择项目，设置超时时间为20秒\nClick | 请选择项目 | timeout=20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的“去开票”小图标",
        "output": "<thought>\n首先需要点击弹窗中的“去开票”icon。根据需求，使用ClickIcon关键字，并将base设置为POPUP。\n</thought>\n\n<code_block>\n# 点击弹窗中的“去开票”icon\nClickIcon | 去开票 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 将class名为ovui-table__container ovui-table__container--sticky components-custom-table的页面区域保存为基准图，命名为推广管理列表数据概览，相似度为0.95",
        "output": "<thought>\n 对于这个问题，我们需要使用\"ImageDiff\"关键字，将class名为ovui-table__container ovui-table__container--sticky components-custom-table的页面区域保存为基准图，命名为推广管理列表数据概览，相似度为0.95。注意，我们需要使用jquery选择器来选择具有特定class的元素。\n </thought>\n \n <code_block>\n # 定义元素选择器\n ${elem} Set Variable .ovui-table__container.ovui-table__container--sticky.components-custom-table\n \n # 截取 ${elem} 的图片，命名为：推广管理列表数据概览，并和基准图对比，相似度为0.95\n ImageDiff | ${elem} | pic_name=推广管理列表数据概览 | sim=0.95\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘张三’，30秒超时，随后获取role为：combobox，且文案包含：域名，的元素，并点击",
        "output": "<thought>\n首先通过点击关键字Click来点击文本\"张三\"，并设置timeout超时时间为30秒。然后通过FindElem关键字来定位文本包含\"域名\"的role为combobox的元素，将获取到的元素保存在变量${elem}中。最后通过ClickElem关键字点击这个元素。\n</thought>\n\n<code_block>\n# 点击文本“张三”，并设置超时时间为30秒\nClick | 张三 | timeout=30\n\n# 获取role为：combobox，且文案包含：域名，的元素\n${elem}  FindElem | [role=combobox]:contains(域名)\n\n# 点击获取到的元素\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “关闭浏览器” 的关键字，接受 exclude 参数，作用是：先校验页面是否有错误，在exclude中的都不算错误，然后关闭浏览器",
        "output": "<thought>\n需要检查页面的错误信息，并排除exclude参数中指定的错误，然后关闭浏览器。可以使用`CheckErrExclude`来排除指定错误，然后用`CloseBrowser`关闭浏览器。\n</thought>\n\n<code_block>\n*** Keywords ***\n关闭浏览器\n    [Arguments]  ${exclude}\n    # 校验错误并排除exclude中的内容\n    CheckErrExclude  ${exclude}\n    # 关闭浏览器\n    CloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验屏幕上出现弹窗",
        "output": "<thought>\n要校验屏幕上出现弹窗，可以使用IsPopupExists关键字。这个关键字会返回一个布尔值表示弹窗是否存在。我们可以结合RF的Should Be True关键字来校验返回值为True。由于题目要求校验弹窗出现，不需要检查弹窗内容，所以不需要传递text参数。\n</thought>\n\n<code_block>\n# 校验屏幕上出现弹窗\n${status}  IsPopupExists\nShould Be True  ${status}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置第2个账务账期为: 2024-08, 获取当前页面URL, 校验其中包含2024",
        "output": "<thought>\n这个问题主要包括了三个步骤，分别是设置第2个账务账期为：2024-08，获取当前页面URL，以及校验URL包含\"2024\"。\n\n对于设置账务账期，我们可以使用SetField关键字，指定要修改的字段是第2个账务账期，输入的值为2024-08。\n\n接着，我们可以使用GetCurrentUrl关键字来获取当前页面的URL。\n\n最后，我们可以使用Should Contain关键字来检查URL是否包含\"2024\"。\n\n这是一种比较直接的解决方案，通过使用RF的内置关键字来做文本的输入和检查，以及URL的获取和检查。\n</thought>\n\n<code_block>\n# 设置第2个账务账期为: 2024-08\nSetField | 账务账期 | 2024-08 | idx=1 \n\n# 获取当前页面URL\n${url}  GetCurrentUrl\n\n# 校验URL中包含'2024'\nShould Contain  ${url}  2024\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算${elem}这个元素下面的后代元素的数量",
        "output": "<thought>\n为了计算${elem}元素下面的后代元素数量，我们可以通过查找${elem}内的所有子孙元素，然后使用GetElemCount关键字来获取数量。\n</thought>\n\n<code_block>\n# 获取元素${elem}的所有后代元素数量\n${descendants_count}  GetElemCount  ${elem} *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 查看 左侧存在 已下架",
        "output": "<thought>\n需要校验“查看”左侧是否存在“已下架”文本。可以使用CheckHasTextToTheDirectionOf关键字，基准元素是“查看”，方向是left，目标文本是“已下架”。\n</thought>\n\n<code_block>\n# 校验 查看 左侧存在 已下架\nCheckHasTextToTheDirectionOf | 查看 | left | 已下架\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选中表格第一行第一列",
        "output": "<thought>\n要选中表格的第一行第一列，我们要使用选择或点击类的关键字。根据给出的关键字说明，SelectTableRow 用于选择或选中表格行。由于只需选中第一行，且没有特别指定表格的名称，可以直接使用 SelectTableRow 关键字选择第一行。\n</thought>\n\n<code_block>\n# 选择表格中的第一行\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在弹窗中 文本：新建合同模板 上方的输入框中输入${temple_name}",
        "output": "<thought>\n需要在弹窗中找到文本“新建合同模板”上方的input/textarea元素，然后在该元素中输入${temple_name}。可以使用FindElemToTheDirectionOf找到该元素，再使用FillArea输入值。\n</thought>\n\n<code_block>\n# 查找弹窗中“新建合同模板”上方的input/textarea元素\n${elem}  FindElemToTheDirectionOf | 新建合同模板 | top | input,textarea | base=POPUP\n\n# 在查找到的元素中输入${temple_name}\nFillArea | ${elem} | ${temple_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 上传文件 https://tosv.byted.org/obj/giraffe-longtime-tos/2024_09_14_19_22_49_LFud_IMG_1845.JPG",
        "output": "<thought>\n 上传文件的关键字是 UploadFile，可以直接使用该关键字\n </thought>\n \n <code_block>\n # 上传文件\n UploadFile | https://tosv.byted.org/obj/giraffe-longtime-tos/2024_09_14_19_22_49_LFud_IMG_1845.JPG\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“阶段2”右边的红色按钮",
        "output": "<thought>\n为了点击“阶段2”右边的红色按钮，需要使用关键字`ClickElemToTheDirectionOf`。基准元素为文本“阶段2”，方向为右边，我们需要选择一个表示红色按钮的 jQuery 选择器。如果没有具体的选择器可以直接定位红色按钮，可能需要根据属性或者样式进行选择，例如通过`[style*='red']`或者类似的方式。如果`button`是红色按钮的标签，可以结合颜色属性进行选择。\n</thought>\n\n<code_block>\n# 点击阶段2右边红色按钮\nClickElemToTheDirectionOf | 阶段2 | right | button[style*='red']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class包含clear-wrapper 和 xxx  的最后一个元素",
        "output": "<thought>\n需要点击class包含\"clear-wrapper\"和\"xxx\"的最后一个元素。可以使用 `ClickElem`，并结合jQuery选择器来选择符合条件的元素。使用 `:eq(-1)` 表示最后一个元素。\n</thought>\n\n<code_block>\n# 点击class包含clear-wrapper和xxx的最后一个元素\nClickElem | [class*='clear-wrapper'][class*='xxx']:eq(-1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击列表第一行中的版本升级，点击无防护，勾选开启自动续费，点击左上角保存按钮",
        "output": "<thought>\n对于这个场景的描述，我需要执行以下几个动作：\n\n1. 点击列表第一行中的“版本升级”。\n2. 点击“无防护”。\n3. 勾选“开启自动续费”。\n4. 点击左上角的“保存”按钮。\n\n根据描述的操作，我可以使用以下关键字来实现：\n- 使用 `ClickTextOfRow` 来点击表格第一行中的“版本升级”。\n- 使用 `Click` 来点击“无防护”。\n- 使用 `CheckBoxOn` 来勾选“开启自动续费”。\n- 使用 `ClickTextToTheDirectionOf`，以屏幕中心为基准元素，点击左上角的“保存”。\n\n具体代码如下：\n</thought>\n\n<code_block>\n# 点击列表第一行中的版本升级\nClickTextOfRow | 1 | 版本升级\n\n# 点击“无防护”\nClick | 无防护\n\n# 勾选“开启自动续费”\nCheckBoxOn | 开启自动续费\n\n# 点击左上角的保存按钮\nClickTextToTheDirectionOf | SCREEN_CENTER | topLeft | 保存\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字遍历cookies里的每个cookie，获取cookie字典里的name和value组成字典",
        "output": "<thought>\n为了获取cookies信息并遍历每一个cookie，需要使用SeleniumLibrary的Get Cookies关键字。当as_dict参数为True时，该关键字已经返回字典格式的cookie集合。我们需要遍历此字典，提取每个cookie的name和value，最终构成一个新的字典。可以使用RF的FOR循环来实现这一遍历过程。\n</thought>\n\n<code_block>\n*** Keywords ***\n获取Cookie字典\n    # 获取cookies并以字典形式返回\n    ${cookies}  Get Cookies  as_dict=True\n    \n    # 初始化空字典用于存储name和value\n    &{cookie_dict}  Create Dictionary\n    \n    # 遍历cookie字典中的每一个cookie\n    FOR  ${cookie}  IN  @{cookies}\n        # 提取每个cookie的name和value\n        ${name}  Set Variable  ${cookie['name']}\n        ${value}  Set Variable  ${cookie['value']}\n        \n        # 将name和value加入结果字典\n        Set To Dictionary  ${cookie_dict}  ${name}  ${value}\n    END\n    \n    # 返回cookie字典\n    [Return]  ${cookie_dict}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中 Export CSV，校验 弹窗中 存在“Cancel”、\"OK\"",
        "output": "<thought>\n需要在弹窗中点击“Export CSV”按钮，然后校验弹窗中是否存在文本“Cancel”和“OK”。可以使用Click关键字来点击按钮，并使用CheckHasText关键字来校验文本。\n</thought>\n\n<code_block>\n# 点击弹窗中的 Export CSV\nClick | Export CSV | base=POPUP\n\n# 校验弹窗中存在 Cancel 和 OK\nCheckHasText | Cancel | OK | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第一行，报废单号列的内容",
        "output": "<thought>\n解决问题思路：\n1. 由于需要点击的是表格的第一行报废单号列的某个元素，因此我可以使用RF的关键字ClickElemOfCell（点击单元格中的元素），需要设定的参数有：行号设置为1（第一行），列名设定为\"报废单号\"，选择器为*（匹配任一元素）\n</thought>\n\n<code_block>\n# 点击表格第一行，报废单号列的任意元素\nClickElemOfCell | 1 | 报废单号 | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${product_name} 如果报错就重试",
        "output": "<thought>\n在这个场景中，首先需要尝试点击指定的文本 ${product_name}。如果点击过程中出现了错误或异常，我需要实现一个重试机制。这需要使用Robot Framework的内置IF语法，结合一些异常处理机制。可以使用\"Run Keyword and Ignore Error\"来忽略错误并返回状态，然后根据状态决定是否重试。\n</thought>\n\n<code_block>\n# 尝试点击产品名称 ${product_name}\n${result}  Run Keyword And Ignore Error  Click  ${product_name}\n\n# 如果上一次点击出错，重试点击\nIF  '${result}[0]' != 'PASS'\n    ${result}  Run Keyword And Ignore Error  Click  ${product_name}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置生命周期间隔”，接受count参数，主要作用是：先从count中过滤掉“天”和空白字符，然后向间隔字段中输入处理后的count",
        "output": "<thought>\n我们需要创建一个关键字“设置生命周期间隔”，接受一个参数count。首先，我们可以使用Python的字符串替换或正则表达式来去除“天”和空白字符。接着，使用`SetField`关键字将处理后的字符串输入到间隔字段中。\n</thought>\n\n<code_block>\n设置生命周期间隔\n    [Arguments]  ${count}\n    ${filtered_count}=  Evaluate  '${count}'.replace('天', '').strip()\n    SetField  间隔  ${filtered_count}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标放置在${elem}元素上，向弹窗中的表格第一行 输入：1、1、1、1，点击 3 次 弹窗中的 添加规则，点击svg class包含FilterEditInputUI__icon的元素",
        "output": "<thought>\n首先需要将鼠标移动到指定的${elem}元素上，然后利用FillRow关键字向弹窗中的表格第一行输入一系列的值：1、1、1、1。接下来，需要点击弹窗中的\"添加规则\"按钮3次，这可以通过Click关键字在循环中执行。最后，使用ClickElem关键字点击类包含\"FilterEditInputUI__icon\"的svg元素。\n</thought>\n\n<code_block>\n# 将鼠标移动到${elem}元素上\nMoToElem | ${elem}\n\n# 向弹窗中的表格第一行输入：1、1、1、1、1\nFillRow | 1 | 1 | 1 | 1 | 1 | base=POPUP\n\n# 点击3次弹窗中的\"添加规则\"\nFOR  ${index}  IN RANGE  3\n    Click | 添加规则 | base=POPUP\nEND\n\n# 点击svg class包含FilterEditInputUI__icon的元素\nClickElem | svg[class*=FilterEditInputUI__icon]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到核心用户，然后鼠标移动到 字段类型下方的 单行文本 ",
        "output": "<thought>\n要完成给定任务，我们需要将鼠标移动到文本“核心用户”上，然后根据提示使用MoveToTextToTheDirectionOf关键字，将鼠标移动到“字段类型”下方的“单行文本”位置。首先，我们可以通过MoTo关键字将鼠标移动到“核心用户”，因为它可能是一个文本。然后，我们使用MoveToTextToTheDirectionOf将鼠标移动到“字段类型”下方的“单行文本”。考虑到可能的选择器复用，我们将选择器变量化。\n</thought>\n\n<code_block>\n# 移动鼠标到“核心用户”文本\nMoTo | 核心用户\n\n# 移动鼠标到“字段类型”下方的“单行文本”\nMoveToTextToTheDirectionOf | 字段类型 | bottom | 单行文本\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本Next 或下一步的第二个span",
        "output": "<thought>\n根据题目要求，需要查找文本为\"Next\"或\"下一步\"的第二个span元素。这里可以使用FindByText关键字来实现。\n</thought>\n\n<code_block>\n# 查找文本为Next或下一步的第二个span\n${elem}  FindByText  |  Next  |  下一步  |  idx=1  |  tag=span\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 测试环境验证结果 设置为：通过，将 需要中断 设置为：否，将 工作流操作 设置为：仅创建，断言页面包含“主任务UI自动化测试区域”",
        "output": "<thought>\n要求批量设置多个字段值和验证页面包含特定文本。可以使用`BatchSetFields`关键字来设置字段。然后使用`CheckHasText`来验证页面包含指定文本。\n</thought>\n\n<code_block>\n# 批量设置字段值\nBatchSetFields  测试环境验证结果=通过  需要中断=否  工作流操作=仅创建\n\n# 断言页面包含指定文本\nCheckHasText  主任务UI自动化测试区域\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验发送到接口 /current/user 的最后一个 POST 请求中的 JSON 字段 response:header:content-type 为 application/json, response:body:email 包含 bytedance",
        "output": "<thought>\n首先，我们需要搜索接口请求，找到最后一个发送到 /current/user 的 POST 请求。然后，我们根据需要获取该请求的响应数据，特别是 JSON 字段 response:header:content-type 和 response:body:email。接着，需要校验 content-type 是否为 application/json 并验证 email 字段是否包含 bytedance。\n</thought>\n\n<code_block>\n# 搜索发送到 /current/user 的最后一个 POST 请求\n${resp_json}  Search Requests  /current/user  POST  last\n\n# 获取响应头中的 content-type\n${content_type}  GetValuesFromJson  ${resp_json}  response:header:content-type\n\n# 校验 content-type 为 application/json\nShould Be Equal As Strings  ${content_type}  application/json\n\n# 获取响应体中的 email\n${email}  GetValuesFromJson  ${resp_json}  response:body:email\n\n# 校验 email 包含 bytedance\nShould Contain  ${email}  bytedance\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将class为chart-box ecom-big8-chart-box保存为基准图\n ",
        "output": "<thought>\n 我们需要使用`ImageDiff`关键字来截取class为`chart-box ecom-big8-chart-box`的元素的图片，并保存为基准图。可以通过JQuery选择器来选择这个元素。\n </thought>\n \n <code_block>\n # 创建选择器变量\n ${selector}  Set Variable | [class='chart-box ecom-big8-chart-box']\n \n # 截取class为chart-box ecom-big8-chart-box的元素并保存为基准图\n ImageDiff | ${selector} | pic_name=基准图\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击名称下方字体",
        "output": "<thought>\n需要在“名称”下方点击“字体”文本。可以使用`ClickTextToTheDirectionOf`关键字，通过指定基准元素和方向来实现。\n</thought>\n\n<code_block>\n# 点击名称下方的字体\nClickTextToTheDirectionOf | 名称 | bottom | 字体\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取去年的1.1-去年的12.31 格式展示为2024.01.01 - 2024.09.29",
        "output": "<thought>\n我们需要获取去年的1月1日和12月31日的日期，并格式化为\"YYYY.MM.DD\"的格式，然后用一个字符串展示出来。可以使用Python代码来获取去年的年份和日期。\n</thought>\n\n<code_block>\n# 使用Evaluate来获取去年1月1日和12月31日的日期，并格式化\n${last_year}   Evaluate  str(datetime.datetime.now().year - 1)\n${start_date}   Evaluate  \"${last_year}.01.01\"\n${end_date}   Evaluate  \"${last_year}.12.31\"\n\n# 将格式化的日期组合成一个字符串\n${date_range} =  Evaluate  \"${start_date} - ${end_date}\"\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "单元格（emr_modify，状态）中的文本应该包含：开启",
        "output": "<thought>\n根据场景需求，我们需要检查特定单元格（emr_modify，状态）中是否包含文本“开启”。对于此任务，可以使用`CheckCellHas`关键字，其中指定行和列的名称，以及要检查的文本。\n</thought>\n\n<code_block>\n# 校验emr_modify行的状态列中包含开启\nCheckCellHas | emr_modify | 状态 | 开启\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取id为root的元素，然后和基准图对比",
        "output": "<thought>\n首先需要使用选择器选择id为root的元素，然后使用ImageDiff关键字截取该元素并与基准图进行对比。\n</thought>\n\n<code_block>\n# 查找id为root的元素\n${elem}  FindElem | [id=root]\n\n# 截取该元素并与基准图对比\nImageDiff | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择 ‘编辑’ 选项",
        "output": "<thought>\n选择文本为\"编辑\"的选项可以直接使用`SelectOption`关键字。该关键字可以直接选择所需的选项，无需额外参数。\n</thought>\n\n<code_block>\n# 选择编辑选项\nSelectOption | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击  创建合同，勾选 AAA新软件才买----002，校验 项目编号 EPSPV202005170002",
        "output": "<thought>\n1. 我们首先需要点击 \"创建合同\" 按钮，可以通过使用 Click 关键字实现。\n2. 接下来，勾选复选框 \"AAA新软件才买----002\"。\n3. 最后，校验页面上 \"项目编号\" 字段中包含文本 \"EPSPV202005170002\"，可以使用 CheckFieldContains 关键字实现。\n</thought>\n\n<code_block>\n# 点击创建合同按钮\nClick | 创建合同\n\n# 勾选AAA新软件才买----002\nCheckBoxOn | AAA新软件才买----002\n\n# 校验项目编号字段中包含EPSPV202005170002\nCheckFieldContains | 项目编号 | EPSPV202005170002\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为校验申诉不通过tab文案展示的关键字，作用是：点击页面空白处，校验页面中包含拉新任务",
        "output": "<thought>\n在这个问题中，我们需要实现一个名为“校验申诉不通过tab文案展示”的关键字。根据描述，我们的目标是首先点击页面的空白处，然后验证页面上是否包含“拉新任务”文本。为此，我们可以使用 `ClickWhiteArea` 来实现点击空白处的操作，之后使用 `CheckHasText` 关键字来验证页面是否包含指定文本。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验申诉不通过tab文案展示\n    # 点击页面空白处\n    ClickWhiteArea\n    \n    # 校验页面中是否包含“拉新任务”文本\n    CheckHasText  拉新任务\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为“权限移交给第${num}个用户”的关键字，逻辑为：\n# 1. 点击文本“请选择移交至”，再点击第num个option元素",
        "output": "<thought>\n为了解决问题，需要首先通过“Click”关键字点击“请选择移交至”文本元素。然后使用“SelectOption”关键字选择第num个option元素，num可以用字符串格式化将参数插入到关键字中。\n</thought>\n\n<code_block>\n*** Keywords ***\n权限移交给第${num}个用户\n    # 点击“请选择移交至”文本\n    Click  请选择移交至\n    \n    # 点击第num个option元素\n    SelectOption  OPTIONS_${num}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到文本包含APL的td，将文本值赋值到 apl",
        "output": "<thought>\n首先，我们可以使用FindByText关键字找到文本包含APL的td元素。然后，我们可以使用Get Text关键字获取该元素的文本值并将其赋值给变量apl。注意，这里我们使用的是Robot Framework的内置关键字Get Text，它可以获取页面元素的文本值。\n</thought>\n\n<code_block>\n# 找到文本包含APL的td元素\n${elem}  FindByText | APL | tag=td\n\n# 获取元素的文本值并赋值给变量apl\n${apl}=  Get Text  ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击svg class 包含MetaFloatDetail__icon 且该svg的class不包含arco-icon-edit",
        "output": "<thought>\n 需要使用ClickElem关键字，通过jquery选择器定位目标元素。选择器应选择class包含MetaFloatDetail__icon且不包含arco-icon-edit的svg元素。使用:not()过滤掉不需要的class。\n </thought>\n \n <code_block>\n # 点击目标svg元素\n ClickElem | svg[class*='MetaFloatDetail__icon']:not([class*='arco-icon-edit'])\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "1. 访问火山ECS云主机页面: ECS_URL 并页面加载完成\n2. 在筛选条件中输入: WebUIDemo, 然后回车\n3. 点击包含 WebUIDemo 的表格行中的：停止，选择停机方式为：强制停机，然后点击取消右边的停止按钮\n4. 最后校验页面包含：停止操作提交完成",
        "output": "<thought>\n1. 根据题目的描述，首先需要使用\"OpenUrl\"关键字来访问火山ECS云主机页面并等待其加载完成，使用\"WaitLoading\"关键字来实现页面加载的等待。\n2. 接下来，在筛选条件中输入\"WebUIDemo\"，然后回车。可以使用框架的\"SetField\"（用于设置页面字段）关键字来实现这部分操作，并设置 enter=True 。\n3. 紧接着需要点击包含\"WebUIDemo\"的表格行中的\"停止\"，选择停机方式为\"强制停机\"，然后点击\"取消\"右边的\"停止\"按钮。这部分可以使用\"ClickTextOfRow\"（点击表格行中的文本），\"SetField\"（设置页面字段）以及\"ClickTextToTheDirectionOf\"（点击基准元素给定方位的目标文本）等关键字来实现。\n4. 最后，需要校验页面包含\"停止操作提交完成\"，这一步可以使用\"CheckHasText\"关键字来实现。\n</thought>\n\n<code_block>\n# 访问火山ECS云主机页面并等待页面加载完成\nOpenUrl  |  ${ECS_URL}\nWaitLoading\n\n# 在筛选条件中输入\"WebUIDemo\"，然后回车\nSetField  |  筛选条件  |  WebUIDemo  |  enter=True \n\n# 点击包含\"WebUIDemo\"的表格行中的\"停止\"\nClickTextOfRow  |  WebUIDemo  |  停止\n\n# 选择停机方式为\"强制停机\"\nSetField  |  停机方式  |  强制停机\n\n# 点击\"取消\"右边的\"停止\"按钮\nClickTextToTheDirectionOf  |  取消  |  right  |  停止\n\n# 校验页面包含\"停止操作提交完成\"\nCheckHasText  |  停止操作提交完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 白屏检测",
        "output": "<thought>\n 对于白屏检测，应该使用CheckWhiteScreen关键字，因为它能够直接判断页面是否出现白屏状态，并在白屏时抛出异常。同时，考虑到可能会有其他异常提示，可以使用CheckErrMsg来确保页面没有其他错误信息。\n </thought>\n \n <code_block>\n # 检查页面是否存在白屏\n CheckWhiteScreen\n \n # 检查页面是否存在异常提示\n CheckErrMsg\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击退出按钮",
        "output": "<thought>\n首先，确定使用哪个关键字来完成按钮点击操作。在这种情况下，应选择`ClickElem`关键字，因为需要通过jQuery选择器指定特定的按钮元素。接下来，构建选择器来识别\"退出\"按钮。\n</thought>\n\n<code_block>\n# 点击包含“退出”的按钮\nClickElem | button:contains(退出)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 操作下方 修改",
        "output": "<thought>\n根据描述，需要点击“操作”下方的“修改”按钮。可以使用`ClickTextToTheDirectionOf`关键字，指定“操作”为基准元素，方向为`bottom`，目标文本为“修改”。\n</thought>\n\n<code_block>\n# 点击“操作”下方的“修改”\nClickTextToTheDirectionOf | 操作 | bottom | 修改\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在登录表单区域，用户名输入：wode_prm_boe8，密码输入：888888Aa，点击登录按钮",
        "output": "<thought>\n该场景需要依次在登录表单区域中输入用户名和密码，然后点击登录按钮。可以使用`BatchSetFields`关键字批量输入用户名和密码，再使用`Click`关键字点击登录按钮。\n</thought>\n\n<code_block>\n# 在登录表单区域下方输入用户名和密码\nBatchSetFields  用户名=wode_prm_boe8  密码=888888Aa\n\n# 点击登录按钮\nClick | 登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中 北京火山引擎科技有限公司，点击弹窗中确定，最后获取div class包含DataQualityTableDetail__aiLabel下的span里面的text",
        "output": "<thought>\n1. 使用 `Click` 关键字点击弹窗中的 \"北京火山引擎科技有限公司\"。\n2. 使用 `Click` 关键字点击弹窗中的 \"确定\"。\n3. 使用 `FindElem` 关键字定位包含 `class=DataQualityTableDetail__aiLabel` 的 div 下的 span 元素，并获取其文本内容。\n\n直接编码如下。\n</thought>\n\n<code_block>\n# 点击弹窗中的 北京火山引擎科技有限公司\nClick | 北京火山引擎科技有限公司 | base=POPUP\n\n# 点击弹窗中的 确定\nClick | 确定 | base=POPUP\n\n# 获取 div class 包含 DataQualityTableDetail__aiLabel 下的 span 里面的文本\n${elem}  FindElem | div[class*=DataQualityTableDetail__aiLabel] span\n${text}  Get Text  | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“进入创建规则分群页面” 的关键字，主要操作为：\n点击 ‘创建分群’ 按钮，然后点击 ‘规则创建’ 下方的 ‘立即创建’ 按钮",
        "output": "<thought>\n首先需要点击 ‘创建分群’ 按钮，可以用 `Click` 关键字。接下来需要点击 ‘规则创建’ 下方的 ‘立即创建’ 按钮，这可以用 `ClickTextToTheDirectionOf` 关键字来实现。因此，整个操作过程可以拆分为两步：先点击 ‘创建分群’，再点击 ‘规则创建’ 下方的 ‘立即创建’。\n</thought>\n\n<code_block>\n*** Keywords ***\n进入创建规则分群页面\n    # 点击‘创建分群’按钮\n    Click  创建分群\n    \n    # 点击‘规则创建’下方的‘立即创建’按钮\n    ClickTextToTheDirectionOf  规则创建  bottom  立即创建\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成当前时间戳毫秒转化成数字的变量",
        "output": "<thought>\n解决问题思路：首先，需要使用Python的time模块获取当前时间戳毫秒值，然后将此值转换为数字类型并赋值给变量x。这里可以使用Evaluate关键字执行Python代码来实现这个功能。\n</thought>\n\n<code_block>\n# 获取当前时间戳毫秒值并转换为数字类型\n${x}  Evaluate  int(time.time() * 1000)  time\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "待办下面输入框中输入 ${search_value}，并等待 ${search_value} 出现\n\n提示：可先找到此方位的元素，并使用 FillArea 输入",
        "output": "<thought>\n首先需要找到“待办”元素，然后找到其下方的input或textarea元素。在定位到相应的元素后，使用FillArea关键字输入${search_value}。之后，使用WaitText关键字等待${search_value}的出现。\n</thought>\n\n<code_block>\n# 查找 '待办' 元素下方的 input 或 textarea\n${textarea}  FindElemToTheDirectionOf | 待办 | bottom | input,textarea\n\n# 输入 ${search_value} 到找到的元素中\nFillArea | ${textarea} | ${search_value}\n\n# 等待页面出现 ${search_value}\nWaitText | ${search_value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘请粘贴飞书表格URL链接’，然后将 ‘https://voilnkpil8.feishu.cn/sheets/shtcnNl9EKMxGIkETZ9rN8b3eOc’ 粘贴到 input placeholder包含 “请粘贴” 的元素",
        "output": "<thought>\n首先，我们需要点击文本“请粘贴飞书表格URL链接”。可以使用`Click`关键字。在点击之后，需要将指定的URL粘贴到placeholder中包含“请粘贴”的输入框中。可以利用`Paste`关键字执行该操作。\n</thought>\n\n<code_block>\n# 点击文本“请粘贴飞书表格URL链接”\nClick | 请粘贴飞书表格URL链接\n\n# 将URL粘贴到具有placeholder“请粘贴”的输入框\nPaste | input[placeholder*='请粘贴'] | https://voilnkpil8.feishu.cn/sheets/shtcnNl9EKMxGIkETZ9rN8b3eOc\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对url中包含 `/api/v1/customer_data` 的 GET 请求进行mock，mock数据路径为 `data/mocks/customer.json`",
        "output": "<thought>\n为了对URL中包含`/api/v1/customer_data`的GET请求进行mock，我们可以使用提供的`Start Mock`关键字。这个关键字需要三个参数：请求路径、请求方法和mock数据路径。在此场景中，请求路径为`/api/v1/customer_data`，请求方法为`GET`，mock数据路径为`data/mocks/customer.json`。\n</thought>\n\n<code_block>\n# Mock /api/v1/customer_data 的 GET 请求，使用 data/mocks/customer.json 中的 mock 数据\nStart Mock  /api/v1/customer_data  GET  mock_data_path=data/mocks/customer.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击普通模式左侧的空白处",
        "output": "<thought>\n根据场景描述，我们需要实现点击“普通模式”左侧的空白处的操作。根据提供的关键字，\"点击空白处\"直接使用 ClickWhiteArea 可以实现此功能。\n</thought>\n\n<code_block>\n# 点击普通模式左侧的空白处\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间秒维度时间戳，校验文案 UI自动化${timestamp} 是否存在",
        "output": "<thought>\n要获取当前时间的秒级时间戳，可以使用RF的`Get Current Date`关键字或Python代码执行当前时间的获取。然后，我们需要构造要校验的文本`UI自动化${timestamp}`，并使用`IsAnyTextExisting`关键字来检查页面上是否存在该文案。\n</thought>\n\n<code_block>\n# 使用Python获取当前时间的秒级时间戳\n${timestamp}=  Evaluate  int(time.time())  time\n\n# 构造要校验的文案\n${ui_text}  Set Variable  UI自动化${timestamp}\n\n# 判断页面上是否存在该文案\n${exist}  IsAnyTextExisting  ${ui_text}\n\n# 如果存在，记录日志确认\nIF  ${exist}\n    Log  文案UI自动化${timestamp}存在\nELSE\n    Log  文案UI自动化${timestamp}不存在\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送 ALT + 下方向键",
        "output": "<thought>\n解决问题思路非常简单，直接使用已有的关键字`Press Keys`发送按键组合即可。\n</thought>\n\n<code_block>\n# 发送 ALT + 下方向键\nPress Keys | None | ALT+ARROW_DOWN\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量 ${show_name}  ${desc} 的值分别为：${name}展示名  ${name}描述",
        "output": "<thought>\n需要使用Set Variable关键字来创建和设置两个变量。分别将展示名和描述的值设置给${show_name}和${desc}。\n</thought>\n\n<code_block>\n# 设置变量 ${show_name} 的值为 ${name}展示名\n${show_name}  Set Variable  ${name}展示名\n\n# 设置变量 ${desc} 的值为 ${name}描述\n${desc}  Set Variable  ${name}描述\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "下拉让class为qc-report-custom-column-table的元素完全可见，检查页面要包含”爆款卡通风“”精致卡通风“”玄幻言情风“ 等全部文案",
        "output": "<thought>\n首先需要使用MoveIntoView关键字将class为qc-report-custom-column-table的元素移动到视野内。接着使用CheckHasText关键字检查页面包含所有指定的文案。\n</thought>\n\n<code_block>\n# 将class为qc-report-custom-column-table的元素移动到视野内\nMoveIntoView | [class=qc-report-custom-column-table]\n\n# 检查页面包含指定的文案\nCheckHasText | 爆款卡通风 | 精致卡通风 | 玄幻言情风\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击创建分群，点击按天，鼠标移动到${name}_title，点击元素class=\"arco-icon arco-icon-close\"，点击弹窗中的确定，点击空白区域",
        "output": "<thought>\n根据任务描述，需要依次执行以下操作：\n1. 点击“创建分群”按钮。\n2. 点击“按天”按钮。\n3. 移动鼠标到变量`${name}_title`表示的元素上。\n4. 点击一个特定class的关闭图标。\n5. 点击弹窗中的“确定”。\n6. 点击页面空白区域。\n\n为实现上述步骤：\n- 使用`Click`关键字点击“创建分群”和“按天”。\n- 使用`MoToElem`关键字移动鼠标到`${name}_title`元素上。\n- 使用`ClickElem`关键字点击关闭图标。\n- 使用`Click`关键字在弹窗中点击“确定”。\n- 使用`ClickWhiteArea`关键字点击空白区域。\n</thought>\n\n<code_block>\n# 点击创建分群按钮\nClick | 创建分群\n\n# 点击按天按钮\nClick | 按天\n\n# 鼠标移动到变量 ${name}_title 表示的元素上\nMoToElem | ${name}_title\n\n# 点击class为\"arco-icon arco-icon-close\"的元素\nClickElem | [class=\"arco-icon arco-icon-close\"]\n\n# 点击弹窗中的确定\nClick | 确定 | base=POPUP\n\n# 点击页面空白区域\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一段自动代码，具体的操作逻辑如下：\n1、等待页面出现“全部功能”，然后依次点击“全部功能”，“网络资产”\n2、等待页面出现“AP”，然后点击它\n3、在页面上PlaceHolde中包含“搜索AP名称”的input/textarea中输入“AP名称”，并敲回车键\n4、验证表格中存在6行数据，并判断每一个第一列的值都包含“AP名称”",
        "output": "<thought>\n1. 等待页面出现“全部功能”。\n2. 使用`ClickTextOneByOne`点击“全部功能”和“网络资产”。\n3. 等待页面出现“AP”并点击。\n4. 使用`SetField`在输入框中输入“AP名称”并敲回车。\n5. 使用`WaitRowCount`检查表格行数为6。\n6. 使用循环和`GetCellValue`确认每行的第一列包含“AP名称”。\n</thought>\n\n<code_block>\n# 等待页面出现“全部功能”\nWaitText | 全部功能\n\n# 依次点击“全部功能”，“网络资产”\nClickTextOneByOne | 全部功能 | 网络资产\n\n# 等待页面出现“AP”\nWaitText | AP\n\n# 点击“AP”\nClick | AP\n\n# 在输入框中输入“AP名称”并敲回车\nSetField | 搜索AP名称 | AP名称 | enter=True\n\n# 验证表格中有6行数据\nWaitRowCount | 6\n\n# 判断每一行的第一列包含“AP名称”\nFOR | ${i} | IN RANGE | 1 | 7\n   ${val} = GetCellValue | ${i} | 1\n   Should Contain | ${val} | AP名称\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将鼠标移动至 蜡笔小x 右下方的第一张图片上",
        "output": "<thought>\n我们需要将鼠标移动到蜡笔小x右下方的第一张图片上。为此，我们将使用`MoveToElemToTheDirectionOf`关键字。首先，我们需要使用`FindElemToTheDirectionOf`查找到蜡笔小x右下方的图片，因为它能够返回目标元素供后续使用。然后使用`MoToElem`将鼠标移动到找到的图片元素上。\n</thought>\n\n<code_block>\n# 查找蜡笔小x右下方的第一张图片\n${img_elem}  FindElemToTheDirectionOf | 蜡笔小x | bottomRight | img\n\n# 将鼠标移动到找到的图片元素上\nMoToElem | ${img_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在表格中随机选取一行 点击其中的 查看详情",
        "output": "<thought>\n解决问题思路：首先需要获取表格中的总行数，然后随机生成一个在总行数范围内的行号，最后在该行中点击“查看详情”。为此，我们使用GetRowCount关键字获取行数，ClickTextOfRow来点击目标行中的“查看详情”。\n</thought>\n\n<code_block>\n# 获取表格的总行数\n${row_count}  GetRowCount\n\n# 生成一个随机行号\n${random_row}  Evaluate  random.randint(1, ${row_count})  random\n\n# 在随机选取的行中点击“查看详情”\nClickTextOfRow | ${random_row} | 查看详情\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "光标点击弹窗空白处",
        "output": "<thought>\n在这个场景中，我们需要在特定的弹窗中点击空白区域。根据给定的关键字，我们可以使用ClickWhiteArea来实现点击空白处的操作。由于需要在弹窗中进行操作，我们需要确保操作的上下文是在弹窗之内。因此，利用ClickWhiteArea即可完成任务。\n</thought>\n\n<code_block>\n# 在弹窗中点击空白区域\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“保存分群” 的关键字，主要操作为：点击 ‘保存’，并等待 ‘保存’ 按钮从页面消失",
        "output": "<thought>\n“保存分群” 关键词需要执行以下步骤：\n1. 点击页面中的“保存”按钮。\n2. 等待“保存”按钮从页面中消失。\n\n应该使用关键字 `Click` 和 `WaitTextDisappear` 来实现这两个步骤。\n</thought>\n\n<code_block>\n*** Keywords ***\n保存分群\n    # 点击“保存”按钮\n    Click  保存\n    \n    # 等待“保存”按钮从页面中消失\n    WaitTextDisappear  保存\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将开播日期筛选框设置为：2024-09-08 ~ 2024-09-09",
        "output": "<thought>\n我们需要将开播日期筛选框设置为“2024-09-08 ~ 2024-09-09”。首先，确定如何选择开播日期筛选框，然后依次输入起始和结束日期。假设“开播日期”是页面字段的名称，可以使用`SetField`关键字来设置日期范围。需要注意日期格式和正确的字段选择。\n</thought>\n\n<code_block>\n# 设置开播日期筛选框为：2024-09-08 ~ 2024-09-09\nSetField | 开播日期 | 2024-09-08 | 2024-09-09\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选中上传这个选项，点击确定",
        "output": "<thought>\n对于这个场景，我们需要首先选择特定的选项并确认选择。可以通过`SelectOption`关键字来选择上传这个选项。然后使用`Click`关键字确认选择。需要确保选择和确认的步骤都正确执行。\n</thought>\n\n<code_block>\n# 选择上传这个选项\nSelectOption | 上传\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为:\"邮箱登录\"的关键字,接受email,password,url参数,默认值分别为变量EMAIL,PASSWORD,LOGIN_URL，作用是 打开浏览器,访问url,等页面加载完成后,输入邮箱,密码,然后勾选'我已阅读',最后点击登录",
        "output": "<thought>\n首先，我们需要使用`OpenBrowser`关键字打开浏览器并访问给定的URL。然后，使用`WaitLoading`关键字等待页面加载完成。接下来，使用`SetField`关键字输入邮箱和密码。输入完成后，使用`CheckBoxOn`关键字勾选'我已阅读'复选框，最后使用`Click`关键字点击登录按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n邮箱登录\n    [Arguments]  ${email}=${EMAIL}  ${password}=${PASSWORD}  ${url}=${LOGIN_URL}\n    \n    # 打开浏览器并访问URL\n    OpenBrowser  ${url}\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 输入邮箱\n    SetField  邮箱  ${email}\n    \n    # 输入密码\n    SetField  密码  ${password}\n    \n    # 勾选'我已阅读'复选框\n    CheckBoxOn  我已阅读\n    \n    # 点击登录按钮\n    Click  登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到 REQ 开头的文本，并将文本值记录为变量req",
        "output": "<thought>\n我们可以先用FindByText关键字查找页面上所有文本包含\"REQ\"的元素，FindByText会返回第一个满足条件的元素。然后我们再用GetElemText关键字获取这个元素的文本。最后，我们将这个文本赋值给变量req。\n</thought>\n\n<code_block>\n# 查找文本包含 REQ 的元素\n${elem}  FindByText  |  REQ\n\n# 获取该元素的文本\n${req}  GetElemText  |  ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取id=789的元素图片，校验图片中包含：张三",
        "output": "<thought>\n首先需要截取指定id=789的元素图片，然后从截取的图片中获取文本，并校验文本中包含“张三”。\n</thought>\n\n<code_block>\n# 截取id=789的元素图片\nElemScreenshot| [id=789]\n\n# 获取截取的元素图片中的文本\n${txt}  GetElemScreenshotText | [id=789]\n\n# 校验图片中包含：张三\nShould Contain  ${txt}  张三\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击语音工作台，获取弹窗中 文本：不使用 OCR 比对原因 的个数",
        "output": "<thought>\n首先，需要点击“语音工作台”按钮，然后查找弹出窗口中包含文本“不使用 OCR 比对原因”的元素，最后获取这些元素的数量。可以使用Click关键字来点击语音工作台，然后使用FindByText关键字在弹窗中查找文本为“不使用 OCR 比对原因”的元素，最后使用GetElemCount关键字获取这些元素的数量。\n</thought>\n\n<code_block>\n# 点击语音工作台\nClick | 语音工作台\n\n# 查找弹窗中包含文本“不使用 OCR 比对原因”的元素\n${elem}  FindByText | 不使用 OCR 比对原因 | base=POPUP\n\n# 获取文本“不使用 OCR 比对原因”的元素个数\n${count}  GetElemCount | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击名为 用户 的搜索框，并输入 权限账号1 后选择权限账号1",
        "output": "<thought>\n首先需要找到名为“用户”的搜索框，然后在光标激活后输入“权限账号1”，最后在输入框中选择“权限账号1”选项。可以使用以下关键字来实现：\n\n1. `Click` - 点击名为“用户”的搜索框。\n2. `SendText` - 在搜索框中输入“权限账号1”。\n3. `SelectOption` - 选择“权限账号1”选项。\n</thought>\n\n<code_block>\n# 点击名为“用户”的搜索框\nClick | 用户\n\n# 在搜索框中输入“权限账号1”\nSendText | 权限账号1\n\n# 选择权限账号1选项\nSelectOption | 权限账号1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向id为InstanceNo的页面区域输入多个值：实例ID、i-yddy8pgjk0xjd1tta04d，然后将取值方式的值 选择为 常量 ",
        "output": "<thought>\n为了完成这个任务，我们需要使用 `FillArea` 关键字将多个值填入到id为InstanceNo的页面区域。此外，使用 `SelectOptionForField` 关键字来选择取值方式为常量。在jquery选择器中，通过`[id=...]`来选择元素。\n</thought>\n\n<code_block>\n# 向id为InstanceNo的区域输入多个值 \"实例ID\" 和 \"i-yddy8pgjk0xjd1tta04d\"\nFillArea | [id=InstanceNo] | 实例ID | i-yddy8pgjk0xjd1tta04d\n\n# 将取值方式选择为常量\nSelectOptionForField | 取值方式 | 常量\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字登录用户，主要完成：鼠标移动到class包含wrapper的元素上，然后输入用户名zhangli_mail，输入密码123456，点击“登录”",
        "output": "<thought>\n这个问题非常直接，我们知道要实现什么，并且RF提供了所有必要的关键字。首先，我们需要使用'MoToElem'关键词将鼠标移动到指定的元素上。然后，我们将使用'SetField'关键字在用户名和密码字段中输入值。最后，我们将使用'Click'关键字点击“登录”按钮。我们将所有这些步骤组合起来创建一个新的关键字“登录用户”。\n</thought>\n\n<code_block>\n*** Keywords ***\n登录用户\n    # 鼠标移动到class包含wrapper的元素上\n    MoToElem  | [class*=wrapper]\n    # 输入用户名zhangli_mail\n    SetField | 用户名 | zhangli_mail\n    # 输入密码123456\n    SetField | 密码 | 123456\n    # 点击登录\n    Click | 登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘我负责的’左侧勾选框",
        "output": "<thought>\n我们需要在“我负责的”左侧点击一个[type=checkbox]的复选框，因此应使用ClickElemToTheDirectionOf关键字，并指定方向为left。\n</thought>\n\n<code_block>\n# 点击'我负责的'左侧的[type=checkbox]\nClickElemToTheDirectionOf | 我负责的 | left | [type=checkbox]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“校验主播基础数据跌0\" 的关键字，接受key 和 num 参数，num默认值为0，关键字的作用是:\n# 找到页面上名为key的字段的值 val，校验val大于 num",
        "output": "<thought>\n要实现\"校验主播基础数据跌0\"关键字，需要获取页面上名为key的字段的值val，然后校验val是否大于num。首先，应该使用GetFieldVal来获取字段的值。然后，使用Should Be True关键字来验证val是否大于num。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验主播基础数据跌0\n    [Arguments]  ${key}  ${num}=0\n    # 获取字段${key}的值\n    ${val}  GetFieldVal  ${key}\n    # 将获取的值转换为整数进行比较\n    ${val} =  Evaluate  int(${val})\n    # 校验${val}大于${num}\n    Should Be True  ${val} > ${num}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面中不包含跳过按钮",
        "output": "<thought>\n要校验页面中不包含\"跳过\"按钮，可以使用CheckNotHasText关键字来检查页面文本中不包含\"跳过\"字样。由于题目要求的是校验按钮，更精确的做法是使用CheckNotHasElem关键字结合jquery选择器来检查页面中不存在包含\"跳过\"文本的按钮元素。这里选择后者更准确。\n\njquery选择器可以写成：button:contains('跳过')，表示查找所有包含\"跳过\"文本的button元素。\n</thought>\n\n<code_block>\n# 校验页面中不存在包含\"跳过\"文本的按钮\nCheckNotHasElem | button:contains('跳过')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "${name_id} 可能含有中文冒号字符，怎么处理一下，让它不再包含这个字符",
        "output": "<thought>\n对于RF框架中的变量操作，可以利用Evaluate关键字执行Python代码。假设变量`${name_id}`为字符串，可以使用Python的字符串方法replace替换掉中文冒号字符。如果替换成功，变量将不再包含该字符。\n</thought>\n\n<code_block>\n# 使用Evaluate执行Python代码替换掉中文冒号字符\n${name_id}  Evaluate  ${name_id}.replace('：', '') \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量name等于A, 创建变量 args 等于 name  =  hlt",
        "output": "<thought>\n首先，我们需要创建一个变量 `name` 并设置其值为 `A`。接着，我们需要创建一个列表变量 `args`，其中包含一个元素，格式为 name、=、hlt。通过使用Robot Framework的`Set Variable`和`Create List`关键字，我们可以实现这个需求。\n</thought>\n\n<code_block>\n# 设置变量name为A\n${name}  Set Variable  A\n\n# 创建列表args，包含元素 name、=、hlt\n@{args}  Create List  name | = | hlt\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第1个聊天记录按钮",
        "output": "<thought>\n 需要点击第一个聊天记录按钮。可以使用`Click`关键字，`idx=0`表示第一个。假设按钮文本为\"聊天记录\"。\n </thought>\n \n <code_block>\n # 点击第1个聊天记录按钮\n Click | 聊天记录 | idx=0\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 晓明 所在表格行中的 class*=edit 的svg",
        "output": "<thought>\n对于给定的任务，我们需要在“晓明”所在的表格行中找到一个元素，这个元素是一个class属性包含\"edit\"的svg图标。关键字ClickElemOfRow可以用来根据表格行和元素选择器来点击元素。我们将使用selector来定位class属性包含\"edit\"的svg。\n</thought>\n\n<code_block>\n# 点击 晓明 所在表格行中的 class*=edit 的svg\nClickElemOfRow | 晓明 | svg[class*='edit']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置镜像为：公共镜像、CentOS、7.8、ON",
        "output": "<thought>\n首先，我们需要根据提供的关键字，通过SetField关键字来完成镜像的设置。我们可以一次向镜像字段关联的页面控件区域中设置多个值，分别是“公共镜像”、“CentOS”、“7.8”和“ON”。\n</thought>\n\n<code_block>\n# 设置镜像为：公共镜像、CentOS、7.8、ON\nSetField | 镜像 | 公共镜像 | CentOS | 7.8 | ON\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面空白处让弹窗消失",
        "output": "<thought>\n为了让弹窗消失，我们可以通过点击页面的空白处来实现。在这个场景中，我们使用\"ClickWhiteArea\"关键字来点击空白区域。\n</thought>\n\n<code_block>\n# 点击页面空白处\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开「IPv6 加速」右侧的开关，其实就是设置「IPv6 加速」字段的值为开",
        "output": "<thought>\n为了完成这个任务，我首先会定位到「IPv6 加速」这个字段，然后填入值“开”。虽然它是一个开关，但在自动化测试中，通常我们通过设置值为“开”或“关”来模拟用户的点击操作。为此，我会使用SetField关键字，因为它很适合这种需要填入特定值的任务。\n</thought>\n\n<code_block>\n# 定位到「IPv6 加速」字段并将其值设为“开”\nSetField | IPv6 加速 | 开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送如下请求, 请求头 Header1: value1\ncurl 'https://infinite-boe.bytedance.net/infinite/api/giraffe/v1/file/tree?psm=n6m2en47dmrd'",
        "output": "<thought>\n为了完成这个任务，需要发送一个GET请求到指定的URL。根据提供的信息，请求头中需要包含\"Header1: value1\"。我们将使用UiSendRequest关键字来发送请求，并传递必要的URL和请求头信息。\n</thought>\n\n<code_block>\n# 使用UiSendRequest发送GET请求\n${resp_json}  UiSendRequest | GET | https://xxx.yyy.zzz.com/infinite/api/giraffe/v1/file/tree?psm=n6m2en47dmrd | ${None} | {\"Header1\": \"value1\"}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断表格的第一行 包含 ${name}\n判断表格的第二行 包含 ${name}",
        "output": "<thought>\n需要判断表格的第一行和第二行是否包含变量`${name}`。可以分别使用`CheckRowHas`关键字来验证第一行和第二行是否包含给定的文本。\n</thought>\n\n<code_block>\n# 检查表格的第一行包含 ${name}\nCheckRowHas | 1 | ${name}\n\n# 检查表格的第二行包含 ${name}\nCheckRowHas | 2 | ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新窗口",
        "output": "<thought>\n为了切换到新窗口，我们可以使用提供的关键字 `ToNewWindow` 来实现。这个关键字将自动切换到当前浏览器中的新打开的窗口。\n</thought>\n\n<code_block>\n# 切换到新窗口\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在弹窗中 搜索模板名称 中输入${temple_name}，选择第一个选项",
        "output": "<thought>\n我们需要在弹窗中定位并填入模板名称，然后选择第一个选项。可以用SetField在弹窗中搜索模板名称，接着通过SelectOption选择第一个选项。\n</thought>\n\n<code_block>\n# 在弹窗中搜索模板名称并输入${temple_name}\nSetField | 搜索模板名称 | ${temple_name} | base=POPUP\n\n# 选择第一个选项\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面截图包含文本：暂无告警",
        "output": "<thought>\n为了校验页面截图包含文本“暂无告警”，可以使用`GetPageScreenshotText`获取页面截图中的文本，然后使用`Should Contain`关键字来校验截图文本中包含“暂无告警”。\n</thought>\n\n<code_block>\n# 获取页面截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验页面截图中包含文本：暂无告警\nShould Contain  ${txt}  暂无告警\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "给 placeholder=请输入想要问 AI 的问题 ，输入 mac上不了网，怎么办{当前时间戳}",
        "output": "<thought>\n首先，需要在页面中找到占位符为\"请输入想要问 AI 的问题\"的输入框，然后在其中输入文本“mac上不了网，怎么办”并附加上当前的时间戳。这里可以使用 SetField 关键字，如果没有字段名称，可以使用 FillArea 结合合适的 jQuery selector 来实现输入动作。并且因为需要获取当前的时间戳，可以使用 Get Current Date 来获取时间，并结合字符串构建最终的输入文本。\n</thought>\n\n<code_block>\n# 获取当前时间戳\n${current_time}  Get Current Date  result_format=timestamp\n\n# 在placeholder=请输入想要问 AI 的问题的输入框中输入具体问题和时间戳\nFillArea  [placeholder=\"请输入想要问 AI 的问题\"]  mac上不了网，怎么办${current_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击告警根因即时分析左下方的了解详情",
        "output": "<thought>\n在这个场景中，我们需要点击\"告警根因即时分析\"左下方的\"了解详情\"。根据关键词，我们可以使用`ClickTextToTheDirectionOf`来实现这一点。这个关键词可以帮助我们从基准文本元素的特定方向选择并点击目标文本。因此，我们的基准元素是\"告警根因即时分析\"，目标文本是\"了解详情\"，方向是\"bottomLeft\"。\n</thought>\n\n<code_block>\n# 点击告警根因即时分析左下方的了解详情\nClickTextToTheDirectionOf | 告警根因即时分析 | bottomLeft | 了解详情\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 @{config}，其值为：事件属性, 国家, = ,中国",
        "output": "<thought>\n考虑到这个任务需要创建一个列表变量，RobotFramework内置了一个诸如Create List的关键字，可以用于创建列表变量。在这种情况下，该关键字是首选。\n</thought>\n\n<code_block>\n# 创建列表变量 @{config}\n@{config}  Create List  事件属性  国家  =  中国\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在\"删除\"按钮，那么点击它",
        "output": "<thought>\n首先需要判断\"删除\"按钮是否存在，然后利用 RF 的 IF/ELSE 语句，如果\"删除\"按钮存在，那么点击它。\n</thought>\n\n<code_block>\n# 判断\"删除\"按钮是否存在\n${exist}  IsAnyTextExisting | 删除 \n\n# 如果存在\"删除\"按钮，那么点击它\nIF  $exist\n    Click  删除\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 name包含abc, 且class不包含666, 文本为：确定的元素",
        "output": "<thought>\n在这个场景中，我们需要查找一个元素，该元素的名称属性包含“abc”，且其类名不包含“666”，文本内容为“确定”。通过RF中的FindElem关键字，我们可以构建一个jQuery选择器来匹配这些条件。选择器应使用属性选择器和:not伪类来实现。\n</thought>\n\n<code_block>\n# 定义选择器，查找符合条件的元素\n${elem}  FindElem | [name*=abc]:not([class*=666]):contains(确定)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击最后一个登录",
        "output": "<thought>\n由于题目要求我们点击最后一个登录，这里可以使用Click关键字，设置txt为\"登录\"，并将idx设置为-1（表示最后一个）。\n</thought>\n\n<code_block>\n# 点击最后一个登录\nClick | 登录 | idx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${text}内存在${os_x_real_ip}，获取昨天开始时间和结束时间，不要秒，校验 开始日期 包含 2022-1-1",
        "output": "<thought>\n首先，我们需要校验页面上的变量${text}中是否包含${os_x_real_ip}。可以使用\"Should Contain\"关键字来完成这一任务。\n接下来，获取昨天的开始和结束时间，并格式化到只保留到分钟。可以使用RF内置的时间处理关键字来实现，例如使用\"Get Current Date\"获取当前日期并减去一天。\n最后，校验页面的\"开始日期\"字段中包含日期\"2022-1-1\"，可以使用\"CheckFieldContains\"关键字。\n</thought>\n\n<code_block>\n# 校验${text}包含${os_x_real_ip}\nShould Contain  ${text}  ${os_x_real_ip}\n\n# 获取昨天的开始和结束时间，不要秒\n${yesterday}  Get Current Date  result_format=%Y-%m-%d %H:%M  increment=-1d\n${start_time}  Set Variable  ${yesterday} 00:00\n${end_time}  Set Variable  ${yesterday} 23:59\n\n# 校验 \"开始日期\" 字段包含 \"2022-1-1\"\nCheckFieldContains  开始日期  2022-1-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发往 api/v1/org/demo_apps 接口的最后 3 个 get 请求，从响应json中提取 app_name 字段，并校验其中包含 ‘教育Demo’",
        "output": "<thought>\n在这个场景中，要实现两个主要任务：首先是使用Search Requests关键字找到符合条件的HTTP请求，其次是从请求响应中提取所需字段，并进行校验。为了完成这个任务，我将依次使用以下关键字：\n\n1. 使用`Search Requests`关键字获取发往`api/v1/org/demo_apps`接口的最后3个GET请求。\n2. 使用`GetValuesFromJson`关键字从响应JSON中提取`app_name`字段。\n3. 使用内置校验关键字`Should Contain`来校验提取出的字段包含`教育Demo`。\n</thought>\n\n<code_block>\n# 搜索发往 api/v1/org/demo_apps 接口的最后3个 GET 请求\n${resp_json}  Search Requests  api/v1/org/demo_apps  GET  last3\n\n# 从获取的响应中提取 app_name 字段的值\n${app_name}  GetValuesFromJson  ${resp_json}  app_name\n\n# 校验提取的 app_name 字段是否包含 \"教育Demo\"\nShould Contain  ${app_name}  教育Demo\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 供应商保理产品 后面的 详情 按钮，向精准匹配下方文本框输入 test",
        "output": "<thought>\n首先需要找到 供应商保理产品 文本右侧的 详情 按钮，然后点击它。接下来，查找 精准匹配 文本下方的 input/textarea 输入框，并在其中输入 test。\n可以使用 ClickTextToTheDirectionOf 来点击 供应商保理产品 右侧的 详情，使用 FindElemToTheDirectionOf 获取 精准匹配 下方的 input/textarea 元素，再使用 FillArea 进行输入。\n</thought>\n\n<code_block>\n# 点击供应商保理产品右侧的详情按钮\nClickTextToTheDirectionOf | 供应商保理产品 | right | 详情\n\n# 查找精准匹配下方的input/textarea元素\n${input_elem}   FindElemToTheDirectionOf | 精准匹配 | bottom | input,textarea\n\n# 输入test到查找到的元素中\nFillArea | ${input_elem} | test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 ‘上传’ 的元素，并把它移动到视野内",
        "output": "<thought>\n首先我们需要定位到文本为 '上传' 的元素，这可以通过使用FindByText关键字来实现。然后我们需要把该元素移动到当前视野内，我们可以使用MoveIntoView关键字来完成这个任务。\n</thought>\n\n<code_block>\n# 查找文本为 '上传' 的元素\n${upload_elem}  FindByText | 上传\n\n# 把元素移动到视野内\nMoveIntoView | ${upload_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含icon-edit的svg",
        "output": "<thought>\n  根据题目要求，我们需要点击class包含icon-edit的svg元素，所以可以使用ClickElem关键字，并使用[class*='icon-edit']作为选择器。\n</thought>\n\n<code_block>\n# 点击class包含icon-edit的svg元素\nClickElem | svg[class*='icon-edit']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“新建企业部门”的关键字，接受参数 kwargs，kwargs中有一系列的 key 和 value， 业务逻辑：如果页面存在 未开启“企业部门”功能 就点击 开启并使用，将每一个 value值填入 key字段中，然后点击确定，如果页面不存在 未开启“企业部门”功能 就检查页面包含 企业名称 添加用户 权限继承方式",
        "output": "<thought>\n首先，我们需要判断页面上是否存在“未开启‘企业部门’功能”的文本。如果存在，则点击“开启并使用”按钮。然后，遍历kwargs，将每一个value值输入对应的key字段中，并点击“确定”按钮。如果不存在，则检查页面是否包含“企业名称”、“添加用户”和“权限继承方式”这些文本。\n</thought>\n\n<code_block>\n# 新建企业部门关键字实现\n新建企业部门\n    [Arguments]  &{kwargs}\n    # 判断页面是否存在“未开启‘企业部门’功能”文本\n    ${exist}  IsAnyTextExisting | 未开启“企业部门”功能\n    IF  $exist\n        # 如果存在，则点击开启并使用\n        Click | 开启并使用\n        # 遍历kwargs，将值输入对应字段\n        FOR  ${key}  ${value}  IN  &{kwargs}\n            SetField | ${key} | ${value}\n        END\n        # 点击确定\n        Click | 确定\n    ELSE\n        # 如果不存在，则检查页面包含指定文本\n        CheckHasText | 企业名称 | 添加用户 | 权限继承方式\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 等待页面不出现中止回答后，校验最后一个 class=ai-msg-body 内所有的 class=ai-msg-content-md 元素的文本都不为空",
        "output": "<thought>\n 首先需要等待文本“中止回答”消失。然后查找最后一个 class=ai-msg-body 的元素，接着在该元素内查找所有 class=ai-msg-content-md 的子元素，遍历这些子元素检查文本是否为空。\n </thought>\n \n <code_block>\n # 等待文本“中止回答”消失\n WaitTextDisappear | 中止回答\n \n # 查找最后一个 class=ai-msg-body 的元素\n ${last_ai_msg_body}  FindElem | [class=ai-msg-body]:eq(-1)\n \n # 获取 class=ai-msg-body 内所有 class=ai-msg-content-md 元素\n ${contents}  FindElem | ${last_ai_msg_body} [class=ai-msg-content-md]\n \n # 遍历每个元素，校验其文本不为空\n FOR  ${content}  IN  @{contents}\n  ${text}  Get Text | ${content}\n  Should Not Be Empty | ${text}\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击添加分组，并输入操作系统",
        "output": "<thought>\n 首先需要点击“添加分组”按钮，接着在光标激活位置输入“操作系统”。可以使用Click关键字点击文本，然后使用SendText输入文本。\n </thought>\n \n <code_block>\n # 点击添加分组\n Click | 添加分组\n \n # 输入操作系统\n SendText | 操作系统\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "${reqTime}是%Y-%m-%d %H:%M:%S的字符串，转成时间戳",
        "output": "<thought>\n问题描述需要将日期字符串转换为时间戳。在Robot Framework中，日期和时间的转换可以通过内置关键字和一些Python代码来实现。由于现有的RF标准库中没有直接将日期时间字符串转换为时间戳的关键字，因此我们可以使用Evaluate关键字来执行Python代码完成转换。Python的`datetime`模块可以很方便地实现这个功能。\n</thought>\n\n<code_block>\n# 使用Python的datetime模块将日期字符串转换为时间戳\n${timestamp}    Evaluate   int(datetime.datetime.strptime('${reqTime}', '%Y-%m-%d %H:%M:%S').timestamp())  modules=datetime\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击ui_test表格行中的‘删除’icon, 输入删除原因：测试",
        "output": "<thought>\n首先，需要找到ui_test表格行中的‘删除’icon并点击，我们可以使用ClickIconOfRow关键字，它能找到指定表格行中的指定图标并进行点击。然后输入删除原因：测试，我们可以使用SetField关键字，它能选择指定的字段并输入相应的值。\n</thought>\n\n<code_block>\n# 点击ui_test表格行中的‘删除’icon\nClickIconOfRow | ui_test | delete \n\n# 输入删除原因：测试\nSetField | 删除原因 | 测试 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在页面选择你的公司这个选择器中，选择第一个\"北京巨量引擎网络技术有限公司\"",
        "output": "<thought>\n想要在页面中选择“北京巨量引擎网络技术有限公司”，首先需要确认该元素是在一个选择器中。这种情况下，使用`SelectOption`关键字来选择特定选项。如果是一个特定字段内的选择器，可以使用`SelectOptionForField`。我们假设“你的公司”是一个页面字段，因此可以使用`SelectOptionForField`关键字直接选择该选项。需要确保选择器的选项文本与目标一致。\n</thought>\n\n<code_block>\n# 在“你的公司”选择器中选择\"北京巨量引擎网络技术有限公司\"\nSelectOptionForField | 你的公司 | 北京巨量引擎网络技术有限公司\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 模拟访问测试 附近的 了解详情",
        "output": "<thought>\n 在这个场景中，我们需要点击\"了解详情\"，并且这个\"了解详情\"应该在\"模拟访问测试\"的附近。我们可以使用RF的Click关键字来完成这个任务，而且可以通过near参数将其限制在\"模拟访问测试\"的附近。\n </thought>\n \n <code_block>\n # 点击 \"模拟访问测试\" 附近的 \"了解详情\"\n Click | 了解详情 | near=模拟访问测试\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "表格的第一行入库数量输入2，第二行入库数量输入3",
        "output": "<thought>\n首先，根据题目描述，我们需要在表格的第一行和第二行中找到\"入库数量\"这一列，然后在这一列中输入2和3。我们可以使用\"FillCell\"关键字来实现这个操作。\"FillCell\"关键字需要的参数有行号，列名，及我们需要输入的值。因此我们需要分别为第一行和第二行调用一次\"FillCell\"关键字。\n</thought>\n\n<code_block>\n# 在表格的第一行的入库数量中输入2\nFillCell | 1 | 入库数量 | 2 \n\n# 在表格的第二行的入库数量中输入3\nFillCell | 2 | 入库数量 | 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完，然后点击表格单元格（auto_ui_las_db，操作）中的删除",
        "output": "<thought>\n首先需要等待页面加载完成，因此使用WaitLoading关键字。接着，由于需要点击表格单元格中的文本\"删除\"，可以使用ClickTextOfCell关键字。需要指定表格行和列的信息，根据描述，行应该是\"auto_ui_las_db\"，列是\"操作\"。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 点击表格行\"auto_ui_las_db\"中列\"操作\"中的\"删除\"\nClickTextOfCell | auto_ui_las_db | 操作 | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到 客户账号ID右边的 的输入框，然后输入 2100044470，注意是输入框",
        "output": "<thought>\n首先使用FindElemToTheDirectionOf关键字找到\"客户账号ID\"右边的input/textarea元素，然后使用FillArea关键字向该元素中输入2100044470。\n</thought>\n\n<code_block>\n# 查找客户账号ID右边的input/textarea元素\n${elem}  FindElemToTheDirectionOf | 客户账号ID | right | input, textarea\n\n# 向找到的元素中输入2100044470\nFillArea | ${elem} | 2100044470\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 并点击 class 为arco-select-view-value的span，然后点击飞书",
        "output": "<thought>\n首先需要查找class为arco-select-view-value的span元素，然后点击它。接着，点击文本“飞书”。\n</thought>\n\n<code_block>\n# 查找class为arco-select-view-value的span元素并点击\nClickElem | span[class='arco-select-view-value']\n\n# 点击文本“飞书”\nClick | 飞书\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击id为enableVersion的元素，判断 ${val2} 等于 --，如果 ${date_diff} 等于0 则log aaa，如果小于等于7 则为短期利率，否则为标准利率",
        "output": "<thought>\n首先，我们需要使用ClickElem关键字点击id为enableVersion的元素。接着，使用RF内建的IF语法来检查${val2}是否等于--。在嵌套的IF语句中，我们再检查${date_diff}是否等于0，若是，则记录日志aaa。接下来，检查${date_diff}是否小于等于7，如果是，则记录日志短期利率，否则记录日志标准利率。\n</thought>\n\n<code_block>\n# 点击id为enableVersion的元素\nClickElem  | [id=enableVersion]\n\n# 判断 ${val2} 是否等于 --\nIF  \"${val2}\" == \"--\"\n    # 判断 ${date_diff} 是否等于 0\n    IF  \"${date_diff}\" == \"0\"\n        Log  aaa\n    # 如果 ${date_diff} 小于等于 7\n    ELSE IF  \"${date_diff}\" <= \"7\"\n        Log  短期利率\n    # 其他情况\n    ELSE\n        Log  标准利率\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击赠送礼物后面的第二个按钮",
        "output": "<thought>\n在这个场景中，我们需要实现点击\"赠送礼物\"文本后面的第二个按钮。可以借助ClickElemToTheDirectionOf关键字完成。首先要确保\"赠送礼物\"是基准文本，然后根据需求点击其右侧第二个按钮，因此我们需要使用direction参数设置为right，selector参数设置为button，idx参数设置为1（因为选择第二个按钮）。这样可以精确定位到目标元素并完成操作。\n</thought>\n\n<code_block>\n# 点击赠送礼物后面的第二个按钮\nClickElemToTheDirectionOf | 赠送礼物 | right | button | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到姓名右侧",
        "output": "<thought>\n为了解决这个问题，我们需要使用MoTo关键字，因为它允许我们将鼠标移动到特定文本上。然后我们可以通过调整dx参数（表示横向偏移）来将鼠标移动到\"姓名\"文本的右侧。将dx设为正数可以实现向右的偏移。\n</thought>\n\n<code_block>\n# 鼠标移动到姓名右侧\nMoTo | 姓名 | dx=20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 ${elem}  表示class 为 InlineFirstItem__outer-container__TQuRy 的第 ${index} 个 div",
        "output": "<thought>\n首先，我们需要创建一个变量 `${elem}`，它表示类名为 `InlineFirstItem__outer-container__TQuRy` 的第 `${index}` 个 div。我们将使用 RF 的 `Set Variable` 关键字来创建变量并使用 jQuery 选择器构建 `:eq` 伪类选择器来定位目标元素。\n</thought>\n\n<code_block>\n# 创建变量 ${elem}，表示 class 为 InlineFirstItem__outer-container__TQuRy 的第 ${index} 个 div\n${elem}  Set Variable  div[class=InlineFirstItem__outer-container__TQuRy]:eq(${index - 1})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 ‘添加筛选条件’ 中输入 192.168.9.96，并回车，等待1s",
        "output": "<thought>\n首先，我需要在‘添加筛选条件’字段中输入192.168.9.96，并回车。根据说明文档，SetField关键字适用于向指定字段输入值。之后，我需要等待1秒，对于等待时间，可以使用Sleep关键字来实现。\n</thought>\n\n<code_block>\n# 在‘添加筛选条件’字段中输入192.168.9.96，并回车\nSetField | 添加筛选条件 | 192.168.9.96 | enter=True\n\n# 等待1秒\nSleep | 1s\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择表格第三行",
        "output": "<thought>\n这是一个直接的任务，可以通过使用关键字 \"SelectTableRow\" 来完成。我们只需要传递要选择行的行号（在这种情况下为3）作为参数即可。\n</thought>\n\n<code_block>\n# 选择表格的第三行\nSelectTableRow | 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "重复点击刷新 3s一次 最多点击5次 直到表格第一行的运行状态为执行成功",
        "output": "<thought>\n考虑到该场景需要重复点击刷新按钮，直到表格第一行的某个单元格值变为\"执行成功\"。我们可以循环最多执行5次，每次点击刷新按钮，然后等待3秒，接着获取表格第一行运行状态的单元格值。如果该值为\"执行成功\"，则跳出循环，否则继续循环直到达到最大次数。\n</thought>\n\n<code_block>\n# 初始化变量\n${max_attempts}  Set Variable  5\n${attempt}  Set Variable  0\n\n# 循环直到达到最大尝试次数\nFOR  ${attempt}  IN RANGE  0  ${max_attempts}\n  Click | 刷新\n  Sleep  3s\n  ${status}=  GetCellValue | 1 | 运行状态\n  IF  '${status}' == '执行成功'\n    BREAK\n  END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送 GET 请求到 ${search_api}, 得到的响应 resp 是个 JSON，要校验 resp 中的 data 字段不为空，且 status 为 success",
        "output": "<thought>\n首先，使用 `UiSendRequest` 关键字发送 GET 请求获取 JSON 响应。然后使用 `GetValuesFromJson` 提取 `data` 和 `status` 字段的值。接下来，检查 `data` 字段不为空并且 `status` 为 `\"success\"`。\n</thought>\n\n<code_block>\n# 发送 GET 请求到 ${search_api}\n${resp_json}  UiSendRequest | GET | ${search_api} | ${None} | ${None}\n\n# 从响应中获取 data 字段的值\n${data_value}  GetValuesFromJson | ${resp_json} | data\n\n# 从响应中获取 status 字段的值\n${status_value}  GetValuesFromJson | ${resp_json} | status\n\n# 校验 data 字段不为空\nShould Not Be Empty  ${data_value}\n\n# 校验 status 为 success\nShould Be Equal As Strings  ${status_value}  success\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class=sub-menu-item-text-zoom-udV56Z 的 服务工单 的 span，等待3秒，检验页面存在 123 文案，同时检验 处理中 文案出现",
        "output": "<thought>\n首先，我们需要点击指定的元素，这可以通过 `ClickElem` 关键字来实现。接下来，我们需要等待3秒钟，这可以通过 `Sleep` 关键字来完成。最后，我们需要验证页面中同时存在 \"123\" 和 \"处理中\" 文案，这一步可以使用 `CheckHasText` 关键字。\n</thought>\n\n<code_block>\n# 点击 class 为 sub-menu-item-text-zoom-udV56Z 的 服务工单 的 span\nClickElem | [class=sub-menu-item-text-zoom-udV56Z]:contains(服务工单)\n\n# 等待3秒钟\nSleep | 3s\n\n# 校验页面存在 \"123\" 并且存在 \"处理中\"\nCheckHasText | 123 | 处理中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 00下方的 30",
        "output": "<thought>\n为了点击文本\"00\"下方的文本\"30\"，我们可以使用ClickTextToTheDirectionOf关键字。这个关键字需要指定基准元素、方向和目标文本。基于题目要求，基准元素是文本\"00\"，方向是下方，所以使用\"bottom\"。需要确保如果存在多个\"30\"，应选择正确的idx。\n</thought>\n\n<code_block>\n# 点击 00 下方的 30\nClickTextToTheDirectionOf | 00 | bottom | 30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击菜单栏的公网带宽包，点击 弹窗中 Include all Service subject by default，选择 volume，检查表格第一行包含 2Mbps",
        "output": "<thought>\n首先，需要点击菜单栏的“公网带宽包”，可以使用ClickMenu关键字。然后，点击弹窗中的“Include all Service subject by default”，这是在弹窗中进行的操作，可以使用Click关键字并指定base为POPUP。接下来，选择“volume”选项，可以使用SelectOption关键字。最后，检查表格第一行包含“2Mbps”，使用CheckCellHas关键字来验证表格内容。\n</thought>\n\n<code_block>\n# 点击菜单栏中的“公网带宽包”\nClickMenu | 公网带宽包\n\n# 点击弹窗中的“Include all Service subject by default”\nClick | Include all Service subject by default | base=POPUP\n\n# 选择“volume”选项\nSelectOption | volume\n\n# 校验表格第一行包含“2Mbps”\nCheckCellHas | 1 | 1 | 2Mbps\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 <span class=\"arco-tabs-header-title-text\">任务\n \n ",
        "output": "<thought>\n 为了解决这个问题，我们需要使用`ClickElem`关键字来点击指定的HTML元素。给定的元素是一个`span`，并且有一个类`arco-tabs-header-title-text`，文本是`任务`。我们可以使用jQuery选择器来定位这个元素。\n </thought>\n \n <code_block>\n # 点击具有类名“arco-tabs-header-title-text”的span元素，其文本为“任务”\n ClickElem | span.arco-tabs-header-title-text:contains(任务)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击选择 ‘预算科目_A0’，并点击",
        "output": "<thought>\n这个场景要求我们使用鼠标点击一个特定的文本，并点击。首先，我们需要使用 `MClick` keyword 来实现鼠标点击。接着，我们确定要点击的文本为‘预算科目_A0’，因此直接使用`MClick | 预算科目_A0`来完成任务即可。\n</thought>\n\n<code_block>\n# 鼠标点击选择 ‘预算科目_A0’\nMClick | 预算科目_A0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 货款充值，将‘代金券面值’移动到视野内，在请输入金额的输入框中输入400，点击立即充值，点击确认充值",
        "output": "<thought>\n考虑使用Click关键字点击“货款充值”，然后使用MoveIntoView关键字将“代金券面值”移动到视野内。接着，使用SetField关键字在“请输入金额”字段中输入400。最后，依次使用ClickTextOneByOne关键字点击“立即充值”和“确认充值”。\n</thought>\n\n<code_block>\n# 点击货款充值\nClick | 货款充值\n\n# 将代金券面值移动到视野内\nMoveIntoView | :contains(代金券面值)\n\n# 在请输入金额中输入400\nSetField | 请输入金额 | 400\n\n# 依次点击立即充值和确认充值\nClickTextOneByOne | 立即充值 | 确认充值\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验加速器类型右侧文案包含标准型",
        "output": "<thought>\n在这个场景中，我们需要校验“加速器类型”右侧的文案是否包含“标准型”。可以使用CheckHasTextToTheDirectionOf关键字，它校验基准元素在指定方向是否存在给定的文本内容。这里基准元素是“加速器类型”，方向是右（right），文本是“标准型”。\n</thought>\n\n<code_block>\n# 校验“加速器类型”右侧文案包含“标准型”\nCheckHasTextToTheDirectionOf | 加速器类型 | right | 标准型\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“域名配置文档链接”的关键字，接受参数为list，list中有两个元素，逻辑如下：\n# 1、点击list的第一个元素下方的查看详情\n# 2、跳转到新的页面\n# 3、验证页面中存在list的第二个元素\n# 4、切换到之前的窗口",
        "output": "<thought>\n为了实现这个场景，首先需要使用`ClickTextToTheDirectionOf`来点击第一个参数元素下方的\"查看详情\"链接。然后，使用`ToNewWindow`关键字切换到新页面。接着，验证新页面中是否存在第二个参数元素，使用`CheckHasText`关键字。最后，需要使用`ToPrevWindow`关键字切换回之前的窗口。\n</thought>\n\n<code_block>\n*** Keywords ***\n域名配置文档链接\n    [Arguments]  ${list}\n    \n    # 点击第一个元素下方的查看详情\n    ClickTextToTheDirectionOf  ${list}[0]  bottom  查看详情\n    \n    # 跳转到新的页面\n    ToNewWindow\n    \n    # 验证页面中存在第二个元素\n    CheckHasText  ${list}[1]\n    \n    # 切换到之前的窗口\n    ToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选【编辑工单】",
        "output": "<thought>\n首先需要确定是否可以使用CheckBoxOn关键字来勾选名为【编辑工单】的复选框。根据提供的关键字描述，可以直接使用CheckBoxOn，并传入复选框的名称【编辑工单】。\n</thought>\n\n<code_block>\n# 勾选“编辑工单”复选框\nCheckBoxOn | 编辑工单\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到表格中值为\"line_id\"所在的行，并修改第二列下拉框的值为int。提示，这其实是给定了行和列信息，是要填写单元格",
        "output": "<thought>\n首先，我们需要找到表格中具有“line_id”值的行。然后，我们定位到该行的第二列，使用`FillCell`关键字来设置其值为“int”。\n</thought>\n\n<code_block>\n# 找到值为\"line_id\"的行号\n${row}  GetRowValues | line_id\n\n# 修改该行的第二列为\"int\"\nFillCell | ${row} | 2 | int\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击表格第一行的“详情”按钮，检测url携带了action=view和id=，同时页面中没有输入框",
        "output": "\n    \n<thought>\n 首先，使用`ClickTextOfRow`关键字点击表格第一行的“详情”按钮。然后，使用`WaitURLContainsAll`关键字检查URL中包含`action=view`和`id=`。最后，使用`CheckNotHasElem`关键字验证页面中不包含`input`和`textarea`元素。\n </thought>\n \n <code_block>\n # 点击表格第一行的“详情”按钮\n ClickTextOfRow | 1 | 详情\n \n # 检查URL中包含action=view和id=\n WaitURLContainsAll | action\\=view | id\\=\n \n # 验证页面中不包含input和textarea\n CheckNotHasElem | input,textarea\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为“打开${table_name}图表的更多操作”的关键字，逻辑为：\n1. 查找 class为arco-card-header-title 且文本包含 table_name 的元素 ele\n2. 点击ele的兄弟元素b_ele， b_ele元素的class包含CardContainer__action__cSyD7",
        "output": "<thought>\n解决问题思路：首先使用FindElem找到class为arco-card-header-title且文本包含table_name的元素ele，然后使用FindElem查找ele的兄弟元素b_ele，该元素的class需包含CardContainer__action__cSyD7，最后点击找到的b_ele。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开${table_name}图表的更多操作\n    # 查找class为arco-card-header-title且文本包含table_name的元素ele\n    ${ele}  FindElem  [class=arco-card-header-title]:contains(${table_name})\n\n    # 查找ele的兄弟元素b_ele，b_ele的class包含CardContainer__action__cSyD7\n    ${b_ele}  FindElem  ${ele} + [class*=CardContainer__action__cSyD7]\n\n    # 点击b_ele\n    ClickElem  ${b_ele}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 GIRAFFE_PLAN_NAME 包含字符串 ‘冒烟’，就打印 xx",
        "output": "<thought>\n首先，我们需要确保变量GIRAFFE_PLAN_NAME存在，然后我们需要判断这个变量是否包含字符串'冒烟'。我们可以使用RobotFramework的Evaluate关键字来处理这个字符串包含的判断。这个关键字可以执行Python代码和函数，并返回结果。我们将使用Python的in操作符来判断是否包含字符串。如果包含，那么我们就打印xx。我们需要使用RobotFramework的IF/ELSE关键字来实现这个逻辑判断。\n</thought>\n\n<code_block>\n# 首先检查变量GIRAFFE_PLAN_NAME是否存在\n${exist}  IsVarExisting | GIRAFFE_PLAN_NAME\n# 通过IF/ELSE判断，如果存在，继续进行下一步操作\nIF  ${exist}\n    # 使用Evaluate关键字执行Python代码，判断GIRAFFE_PLAN_NAME是否包含'冒烟'\n    ${contains}   Evaluate  '冒烟' in $GIRAFFE_PLAN_NAME\n    # 如果包含，就打印xx\n    IF  ${contains}\n        Log  xx\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将class=source-module-container的页面区域保存为基准图，命名为大屏成交来源，相似度为0.98",
        "output": "<thought>\n为了完成这个任务，我需要使用ImageDiff关键字对特定元素进行截图并进行基准图对比。首先，我需要创建一个selector来定位具有class=source-module-container的元素。由于这是一个class选择器，我可以直接使用jQuery选择器来表示这个元素。接着，我需要指定图片的名称为“大屏成交来源”，并将相似度设置为0.98。\n</thought>\n\n<code_block>\n# 定位class=source-module-container的元素并截图对比\nImageDiff | [class=source-module-container] | pic_name=大屏成交来源 | sim=0.98\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 ui_ 开头的随机参数，参数名为：dashboard_name，其中字符均为小写",
        "output": "<thought>\n根据要求，我们需要生成一个以 \"ui_\" 开头的随机字符串，并且这个字符串的字符均为小写。可以使用给定的关键字 GenerateRandomWithPrefix 来生成该字符串。我们需要设置前缀为 \"ui_\"，并确保生成的随机字符串长度合适且只包含小写字符。\n</thought>\n\n<code_block>\n# 生成以 \"ui_\" 开头的随机小写字符串，长度为18（因为前缀 \"ui_\" 占3个字符）\n${dashboard_name}  GenerateRandomWithPrefix  | ui_ | 18 | [LOWER]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面中不包含 ${excel_delete_text}",
        "output": "<thought>\n要校验页面中不包含某个文本，可以使用关键字 CheckNotHasText。由于题目要求校验页面不包含变量 ${excel_delete_text}，我们直接使用 CheckNotHasText 关键字，传入变量即可实现。\n</thought>\n\n<code_block>\n# 校验页面不包含文本 ${excel_delete_text}\nCheckNotHasText  ${excel_delete_text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入框placeholder=\"请输入整数或小数\"输入1",
        "output": "<thought>\n在这个场景中，我们需要在一个具有特定占位符属性的输入或文本区域中输入一个值。在Robot Framework中，我们可以使用FillArea关键字通过jQuery选择器定位元素并输入值。为了定位具有特定占位符的元素，可以使用属性选择器语法。在jQuery中，选择器可以表示为$('[placeholder=\"请输入整数或小数\"]')。该语法可以直接用于FillArea关键字以输入指定的值。\n</thought>\n\n<code_block>\n# 在具有placeholder为\"请输入整数或小数\"的输入或文本区域中输入1\nFillArea | [placeholder=\"请输入整数或小数\"] | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成八位随机字符串，与libra_autotest_拼接，传入${monitor_name}",
        "output": "<thought>\n首先，我们需要生成八位随机字符串，使用给定的关键字 `GenerateRandom`。然后，将生成的字符串与指定的前缀 `libra_autotest_` 拼接在一起，可以使用 `Catenate` 关键字完成拼接。最后，将拼接后的结果赋值给变量 `${monitor_name}`。\n</thought>\n\n<code_block>\n# 生成八位随机字符串\n${random_str}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n\n# 拼接随机字符串与前缀\n${monitor_name}  Catenate  SEPARATOR=  libra_autotest_  ${random_str}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开页面：https://contract.feishu-pre.cn/task-center/todo/db018e12-a621-42ac-8a25-8576e8e10a27，调用 创建合同-托管基础 关键字，然后调用 审批节点审批 关键字",
        "output": "<thought>\n首先需要使用`OpenUrl`关键字打开指定的页面。然后，调用`创建合同-托管基础`关键字，接着调用`审批节点审批`关键字。\n</thought>\n\n<code_block>\n# 打开指定页面\nOpenUrl | https://contract.feishu-pre.cn/task-center/todo/db018e12-a621-42ac-8a25-8576e8e10a27\n\n# 调用创建合同-托管基础关键字\n创建合同-托管基础\n\n# 调用审批节点审批关键字\n审批节点审批\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘参与预览计算的数据量’ 为 全量数据",
        "output": "<thought>\n需要将“参与预览计算的数据量”设置为“全量数据”。可以使用`SetField`关键字，因为它是用于向特定页面字段中填写数据的关键字。\n</thought>\n\n<code_block>\n# 设置参与预览计算的数据量为全量数据\nSetField | 参与预览计算的数据量 | 全量数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "往客户名称中输入 测试回归",
        "output": "<thought>\n要在客户名称字段中输入“测试回归”，可以使用SetField关键字。需要知道字段的名称是“客户名称”。\n</thought>\n\n<code_block>\n# 输入客户名称为 测试回归\nSetField | 客户名称 | 测试回归\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 icon: more",
        "output": "<thought>\n要点击名为“more”的图标，可以直接使用`ClickIcon`关键字并指定图标名称为\"more\"。\n</thought>\n\n<code_block>\n# 点击图标more (...)\nClickIcon | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验单元格（1，超管审计）中包含：审批工地信息不完成",
        "output": "<thought>\n要校验特定单元格中的文本是否包含指定内容，可以使用CheckCellHas关键字。需要知道的是目标单元格位于第一行中的“超管审计”列。根据场景描述，单元格应包含“审批工地信息不完成”。\n</thought>\n\n<code_block>\n# 校验第一行“超管审计”列中的单元格包含“审批工地信息不完成”文本\nCheckCellHas | 1 | 超管审计 | 审批工地信息不完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 div class包含ellipsis 且title =规则标签",
        "output": "<thought>\n我们要点击一个div元素，该元素的class包含\"ellipsis\"，并且title属性是\"规则标签\"。可以使用ClickElem关键字，通过jquery选择器来选择这个元素。jquery选择器可以通过属性选择器来实现，即用[class*='ellipsis'][title='规则标签']来选取需要的元素。\n</thought>\n\n<code_block>\n# 点击class包含ellipsis且title为规则标签的div\nClickElem | div[class*='ellipsis'][title='规则标签']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为校验的关键字，接受参数 title 和 text ，操作逻辑是 检查表格所有的数据列的 title ，是不是都包含 text",
        "output": "<thought>\n我们需要遍历表格的所有列，并检查每一列的列标题中是否包含给定的文本。可以使用`CheckColHas`关键字来检查列中是否包含指定文本。假设表格在默认的基准元素中，可以指定表格的列号或列名来进行检查。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验\n    [Arguments]  ${title}  ${text}\n    # 获取表格列数\n    ${col_count}=  GetElemCount  th\n    # 遍历所有列\n    FOR  ${i}  IN RANGE  1  ${col_count}\n       # 校验每一列的标题是否包含指定文本\n       CheckColHas  ${i}  ${text}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置${type}事件”，接受 args 参数，作用是：向字段 “设置终止/起始事件” 中输入 ${type}事件 和变长参数 args",
        "output": "<thought>\n通过使用`SetField`关键字来实现所需功能。我们可以通过将`${type}`事件和变长参数`args`依次传入`SetField`中，以便将这些值输入到字段“设置终止/起始事件”中。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置${type}事件\n    [Arguments]  ${type}  @{args}\n    # 设置终止/起始事件字段\n    SetField  设置终止/起始事件  ${type}事件  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证表格中有10条数据",
        "output": "<thought>\n首先，考虑到需要验证表格中的数据行数，应该使用`CheckRowCount`关键字。这个关键字能够校验表格的行数是否为指定值。在这个场景中，我们需要检查表格是否有10条数据，因此应该将参数设置为10。\n</thought>\n\n<code_block>\n# 验证表格中有10条数据\nCheckRowCount | 10\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 鼠标悬浮到 支持Spot 右侧 否，点击选中",
        "output": "\n    \n<thought>\n 首先需要将鼠标移动到\"支持Spot\"右侧的\"否\"上，然后执行点击操作。可以使用`MoveToTextToTheDirectionOf`关键字将鼠标移动到目标位置，再使用`MClick`关键字进行点击。\n </thought>\n \n <code_block>\n # 移动鼠标到\"支持Spot\"右侧的\"否\"\n MoveToTextToTheDirectionOf | 支持Spot | right | 否\n \n # 鼠标在当前位置点击，进行选中\n MClick\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击返回，点击在线支付，点击 第一行的置顶报表，检查页面包含：预计补款，执行完毕关闭浏览器",
        "output": "<thought>\n在这个场景中，我们需要按照顺序执行一系列点击操作然后进行页面校验。首先，点击返回和在线支付按钮。接下来，需要点击表格第一行中的置顶报表。最后，校验页面是否包含“预计补款”这个文本，确保操作成功后关闭浏览器。为此，我们将依次使用`Click`、`ClickTextOfRow`、`CheckHasText`和`CloseBrowser`这些关键字。\n</thought>\n\n<code_block>\n# 点击返回按钮\nClick | 返回\n\n# 点击在线支付按钮\nClick | 在线支付\n\n# 点击第一行中的置顶报表\nClickTextOfRow | 1 | 置顶报表\n\n# 检查页面是否包含预计补款\nCheckHasText | 预计补款\n\n# 执行完毕后关闭浏览器\nCloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "取消mock feishu.cn/path/sso 的 POST请求",
        "output": "<thought>\n首先，我们需要取消对特定路径和请求方法的mock。根据给定的关键字，我们可以使用`Stop Mock`来停止指定路径和方法的mock行为。在本场景中，需要对路径`feishu.cn/path/sso`的POST请求取消mock，因此我们只需指定对应的路径和方法即可，无需使用`req_body_pattern`参数。\n</thought>\n\n<code_block>\n# 取消 feishu.cn/path/sso 的 POST 请求的 mock\nStop Mock  feishu.cn/path/sso  POST\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 合同期限 中输入多个值：固定期限，${current_date} 2年，3年",
        "output": "<thought>\n首先，我们需要向“合同期限”字段中输入多个值。根据提供的关键字描述，我们可以使用`SetField`关键字来填入这些值。\n\n步骤：\n1. 使用`SetField`关键字，选择字段“合同期限”。\n2. 依次输入多个值：固定期限，`${current_date} 2年`，3年。\n</thought>\n\n<code_block>\n# 向合同期限字段输入固定期限，${current_date} 2年，3年\nSetField | 合同期限 | 固定期限 | ${current_date} 2年 | 3年\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "滚动到最下方，设置回溯任务为：任务ID，等待页面出现更新成功，点击 用户区域分布 下面的 流量，在流量总额中输入 100G，点击class名为oc-row-radio内的文字：广告，点击弹窗左下角的取消按钮",
        "output": "<thought>\n解决问题思路：依次使用`PageDown`滚动页面到最下方，然后利用`SetField`设置回溯任务字段，接着使用`WaitText`等待页面出现“更新成功”提示。随后，通过`ClickTextToTheDirectionOf`点击“用户区域分布”下方的“流量”，使用`SetField`填写“流量总额”字段为“100G”。再点击class名为oc-row-radio的“广告”文本，最后点击弹窗左下角的取消按钮，使用`ClickTextToTheDirectionOf`完成。\n</thought>\n\n<code_block>\n# 滚动到最下方\nPageDown | 5\n\n# 设置回溯任务为：任务ID\nSetField | 回溯任务 | 任务ID\n\n# 等待页面出现更新成功\nWaitText | 更新成功\n\n# 点击用户区域分布下方的流量\nClickTextToTheDirectionOf | 用户区域分布 | bottom | 流量\n\n# 在流量总额中输入100G\nSetField | 流量总额 | 100G\n\n# 点击class名为oc-row-radio内的文字：广告\nClick | 广告 | base=[class*=oc-row-radio]\n\n# 点击弹窗左下角的取消按钮\nClickTextToTheDirectionOf | POPUP | bottomLeft | 取消\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个选择月份的关键字，如果${15_days_ago_month}的值为1，点击一月。如果${15_days_ago_month}的值为2，点击二月。以此类推。",
        "output": "<thought>\n为了实现该场景，我们可以先定义一个关键字`选择月份`。在该关键字中，我们使用一个循环来判断`${15_days_ago_month}`的值。根据该值，使用`Click`关键字点击对应的月份文本。在Robot Framework中，使用`FOR`循环来处理重复的逻辑判断是有效的。当循环的计数器与`${15_days_ago_month}`匹配时，就执行点击操作。\n</thought>\n\n<code_block>\n*** Keywords ***\n选择月份\n    [Arguments]  ${15_days_ago_month}\n\n    # 定义月份列表\n    ${months}    Create List    一月    二月    三月    四月    五月    六月    七月    八月    九月    十月    十一月    十二月\n\n    # 循环判断月份\n    FOR    ${index}    IN RANGE    1    13\n        IF    \"${index}\" == \"${15_days_ago_month}\"\n            # 点击对应的月份\n            Click    ${months}[${index-1}]\n        END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找第一个文本为 ‘请拖入字段’ 的元素的，父元素",
        "output": "<thought>\n首先使用`FindByText`关键字查找第一个文本为‘请拖入字段’的元素。接着，使用`FindParentElem`关键字查找该元素的父元素。\n</thought>\n\n<code_block>\n# 查找第一个文本为‘请拖入字段’的元素\n${elem}  FindByText | 请拖入字段\n\n# 查找该元素的父元素\n${parent}  FindParentElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查看表格的第7列的值",
        "output": "<thought>\n要查看表格的第7列的值，可以使用 `GetColValues` 关键字。这个关键字可以获取表格某一列的所有值，并以列表的形式返回。将 `col_name/id` 参数设置为7即可。\n</thought>\n\n<code_block>\n# 获取表格第7列的所有值\n@{col_values}  GetColValues | 7\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “用户登录” 的关键字，接受 cookies 参数，默认值为变量 COOKIES，作用是，打开浏览器访问主页 MAIN_PAGE，并用 cookies 登录",
        "output": "<thought>\n首先，我需要创建一个名为“用户登录”的关键字，它接受一个名为cookies的参数，默认值为变量COOKIES。然后使用OpenBrowser关键字打开浏览器，并传递url和cookies参数。在这里，我将url设置为变量MAIN_PAGE。\n</thought>\n\n<code_block>\n用户登录\n    [Arguments]  ${cookies}=${COOKIES}\n    OpenBrowser  ${MAIN_PAGE}  cookies=${cookies}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击 上传单个合同文件 ，如果出现 上传单个合同文件消失，则上传文件${doc_1}，否则等待5s循环，最多5次循环",
        "output": "<thought>\n首先，鼠标点击\"上传单个合同文件\"按钮。之后进入一个循环，在每次循环中检查\"上传单个合同文件\"文本是否存在。如果不存在，则执行文件上传操作，并终止循环。如果存在，则等待5秒钟，然后进行下一次循环。循环最多执行5次。\n</thought>\n\n<code_block>\n# 鼠标点击上传单个合同文件\nMClick | 上传单个合同文件\n\n# 初始化循环变量\nFOR  ${index}  IN RANGE  5\n    # 判断是否出现上传单个合同文件消失\n    ${exist}  IsAnyTextExisting | 上传单个合同文件\n    IF  not ${exist}\n        # 上传文件\n        UploadFile | ${doc_1}\n        # 退出循环\n        BREAK\n    ELSE\n        # 等待5秒\n        Sleep  5s\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 表格 \"Instance ID/ name\"列都包含“bwp-14w7cru21dfr43tvs806fzv3e”\n\n提示：可以先获取表格行数量，然后检测表格每一行的\"Instance ID/ name\"列的单元格中都包含给定文案",
        "output": "<thought>\n为了解决这个问题，我们需要获取表格的行数，然后遍历每一行的\"Instance ID/ name\"列的值，检查该列是否包含指定的文本“bwp-14w7cru21dfr43tvs806fzv3e”。需要使用`GetRowCount`获取行数，`CheckCellHas`检查特定列是否包含给定文本。\n</thought>\n\n<code_block>\n# 获取表格的行数\n${row_count}  GetRowCount\n\n# 遍历每一行，并校验 'Instance ID/ name' 列包含指定文本\nFOR  ${i}  IN RANGE  1  ${row_count} + 1 \n    CheckCellHas  ${i}  Instance ID/ name  bwp-14w7cru21dfr43tvs806fzv3e\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把array中的生效中或者待生效改为已结束",
        "output": "<thought>\n这个任务要求我们遍历一个数组并替换特定元素的值。我们可以使用RF的FOR循环与ENUMERATE来实现对数组的遍历，结合IF/ELSE结构判断数组元素的值。在找到目标值后，用'Set List Value'关键字修改数组中的值。首先，我们需要判断数组中的每个元素，如果是“生效中”或“待生效”，就将其值改为“已结束”。\n</thought>\n\n<code_block>\n# 定义数组变量\n${array}    Create List    生效中    待生效    已结束   生效中\n\n# 遍历数组并使用ENUMERATE获取索引和值\nFOR    ${index}    ${value}    IN ENUMERATE    @{array}\n    # 判断元素是否为\"生效中\"或\"待生效\"\n    IF    '${value}' == '生效中' or '${value}' == '待生效'\n        # 将数组中的相应元素修改为\"已结束\"\n        Set List Value    ${array}    ${index}    已结束\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新标签页",
        "output": "<thought>\n为了解决“切换到新标签页”的问题，我们可以使用提供的关键字`ToNewWindow`来实现这个功能。\n</thought>\n\n<code_block>\n# 切换到新标签页\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向请输入英文名称输入：w，设置序号为2的字段类型为：Decimal，向序号为2的字段描述输入：test",
        "output": "<thought>\n根据描述的场景，我们需要首先在请输入英文名称的输入框中输入w，接着设置序号为2的字段类型为Decimal，最后向序号为2的字段描述输入test。这里我们可以使用SetField关键字来实现输入操作，并分别设置idx参数为对应的序号。\n</thought>\n\n<code_block>\n# 向请输入英文名称输入框中输入w\nSetField | 请输入英文名称 | w\n\n# 设置序号为2的字段类型为：Decimal\nSetField | 字段类型 | Decimal | idx=1\n\n# 向序号为2的字段描述输入：test\nSetField | 字段描述 | test | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击获得音浪，在弹出的浏览器弹窗中输入音浪值：900，主播人气：1000，点击保存，校验出现：成功",
        "output": "<thought>\n首先，我们需要使用Click关键字点击文本\"获得音浪\"。接着，脚本需要处理在浏览器弹出的弹窗中输入相关字段的值。因此，我们将使用SetPopupField关键字为\"音浪值\"和\"主播人气\"字段分别设置值为900和1000。然后，使用Click关键字点击\"保存\"按钮。最后，用CheckHasText校验页面上是否出现文本\"成功\"。\n</thought>\n\n<code_block>\n# 点击“获得音浪”\nClick | 获得音浪\n\n# 设置弹窗中的音浪值为900\nSetPopupField | 音浪值 | 900\n\n# 设置弹窗中的主播人气为1000\nSetPopupField | 主播人气 | 1000\n\n# 点击弹窗中的保存\nClick | 保存 | base=POPUP\n\n# 校验页面上出现“成功”\nCheckHasText | 成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取第二个表格的第一行数据",
        "output": "<thought>\n要获取第二个表格的第一行数据，可以使用`GetRowValues`关键字。首先需要指定表格编号为2，然后指定行号为1。这将返回该行的所有单元格内容作为列表。\n</thought>\n\n<code_block>\n# 获取第二个表格的第一行数据\n@{vals}  GetRowValues | 1 | tbl=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击前往告警配置。点击购买加量包，点击续费，等待 创建订单中 消失",
        "output": "<thought>\n在这个场景中，首先我们需要依次点击几个特定的文本按钮：前往告警配置、购买加量包、续费。这些操作可以使用`Click`关键字完成。最后，我们需要等待一个特定文本“创建订单中”消失，可以使用`WaitTextDisappear`关键字。确保每个操作顺序执行。\n</thought>\n\n<code_block>\n# 点击前往告警配置\nClick | 前往告警配置\n\n# 点击购买加量包\nClick | 购买加量包\n\n# 点击续费\nClick | 续费\n\n# 等待 创建订单中 消失\nWaitTextDisappear | 创建订单中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成，然后获取第一个表头元素的 data-xxxx 属性，校验其值不等于 'xxxx",
        "output": "<thought>\n首先等待页面加载完成，然后找到第一个表头元素，获取其 data-xxxx 属性值，最后校验该值不等于 'xxxx'。可以使用以下关键字：\n\n1. `WaitLoading` - 等待页面加载完成\n2. `FindElem` - 查找第一个表头元素\n3. `GetElemAttr` - 获取表头元素的 data-xxxx 属性值\n4. `Should Not Be Equal As Strings` - 校验属性值不等于 'xxxx'\n\n这些关键字可以满足任务需求。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 查找第一个表头元素\n${header_elem}  FindElem  table thead tr th:eq(0)\n\n# 获取第一个表头元素的 data-xxxx 属性\n${data_attr}  GetElemAttr  ${header_elem}  data-xxxx\n\n# 校验属性值不等于 'xxxx'\nShould Not Be Equal As Strings  ${data_attr}  xxxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘选择转置字段’ 为 gender, 然后点击 ‘选择转置字段’, ‘转置字段属性名’ 为 aa, ‘转置字段属性值’ 为 bb",
        "output": "<thought>\n我们需要使用`BatchSetFields`关键字来批量设置各个字段的值。首先设置‘选择转置字段’为gender，然后点击‘选择转置字段’。接着设置‘转置字段属性名’为aa，‘转置字段属性值’为bb。\n</thought>\n\n<code_block>\n# 批量设置字段值\nBatchSetFields  选择转置字段=gender\n\n# 点击选择转置字段\nClick | 选择转置字段\n\n# 批量设置字段值\nBatchSetFields  转置字段属性名=aa  转置字段属性值=bb\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 飞书登录，使用此 ${LARK_SESSION} ",
        "output": "<thought>\n 需要使用RobotFramework提供的自定义关键字`LoginFeiShu`，并传递`${LARK_SESSION}`作为参数来完成飞书登录。\n </thought>\n \n <code_block>\n # 使用给定的会话登录飞书\n LoginFeiShu | ${LARK_SESSION}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击BLOCK右侧的icon",
        "output": "<thought>\n首先，我们需要找到基准元素“BLOCK”，然后点击其右侧的图标。可以使用`ClickIconToTheDirectionOf`关键字，该关键字允许我们指定基准元素和方向（right），并选择目标icon。\n</thought>\n\n<code_block>\n# 点击BLOCK右侧的icon\nClickIconToTheDirectionOf | BLOCK | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${sub_username} 为真，就点击 子用户登录，然后输入主账号用户名 ${user_name}, 子用户 ${sub_username}, 密码 ${password}, 否则就输入用户名 张三，密码 password",
        "output": "<thought>\n首先需要根据 ${sub_username} 是否为真，选择不同的分支操作。如果为真，点击子用户登录，然后输入主账号用户名、子用户名和密码。否则，直接输入用户名和密码。可以使用RF内置的 IF/ELSE 结构来实现。\n</thought>\n\n<code_block>\nIF  ${sub_username}\n    # 子用户登录\n    Click  子用户登录\n    # 输入主账号用户名\n    SetField  用户名  ${user_name}\n    # 输入子用户名\n    SetField  子用户  ${sub_username}\n    # 输入密码\n    SetField  密码  ${password}\nELSE\n    # 输入用户名\n    SetField  用户名  张三\n    # 输入密码\n    SetField  密码  password\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击Sales并向左下方拖拽到100*100的位置",
        "output": "<thought>\n要解决这个问题，我们可以使用RF的DAndD关键字。首先，我们使用Click关键字点击Sales，然后使用DAndD关键字将Sales元素拖拽到相对于它的位置（100*100）。因为DAndD关键字的dx和dy参数可以用来表示相对滚动的像素，我们可以将这两个参数分别设置为-100和100代表左下方。\n</thought>\n\n<code_block>\n# 点击Sales\nClick | Sales\n\n# 将Sales元素拖拽到100*100的位置\nDAndD | Sales | Sales | dx=-100 | dy=100\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取变量 ${file_and_contract_type_list} 的长度，并循环打印列表中的每个值",
        "output": "<thought>\n这段代码的目标是获取变量 `${file_and_contract_type_list}` 的长度，并循环打印列表中的每个值。首先，借助 `Set Variable` 可以获取列表长度。然后，使用 `FOR` 循环遍历列表，并在循环内使用 `Log` 关键字打印每个值。\n</thought>\n\n<code_block>\n# 获取列表长度\n${length}  Evaluate  len($file_and_contract_type_list)\n\n# 循环打印列表中的每个值\nFOR  ${item}  IN  @{file_and_contract_type_list}\n    Log  ${item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "双击class包含ace-line的元素，并点击该元素，并输入libra_autotest",
        "output": "<thought>\n首先，我们需要找到class包含ace-line的元素。然后，我们执行双击操作。接着，对该元素点击，并在其上输入文本libra_autotest。\n</thought>\n\n<code_block>\n# 查找class包含ace-line的元素\n${elem}  FindElem | [class*=ace-line]\n\n# 双击找到的元素\nDClick | ${elem}\n\n# 点击该元素\nClickElem | ${elem}\n\n# 在该元素上输入libra_autotest\nSendText | libra_autotest\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 服务工单 的 span，设置OCSP 装订 开关为 关闭，设置 顾客不可消费日期为多个值：节假日不可用、圣诞节，获取 ‘团购库存数量’ 字段的值，校验他为 0 ",
        "output": "<thought>\n首先，点击“服务工单”的span元素。然后，设置“OCSP装订”开关为“关闭”，可以使用SetField关键字。接下来，为“顾客不可消费日期”字段设置多个值。最后，获取“团购库存数量”字段的值，并验证其值为0。\n</thought>\n\n<code_block>\n# 点击 服务工单 的 span\nClickElem | span:contains(服务工单)\n\n# 设置 OCSP 装订 开关为 关闭\nSetField | OCSP 装订 | 关闭\n\n# 设置 顾客不可消费日期为多个值：节假日不可用、圣诞节\nSetField | 顾客不可消费日期 | 节假日不可用 | 圣诞节\n\n# 获取 ‘团购库存数量’ 字段的值\n${stock_quantity}  GetFieldVal | 团购库存数量\n\n# 校验 团购库存数量 为 0\nShould Be Equal As Strings  ${stock_quantity}  0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 设置 “请输入注册邮箱” 为 “cpabusinessn@iubridge.com”",
        "output": "<thought>\n 根据问题描述，需要在页面上找到“请输入注册邮箱”关联的输入框并填入指定的邮箱地址。这可以通过`SetField`关键字实现。默认操作第一个匹配的字段，所以不需要指定索引。\n </thought>\n \n <code_block>\n # 设置“请输入注册邮箱”为“cpabusinessn@iubridge.com”\n SetField | 请输入注册邮箱 | cpabusinessn@iubridge.com\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "使用 ocr 获取合同名称字段的值，然后校验这个值包含：${FILE_DOCX_NAME}",
        "output": "<thought>\n首先需要使用 GetFieldVal 关键字获取合同名称字段的值，并启用 OCR 识别。然后使用 Should Contain 关键字校验获取的值是否包含 ${FILE_DOCX_NAME}。\n</thought>\n\n<code_block>\n# 使用OCR获取合同名称字段的值\n${contract_name}  GetFieldVal | 合同名称 | use_ocr=True\n\n# 校验合同名称包含 ${FILE_DOCX_NAME}\nShould Contain  ${contract_name}  ${FILE_DOCX_NAME}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标停留在title为${experiment_name}的li标签位置",
        "output": "<thought>\n解决这个问题，我首先设置一个jquery选择器，匹配title为测试的li标签。然后我使用\"MoToElem\"关键字将鼠标移动到匹配的元素上。这样，鼠标就会停在title为${experiment_name}的li标签的位置。\n</thought>\n\n<code_block>\n# 定义一个jquery选择器，以匹配title为experiment_name的li标签\n${selector}=  Set Variable  li[title=\"${experiment_name}\"]\n\n# 将鼠标移动到匹配的li标签上\nMoToElem | ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定位一个标签，class以avatar-name起头，模糊匹配",
        "output": "<thought>\n解决问题思路：\n1. 需要定位一个标签，class以avatar-name起头，可以使用FindElem关键字。\n2. 由于class以avatar-name起头，可以用选择器\"元素[class^=avatar-name]\"来表示。\n3. 使用FindElem关键字进行定位并获取该元素。\n</thought>\n\n<code_block>\n# 查找class以avatar-name起头的元素\n${elem}  FindElem | [class^=avatar-name]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含${contract_list}或者class包含${contract_list_button} 中的 复制按钮",
        "output": "<thought>\n在给定的场景中，我们需要点击 \"复制\" 按钮，该按钮位于 class 属性包含 `${contract_list}` 或者 `${contract_list_button}` 的元素中。根据关键字说明，我们可以使用 `ClickElem` 关键字，通过构造合适的 jQuery 选择器来实现这个需求。\n\n首先，我们需要设计一个符合条件的选择器。`[class*=${contract_list}]` 和 `[class*=${contract_list_button}]` 是我们根据 class 属性选择元素的方式。为了选择 \"复制\" 按钮，我们可以进一步缩小选择范围，假设 \"复制\" 按钮是这些元素中的一部分（例如一个包含 \"复制\" 文本的按钮），可以构造选择器 `button:contains(复制)` 来定位具体的按钮。\n\n因此，选择器可以构造为 `[class*=${contract_list}] button:contains(复制), [class*=${contract_list_button}] button:contains(复制)`。接下来，我们使用 `ClickElem` 来点击获得的第一个符合条件的元素。\n</thought>\n\n<code_block>\n# 点击 class 包含 ${contract_list} 或 ${contract_list_button} 中的 \"复制\" 按钮\nClickElem | [class*=${contract_list}] button:contains(复制), [class*=${contract_list_button}] button:contains(复制)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将class为header-time__range元素下开始日期设置为2024-06-17，结束日期设置为2024-06-23",
        "output": "<thought>\n1. 获取class为header-time__range元素，将这个元素作为base\n2. 使用BatchSetFields关键字批量设置开始日期和结束日期\n</thought>\n\n<code_block>\n# 获取class为header-time__range的元素\n${elem}  FindElem | [class=header-time__range]\n# 批量设置开始日期和结束日期\nBatchSetFields | 开始日期=2024-06-17 | 结束日期=2024-06-23 | base=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 认证方式 后的元素",
        "output": "<thought>\n首先，我们需要定位到“认证方式”的位置。在“认证方式”后面点击元素，我们可以使用ClickElemToTheDirectionOf关键字。这个关键字可以依据基准元素的相对位置来点击目标元素。这里的方向是“right”，因为目标元素在“认证方式”的右边。\n</thought>\n\n<code_block>\n# 点击“认证方式”右边的元素\nClickElemToTheDirectionOf | 认证方式 | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到 name 为 coralDetailPageIframe 的 frame",
        "output": "<thought>\n要切换到指定的iframe，我们可以使用`ToFrame`关键字，并通过jquery选择器选择name属性为`coralDetailPageIframe`的iframe。\n</thought>\n\n<code_block>\n# 切换到name为coralDetailPageIframe的iframe\nToFrame | iframe[name=coralDetailPageIframe]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入字段A，值为：应用启动、总次数",
        "output": "<thought>\n因为题目只提供了字段名A和字段值，所以我们可以使用SetField关键字来设置字段。有两个值需要输入，将它们放在一行中，字段值将依次被输入。\n</thought>\n\n<code_block>\n# 输入字段A，值为：应用启动、总次数\nSetField | A | 应用启动 | 总次数\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中第1个“加号”小图标",
        "output": "<thought>\n解决问题思路：首先需要点击弹窗中的加号icon，可以使用ClickIcon关键字来实现，设置base为POPUP表示在弹窗中查找元素，设置name为plus表示查找加号icon。\n</thought>\n\n<code_block>\n# 点击弹窗中第1个“加号”icon\nClickIcon | plus | idx=0 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “隐藏0元账单” 右边 第3个 小图标",
        "output": "<thought>\n要解决这个问题，我们可以使用关键字 \"ClickIconToTheDirectionOf\"。这个关键字的参数包括基准元素，方向，icon，以及idx。我们可以设置基准元素为 \"隐藏0元账单\"，方向为 \"right\"， idx 设置为 2，即表示点击 \"隐藏0元账单\" 右边的第3个icon。\n</thought>\n\n<code_block>\n# 点击 “隐藏0元账单” 右边 第3个 icon\nClickIconToTheDirectionOf | 隐藏0元账单 | right | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "关闭页面中间「资金共享功能上线」的弹窗，点击弹窗右上角图标即可关闭，页面可能有多个弹窗，只关闭这个即可",
        "output": "<thought>\n首先需要关闭页面中间的弹窗，因为可能有多个弹窗，需要通过点击特定的「资金共享功能上线」弹窗右上角的关闭icon来关闭。可以使用ClickIconToTheDirectionOf关键字来实现。\n</thought>\n\n<code_block>\n# 关闭页面中间「资金共享功能上线」的弹窗\nClickIconToTheDirectionOf | :contains(资金共享功能上线) | topRight | close | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现因子修改，点击取消右侧的保存，如果出现请先为每个演出时间创建演出场次，点击好的，当出现身份证购买限制，身份证购买限制设置为限制2张",
        "output": "<thought>\n这个场景包含多个步骤，需要依次处理。首先等待“因子修改”文本出现，然后点击“取消”按钮右侧的“保存”。如果出现“请先为每个演出时间创建演出场次”，则点击“好的”。最后，如果看到“身份证购买限制”，需要将“身份证购买限制”设置为“限制2张”。我们会用到WaitText、ClickElemToTheDirectionOf、IsAnyTextExisting、Click、SetField等关键字。\n</thought>\n\n<code_block>\n# 等待页面出现“因子修改”\nWaitText | 因子修改\n\n# 点击“取消”右侧的“保存”\nClickElemToTheDirectionOf | 取消 | right | button:contains(保存)\n\n# 如果出现“请先为每个演出时间创建演出场次”，点击“好的”\n${exist}  IsAnyTextExisting | 请先为每个演出时间创建演出场次\nIF  $exist\n    Click  好的\nEND\n\n# 如果出现“身份证购买限制”，将其设置为“限制2张”\n${exist}  IsAnyTextExisting | 身份证购买限制\nIF  $exist\n    SetField | 身份证购买限制 | 限制2张\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗的 “实例ID”并输入本文“vol-k4ucf0m15yft6h3wsc34”",
        "output": "<thought>\n这个测试场景涉及在弹窗中点击“实例ID”并输入具体的文本。根据关键字说明，我们可以使用Click关键字点击弹窗中的文本，然后使用SetPopupField关键字在弹窗中的相关字段中输入文本。\n</thought>\n\n<code_block>\n# 点击弹窗中的实例ID\nClick | 实例ID | base=POPUP\n\n# 在弹窗中的实例ID字段中输入 vol-k4ucf0m15yft6h3wsc34\nSetPopupField | 实例ID | vol-k4ucf0m15yft6h3wsc34\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行关键字：‘设置参数  请输入应用内成员=Aa  enter=True  pause=0.5’，如果关键字执行出错，就校验页面上包含 ‘暂无数据’",
        "output": "<thought>\n首先，需要尝试使用`SetField`关键字来设置值。如果执行出错，根据要求需要校验页面上是否包含“暂无数据”。可以通过捕获异常的方式来完成这个逻辑。\n</thought>\n\n<code_block>\n# 先尝试设置字段\nTRY\n    SetField | 请输入应用内成员 | Aa | enter=True | pause=0.5\nEXCEPT\n    # 如果出现错误，校验页面是否包含“暂无数据”\n    CheckHasText | 暂无数据\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 张三 左侧的 叉号",
        "output": "<thought>\n这个场景要求点击名为\"张三\"左侧的\"close\"图标。可以使用`ClickIconToTheDirectionOf`关键字，基准是“张三”，方向是“left”，目标是“close”图标。\n</thought>\n\n<code_block>\n# 点击 张三 左侧的 close icon\nClickIconToTheDirectionOf | 张三 | left | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“看板管理搜索看板”，接受参数 name ，逻辑是：\n1.在class包含arco-input arco-input-size-small的元素中输入给定的name\n2.等待1秒",
        "output": "<thought>\n 首先要创建一个关键字“看板管理搜索看板”，然后使用FillArea关键字在指定的class元素中输入参数name，接着使用Sleep关键字等待1秒。\n </thought>\n \n <code_block>\n 看板管理搜索看板\n  [Arguments] ${name}\n  # 在指定的class元素中输入name\n  FillArea | [class*=arco-input arco-input-size-small] | ${name}\n  # 等待1秒\n  Sleep | 1s\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${day}附近的${tomorrow_day}",
        "output": "<thought>\n在这个场景中，我们需要点击靠近某个文本(${day})的另一个文本(${tomorrow_day})。这要求我们使用`Click`关键字，并利用`near`参数来指定文本的相对位置。我们需要确保`${day}`和`${tomorrow_day}`这两个变量的正确使用。\n</thought>\n\n<code_block>\n# 点击靠近${day}的${tomorrow_day}\nClick | ${tomorrow_day} | near=${day}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 \"添加或条件\"",
        "output": "<thought>\n在这个场景中，我可以选择使用关键字 \"Click\" 来定位并点击元素，这个关键字会在全局范围内查找包含目标文本的元素，然后进行点击操作。\n</thought>\n\n<code_block>\n# 根据文本内容\"添加或条件\"定位并点击对应的元素\nClick | 添加或条件\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名称：“在第${i}个页面中增加组件” 的关键字，接受参数 name, kwargs，作用是：\n1. 在第一个 ‘输入关键词搜索’ 中输入name，并回车\n2. 0.5s后，双击 title 为 name 的 div",
        "output": "<thought>\n首先需要在第一个‘输入关键词搜索’中输入name并回车，可以使用`SetField`关键字。然后等待0.5秒后，使用`DClick`双击标题为name的div元素。需要注意jQuery选择器的正确使用。\n</thought>\n\n<code_block>\n*** Keywords ***\n在第${i}个页面中增加组件\n    [Arguments]    ${name}    &{kwargs}\n    # 在第一个‘输入关键词搜索’中输入name，并回车\n    SetField    输入关键词搜索    ${name}    idx=0    enter=True\n    \n    # 等待0.5秒\n    Sleep    0.5s\n    \n    # 双击标题为name的div\n    ${selector}    Set Variable    div[title=\"${name}\"]\n    DClick    ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在菜单栏找到 应用中心 并点击，点击 开始比对后边的“无需比对”按钮，点击 停用 右侧的 ...",
        "output": "<thought>\n首先，我需要在菜单栏中找到并点击“应用中心”。这是通过使用`ClickMenu`关键字实现的。接下来，我需要点击“开始比对”后面的“无需比对”按钮，可以使用`ClickTextToTheDirectionOf`在“开始比对”的右侧找到并点击“无需比对”按钮。最后，找到并点击“停用”右侧的\"...\"，这个可以通过`ClickIconToTheDirectionOf`实现。\n</thought>\n\n<code_block>\n# 点击菜单栏中的 应用中心\nClickMenu | 应用中心\n\n# 点击 开始比对 后边的 无需比对\nClickTextToTheDirectionOf | 开始比对 | right | 无需比对\n\n# 点击 停用 右侧的 ...\nClickIconToTheDirectionOf | 停用 | right | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ‘指标组名称’ 表格第一行包含：23年春节_入口滲透  等待中",
        "output": "<thought>\n为了构造这个测试步骤，我们需要使用关键词 `CheckRowHas` 来检查给定的表格行是否包含给定的文本。这个关键词要求我们提供行名或行号以及要检查的文本。关键词 `CheckRowHas` 将确保表格行包含所有提供的文本。\n\n在这个情况中，行号是1，要检查的文本是\"23年春节_入口滲透\"和\"等待中\"，表格名是'指标组名称'。\n\n所以，在代码中，我们会使用这些信息调用 `CheckRowHas` 关键词。\n</thought>\n\n<code_block>\n# 校验 ‘指标组名称’ 表格第一行包含：23年春节_入口滲透  等待中\nCheckRowHas | 1 | 23年春节_入口滲透 | 等待中 | tbl=指标组名称\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向输入关键词中输入：coral_auto_hive_em_table，点击搜索",
        "output": "<thought>\n解决问题思路：首先使用SetField关键字输入关键词，然后使用Click关键字点击搜索按钮。\n</thought>\n\n<code_block>\n# 输入coral_auto_hive_em_table关键词\nSetField | 输入关键词 | coral_auto_hive_em_table\n\n# 点击搜索按钮\nClick | 搜索\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击多云调度，检验页面无报错，依次点击第2个class为ovui-select__options中的优质素材、搬运素材",
        "output": "<thought>\n首先点击文本\"多云调度\"。然后，验证页面上没有任何错误信息。最后，在第二个class为ovui-select__options的元素中，依次点击文本为\"优质素材\"和\"搬运素材\"的元素。\n</thought>\n\n<code_block>\n# 点击多云调度\nClick | 多云调度\n\n# 检查页面无异常提示\nCheckErrMsg\n\n# 获取第2个class为ovui-select__options中的优质素材并点击\nClickElem | [class=ovui-select__options]:eq(1) :contains(优质素材):eq(1)\n\n# 获取第2个class为ovui-select__options中的搬运素材并点击\nClickElem | [class=ovui-select__options]:eq(1) :contains(搬运素材)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待两秒后使用新的标签页打开变量中的网址 FEISHU_ADMIN，打开后检查页面是否 存在 人事企业版配置  文本，如果不存在则重新打开该网址\n    ",
        "output": "<thought>\n首先需要等待两秒，然后在新的标签页中打开变量`FEISHU_ADMIN`中的URL。接着检查页面是否存在“人事企业版配置”文本。如果不存在，则重新打开该网址。需使用循环与条件判断来实现这一逻辑。\n</thought>\n\n<code_block>\n# 等待2秒\nSleep  2s\n\n# 打开新的标签页并访问FEISHU_ADMIN\nOpenUrl  ${FEISHU_ADMIN}\n\n# 开始循环\nFOR  ${index}  IN RANGE  3\n    # 检查页面是否存在“人事企业版配置”\n    ${exist}  IsAnyTextExisting  人事企业版配置\n    IF  ${exist}\n        # 如果存在，跳出循环\n        Exit For Loop\n    ELSE\n        # 如果不存在，重新打开网址\n        OpenUrl  ${FEISHU_ADMIN}\n        # 等待加载完成\n        WaitLoading  timeout=30\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“用户细查输入uuid并查询”，接受参数uuid，逻辑是：\n#1.在class包含arco-input arco-input-size-large的元素中输入给定的参数uuid\n#2.点击class包含arco-icon arco-icon-search的元素\n#3.等待页面出现文案“最近基本信息”",
        "output": "<thought>\n首先需要在指定的class元素中输入uuid，使用`FillArea`关键字。然后点击指定class的搜索图标，使用`ClickElem`关键字。最后等待页面出现“最近基本信息”文案，使用`WaitText`关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n用户细查输入uuid并查询\n    [Arguments]  ${uuid}\n    \n    # 在包含arco-input arco-input-size-large的元素中输入uuid\n    FillArea  div[class*=\"arco-input arco-input-size-large\"]  ${uuid}\n    \n    # 点击包含arco-icon arco-icon-search的元素\n    ClickElem  div[class*=\"arco-icon arco-icon-search\"]\n    \n    # 等待页面出现文案“最近基本信息”\n    WaitText  最近基本信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“关闭浏览器”，作用是关闭所有浏览器",
        "output": "<thought>\n解决这个问题的思路是使用RobotFramework的\"CloseBrowser\"关键字。在这里，我们不需要指定任何参数，因为我们想关闭所有的浏览器窗口。我们只需要在定义的新的关键字中调用这个已有的关键字即可。\n</thought>\n\n<code_block>\n关闭浏览器\n    CloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面元素 ${elem} 的位置信息",
        "output": "<thought>\n为了获取元素的位置信息，我们需要使用PrintElemRect关键字，这个关键字能够打印出元素的空间尺寸/位置等信息。在这里，我们所需要的只是位置信息，所以我们只关注位置相关的输出。\n</thought>\n\n<code_block>\n# 使用PrintElemRect来获取元素的位置信息\nPrintElemRect | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动 span 文本匹配 ‘自定义’ 或 ‘自定义时间’ 或 ‘自定义日期’ 的元素",
        "output": "<thought>\n首先使用FindByText查找文本为“自定义”、“自定义时间”或“自定义日期”的元素。然后使用MoToElem将鼠标移动到找到的元素上。\n</thought>\n\n<code_block>\n# 查找文本为“自定义”、“自定义时间”或“自定义日期”的元素\n${elem}  FindByText | 自定义 | 自定义时间 | 自定义日期\n\n# 将鼠标移动到找到的元素上\nMoToElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印当前页面的url，获取页面中 昨日有流水新主播成材率 指标的值，去掉%并转换成数字，判断是否为0\n\n提示：指标可以理解为一个有名称的页面字段",
        "output": "<thought>\n我们需要完成以下步骤：\n1. 打印当前页面的URL。\n2. 获取字段“昨日有流水新主播成材率”的值。\n3. 去掉百分号并转换成数字。\n4. 判断转换后的数字是否为0。\n\n使用的关键字如下：\n- GetCurrentUrl：用于获取并打印当前页面的URL。\n- GetFieldVal：用于获取字段值。\n- Evaluate：用于去掉百分号并转换成数字。\n- IF结构：用于判断转换后的数字是否为0。\n</thought>\n\n<code_block>\n# 获取并打印当前页面的URL\n${url}=  GetCurrentUrl\nLog  当前页面的URL是：${url}\n\n# 获取“昨日有流水新主播成材率”字段的值\n${val}  GetFieldVal  昨日有流水新主播成材率\n\n# 去掉百分号并转换成数字\n${num}  Evaluate  ${val}.rstrip('%')\n\n# 判断数字是否为0\nIF  ${num} == 0\n    Log  昨日有流水新主播成材率为0\nELSE\n    Log  昨日有流水新主播成材率不为0，值为：${num}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "登陆sso这账户，在@bytedance.com前输入yangjinqin.68",
        "output": "<thought>\n在此场景中，我们需要在一个可能的输入框中填入指定的用户名\"yangjinqin.68\"，并确保它出现在\"@bytedance.com\"之前。假设\"@bytedance.com\"是一个文本元素，我们可以使用FindElemToTheDirectionOf查找该元素左侧的输入框，然后使用FillArea填入所需的用户名。\n</thought>\n\n<code_block>\n# 查找@bytedance.com左方的输入框\n${input_field}  FindElemToTheDirectionOf | @bytedance.com | left | input\n\n# 在找到的输入框中输入yangjinqin.68\nFillArea | ${input_field} | yangjinqin.68\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果urls长度大于0 打印urls变量到日志 并且将状态置为失败",
        "output": "<thought>\n我们需要检查urls列表的长度是否大于0，如果条件为真，则需要打印urls变量到日志中，并将测试状态设置为失败。可以使用RF的IF/ELSE语法来实现条件判断，使用Log关键字打印日志，并使用Fail关键字将状态置为失败。\n</thought>\n\n<code_block>\n# 检查urls长度是否大于0\nIF  len($urls) > 0\n    # 打印urls变量到日志\n    Log  ${urls}\n    # 将状态置为失败\n    Fail  \"URLs list is not empty\"\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取未来4小时毫秒时间戳",
        "output": "<thought>\n此任务需要获取系统当前的时间（即现在）然后加上4小时的毫秒数，最后得到的结果即是未来四小时的毫秒时间戳。这通常需要调用Python的内置库如 `time` 来获取当前时间。\n\nRobotFramework 的 `Evaluate` 关键字可以执行Python代码，因此我们可以使用它来完成此操作。\n\n注意，一小时的毫秒数是 `3600*1000` 毫秒，所以四小时的毫秒数是 `4*3600*1000` 。\n\n</thought>\n\n<code_block>\n# 获取当前的毫秒时间戳\n${current_milli_time}=  Evaluate  int(time.time()*1000)  modules=time\n\n# 计算四小时后的毫秒时间戳\n${future_milli_time}=  Evaluate  ${current_milli_time}+4*3600*1000\n\n# 打印出未来四小时的毫秒时间戳\nLog  ${future_milli_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 合同编号：合同组-AUTO个数，如果大于0个，点击第一个",
        "output": "<thought>\n首先，我们需要获取“合同编号：合同组-AUTO”出现的个数。为此，可以使用`GetElemCount`关键字来查找包含该文本的元素个数。如果个数大于0，则需要点击第一个这样的元素。我们可以使用`Click`关键字来实现这一操作。\n</thought>\n\n<code_block>\n# 获取包含\"合同编号：合同组-AUTO\"的元素个数\n${cnt}  GetElemCount  :contains(\"合同编号：合同组-AUTO\")\n\n# 如果个数大于0，就点击第一个\nIF  ${cnt} > 0\n    Click  合同编号：合同组-AUTO  idx=0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到id包含summon的iframe",
        "output": "<thought>\n为了切换到id包含summon的iframe，我将使用ToFrame关键字，并创建一个jquery选择器来选择具有包含特定id的iframe元素。由于选择器需要基于id属性选择iframe，因此可以使用属性选择器语法。\n</thought>\n\n<code_block>\n# 切换到id包含summon的iframe\nToFrame | iframe[id*=summon]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “进入SladarWeb页面” 的关键字，接受 product_name_id 参数，操作逻辑为：\n1. 等页面加载完成后点击 Web，然后切换到新窗口\n2. 在输入产品名称中输入 product_name_id 并回车\n3. 点击 product_name_id，然后切换到新窗口，并等页面加载好",
        "output": "<thought>\n首先，使用'WaitLoading'等待页面加载完成，然后点击'Web'。然后，使用'ToNewWindow'切换到新打开的窗口。\n其次，在'产品名称'字段中输入参数 'product_name_id' 并回车，这可以通过'SetField'关键字实现。\n接着，点击与 'product_name_id' 同名的链接，可以用'Click'关键字实现。\n最后，切换到新打开的窗口并等待页面加载完成。这个步骤中分别使用了'ToNewWindow'和'WaitLoading'关键字。\n</thought>\n\n<code_block>\n进入SladarWeb页面\n    [Arguments]  ${product_name_id}\n    WaitLoading\n    Click  |  Web\n    ToNewWindow\n    SetField  |  输入产品名称  |  ${product_name_id}  |  enter=True\n    Click  |  ${product_name_id}\n    ToNewWindow\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 算数运算：1+1。提示可以用 Evaluate 调用 python",
        "output": "<thought>\n 为了执行算数运算1+1，可以使用RobotFramework的Evaluate关键字来调用Python代码进行计算。\n </thought>\n \n <code_block>\n # 使用 Evaluate 进行算数运算 1+1\n ${result}  Evaluate | 1 + 1\n Log | ${result}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验ITxxxx的表格行中包含：闲置、已入库",
        "output": "<thought>\n需要在表格中查找ITxxxx所在的行，然后校验该行是否包含“闲置”和“已入库”这两个文本。可以使用关键字CheckRowHas来实现。\n</thought>\n\n<code_block>\n# 校验ITxxxx所在的行中包含“闲置”和“已入库”\nCheckRowHas | ITxxxx | 闲置 | 已入库\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 文本为 休闲游戏基础分析 上，然后点击 ‘介绍’",
        "output": "<thought>\n首先需要使用`MoTo`关键字将鼠标移动到文本为“休闲游戏基础分析”的位置。接着使用`Click`关键字点击“介绍”文本。\n</thought>\n\n<code_block>\n# 移动到文本'休闲游戏基础分析'\nMoTo | 休闲游戏基础分析\n\n# 点击文本'介绍'\nClick | 介绍\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置classname 值为arco-slider-input下的输入框的值为2",
        "output": "<thought>\n解决问题思路：首先需要查找classname为arco-slider-input下的input/textarea元素，然后将其值设置为2。可以使用FillArea关键字来实现这个操作。\n</thought>\n\n<code_block>\n# 设置classname为arco-slider-input下的input/textarea的值为2\nFillArea | [class=arco-slider-input] input, [class=arco-slider-input] textarea | 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证表格第一行的“用户名”=${creator_name}，“已标注数量”=3，“标注量占比”=100%，“进入质检数量”=3",
        "output": "<thought>\n1. 首先需要验证表格第一行的各个单元格内容是否符合预期\n2. 对于\"用户名\"列，需要检查是否等于变量${creator_name}\n3. 对于\"已标注数量\"、\"标注量占比\"、\"进入质检数量\"列，需要检查是否分别等于3、100%、3\n4. 可以使用CheckCellHas关键字来验证每个单元格的内容\n5. 由于是验证第一行，row_name_or_id参数使用1\n6. 列名直接使用中文列名作为参数\n</thought>\n\n<code_block>\n# 验证第一行用户名列等于${creator_name}\nCheckCellHas | 1 | 用户名 | ${creator_name}\n\n# 验证第一行已标注数量列等于3\nCheckCellHas | 1 | 已标注数量 | 3\n\n# 验证第一行标注量占比列等于100%\nCheckCellHas | 1 | 标注量占比 | 100%\n\n# 验证第一行进质检数量列等于3\nCheckCellHas | 1 | 进入质检数量 | 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面上应该有这些文案：规格  全端口模式  加速器费用",
        "output": "<thought>\n根据场景描述，我们需要在页面上检查是否同时包含多个文本内容：“规格”、“全端口模式”和“加速器费用”。可以使用关键字 `CheckHasText` 来实现这一功能，因为它支持在页面中查找多个文本内容。\n</thought>\n\n<code_block>\n# 校验页面同时包含文本 \"规格\"、\"全端口模式\" 和 \"加速器费用\"\nCheckHasText | 规格 | 全端口模式 | 加速器费用\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断变量 ID 是否在变量 MAIN_PAGE 中，如果不在其中，就使用正则匹配，找出变量 MAIN_PAGE 中的 ‘/数字/’ 部分，然后去掉其前后的 ‘/’，最后把它赋值给全局变量 ID",
        "output": "<thought>\n首先，我们需要判断变量ID是否存在于MAIN_PAGE中。使用Evaluate关键字可以实现这一点。如果不在，我们将使用正则表达式查找MAIN_PAGE中的'/数字/'，去除前后的'/'，并将其赋值给全局变量ID。\n</thought>\n\n<code_block>\n# 判断ID是否在MAIN_PAGE中\n${id_in_main_page}  Evaluate  \"${ID}\" in \"${MAIN_PAGE}\"\n\n# 如果ID不在MAIN_PAGE中\nIF  not ${id_in_main_page}\n    # 使用正则表达式在MAIN_PAGE中查找'/数字/'\n    ${matched}  Evaluate  re.search(r'/(\\\\d+)/', '${MAIN_PAGE}')\n    \n    # 如果找到了匹配项\n    IF  ${matched} is not None\n        # 将匹配数字赋值给全局变量ID\n        Set Global Variable  {ID}  ${matched.group(1)}\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向第二个编辑器中输入：select * from student where name = '张三'",
        "output": "<thought>\n要解决这个问题，我需要使用FillEditor关键字。这个关键字能够向编辑器中输入文本，参数idx表示页面上第几个编辑器（0:第一个，-1:最后一个）。\n</thought>\n\n<code_block>\n# 向第二个编辑器中输入SQL查询语句\nFillEditor | select * from student where name = '张三' | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 class 为TagListInfo__header 中的文案，判断是否包含 计算完成，如不包含 等待20秒后 刷新浏览器页面 后重复上面的判断规则 最多重复5次，如包含 结束",
        "output": "# 定义变量\n${tagListInfo_header}    Set Variable    div[class=TagListInfo__header]\n${max_retry}    Set Variable    5\n${retry_count}    Set Variable    0\n\n# 使用FOR循环进行最多5次的重复判断\nFOR    ${retry_count}    IN RANGE    ${max_retry}\n    # 获取 class 为TagListInfo__header 中的文案\n    ${elem}  FindElem  ${tagListInfo_header}\n    ${text}  Get Text  ${elem}\n    # 判断文案是否包含 计算完成\n    ${contains}  Run Keyword And Return Status  Should Contain  ${text}  计算完成\n    IF    ${contains}\n        # 如果包含 计算完成，结束\n        Exit For Loop\n    ELSE\n        # 如果不包含 计算完成，等待20秒后 刷新浏览器页面\n        Sleep  20s\n        RefreshPage\n    END\nEND"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "退出iframe",
        "output": "<thought>\n退出iframe时，应使用提供的`ExitFrame`关键字。这个操作不需要任何参数或额外处理，只需单独调用该关键字即可完成对iframe的退出。\n</thought>\n\n<code_block>\n# 退出当前嵌套的iframe\nExitFrame\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次对规则条件右侧输入项填充uid_string、等于、test",
        "output": "<thought>\n任务是依次向规则条件右侧的输入项填充指定字符串。这意味着需要找到合适的控件来输入这些值。由于提示建议使用SetField关键字，因此应确定输入项的字段名称。假设这个输入项与某个特定字段名称相关联，例如\"规则条件\"。因此，可以使用SetField关键字来依次填充uid_string、等于、test。\n</thought>\n\n<code_block>\n# 填充规则条件右侧的输入项\nSetField | 规则条件 | uid_string | = | test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标悬浮到user_id，如果出现“已添加该属性”，就点击base_id,如果不出现“已添加该属性”，就点击user_id",
        "output": "<thought>\n首先鼠标悬浮到\"user_id\"，然后判断是否出现\"已添加该属性\"，如果出现则点击\"base_id\"，否则点击\"user_id\"。\n</thought>\n\n<code_block>\n# 鼠标悬浮到'user_id'\nMoTo | user_id\n\n# 判断是否出现\"已添加该属性\"\n${exist}  IsAnyTextExisting | 已添加该属性\n\n# 如果出现\"已添加该属性\"，点击'base_id'；否则点击'user_id'\nIF  $exist\n    Click | base_id\nELSE\n    Click | user_id\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“检查动态授权自定义展示”的关键字，作用是先点击动态值，然后将鼠标切换到新窗口，然后将鼠标向下滚动2 次",
        "output": "<thought>\n要实现“检查动态授权自定义展示”关键字，我需要执行以下步骤：\n1. 点击“动态值”文本。\n2. 切换到新窗口。\n3. 将页面向下滚动2次。\n\n根据这些步骤，应该选用以下关键字：\n1. `Click` - 点击“动态值”文本。\n2. `ToNewWindow` - 切换到新窗口。\n3. `PageDown` - 页面向下滚动2次。\n\n最终组合成一个关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n检查动态授权自定义展示\n    # 点击动态值\n    Click    动态值\n\n    # 切换到新窗口\n    ToNewWindow\n\n    # 页面向下滚动2次\n    PageDown    2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入：manta_las_default",
        "output": "<thought>\n在当前光标激活处输入：manta_las_default\n</thought>\n\n<code_block>\n# 输入 manta_las_default\nSendText | manta_las_default\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置API显示名为：‘${apiName}的显示名’, API描述为：${apiName}的描述, API分组为：测试1",
        "output": "<thought>\n设置API显示名、API描述和API分组需要设置对应的字段，可以使用BatchSetFields关键字一次性设置多个字段。\n</thought>\n\n<code_block>\n# 设置API显示名、API描述和API分组\nBatchSetFields | API显示名=${apiName}的显示名 | API描述=${apiName}的描述 | API分组=测试1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击任务名称为${task_name}这一行，'操作' 列中的第三个icon",
        "output": "<thought>\n要解决这个问题，我们需要选择合适的关键字来操作特定的表格单元格。我们可以使用`ClickIconOfCell`关键字，它允许我们指定具体的行和列，并点击该单元格中的某个图标。首先，我们需要选择任务名称所在的行，然后在'操作'列中点击第三个icon。因为任务名称是一个动态的输入变量，我们将其作为`row_name_or_id`参数。接下来，我们确定'操作'列为需要点击的列，并使用`idx=2`表示点击第三个icon（因为`idx`是0-based）。\n</thought>\n\n<code_block>\n# 点击任务名称为${task_name}所在行的'操作'列中的第三个icon\nClickIconOfCell | ${task_name} | 操作 | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面最上层的确定按钮",
        "output": "<thought>\n要解决这个问题，我们首先需要识别最上层的\"确定\"按钮。我们可以通过查找所有包含\"确定\"文本的元素，然后选择最后一个。最后一个元素通常代表最上层的元素，因为它最后被加载到页面上。对此，我们可以使用 \"${elem}  FindByText | 确定 | idx=-1\" 关键字，idx=-1 表示选择最后一个元素。然后，我们可以使用 \"ClickElem | ${elem}\" 关键字来点击这个元素。\n</thought>\n\n<code_block>\n# 查找最上层的\"确定\"按钮\n${elem}  FindByText | 确定 | idx=-1\n\n# 点击这个\"确定\"按钮\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class包含ab-optimization-plan__pages-create-components-forms-measure-metric-select__major的元素输入default>any_event uv/au，显著上涨，10%",
        "output": "<thought>\n首先，分析目标是向一个特定class的元素输入一系列值。可以使用FillArea关键字，因为它可以针对jquery选择器选择的元素进行输入操作。class名很长且复杂，因此直接作为选择器使用。需要依次输入的值包括“default>any_event uv/au”、“显著上涨”和“10%”，这些值将作为参数传递给FillArea关键字。\n</thought>\n\n<code_block>\n# 向具有特定class的元素输入一系列值\nFillArea | [class*=ab-optimization-plan__pages-create-components-forms-measure-metric-select__major] | default>any_event uv/au | 显著上涨 | 10%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加条件后选择 user_type这个选项，然后获取所有 class 包含 a ，但不包含 b 的元素，逐个点击它们",
        "output": "<thought>\n首先，我们需要点击“添加条件”按钮，然后选择“user_type”选项。接下来，我们需要获取所有 `class` 包含 `a` 但不包含 `b` 的元素的数量，并逐个点击这些元素。为了实现这个流程，我们将使用以下关键字：\n1. 使用 `Click` 关键字点击“添加条件”。\n2. 使用 `SelectOption` 关键字选择 `user_type`。\n3. 使用 `GetElemCount` 获取符合选择器 `[class*='a']:not([class*='b'])` 的元素数量。\n4. 用一个循环逐个点击这些元素，循环中使用 `ClickElem`。\n</thought>\n\n<code_block>\n# 点击添加条件\nClick | 添加条件\n\n# 选择 user_type 选项\nSelectOption | user_type\n\n# 获取所有 class 包含 a 但不包含 b 的元素数量\n${count}  GetElemCount | [class*='a']:not([class*='b'])\n\n# 循环点击每个元素\nFOR  ${index}  IN RANGE  0  ${count}\n    ClickElem | [class*='a']:not([class*='b']):eq(${index})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待3s, 然后校验页面截图中存在“制作视频创建成功”",
        "output": "<thought>\n首先，应该使用`Sleep`关键字等待3秒。接着，通过`GetPageScreenshotText`提取截图中的文本，并使用`Should Contain`关键字验证截图文本中包含“制作视频创建成功”。\n</thought>\n\n<code_block>\n# 等待3秒\nSleep | 3s\n\n# 获取截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验截图中包含“制作视频创建成功”\nShould Contain | ${txt} | 制作视频创建成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待界面7秒，点击“提交”按钮，点击弹窗中“确定”按钮，校验 操作下方存在删除小图标，然后点击 操作下方的删除小图标，校验页面是存在向导式",
        "output": "<thought>\n首先，我们需要在界面上等待7秒，然后点击“提交”按钮。接下来，我们需要在弹窗中点击“确定”按钮。此后，我们要校验“操作”文本下方存在“删除”这个icon。找到并点击它。最终，我们要校验页面上是否存在“向导式”文本。\n</thought>\n\n<code_block>\n# 等待界面7秒\nSleep | 7s\n\n# 点击“提交”按钮\nClick | 提交\n\n# 点击弹窗中“确定”按钮\nClick | 确定 | base=POPUP\n\n# 校验“操作”下方存在“删除”icon\nCheckHasIconToTheDirectionOf | 操作 | bottom | delete\n\n# 点击“操作”下方的“删除”icon\nClickIconToTheDirectionOf | 操作 | bottom | delete\n\n# 校验页面存在“向导式”\nCheckHasText | 向导式\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 请输入邮箱前缀或邮箱地址 并填写 yangjinqin.68 后再点击下一步，点击【加速器ID】右侧的全部加速器，在加速结束日期中输入 12 天后的日期：年/月/日 形式",
        "output": "<thought>\n首先，我们需要点击 \"请输入邮箱前缀或邮箱地址\" 文本，然后使用 SetField 或 SendText 来填写邮箱前缀 \"yangjinqin.68\"。接下来，点击 \"下一步\" 文本。之后需要点击 \"[加速器ID]右侧的全部加速器\"，这可以通过 ClickTextToTheDirectionOf 来实现，在字段 \"加速结束日期\" 中输入 12 天后的日期，我们可以使用 RF 标准库中的 Add Time To Date 得到未来的日期，并格式化为 \"年/月/日\" 的形式，最后使用 SetField 填入日期。\n</thought>\n\n<code_block>\n# 点击 \"请输入邮箱前缀或邮箱地址\"，输入邮箱前缀 \"yangjinqin.68\"\nClick | 请输入邮箱前缀或邮箱地址\nSendText | yangjinqin.68\n\n# 点击 \"下一步\"\nClick | 下一步\n\n# 点击 \"[加速器ID]右侧的全部加速器\"\nClickTextToTheDirectionOf | 加速器ID | right | 全部加速器\n\n# 计算 12 天后的日期并格式化为 \"年/月/日\"\n${current_date}    Get Current Date    result_format=%Y/%m/%d\n${future_date}     Add Time To Date    ${current_date}    12d    result_format=%Y/%m/%d\n\n# 在 \"加速结束日期\" 中输入计算得到的日期\nSetField | 加速结束日期 | ${future_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断在线下扫码下拉中，存在三个菜单：补贴活动、物料下载、扫码数据",
        "output": "<thought>\n1. 首先需要点击\"线下扫码\"右侧的选择控件(class*=select)来展开下拉菜单\n2. 展开的下拉菜单是一个弹窗，所以需要使用base=POPUP参数来操作弹窗中的元素\n3. 需要验证弹窗中同时存在\"补贴活动\"、\"物料下载\"、\"扫码数据\"三个文本\n4. 可以使用CheckHasText关键字来验证多个文本同时存在，并指定base=POPUP来限定在弹窗中检查\n5. 最后可能需要点击空白处关闭弹窗\n</thought>\n\n<code_block>\n# 点击线下扫码右侧的选择控件\nClickElemToTheDirectionOf | 线下扫码 | right | [class*=select]\n\n# 校验弹窗中存在三个菜单文本\nCheckHasText | 补贴活动 | 物料下载 | 扫码数据 | base=POPUP\n\n# 点击空白处关闭弹窗\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 验证 CAB评估 文案出现",
        "output": "<thought>\n 要验证页面上是否出现“CAB评估”文案，可以使用`CheckHasText`关键字来校验页面包含这个文本。\n </thought>\n \n <code_block>\n # 校验页面出现CAB评估文案\n CheckHasText | CAB评估\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测列表第一行第一个数据等于 ${URL}",
        "output": "<thought>\n根据任务要求，需要检测列表第一行第一个数据是否等于变量`${URL}`。可以使用`GetCellValue`关键字获取第一行第一列的值，然后使用`Should Be Equal As Strings`关键字比较获取的值与`${URL}`是否相等。\n</thought>\n\n<code_block>\n# 获取列表第一行第一列的值\n${cell_value}  GetCellValue  1  1\n\n# 校验获取的值是否等于变量${URL}\nShould Be Equal As Strings  ${cell_value}  ${URL}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 用户名 中输入： zhangxiaoming",
        "output": "<thought>\n该任务需要向名为“用户名”的字段输入“zhangxiaoming”。可以使用关键字`SetField`来完成这个操作，因为`SetField`专门用于向页面字段中填写值。\n</thought>\n\n<code_block>\n# 向\"用户名\"字段输入\"zhangxiaoming\"\nSetField | 用户名 | zhangxiaoming\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击条件1下的请选择",
        "output": "<thought>\n 通过描述，可以使用`ClickTextToTheDirectionOf`关键字来实现。首先找到\"条件1\"文本，然后在其下方点击\"请选择\"。\n </thought>\n \n <code_block>\n # 点击条件1下方的请选择\n ClickTextToTheDirectionOf | 条件1 | bottom | 请选择\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面中的 TrafficRoute",
        "output": "<thought>\n 在这个问题中，我们需要点击页面上的一个元素，其文本是 \"TrafficRoute\"。\n 这个任务可以通过使用关键字 \"Click\" 完成，需要指定的参数是要点击的文本 (\"TrafficRoute\")。\n 因为没有给出需要排除的文本，所以 \"exclude\" 参数可以留空。 \n 同样，因为 \"TrafficRoute\" 应该是在主页面上而不是在弹出窗口中，所以 \"base\" 参数也可以留空。\n </thought>\n \n <code_block>\n # 点击页面上的 \"TrafficRoute\"\n Click | TrafficRoute\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击屏幕左侧的，图片生成，界面等待5秒，点击数据源类型右侧的input",
        "output": "<thought>\n为了实现这个场景，我们需要依次进行以下步骤：\n1. 首先需要点击靠近屏幕左侧的“图片生成”按钮。可以通过使用`ClickTextToTheDirectionOf`关键字，以屏幕中心`SCREEN_CENTER`为基准，向左侧定位“图片生成”文本并点击。\n2. 接下来需要等待界面5秒，使用`Sleep`关键字实现。\n3. 最后，点击“数据源类型”文本右侧的input，使用`ClickElemToTheDirectionOf`关键字，定位“数据源类型”右方的input元素并点击。\n</thought>\n\n<code_block>\n# 点击屏幕左侧的图片生成\nClickTextToTheDirectionOf | SCREEN_CENTER | left | 图片生成\n\n# 界面等待5秒\nSleep | 5s\n\n# 点击数据源类型右侧的input\nClickElemToTheDirectionOf | 数据源类型 | right | input\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待文本item出现，45秒超时",
        "output": "<thought>\n这个场景需要在页面上等待文本\"item\"出现，并且设置超时时间为45秒。最适合的关键字是WaitText，它能在指定时间内检测文本是否存在。因此使用WaitText | item | timeout=45即可解决问题。\n</thought>\n\n<code_block>\n# 等待页面包含文本item，45秒超时\nWaitText | item | timeout=45\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验text1等于1020001",
        "output": "<thought>\n首先需要判断如何获取变量`text1`，假设`text1`已经是一个变量。然后使用Robot Framework的`Should Be Equal As Strings`关键字来比较`text1`和目标字符串`1020001`。\n</thought>\n\n<code_block>\n# 校验text1字符串表示等于1020001\nShould Be Equal As Strings  ${text1}  1020001\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断 文本 '数据处理查询' 下边有 TAB切换页 'API'   '平台'    '大规模数据' ",
        "output": "<thought>\n需要使用CheckHasTextToTheDirectionOf关键字来检查'数据处理查询'下方是否存在TAB切换页 'API' '平台' '大规模数据'。因为这个关键字会在找不到目标文本时抛出异常，所以可以直接用它来进行校验。如果校验失败，则会抛出异常。\n</thought>\n\n<code_block>\n# 判断 '数据处理查询' 下方有 TAB切换页 'API' '平台' '大规模数据'\nCheckHasTextToTheDirectionOf | 数据处理查询 | bottom | API\nCheckHasTextToTheDirectionOf | 数据处理查询 | bottom | 平台\nCheckHasTextToTheDirectionOf | 数据处理查询 | bottom | 大规模数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取span的class包含 PeriodInputValue__value 的text",
        "output": "<thought>\n要获取span的class包含PeriodInputValue__value 的text，我们可以使用FindElem和GetElemText这两个关键字。首先，我们使用FindElem来查找此类span元素，然后使用GetElemText来获取其文本。\n</thought>\n\n<code_block>\n# 查找class包含PeriodInputValue__value的span元素\n${elem}  FindElem | span[class*='PeriodInputValue__value']\n\n# 获取元素${elem}的文本\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为‘设置HSTS’的关键字，接受参数：状态，子域名，过期时间，逻辑如下：\n1. 将 HSTS 设置 的状态设置为：状态\n2. 将 HSTS 设置 下面的 子域名 设置为：子域名\n3. 将 HSTS 设置 下面的 过期时间 设置为：过期时间",
        "output": "<thought>\n这个任务可以通过使用BatchSetFields关键字来完成，通过设置near参数为HSTS设置，同时设置状态、子域名和过期时间。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置HSTS\n    [Arguments]  ${状态}  ${子域名}  ${过期时间}\n    BatchSetFields  状态=${状态}  子域名=${子域名}  过期时间=${过期时间}  near=HSTS 设置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击 商品管理、餐饮商品管理，创建值班号会话，确认界面中存在‘进行中会话’",
        "output": "<thought>\n要实现这个场景，可以依次使用ClickTextOneByOne来点击“商品管理”和“餐饮商品管理”，接着创建值班号会话，最后使用CheckHasText检查页面中是否存在“进行中会话”。具体步骤如下：\n1. 使用ClickTextOneByOne点击“商品管理”和“餐饮商品管理”。\n2. 根据提示，应该有一个步骤是“创建值班号会话”。假设通过一个按钮或功能来触发，可以设定为点击某个特定元素。\n3. 使用CheckHasText来确认界面中存在‘进行中会话’。\n</thought>\n\n<code_block>\n# 依次点击 商品管理、餐饮商品管理\nClickTextOneByOne | 商品管理 | 餐饮商品管理\n\n# 创建值班号会话 (假设是通过点击某个按钮实现)\nClickElem | button:contains(创建值班号会话)\n\n# 确认界面中存在进行中会话\nCheckHasText | 进行中会话\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "${url} 应该包含 /test 或 /Test",
        "output": "<thought>\n为了判断${url}是否包含/test或/Test，我将使用RF的Should Contain Any关键字来检查是否包含这两个字符串中的任一个。\n</thought>\n\n<code_block>\n# 检查${url}是否包含/test或/Test\nShould Contain Any  ${url}  /test  /Test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置熔断配置、策略上线流程、“规则组创建、引用和编排”，分别为 关闭、“预上线+正式上线”、“无需审批”",
        "output": "<thought>\n依次设置熔断配置、策略上线流程、规则组创建、引用和编排对应的值\n</thought>\n\n<code_block>\n# 设置熔断配置为关闭\nSetField | 熔断配置 | 关闭\n\n# 设置策略上线流程为预上线+正式上线\nSetField | 策略上线流程 | 预上线+正式上线\n\n# 设置规则组创建、引用和编排为无需审批\nSetField | 规则组创建、引用和编排 | 无需审批\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "浏览器访问https://awacs-boe.byted.org/ruler/meta/approval_matrix?search=%7B%22page%22%3A1%2C%22pageSize%22%3A20%7D\n点击  创建审批规则\n设置机型  尹鹏程-测试\n设置CPU 型号  intel\n设置是否有本地盘  否\n设置产品审批人  yinpengcheng.123@bytedance.com\n设置子产品审批人  yinpengcheng.123@bytedance.com\n设置研发审批人 yinpengcheng.123@bytedance.com\n设置运维审批人  yinpengcheng.123@bytedance.com\n点击弹框中的  确定",
        "output": "<thought>\n我们需要先打开特定的URL，然后点击“创建审批规则”按钮。接下来，我们将通过批量设置关键字设置各种审批人的信息。最后，确认设置通过点击弹窗中的“确定”按钮。\n</thought>\n\n<code_block>\n# 访问特定URL\nOpenUrl | https://awacs-boe.byted.org/ruler/meta/approval_matrix?search=%7B%22page%22%3A1%2C%22pageSize%22%3A20%7D\n\n# 点击“创建审批规则”\nClick | 创建审批规则\n\n# 批量设置审批规则信息\nBatchSetFields  机型=尹鹏程-测试  CPU型号=intel  是否有本地盘=否  产品审批人=yinpengcheng.123@bytedance.com  子产品审批人=yinpengcheng.123@bytedance.com  研发审批人=yinpengcheng.123@bytedance.com  运维审批人=yinpengcheng.123@bytedance.com\n\n# 点击弹框中的“确定”\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击登录，等待2s后，如果页面上还存在登录，就再点击一次登录，最后等待‘密码登录’ 文案消失",
        "output": "<thought>\n首先点击登录按钮，接着等待2秒检查页面上是否还存在“登录”这个文本。如果存在，则再次点击登录按钮，最后等待“密码登录”文案消失。\n</thought>\n\n<code_block>\n# 点击登录按钮\nClick | 登录\n\n# 等待2秒\nSleep | 2s\n\n# 判断页面上是否还存在“登录”\n${exist}  IsAnyTextExisting | 登录\n\nIF  ${exist}\n    # 如果存在，再次点击登录按钮\n    Click | 登录\nEND\n\n# 等待“密码登录”文案消失\nWaitTextDisappear | 密码登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 '跳过文字能力弹窗' 的关键字, 其作用是读取文件 etta.json 中的内容，把其中的每个 key,value 都写入 localstorage 中",
        "output": "<thought>\n1. 首先需要读取 etta.json 文件内容，可以使用 Evaluate 执行 Python 代码来读取文件\n2. 然后将 JSON 内容解析为字典对象，同样可以使用 Evaluate\n3. 遍历字典中的每个键值对，使用 LocalStorageSetItem 关键字将它们写入 localStorage\n4. 整个过程需要封装成一个可重用的关键字 '跳过文字能力弹窗'\n</thought>\n\n<code_block>\n*** Keywords ***\n跳过文字能力弹窗\n    # 读取 JSON 文件内容\n    ${json_content}  Evaluate  open('etta.json', 'r', encoding='utf-8').read()\n    # 解析 JSON 为字典\n    ${json_dict}  Evaluate  json.loads($json_content)  json\n    # 遍历字典并写入 localStorage\n    FOR  ${key}  ${value}  IN  &{json_dict}\n        LocalStorageSetItem  ${key}  ${value}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印变量 order_id",
        "output": "<thought>\n使用 `Log` 关键字打印该变量。\n</thought>\n\n<code_block>\n# 打印变量 order_id\nLog  ${order_id}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向搜索账号ID中输入 2000001263， 然后点击查询",
        "output": "<thought>\n需要使用SetField关键字向搜索账号ID中输入2000001263，然后使用Click关键字点击查询按钮。\n</thought>\n\n<code_block>\n# 输入账号ID\nSetField | 搜索账号ID | 2000001263\n\n# 点击查询按钮\nClick | 查询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 解决并通知用户，等待直到 清除 文字出现",
        "output": "<thought>\n首先，这个场景要求点击一个名为“解决并通知用户”的按钮，然后等待页面上显示“清除”文本。我们可以使用Click关键字来完成点击操作，然后使用WaitText关键字来等待“清除”文本出现。\n</thought>\n\n<code_block>\n# 点击解决并通知用户按钮\nClick | 解决并通知用户\n\n# 等待清除文本出现\nWaitText | 清除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截图对比，相似度设置为 0.96",
        "output": "<thought>\n我们需要执行全屏截图并与基准图进行对比，指定相似度为0.96。可以使用`ImageDiff`关键字来完成此任务，sim参数设为0.96。\n</thought>\n\n<code_block>\n# 执行截图对比，相似度设置为0.96\nImageDiff | sim=0.96\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 新增，点击 class以 universal-card-button开头的 button，点击class以\"arco-select-suffix\"结尾的元素",
        "output": "<thought>\n要完成这个场景，我们需要依次点击三个元素。首先，点击文本为“新增”的元素。然后，我们需要点击一个 class 以 \"universal-card-button\" 开头的 button，这可以通过 jQuery 选择器来匹配。最后，点击 class 以 \"arco-select-suffix\" 结尾的元素，这也可以通过 jQuery 选择器来实现。可以利用 Click 和 ClickElem 关键字来执行这些操作。\n</thought>\n\n<code_block>\n# 点击文本为“新增”的按钮\nClick | 新增\n\n# 点击class以universal-card-button开头的button\nClickElem | button[class^='universal-card-button']\n\n# 点击class以arco-select-suffix结尾的元素\nClickElem | [class$='arco-select-suffix']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击Activate，检查页面包含：Next step，点击SLA for BytePlus CDN service，设置参数  input placeholder=\"请选择统计口径\" 为用户",
        "output": "<thought>\n首先，我们需要点击文本 \"Activate\"，这可以通过使用 Click 关键字来实现。接着，我们需要验证页面中是否包含 \"Next step\" 文本，这可以通过 CheckHasText 关键字完成。然后，我们点击文本 \"SLA for BytePlus CDN service\"，同样使用 Click 关键字。最后，我们设置名为 input 且具有 placeholder 属性 \"请选择统计口径\" 的输入框为 \"用户\"。这需要通过 SetField 或 FillArea 关键字实现，具体取决于页面元素的实现方式。\n</thought>\n\n<code_block>\n# 点击Activate\nClick | Activate\n\n# 检查页面包含：Next step\nCheckHasText | Next step\n\n# 点击SLA for BytePlus CDN service\nClick | SLA for BytePlus CDN service\n\n# 设置 input placeholder=\"请选择统计口径\" 为用户\nFillArea | input[placeholder='请选择统计口径'] | 用户\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击公会任务菜单，等页面出现任务管理，    顾客实际需支付 设置为 666，商品搭配设置为 园内套票UI自动化  全部可选  环球影城  1  份  800",
        "output": "<thought>\n首先，需要点击“公会任务”菜单项，可以使用`ClickMenu`关键字。接着，我们需要等待页面上出现“任务管理”文本，这可以通过`WaitText`关键字来实现。然后，需要设置参数，“顾客实际需支付”设置为666和“商品搭配设置”为“园内套票UI自动化 全部可选 环球影城 1 份 800”，这可以通过`SetField`关键字来实现。\n</thought>\n\n<code_block>\n# 点击公会任务菜单\nClickMenu | 公会任务\n\n# 等待页面出现任务管理\nWaitText | 任务管理\n\n# 设置字段\nSetField |  顾客实际需支付 | 666  \nSetField | 商品搭配设置 | 园内套票UI自动化 | 全部可选 | 环球影城 | 1 | 份 | 800\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面存在“批量主播拉新”或“规模素人孵化”，并且打印日志",
        "output": "<thought>\n为了检查页面中是否存在“批量主播拉新”或“规模素人孵化”这两个文本中的至少一个，我们可以使用关键字`IsAnyTextExisting`。该关键字会返回一个布尔值，指示文本是否存在。然后，我们可以使用RF的内置IF语句来判断该布尔值并打印相应的日志。\n</thought>\n\n<code_block>\n# 判断页面是否存在“批量主播拉新”或“规模素人孵化”\n${exist}  IsAnyTextExisting | 批量主播拉新 | 规模素人孵化\n\n# 如果存在，则打印日志\nIF  ${exist}\n    Log  页面存在批量主播拉新或规模素人孵化\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置标准字段下方搜索框为预算科目",
        "output": "<thought>\n需要将搜索框设置为“预算科目”，在标准字段下方定位搜索框，可以利用`FindElemToTheDirectionOf`来定位标准字段下方的搜索框，然后通过`FillArea`填入值。\n</thought>\n\n<code_block>\n# 查找标准字段下方的搜索框\n${search_box}  FindElemToTheDirectionOf | 标准字段 | bottom | input\n\n# 在搜索框中输入预算科目\nFillArea | ${search_box} | 预算科目\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在[placeholder:请选择]输入指标卡基础",
        "output": "<thought>\n要在指定的输入框中输入文本，需要使用`SetField`关键字。根据问题，需要在占位符为“请选择”的输入框中输入“指标卡基础”。通常RF中没有直接根据占位符选择元素的关键字，因此需要构造一个合适的选择器。假设可以通过基于占位符的选择器来定位该输入框。\n</thought>\n\n<code_block>\n# 输入指标卡基础到占位符为‘请选择’的输入框\nFillArea | input[placeholder='请选择'] | 指标卡基础\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格内容",
        "output": "<thought>\n获取表格内容涉及到获取表格的行数，然后逐行获取每行的值。我们可以依次使用GetRowCount和GetRowValues关键字来实现。\n</thought>\n\n<code_block>\n# 获取表格的行数\n${row_count}  GetRowCount\n\n# 初始化一个空列表来存储表格内容\n@{table_content}  Create List\n\n# 遍历表格的每一行，获取行值并添加到内容列表中\nFOR  ${i}  IN RANGE  1  ${row_count}\n    @{row_values}  GetRowValues  ${i}\n    Append To List  ${table_content}  ${row_values}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送删除键",
        "output": "<thought>\n为了在页面中发送删除键，可以使用SetField向特定字段发送特殊按键，或者使用SendText在光标激活位置发送删除键。如果没有明确字段或位置，SendText更适合。\n</thought>\n\n<code_block>\n# 在当前位置发送删除键\nSendText | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击【自动化测试专用job】，等待页面加载完成后，检测页面包含class=monaco-editor元素。",
        "output": "<thought>\n首先使用Click关键字点击文本【自动化测试专用job】，接着使用WaitLoading等待页面加载完成，最后使用WaitElem关键字检测页面是否包含class=monaco-editor的元素。\n</thought>\n\n<code_block>\n# 点击自动化测试专用job\nClick | 自动化测试专用job\n\n# 等待页面加载完成\nWaitLoading\n\n# 检测页面包含class=monaco-editor的元素\nWaitElem | [class=monaco-editor]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果弹窗中包含营收任务，则点击任务列表第一行中的开始执行",
        "output": "<thought>\n首先，通过IsAnyTextExisting关键字判断弹窗中是否包含“营收任务”文本。如果存在，则使用ClickTextOfRow关键字来点击任务列表第一行中的“开始执行”文本。\n</thought>\n\n<code_block>\n# 判断弹窗中是否存在文本 \"营收任务\"\n${exist}  IsAnyTextExisting | 营收任务 | base=POPUP\n\n# 如果存在 \"营收任务\"，则点击任务列表第一行中的 \"开始执行\"\nIF  $exist\n    ClickTextOfRow | 1 | 开始执行 | tbl=任务列表\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在类目升级提醒,则点击确认已知悉",
        "output": "<thought>\n首先，我需要判断页面上是否存在文本“类目升级提醒”。如果存在该文本，表明出现了提醒，这时需要点击“确认已知悉”按钮。使用IsAnyTextExisting关键字检查文本是否存在，然后根据检查结果使用IF语句来决定是否进行点击操作。\n</thought>\n\n<code_block>\n# 判断页面是否存在“类目升级提醒”文本\n${exist}  IsAnyTextExisting | 类目升级提醒\n\n# 如果存在“类目升级提醒”，则点击“确认已知悉”\nIF  ${exist}\n    Click  确认已知悉\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "关闭弹框",
        "output": "<thought>\n关闭弹框的要求是关闭页面上的弹窗/通知/问卷/新手引导等提示，可以直接使用CloseNotifications关键字来实现。\n</thought>\n\n<code_block>\n# 关闭页面上的弹窗/通知/问卷/新手引导等提示\nCloseNotifications\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class=oc-dropdown-wrapper select-container的位置",
        "output": "<thought>\n这个任务要求我们点击一个特定的元素，该元素的class为\"oc-dropdown-wrapper select-container\"。可以通过使用ClickElem关键字和jquery选择器来实现。选择器应写为\".oc-dropdown-wrapper.select-container\"，因为在jquery选择器中，如果要同时选择多个class属性，需要用点号连接。接着我们直接使用ClickElem关键字来点击这个元素。\n</thought>\n\n<code_block>\n# 点击class为\"oc-dropdown-wrapper select-container\"的元素\nClickElem | [class*=\"oc-dropdown-wrapper select-container\"]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（3，2）",
        "output": "<thought>\n在这个场景中，我们需要点击特定的表格单元格。给出的提示为“点击单元格（3，2）”，这意味着我们需要在一个表格中，点击位于第3行和第2列的单元格。可以使用`ClickTextOfCell`或`ClickElemOfCell`关键字来精确点击这个单元格。由于没有指定要点击的具体文本或元素，我们可以使用默认的通配符参数来点击该单元格中的任意文本或元素。选择这个方法是因为它能够直接定位目标单元格，满足场景要求。\n</thought>\n\n<code_block>\n# 点击第3行，第2列中的任意元素\nClickElemOfCell | 3 | 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入姓名张三，年龄18，将国籍设置为中国，确认页面包含王五或李四, 检查角色成员后面有 admin，设置保存至为：\"任务开发 > dora\"",
        "output": "<thought>\n首先，使用SetField关键字输入姓名和年龄。然后使用SetField将国籍设置为中国。接着，使用CheckHasAnyText验证页面是否包含“王五”或“李四”。随后，使用CheckFieldContains在角色成员后面检查是否包含“admin”。最后，使用SetField将保存至设置为“任务开发 > dora”。\n</thought>\n\n<code_block>\n# 输入姓名张三\nSetField | 姓名 | 张三\n\n# 输入年龄18\nSetField | 年龄 | 18\n\n# 设置国籍为中国\nSetField | 国籍 | 中国\n\n# 确认页面包含王五或李四\nCheckHasAnyText | 王五 | 李四\n\n# 检查角色成员后面有 admin\nCheckFieldContains | 角色成员 | admin\n\n# 设置保存至为：\"任务开发 > dora\"\nSetField | 保存至 | 任务开发 > dora\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果有弹窗，先点击右上角叉，不行的话，点击弹窗里的确认按钮",
        "output": "<thought>\n首先，我们需要判断页面上是否存在弹窗。假设弹窗的存在会影响页面其他元素的可操作性，因此可以通过检查特殊值POPUP来确认弹窗的存在。\n一旦确认存在弹窗，首先尝试点击弹窗的右上角关闭图标。如果关闭图标操作失败（假设这种情况下关闭图标可能不存在或不可见），则需要点击弹窗中的确认按钮。\n因此，使用CheckHasElem和ClickIcon以及Click关键字即可实现此逻辑。\n</thought>\n\n<code_block>\n# 判断弹窗是否存在\n${exist}  IsAnyElemExisting | POPUP\n\n# 如果弹窗存在，尝试点击右上角关闭图标\nIF  ${exist}\n    # 点击弹窗右上角的关闭图标\n    ClickIcon | close | base=POPUP\n\n    # 检查关闭图标是否未能关闭弹窗，再次确认弹窗是否存在\n    ${still_exist}  IsAnyElemExisting | POPUP\n\n    # 如果弹窗仍然存在，点击弹窗中的确认按钮\n    IF  ${still_exist}\n        Click | 确认 | base=POPUP\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "刷新页面",
        "output": "<thought>\n要实现页面刷新的自动化测试，可以直接使用提供的关键字`RefreshPage`。\n</thought>\n\n<code_block>\n# 刷新当前页面\nRefreshPage\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "资产信息 输入 IT92837927",
        "output": "<thought>\n这个问题相对简单，只需要在名为“资产信息”的字段中输入“IT92837927”即可。我们只需要使用SetField关键字。\n</thought>\n\n<code_block>\n# 在\"资产信息\"字段中输入\"IT92837927\"\nSetField | 资产信息 | IT92837927\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果不存在营销工具，点击营销推广",
        "output": "<thought>\n首先，我们需要检查页面上是否存在文本“营销工具”。如果该文本不存在，则需要点击“营销推广”。为此，我们可以使用IsAnyTextExisting来检查“营销工具”是否存在，并根据结果使用Click来点击“营销推广”。\n</thought>\n\n<code_block>\n# 检查页面上是否存在文本“营销工具”\n${exist}  IsAnyTextExisting | 营销工具\n\n# 如果不存在，则点击“营销推广”\nIF  not $exist\n    Click  营销推广\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击活动名称为my活动所对应的查看详情",
        "output": "<thought>\n首先，我们需要根据活动名称“my活动”定位到对应的表格行。接着，我们要在该行中寻找\"查看详情\"按钮或者链接进行点击。大多数情况下，“查看详情”在对应元素的右侧，因此我们可以使用ClickTextOfRow来点击表格行中对应的“查看详情”按钮。如果该元素不在表格中，我们需要尝试通过其他方法如ClickElem进行点击。因此，我们可以首先尝试表格行的选择，如果不成功则考虑使用邻接元素的方法。这样用户可以根据实际情况选择合适的解决方案。\n</thought>\n\n<code_block>\n# 点击活动名称为my活动的表格行中的查看详情\nClickTextOfRow | my活动 | 查看详情\n\n# 如果不是表格，点击邻近的查看详情\nClick | 查看详情 | near=my活动\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一条数据中的 新增实例",
        "output": "<thought>\n为了解决这个问题，我们可以使用ClickTextOfRow关键字来点击表格第一行中的“新增实例”文本。因为问题描述中指明是“第一条数据”，所以表格行号为1。需要确保“新增实例”在这一行中。\n</thought>\n\n<code_block>\n# 点击表格第一行中的新增实例\nClickTextOfRow | 1 | 新增实例\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获得一周前的日期，然后将此日期，填写到 “开始日期” 字段中",
        "output": "<thought>\n我们需要获取一周前的日期，这可以通过Python的datetime库来实现。然后将日期格式化为“2022-08-22”这样的格式，并填入“开始日期”字段中。我们可以使用`Evaluate`关键字来执行Python代码获取日期，然后使用`SetField`关键字填写到字段中。\n</thought>\n\n<code_block>\n# 获取一周前的日期\n${date_one_week_ago}   Evaluate  (datetime.datetime.now() - datetime.timedelta(weeks=1)).strftime('%Y-%m-%d')  modules=datetime\n\n# 将日期填写到“开始日期”字段中\nSetField  开始日期  ${date_one_week_ago}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开主页 MAIN_PAGE",
        "output": "<thought>\n为了实现这个测试场景，我们需要使用“OpenUrl”关键字。这个关键字可以接收一个URL作为参数，并会打开这个网页。\n我们需要把主页的URL存到一个变量中，我们可以命名为“MAIN_PAGE”，然后在OpenUrl关键字中引用这个变量。\n</thought>\n\n<code_block>\n# 打开主页\nOpenUrl | ${MAIN_PAGE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击业务BP负责人下方输入框，输入凤银洁，并点击下方搜索出来的信息",
        "output": "<thought>\n在这个场景中，我们需要对\"业务BP负责人\"文本右下方的input或textarea元素进行输入操作，然后对出现的结果进行点击操作。首先，我们使用`FindElemToTheDirectionOf`关键字查找\"业务BP负责人\"下方的输入区域，接着将文本输入到该元素中。最后，我们使用`ClickElemToTheDirectionOf`或`ClickTextToTheDirectionOf`关键字来点击搜索结果。假设搜索结果出现在下方。\n</thought>\n\n<code_block>\n# 定位并输入文本到业务BP负责人的输入框中\n${input_elem}  FindElemToTheDirectionOf | 业务BP负责人 | bottom | input,textarea\nFillArea | ${input_elem} | 凤银洁\n\n# 点击下方搜索结果\nClickDirection | ${input_elem} | bottom\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测页面是否有class为c-lib-guide-button inbl的页面元素，有就点击，无则跳过",
        "output": "<thought>\n首先，使用IsAnyElemExisting关键字判断是否存在class为c-lib-guide-button inbl的元素。如果存在，则使用ClickElem关键字进行点击操作。\n</thought>\n\n<code_block>\n# 判断是否存在class为c-lib-guide-button inbl的元素\n${exist}  IsAnyElemExisting  [class=c-lib-guide-button.inbl]\n\n# 如果存在，则点击该元素\nIF  ${exist}\n    ClickElem  [class=c-lib-guide-button.inbl]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在第（1+${i}）文本框输入A",
        "output": "<thought>\n这个场景需要在第（1+${i}）个input或textarea元素中输入A。我们可以使用FillArea关键字，并结合jquery选择器来定位第（1+${i}）个元素。在jquery选择器中，第（1+${i}）个元素可以表示为:eq(${i})。\n</thought>\n\n<code_block>\n# 在第（1+${i}）个input/textarea输入A\nFillArea | input:eq(${i}), textarea:eq(${i}) | A\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选 Countries & Regions复选框下拉框中的 Azerbaijan。提示：这里就是要设置 ‘Countries & Regions’ 为给定的选项：Azerbaijan",
        "output": "<thought>\n为了完成此任务，我需要选择一个复选框选项。首先需要找到`Countries & Regions`字段，然后设置其选项为`Azerbaijan`。这可以通过`SelectOptionForField`关键字来完成。\n</thought>\n\n<code_block>\n# 选择 Countries & Regions 中的 Azerbaijan\nSelectOptionForField | Countries & Regions | Azerbaijan\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在变量 SSO_URL2，就执行 “Ui Add Cookies To Site  ${SSO_URL2}  ${SSO_COOKIES2}”，然后访问 ${MAIN_PAGE}",
        "output": "<thought>\n首先，我需要检查变量 SSO_URL2 是否存在。根据检查结果，如果变量存在，则执行“Ui Add Cookies To Site ${SSO_URL2} ${SSO_COOKIES2}”。接下来，无论变量是否存在，都要访问 ${MAIN_PAGE}。\n</thought>\n\n<code_block>\n# 检查变量SSO_URL2是否存在\n${exist}  IsVarExisting  SSO_URL2\n\n# 如果SSO_URL2存在，执行添加Cookies\nIF  ${exist}\n    Ui Add Cookies To Site  ${SSO_URL2}  ${SSO_COOKIES2}\nEND\n\n# 访问首页\nOpenUrl  ${MAIN_PAGE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 “我的快捷入口” 下面的 “Finder全量” 设置为：线上",
        "output": "<thought>\n这个问题需要在“我的快捷入口” 下面的 “Finder全量” 设置为“线上”。因此，应该使用`SetField`关键字，利用`near`参数来定位“我的快捷入口”文本下的“Finder全量”字段，并设置其值。\n</thought>\n\n<code_block>\n# 在“我的快捷入口”下方设置“Finder全量”为“线上”\nSetField | Finder全量 | 线上 | near=我的快捷入口\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "‘操作系统’行的‘脱敏方式’列的值设置为‘不可过滤和分组’",
        "output": "<thought>\n首先，任务是将“操作系统”行的“脱敏方式”列的值设置为“不可过滤和分组”。根据关键字说明，使用`FillCell`关键字可以设置指定单元格的值。因此需要找出“操作系统”所在的行号和“脱敏方式”所在的列号，并调用`FillCell`进行设置。\n</thought>\n\n<code_block>\n# 将“操作系统”行的“脱敏方式”列的值设置为“不可过滤和分组”\nFillCell | 操作系统 | 脱敏方式 | 不可过滤和分组\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在查询就点击",
        "output": "<thought>\n首先使用IsAnyTextExisting关键词判断页面上是否存在\"查询\"这个文本，然后根据返回的结果，如果存在就使用Click关键词点击这个文本。\n</thought>\n\n<code_block>\n# 判断页面上是否存在查询\n${exist}  IsAnyTextExisting | 查询\n# 如果存在查询就点击\nIF  $exist\n    Click  查询\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取第一个档案名称字段的值",
        "output": "<thought>\n要获取第一个“档案名称”字段的值，我们可以使用`GetFieldVal`关键字，并传入字段名称“档案名称”来获取其值。\n</thought>\n\n<code_block>\n# 获取第一个档案名称字段的值\n${val}  GetFieldVal | 档案名称\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击文件预取下方的预热\n    验证跳转到新的页面，页面中包含提交预热任务",
        "output": "<thought>\n根据场景描述，首先需要点击“文件预取”下方的“预热”按钮。我们可以使用`ClickTextToTheDirectionOf`关键字来实现这一操作。接下来，需要验证是否跳转到了一个新的页面，并且页面中包含文本“提交预热任务”。为了验证页面的跳转，可以使用`ToNewWindow`来切换到新页面，然后使用`CheckHasText`关键字来检查页面中是否存在“提交预热任务”。\n</thought>\n\n<code_block>\n# 点击文件预取下方的预热\nClickTextToTheDirectionOf | 文件预取 | bottom | 预热\n\n# 切换到新页面\nToNewWindow\n\n# 校验页面包含提交预热任务\nCheckHasText | 提交预热任务\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“检查动态授权自定义展示”的关键字，接收参数property name，作用是先将鼠标向下滚动 2 次，然后点击动态值，然后点击placeholder为请选择属性的元素，并输入property name",
        "output": "<thought>\n首先，使用PageDown关键字将页面向下滚动2次。然后，使用Click关键字点击文本为“动态值”的元素。接着，使用ClickElem选择placeholder为“请选择属性”的元素。最后，使用SendText关键字输入传入的参数property name。\n</thought>\n\n<code_block>\n*** Keywords ***\n检查动态授权自定义展示\n    [Arguments]  ${property_name}\n    \n    # 向下滚动2次\n    PageDown  2\n    \n    # 点击“动态值”文本\n    Click  动态值\n    \n    # 点击placeholder为“请选择属性”的元素\n    ClickElem  [placeholder=\"请选择属性\"]\n    \n    # 输入属性名称\n    SendText  ${property_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘待商家审核’，点击创建商品下的立即审核，输入审核员：霞飞飞，编号：234，点击通过审核",
        "output": "<thought>\n场景要求点击‘待商家审核’，然后点击创建商品下的立即审核，再输入审核员及编号，最后点击通过审核。可以通过依次调用相应的点击和输入关键字来实现。首先使用`Click`点击‘待商家审核’。然后使用`ClickTextToTheDirectionOf`点击创建商品下方的立即审核。接着使用`BatchSetFields`批量输入审核员和编号。最后使用`Click`点击通过审核。\n</thought>\n\n<code_block>\n# 点击‘待商家审核’\nClick | 待商家审核\n\n# 点击创建商品下的立即审核\nClickTextToTheDirectionOf | 创建商品 | bottom | 立即审核\n\n# 输入审核员和编号\nBatchSetFields | 审核员=霞飞飞 | 编号=234\n\n# 点击通过审核\nClick | 通过审核\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格头 ‘粉丝’ 列中的icon",
        "output": "<thought>\n要点击表格头“粉丝”列中的icon，我们可以使用ClickIconOfCell这一关键字。我们需要指定行和列的位置，由于是在表头的位置，行可以使用特殊值HEAD表示。在这种情况下，我们只需要指定列名即可。\n</thought>\n\n<code_block>\n# 点击表头‘粉丝’列中的icon\nClickIconOfCell | HEAD | 粉丝\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击aaa所在行的编辑按钮",
        "output": "<thought>\n此场景需要在表格中找到文本“aaa”所在的行，并点击该行中的\"编辑\"按钮。我们可以使用关键字“ClickTextOfRow”来实现这个操作。首先我们需要提供文本\"aaa\"作为行标识，然后提供\"编辑\"作为需要点击的元素。\n</thought>\n\n<code_block>\n# 找到文本\"aaa\"所在的行，点击该行的\"编辑\"按钮\nClickTextOfRow | aaa | 编辑 | tbl=1 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击：视频个播、语音聊天室、电台、虚拟、宫格聊天室、直播小玩法、游戏 等多个 class*=tabItem，每次点击后需要等页面加载完，然后获取 class*=tabContent 元素的文案，校验其长度 > 200，使用循环实现",
        "output": "<thought>\n依次点击多个class*=tabItem的元素，每次点击后等待页面加载完成，然后获取class*=tabContent的文案，校验其长度>200。使用循环来实现这些操作。\n</thought>\n\n<code_block>\n# 定义tabItems和tabContents选择器\n${tabItems}  Create List  视频个播  语音聊天室  电台  虚拟  宫格聊天室  直播小玩法  游戏\n${tabContentSelector}  Set Variable  [class*=tabContent]\n\n# 循环点击tabItems，每次点击后等待页面加载并校验tabContent的文案长度\nFOR  ${tabItem}  IN  @{tabItems}\n    # 点击tabItem\n    ClickElem  [class*=tabItem]:contains(${tabItem})\n\n    # 等待页面加载完成\n    WaitLoading\n\n    # 获取tabContent的文本\n    ${tabContent}  GetElemText  ${tabContentSelector}\n\n    # 校验tabContent的文本长度是否大于200\n    ${contentLength}  Evaluate  len(${tabContent})\n    Should Be True  ${contentLength} > 200\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用关键字 校验任务中心单据 并校验返回值为 存在",
        "output": "<thought>\n为了完成这个任务，我们需要调用一个名为`校验任务中心单据`的关键字，并校验其返回值为“存在”。在Robot Framework中，我们可以通过直接调用关键字并获取其返回值，然后使用`Should Be Equal As Strings`关键字来比较返回值和期望的字符串“存在”。这是一个典型的关键字调用和返回值校验的任务。\n</thought>\n\n<code_block>\n# 调用关键字 校验任务中心单据，并将返回值存储在变量 ${result} 中\n${result}  校验任务中心单据\n\n# 校验返回值为 \"存在\"\nShould Be Equal As Strings  ${result}  存在\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为“打开${name}看板的更多操作”的关键字，逻辑为：\n# 1. 鼠标移动到 class包含arco-tree-node-is-leaf 且 文本为 name 的元素 elem 上\n# 2. 点击 elem 的右侧的元素 svg class包含arco-icon-more",
        "output": "<thought>\n首先，我们需要找到 class 包含 `arco-tree-node-is-leaf` 且文本为 `${name}` 的元素。然后，移动鼠标到该元素上。接着，我们需要点击该元素右侧 class 包含 `arco-icon-more` 的 `svg` 元素。可以使用 `MoveToElem` 和 `ClickElemToTheDirectionOf` 关键字来实现。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开${name}看板的更多操作\n    # 找到目标元素并移动鼠标到其上\n    ${elem} =  FindElem | [class*=arco-tree-node-is-leaf]:contains(${name})\n    MoToElem | ${elem}\n    \n    # 点击目标元素右侧的指定图标\n    ClickElemToTheDirectionOf | ${elem} | right | svg[class*=arco-icon-more]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为'新增 Dashboard 图表'的关键字，接受参数：指标，名称，访问区域，用户运营商，应用层协议，网络层协议，参数默认值均为EMPTY，逻辑如下：\n# 1. 设置 指标 为：指标\n# 2. 设置 名称 为：名称\n# 3. 如果 指标 为：访问带宽，访问流量，访问请求数，访问 QPS，访问 2xx 状态码，访问 3xx 状态码，访问 4xx 状态码，访问 5xx 状态码，下载速度，响应时间 时，则：\n# 3.1 设置 访问区域 为：访问区域\n# 3.2 设置 用户运营商 为：用户运营商\n# 3.3 设置 应用层协议 为：应用层协议\n# 3.4 设置 网络层协议 为：网络层协议\n# 4. 点击 弹窗内 确定",
        "output": "<thought>\n为了解决这个问题，我们需要创建一个RF关键字'新增 Dashboard 图表'，并根据参数值设置页面字段。首先，我们将使用`SetField`关键字设置指标和名称的值。接下来，我们将使用IF条件判断指标是否为指定的值之一，如果是，则使用`SetField`为访问区域、用户运营商、应用层协议和网络层协议设置值。最后，使用`Click`关键字点击弹窗内的确定按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n新增 Dashboard 图表\n    [Arguments]  ${指标}=EMPTY  ${名称}=EMPTY  ${访问区域}=EMPTY  ${用户运营商}=EMPTY  ${应用层协议}=EMPTY  ${网络层协议}=EMPTY\n    \n    # 设置指标和名称\n    SetField  指标  ${指标}\n    SetField  名称  ${名称}\n    \n    # 判断指标是否为指定值之一\n    IF  '${指标}' in ['访问带宽', '访问流量', '访问请求数', '访问 QPS', '访问 2xx 状态码', '访问 3xx 状态码', '访问 4xx 状态码', '访问 5xx 状态码', '下载速度', '响应时间']\n        # 设置访问区域、用户运营商、应用层协议和网络层协议\n        SetField  访问区域  ${访问区域}\n        SetField  用户运营商  ${用户运营商}\n        SetField  应用层协议  ${应用层协议}\n        SetField  网络层协议  ${网络层协议}\n    END\n    \n    # 点击弹窗内的确定\n    Click  确定  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击漏斗符号",
        "output": "<thought>\n这个场景要求点击漏斗图标，可以使用ClickIcon关键字，并指定name为funnel来实现点击操作。\n</thought>\n\n<code_block>\n# 点击漏斗图标\nClickIcon | funnel\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击包含dataops同一行的操作",
        "output": "<thought>\n首先需要确定的是点击包含\"dataops\"文本的那一行中的“操作”按钮。根据提供的关键字，我们可以使用ClickTextOfRow关键字来实现。这一关键字需要提供行的标识符（可以是文本或行号）和要点击的文本。在这个例子中，我们将使用\"dataops\"作为行标识符，并使用“操作”作为要点击的文本。\n</thought>\n\n<code_block>\n# 点击包含dataops的那一行的操作\nClickTextOfRow | dataops | 操作\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的 全球（不含中国内地）",
        "output": "\n<thought>\n这个场景要求在弹窗中点击一个特定的文本\"全球（不含中国内地）\"。为了实现这一点，我们可以使用Click关键字，并且将base参数设置为POPUP以指定这是一个弹窗中的操作。\n</thought>\n\n<code_block>\n# 点击弹窗中的 全球（不含中国内地）\nClick | 全球（不含中国内地） | base=POPUP\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 ‘登录’ 或 ‘Login’， 就输入用户名：xx, 密码：yy",
        "output": "<thought>\n1. 使用`IsAnyTextExisting`关键字检查页面是否存在‘登录’或‘Login’。\n2. 如果存在上述任意文本，则使用`BatchSetFields`关键字输入用户名和密码。\n3. 使用Robot Framework的IF语法处理条件判断。\n</thought>\n\n<code_block>\n# 检查页面是否存在'登录'或'Login'\n${exist}  IsAnyTextExisting  登录  Login\n\n# 如果存在，则输入用户名和密码\nIF  ${exist}\n    BatchSetFields  用户名=xx  密码=yy\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在/出现 “Go”，就打印ok",
        "output": "<thought>\n需要检查页面是否包含文本“Go”。可以使用`IsAnyTextExisting`关键字来判断文本是否存在，并返回布尔值，然后使用Robot Framework的IF语法来打印结果。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本“Go”\n${exist}  IsAnyTextExisting | Go\n\n# 如果存在，打印ok\nIF  ${exist}\n    Log  ok\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "编写一个关键字，从一个给定的参数列表@{paramList}中，逐个取出参数，然后填写到 id=params 的div 的 class=arco-card-body 的后代元素的各个直接div后代元素中",
        "output": "<thought>\n为了解决这个问题，我们可以使用RobotFramework中的内置关键字和自定义关键字。首先我们需要获取id为params的div的class为arco-card-body的后代元素的直接div后代元素，然后根据参数列表的长度来循环读取参数列表并逐个填写到对应的元素中。\n</thought>\n\n<code_block>\n填写参数\n    [Arguments]  @{paramList}\n    # 获取id为params的div的class为arco-card-body的后代元素的直接div后代元素\n    ${elem}  FindElem | div[id=params] [class=arco-card-body] > div\n    # 获取参数列表长度\n    ${length}   Get Length  ${paramList}\n    # 循环读取参数列表\n    FOR  ${i}  IN RANGE  ${length}\n        # 获取参数列表中的参数\n        ${param}   Get From List  ${paramList}  ${i}\n        # 使用参数填写到对应的元素中\n        FillArea | ${elem}:eq(${i}) | ${param}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格中nxZDpTv行的删除",
        "output": "<thought>\n要在表格中点击nxZDpTv所在行的删除，我们可以使用ClickTextOfRow关键字。这个关键字允许我们指定行的标识（nxZDpTv），以及我们要点击的文本（删除）。\n</thought>\n\n<code_block>\n# 点击表格中nxZDpTv所在行的删除\nClickTextOfRow | nxZDpTv | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面滑动到data-auto-id为oc-table的区域全部显示出来，判断${result}值是否大于0，若结果为false，执行失败",
        "output": "<thought>\n首先，我们需要使用`MoveIntoView`关键字将`data-auto-id`为`oc-table`的区域移动到视野中。接下来，我们需要判断`${result}`是否大于`0`。如果`${result}`不大于`0`，则需执行失败。为了实现这一点，我们使用控制结构`IF/ELSE`来检查条件。\n</thought>\n\n<code_block>\n# 将data-auto-id为oc-table的区域移动到视野中\nMoveIntoView | [data-auto-id='oc-table']\n\n# 判断${result}值是否大于0\nIF  $result <= 0\n    Fail  结果未大于0，执行失败\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“业务维度分析增加过滤条件”，逻辑是：\n#1.鼠标移动到class包含ant-row的元素上\n#2.点击“过滤条件”\n#3.点击“请选择属性”\n#4.点击文案为“是否登录”的class包含ant-cascader-menu-item的元素\n#5.点击“请选择属性值”\n#6.点击文案为“1”的class包含dp-select__list-item-option的元素",
        "output": "<thought>\n解决问题思路：\n1. 使用 `MoToElem` 关键字将鼠标移动到 class 包含 `ant-row` 的元素上。\n2. 使用 `Click` 关键字点击文本为“过滤条件”的元素。\n3. 使用 `Click` 关键字点击文本为“请选择属性”的元素。\n4. 使用 `ClickElem` 关键字点击 class 包含 `ant-cascader-menu-item` 且文案为“是否登录”的元素。\n5. 使用 `Click` 关键字点击文本为“请选择属性值”的元素。\n6. 使用 `ClickElem` 关键字点击 class 包含 `dp-select__list-item-option` 且文案为“1”的元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n业务维度分析增加过滤条件\n    # 移动到 class 包含 ant-row 的元素上\n    MoToElem  | [class*=ant-row]\n\n    # 点击“过滤条件”\n    Click  | 过滤条件\n\n    # 点击“请选择属性”\n    Click  | 请选择属性\n\n    # 点击文案为“是否登录”的 class 包含 ant-cascader-menu-item 的元素\n    ClickElem  | [class*=ant-cascader-menu-item]:contains(是否登录)\n\n    # 点击“请选择属性值”\n    Click  | 请选择属性值\n\n    # 点击文案为“1”的 class 包含 dp-select__list-item-option 的元素\n    ClickElem  | [class*=dp-select__list-item-option]:contains(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取变量 ${elem} 中第一个 div ",
        "output": "<thought>\n我们需要找到变量 `${elem}` 中的第一个 `div` 元素。可以使用 `FindElem` 关键字结合适当的选择器来实现。选择器格式可以是 `${elem} div:eq(0)`，表示在 `${elem}` 下的第一个 `div`。\n</thought>\n\n<code_block>\n# 查找第一个div\n${div_elem}  FindElem  | ${elem} div:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待结论正在计算中消失，超时30秒",
        "output": "<thought>\n使用WaitTextDisappear关键字等待文本\"结论正在计算中\"消失，超时时间设置为30秒。\n</thought>\n\n<code_block>\n# 等待结论正在计算中消失，超时30秒\nWaitTextDisappear | 结论正在计算中 | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击请输入左侧的 +86",
        "output": "<thought>\n此需求是点击在\"请输入\"文本左侧的\"+86\"。使用`ClickTextToTheDirectionOf`关键字可以实现此需求，基准文本为\"请输入\"，方向为`left`，目标文本为\"+86\"。\n</thought>\n\n<code_block>\n# 点击在\"请输入\"左侧的+86\nClickTextToTheDirectionOf | 请输入 | left | +86\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击收款计划中 左侧的 第一个icon",
        "output": "<thought>\n解决问题思路: 需要点击“收款计划”左侧的第一个icon。可以使用ClickIconToTheDirectionOf关键字，以“收款计划”为基准元素，方向为left，索引为0来实现。\n</thought>\n\n<code_block>\n# 点击收款计划左侧的第一个icon\nClickIconToTheDirectionOf | 收款计划 | left | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择页面搜索结果的第一个",
        "output": "<thought>\n在这个场景中，我们需要选择搜索结果的第一个。假设这些结果展示在一个表格中，我们可以通过选择表格的第一行来实现这一操作。根据可用关键字，我们可以使用 `SelectTableRow` 来选择表格的行。通过指定 `row_name_or_id=1`，可以选择表格的第一行。\n</thought>\n\n<code_block>\n# 选择搜索结果的第一行\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "遍历页面中class包含taskItem的元素并点击",
        "output": "<thought>\n在这个场景中，我们需要遍历页面中所有class包含\"taskItem\"的元素并点击。使用Robot Framework中的ClickElem关键字结合jQuery选择器可以实现这一目标。首先，我们使用FindElem获取所有符合条件的元素，然后循环遍历这些元素并逐个点击。\n</thought>\n\n<code_block>\n# 查找所有class包含\"taskItem\"的元素\n${elements}  FindElem | [class*=taskItem]\n\n# 遍历并点击每个元素\nFOR  ${element}  IN  @{elements}\n  ClickElem | ${element}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹框中的合同需求人为张三",
        "output": "<thought>\n根据需求，操作的是弹框中的字段，因此应使用SetPopupField关键字。字段名是合同需求人，值是张三。\n</thought>\n\n<code_block>\n# 设置弹框中的合同需求人为张三\nSetPopupField | 合同需求人 | 张三\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 企业名称（O） 设置为证书测试中心，省份（ST）字段为北京，城市 为北京，地址 为海淀    ",
        "output": "<thought>\n在这个场景中，我们需要设置多个字段的值。可以使用`BatchSetFields`关键字，因为它允许我们批量设置字段值。同时，我们需要确保按照顺序填写每个字段的值。\n</thought>\n\n<code_block>\n# 批量设置企业名称、省份、城市和地址字段\nBatchSetFields  企业名称=证书测试中心  省份=北京  城市=北京  地址=海淀\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击libra_autotest_longexp_metric_group_001左侧的checkbox",
        "output": "<thought>\n为了解决这个问题，我需要定位到文本为\"libra_autotest_longexp_metric_group_001\"的元素，并选中其左侧的复选框。根据题目的提示，我可以使用关键字ClickElemToTheDirectionOf来达到目标，通过指定方向为left来点击目标复选框。\n</thought>\n\n<code_block>\n# 点击文本\"libra_autotest_longexp_metric_group_001\"左侧的checkbox\nClickElemToTheDirectionOf | libra_autotest_longexp_metric_group_001 | left | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面应该包含 span class包含FunnelHierarchyChartItem__title 且text是总转化率的元素",
        "output": "<thought>\n为了确认页面包含指定的元素，需要使用 CheckHasElem 关键字。首要任务是构建一个jQuery选择器，该选择器可以准确定位到我们感兴趣的元素。在这个场景中，目标是识别一个 span 元素，其 class 属性包含 FunnelHierarchyChartItem__title，并且其文本是 \"总转化率\"。因此，选择器应包括 class 匹配和 :contains 选择器。\n</thought>\n\n<code_block>\n# 检查页面中是否存在符合条件的span元素\nCheckHasElem  | span[class*='FunnelHierarchyChartItem__title']:contains('总转化率')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上角关闭按钮",
        "output": "<thought>\n为了点击右上角的关闭按钮，我们需要找到对应的元素并点击它。这可能需要使用名为ClickTextToTheDirectionOf，ClickElemToTheDirectionOf 或 ClickIconToTheDirectionOf的RF库关键字，取决于这个关闭按钮的具体实现。\n\n由于关闭按钮通常是一个icon，因此我会假设它是一个icon，并使用ClickIconToTheDirectionOf方法。屏幕的中心通常可以被视为基准元素，方向是右上角，icon是一个可能的\"close\"。\n\n如果关闭按钮是一个text或elem，那么我们只需要更改关键词，其他保持不变。\n</thought>\n\n<code_block>\n# 点击右上角的关闭图标\nClickIconToTheDirectionOf | SCREEN_CENTER | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“选择菜单” 的关键字，接受 name 参数，作用是：\n1. 等页面加载完成\n2. 点击文本 name， 超时为 30s",
        "output": "<thought>\n要实现“选择菜单”关键字，需要完成两个步骤：首先等待页面加载完成，然后点击指定的文本。可以使用`WaitLoading`来等待加载完成，之后使用`Click`关键字点击文本，文本由参数`name`传入。设置超时时间为30秒。\n</thought>\n\n<code_block>\n*** Keywords ***\n选择菜单\n    [Arguments]  ${name}\n    # 等待页面加载完成\n    WaitLoading\n    # 点击指定文本，超时时间为30秒\n    Click  ${name}  timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到含有class okee-lp-form 的元素",
        "output": "<thought>\n我们需要选择包含class \"okee-lp-form\" 的元素，可以利用FindElem关键字和jQuery选择器。选择器 `\"[class*=okee-lp-form]\"` 可以用来查找具有该class的元素。\n</thought>\n\n<code_block>\n# 查找包含class okee-lp-form的元素\n${elem}  FindElem | [class*=okee-lp-form]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "占位符为 \"请输入名称、品牌、型号等搜索\" 的输入框输入 123321 ，点击回车",
        "output": "<thought>\n首先需要在搜索框中输入“123321”，再点击回车进行搜索。对应的关键字有`SetField`。\n</thought>\n\n<code_block>\n# 在搜索框中输入“123321” 并回车\nSetField | 请输入名称、品牌、型号等搜索 | 123321 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在编辑器中输入一些文本",
        "output": "<thought>\n在编辑器中输入文本可以使用FillEditor关键字。因为问题没有指定具体的编辑器，我们默认填入文本到第一个编辑器中。\n</thought>\n\n<code_block>\n# 在第一个编辑器中输入文本“这是一段测试文本”\nFillEditor | 这是一段测试文本\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击第一个 添加分群",
        "output": "<thought>\n 为了点击第一个 \"添加分群\"，我们可以使用 Click 关键字，并指定 idx=0 以确保点击第一个匹配的文本。\n </thought>\n \n <code_block>\n # 点击第一个 \"添加分群\"\n Click | 添加分群 | idx=0\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 弹窗中的 产品汇总 右边的第二个小图标",
        "output": "<thought>\n根据描述，要将鼠标移动到弹窗中的“产品汇总”右边的第二个icon。可以使用`MoveToIconToTheDirectionOf`关键字，基准元素是“产品汇总”，方向是right，目标是第二个icon。\n</thought>\n\n<code_block>\n# 移动到弹窗中‘产品汇总’右边的第二个icon\nMoveToIconToTheDirectionOf | :contains(产品汇总) | right | idx=1 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 E2E自动化测试-预付费标准型加速器 这一行的操作列里的省略号，等下拉列表出现后点击续费按钮",
        "output": "<thought>\n首先需要点击表格行 \"E2E自动化测试-预付费标准型加速器\" 操作列中的省略号，然后等待下拉列表出现，最后点击下拉列表中的\"续费\"按钮。可以使用 `ClickIconOfCell` 来实现点击操作，然后使用 `Click` 来点击下拉列表中的续费按钮。\n</thought>\n\n<code_block>\n# 点击表格行中 \"E2E自动化测试-预付费标准型加速器\" 操作列里的省略号\nClickIconOfCell | E2E自动化测试-预付费标准型加速器 | 操作 | more\n\n# 等待续费按钮出现并点击\nWaitText | 续费\nClick | 续费\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置参与分析的事件”，接受 group_name, args 参数，业务逻辑是：\n1. 先将 group_name 映射为index, 映射关系为：A: 0, B: 1, C:2, D: 3, E:4\n2. 查找第index个div class=interest-events-box 元素elem1, 如果此元素不存在，就点击新增事件按钮，然后等待0.5s, 此过程最多循环4次\n3. 如果elem1已经存在，则向其后代元素 div class=interest-events-line 中输入给定的一个或多个 args",
        "output": "<thought>\n需要为关键字“设置参与分析的事件”实现逻辑。首先，将 group_name 映射为 index。接着，根据 index 查找相应的 div.interest-events-box 元素。如果元素不存在，则点击“新增事件”按钮并等待。最多尝试4次。如果元素存在，则向其后代元素中输入 args。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置参与分析的事件\n    [Arguments]  ${group_name}  @{args}\n    # 将 group_name 映射为 index\n    ${index}  Evaluate  {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4}[$group_name]\n    ${selector}  Set Variable  div.interest-events-box:eq(${index})\n    # 初始化尝试次数\n    ${i}  Set Variable  0\n    FOR  ${i}  IN RANGE  0  4\n        # 检查元素是否存在\n        ${exist}  IsAnyElemExisting | ${selector}\n        Exit For Loop If  ${exist}\n        # 点击新增事件按钮\n        Click  新增事件\n        Sleep  0.5s\n    END\n    # 向元素中输入 args\n    FillArea  ${selector} div.interest-events-line  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击公网带宽包，点击变配，等待页面出现 ${party}，base包括party_item_card的class，最后页面包含：支持升降配",
        "output": "<thought>\n为了实现这个场景，我们首先需要点击“公网带宽包”这个文本。接着，我们需要点击“变配”这个文本。在此之后，我们等待页面中出现变量`${party}`的文本，并且确保基准元素包括`party_item_card`的class。最终，我们需要确保页面上包含“支持升降配”这个文本。整个过程需要使用的关键字包括Click、WaitText等。\n</thought>\n\n<code_block>\n# 点击公网带宽包\nClick | 公网带宽包\n\n# 点击变配\nClick | 变配\n\n# 等待页面出现 ${party}，基准元素包含party_item_card的class\nWaitText | ${party} | base=[class*=party_item_card]\n\n# 检查页面包含：支持升降配\nWaitText | 支持升降配\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击元素 elem 中的加号",
        "output": "<thought>\n题目要求点击元素 elem 中的加号。可以使用 ClickIcon 关键字，并指定 base 为元素 elem。name 参数为 'plus'。\n</thought>\n\n<code_block>\n# 点击元素 elem 中的加号\nClickIcon | plus | base=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 退款规则 移动到屏幕可见区域，并校验页面存在 到店核销，随时可退，过期未核销自动退，校验团购库存数量下方存在：500份",
        "output": "<thought>\n首先，需要将 `退款规则` 元素移动到可见区域，使用 `MoveIntoView` 关键字。然后，校验页面中同时存在 `到店核销`、`随时可退`、`过期未核销自动退`三段文本，因此使用 `CheckHasText` 关键字。最后，使用 `CheckHasTextToTheDirectionOf` 来校验在 `团购库存数量` 下方存在文本包含 `+500份` 的按钮。\n</thought>\n\n<code_block>\n# 将退款规则移动到可见区域\nMoveIntoView  | :contains(退款规则)\n\n# 校验存在 到店核销、随时可退、过期未核销自动退\nCheckHasText  | 到店核销  | 随时可退  | 过期未核销自动退\n\n# 校验团购库存数量下方存在文本包含 '+500份' 的按钮\nCheckHasTextToTheDirectionOf | :contains(团购库存数量) | bottom | :contains(+500份)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个的 TRY 异常处理语句的示例",
        "output": "<thought>\n在RobotFramework中处理异常通常使用TRY/EXCEPT语法结构，这类似于其他编程语言中的try-catch机制。我们需要考虑以下几点：\n1. TRY块包含可能抛出异常的代码\n2. EXCEPT块用于捕获和处理特定异常\n3. 可以使用ELSE块处理无异常情况\n4. 可以使用FINALLY块执行无论是否发生异常都需要执行的代码\n5. 可以捕获特定异常类型或使用通配符捕获所有异常\n\nRobotFramework内置支持TRY/EXCEPT语法，比使用\"Run Keyword And Ignore Error\"或\"Run Keyword And Expect Error\"更清晰直观\n</thought>\n\n<code_block>\n# 基本TRY/EXCEPT结构示例\nTRY\n    Click   可能失败的元素\nEXCEPT    Error message contains *not found*    type=GLOB\n    Log    元素未找到，继续执行\nEXCEPT    AS    ${err}\n    Log    其他错误发生: ${err}\nELSE\n    Log    点击成功\nFINALLY\n    Log    无论如何都会执行的清理操作\nEND\n\n\n# 捕获所有异常示例\nTRY\n    ClickTextOneByOne    下一步    提交\nEXCEPT    AS    ${err}\n    Log    流程执行失败: ${err}\n    Fail    测试用例因异常终止\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${wait} 为真，就等待页面出现 ${wait}",
        "output": "<thought>\n首先，我需要确认 `${wait}` 是否为真。如果为真，就等待文本 `${wait}` 的出现。因此，我可以使用 `IF` 语句判断 `${wait}`。如果为真，使用 `WaitText` 关键字等待 `${wait}` 出现。\n</thought>\n\n<code_block>\n# 判断${wait}是否为真\nIF  ${wait}\n    # 等待文本${wait}出现\n    WaitText  ${wait}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 PR2408040100-1 表格行中的本次下单数量为：5",
        "output": "<thought>\n为了解决这个问题，我们需要找到包含文本“PR2408040100-1”的表格行，然后使用FillCell关键字来设置该行中“本次下单数量”这一列的值为5。需要先定位到行，再定位到列。\n</thought>\n\n<code_block>\n# 设置PR2408040100-1所在表格行的“本次下单数量”列为5\nFillCell | PR2408040100-1 | 本次下单数量 | 5\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 需求单-需求行 旁边的 哈哈",
        "output": "<thought>\n1. 首先需要理解题目要求：点击\"需求单-需求行\"旁边的\"哈哈\"文本\n2. 分析关键字选择：\n   - 需要使用\"Click\"关键字，因为需要点击文本\n   - 需要使用\"near\"参数来指定\"哈哈\"文本位于\"需求单-需求行\"旁边\n3. 考虑特殊情况：\n   - 如果有多个\"哈哈\"文本，需要明确是哪个\n   - 如果\"需求单-需求行\"和\"哈哈\"在弹出层中，需要指定base=POPUP\n4. 最终决定使用Click关键字，指定文本为\"哈哈\"，near参数为\"需求单-需求行\"\n</thought>\n\n<code_block>\n# 点击\"需求单-需求行\"旁边的\"哈哈\"\nClick | 哈哈 | near=需求单-需求行\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向镜像中输入多个值：公共镜像、CentOS、7.8、ON",
        "output": "<thought>\n考虑到这个问题是需要向一个叫做“镜像”的字段输入多个值，可以使用SetField关键字。因为这个关键字允许我们向指定的字段输入一个或多个值。此问题中，需要向\"镜像\"这个字段依次输入：公共镜像、CentOS、7.8、ON这四个值。\n</thought>\n\n<code_block>\n# 向镜像中输入多个值：公共镜像、CentOS、7.8、ON\nSetField | 镜像 | 公共镜像 | CentOS | 7.8 | ON\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击did右边的输入框",
        "output": "<thought>\n为了点击did右边的input或textarea元素，我们可以使用ClickElemToTheDirectionOf关键字。基准元素是did，方向是right，目标元素是input或textarea。\n</thought>\n\n<code_block>\n# 点击did右边的input或textarea元素\nClickElemToTheDirectionOf | did | right | input,textarea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击上级品类，输入UIAUTO1-UI自动化测试专用",
        "output": "<thought>\n首先，根据描述，我们需要做两步操作：\n1. 点击\"上级品类\"\n2. 输入\"UIAUTO1-UI自动化测试专用\"\n\n我们需要先使用\"Click\"关键字来点击\"上级品类\"，然后使用\"SendText\"关键字在出现的输入框中输入\"UIAUTO1-UI自动化测试专用\"。\n</thought>\n\n<code_block>\n# 点击\"上级品类\"\nClick | 上级品类\n\n# 输入\"UIAUTO1-UI自动化测试专用\"\nSendText | UIAUTO1-UI自动化测试专用\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 education_level 拖拽到 ‘请拖入行转列字段’ 中",
        "output": "<thought>\n使用DAndD关键字将education_level元素拖拽到目标元素'请拖入行转列字段'上。由于直接使用元素文本作为选择器更为直观，所以可以直接使用文本进行选择。\n</thought>\n\n<code_block>\n# 将education_level拖拽到‘请拖入行转列字段’\nDAndD | education_level | 请拖入行转列字段\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击Http API右边的接入",
        "output": "<thought>\n这个问题可以通过ClickTextToTheDirectionOf关键字解决，需要定位到Http API，然后点击它右边的接入。\n</thought>\n\n<code_block>\n# 点击Http API右边的接入\nClickTextToTheDirectionOf | Http API | right | 接入\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置重复通知间隔为1000，设置 重复字段判断条件 为 id，设置 生效时间 为 周一｜周二，设置 是否配置关联主机信息 为 开，设置 请选择关联主机的IP字段 为 id，设置 告警推送bmq集群 为 bmq_boe_test2，设置 告警推送bmq集群topic 为 byteseer_test",
        "output": "\n<thought>\n 首先，我们需要使用`SetField`关键字来设置一些字段的值，包括“重复通知间隔”、“重复字段判断条件”、“生效时间”、“是否配置关联主机信息”、“请选择关联主机的IP字段”、“告警推送bmq集群”、“告警推送bmq集群topic”。这些字段值都可以直接通过`SetField`指定。\n </thought>\n \n <code_block>\n # 设置重复通知间隔为1000\n SetField | 重复通知间隔 | 1000\n \n # 设置重复字段判断条件为id\n SetField | 重复字段判断条件 | id\n \n # 设置生效时间为周一｜周二\n SetField | 生效时间 | 周一｜周二\n \n # 设置是否配置关联主机信息为开\n SetField | 是否配置关联主机信息 | 开\n \n # 设置请选择关联主机的IP字段为id\n SetField | 请选择关联主机的IP字段 | id\n \n # 设置告警推送bmq集群为bmq_boe_test2\n SetField | 告警推送bmq集群 | bmq_boe_test2\n \n # 设置告警推送bmq集群topic为byteseer_test\n SetField | 告警推送bmq集群topic | byteseer_test\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹窗内数据源名称为自动化数据源+随机数字   ",
        "output": "<thought>\n这个任务要求在弹窗中设置数据源名称，并在名称后面附加一个随机数字。为此，我需要使用`SetField`关键字来选取需要设置的字段并将其标记为基于弹窗。为了生成随机数字，我将使用`GenerateRandom`生成一串数字，并附加在名称后。\n</thought>\n\n<code_block>\n# 生成随机数字，长度为5，仅包含数字\n${random_number}  GenerateRandom  | 5 | [NUMBERS]\n\n# 设置弹窗内数据源名称为自动化数据源+随机数字\nSetField | 数据源名称 | 自动化数据源${random_number} | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格中含有mrlx053那行的按钮",
        "output": "<thought>\n首先，需要在表格中找到包含文本\"mrlx053\"的行，然后再点击该行中的按钮。根据提供的关键字，首先可以使用`ClickElemOfRow`来实现。\n</thought>\n\n<code_block>\n# 点击表格中含有mrlx053那行的按钮\nClickElemOfRow | mrlx053 | button\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 QA-UI自动化专用 下面的 启动ComfyUI，等2秒，当出现主办方资质，点击主办方资质",
        "output": "<thought>\n1. 首先通过 `ClickTextToTheDirectionOf` 关键字实现点击 \"QA-UI自动化专用\" 下方的 \"启动ComfyUI\"。\n2. 使用 `Sleep` 关键字等待2秒以确保加载时间。\n3. 使用 `WaitText` 关键字等待页面出现 \"主办方资质\"。\n4. 最后，通过 `Click` 关键字点击 \"主办方资质\"。\n</thought>\n\n<code_block>\n# 点击 \"QA-UI自动化专用\" 下方的 \"启动ComfyUI\"\nClickTextToTheDirectionOf | QA-UI自动化专用 | bottom | 启动ComfyUI\n\n# 等待2秒\nSleep | 2s\n\n# 等待 \"主办方资质\" 出现\nWaitText | 主办方资质\n\n# 点击 \"主办方资质\"\nClick | 主办方资质\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为'新增订阅报表-项目'的关键字，接受参数：报表名称，接收邮箱，报表类型，关联资源，参数默认值均为${EMPTY}，逻辑如下：\n # 1. 设置 报表名称为：报表名称\n # 2. 设置 接收邮箱为：接收邮箱\n # 3. 设置 报表类型为：报表类型\n # 4. 设置 关联资源为：关联资源\n # 5. 等待页面加载完成\n # 6. 设置 请输入域名为：域名\n # 7. 勾选 过滤域名\n # 8. 勾选 报表内容为：边缘统计下方的 流量，回源统计下方的 带宽，业务分析下方的 TOP URL\n # 9. 点击 弹窗内 右下角完成",
        "output": "<thought>\n 为实现该自动化测试，我将依次使用以下关键字：\n 1. 使用`SetField`设置报表名称、接收邮箱、报表类型、关联资源、域名。\n 2. 使用`WaitLoading`等待页面加载完成。\n 3. 使用`CheckBoxOn`勾选过滤域名及报表内容选项。\n 4. 使用`Click`点击弹窗内完成按钮。\n </thought>\n \n <code_block>\n 新增订阅报表-项目\n  [Arguments]  ${报表名称}=${EMPTY}  ${接收邮箱}=${EMPTY}  ${报表类型}=${EMPTY}  ${关联资源}=${EMPTY}  ${域名}=${EMPTY}\n  \n  # 设置报表名称\n  SetField  报表名称  ${报表名称}\n  \n  # 设置接收邮箱\n  SetField  接收邮箱  ${接收邮箱}\n  \n  # 设置报表类型\n  SetField  报表类型  ${报表类型}\n  \n  # 设置关联资源\n  SetField  关联资源  ${关联资源}\n  \n  # 等待页面加载完成\n  WaitLoading\n  \n  # 设置请输入域名\n  SetField  请输入域名  ${域名}\n  \n  # 勾选过滤域名\n  CheckBoxOn  过滤域名\n  \n  # 勾选流量、带宽和TOP URL\n  CheckBoxOn  流量  near=边缘统计\n  CheckBoxOn  带宽  near=回源统计\n  CheckBoxOn  TOP URL  near=业务分析\n  \n  # 点击弹窗内完成\n  Click  完成  base=POPUP\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击服务概览，等待页面加载完成，如果存在类目升级提醒，点击确认已知悉，鼠标hover在购买加量包上，验证页面文案 当前套餐未开通内置CDN加速，无法使用加量包抵扣",
        "output": "<thought>\n首先，我们需要点击“服务概览”文本，接着等待页面加载完成。然后检查是否存在“类目升级提醒”的文本，如果存在则点击“确认已知悉”按钮。接着将鼠标移动到“购买加量包”文本上，最后检查页面上是否有“当前套餐未开通内置CDN加速，无法使用加量包抵扣”这段文案。\n</thought>\n\n<code_block>\n# 点击服务概览\nClick | 服务概览\n\n# 等待页面加载完成\nWaitLoading\n\n# 判断页面上是否存在类目升级提醒\n${exist}  IsAnyTextExisting | 类目升级提醒\n\n# 如果存在类目升级提醒，点击确认已知悉\nIF  ${exist}\n    Click | 确认已知悉\nEND\n\n# 鼠标移动到购买加量包上\nMoTo | 购买加量包\n\n# 检查页面是否包含指定的文案\nCheckHasText | 当前套餐未开通内置CDN加速，无法使用加量包抵扣\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "去掉变量 ${start-day} 和 ${end-day} 的前缀 ‘0’",
        "output": "<thought>\n首先，可以使用Python的字符串处理函数来去掉字符串前缀为‘0’的情况。可以通过Evaluate关键字执行Python代码，去除变量值的前缀‘0’。我们会给出变量定义以及处理步骤。\n</thought>\n\n<code_block>\n# 去掉变量 ${start-day} 和 ${end-day} 的前缀 '0'\n${processed-start-day}  Evaluate  ${start-day}.lstrip('0')\n${processed-end-day}    Evaluate  ${end-day}.lstrip('0')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在文案：暂不切换，则点击 暂不切换，截图对比 class 为 volc-material-content 的元素",
        "output": "<thought>\n首先需要检查页面中是否存在文案“暂不切换”，可以使用`IsAnyTextExisting`关键字进行判断。如果存在该文本，则点击该文本。接下来，对class为`volc-material-content`的元素进行截图对比，可以使用`ImageDiff`关键字完成。\n</thought>\n\n<code_block>\n# 判断页面是否存在文案：暂不切换\n${exist}  IsAnyTextExisting | 暂不切换\n\n# 如果存在文案，则点击并对比截图\nIF  ${exist}\n    # 点击暂不切换\n    Click  暂不切换\n    # 对class为volc-material-content的元素进行截图对比\n    ImageDiff  | [class=volc-material-content]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到当前页面中图片所在区域进行截图对比，并存储为image1",
        "output": "<thought>\n1. 首先需要定位页面中的图片区域，可以使用FindElem关键字配合jQuery选择器来查找图片元素\n2. 图片元素通常使用img标签，所以选择器可以是\"img\"\n3. 找到图片元素后，使用ImageDiff关键字进行截图对比\n4. 需要指定存储的图片名称为image1\n5. 如果页面有多个图片，需要确定是第一个图片还是所有图片，这里假设是对第一个图片进行操作\n</thought>\n\n<code_block>\n# 查找页面中的第一个图片元素\n${image_elem}  FindElem  img:eq(0)\n\n# 对找到的图片元素进行截图对比并存储为image1\nImageDiff  ${image_elem}  pic_name=image1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格所有的数据列的商机名称，是不是都包含测试商机。提示：可先获取列的值，然后对每个值进行校验",
        "output": "<thought>\n首先需要获取表格中商机名称列的所有值，然后对每个值进行校验，验证其是否包含\"测试商机\"。可以使用关键字 `GetColValues` 获取列的值，再使用 `Should Contain` 对每个值进行校验。\n</thought>\n\n<code_block>\n# 获取表格中商机名称列的所有值\n@{opportunity_names}  GetColValues  商机名称\n\n# 对每个值进行校验\nFOR  ${name}  IN  @{opportunity_names}\n    # 确认每个商机名称都包含 \"测试商机\"\n    Should Contain  ${name}  测试商机\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前日期 2024-09 格式，然后获取 10 个月前的日期，也是这个格式",
        "output": "<thought>\n我们需要先获取当前日期并格式化为\"2024-09\"的格式，然后再获取10个月前的日期，并也将其格式化为\"YYYY-MM\"的格式。由于RF内置的时间处理关键字不能直接完成此操作，我们需要使用Evaluate执行Python代码来实现。\n</thought>\n\n<code_block>\n# 获取当前日期并格式化为\"2024-09\"\n${current_date}  Evaluate  datetime.datetime.now().strftime('%Y-%m')\n\n# 获取10个月前的日期并格式化为\"YYYY-MM\"\n${previous_date}  Evaluate  (datetime.datetime.now() - dateutil.relativedelta.relativedelta(months=10)).strftime('%Y-%m')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取第line_no表格行中的数据",
        "output": "<thought>\n需要获取表格指定行的数据，可以使用GetRowValues关键字。\n</thought>\n\n<code_block>\n# 获取第line_no行的数据\n@{row_data}  GetRowValues | ${line_no}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“创建随机英文字符串”的关键，接受两个参数：length，str_type，逻辑是：\n1、如果str_type等于0，则创建一个长度等于length的小写字母字符串\n2、如果str_type等于1，则创建一个长度等于length的大写字母字符串\n3、如果str_type等于2，则创建一个长度等于length的大写+小写字母字符串",
        "output": "<thought>\n解决问题思路：\n1. 使用IF/ELSE结构判断str_type的值。\n2. 根据str_type的不同，使用GenerateRandom关键字生成对应的随机字符串。\n3. 对应str_type为0生成小写字母字符串，str_type为1生成大写字母字符串，str_type为2生成大小写字母混合字符串。\n</thought>\n\n<code_block>\n创建随机英文字符串\n    [Arguments]    ${length}    ${str_type}\n    # 如果str_type等于0，生成小写字符串\n    IF    \"${str_type}\" == \"0\"\n        ${result}    GenerateRandom    ${length}    [LOWER]\n    # 如果str_type等于1，生成大写字符串\n    ELSE IF    \"${str_type}\" == \"1\"\n        ${result}    GenerateRandom    ${length}    [UPPER]\n    # 如果str_type等于2，生成大小写混合字符串\n    ELSE IF    \"${str_type}\" == \"2\"\n        ${result}    GenerateRandom    ${length}    [LETTERS]\n    ELSE\n        # 无可用关键字\n        Log    无效的 str_type 值\n    END\n    [Return]    ${result}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹框 内空白处 收起下拉框",
        "output": "<thought>\n根据提供的关键字描述，这里需要在弹框内点击空白处以收起下拉框。可以使用 `ClickWhiteArea` 关键字，该关键字不需要其他参数\n</thought>\n\n<code_block>\n# 点击弹框内的空白处以收起下拉框\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标hover到 id为‘overlay_9’的元素，然后点击它，最后点击新增票档",
        "output": "<thought>\n首先，需要将鼠标移动到id为`overlay_9`的元素上，可以使用`MoToElem`关键字。接着，使用`MClick`关键字来点击该元素所在位置。最后，需要点击文本为“新增票档”的元素，可以使用`Click`关键字。\n</thought>\n\n<code_block>\n# 将鼠标移动到id为'overlay_9'的元素上\nMoToElem | [id=overlay_9]\n\n# 在当前位置点击鼠标\nMClick\n\n# 点击文本为‘新增票档’的元素\nClick | 新增票档\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格的第一行的icon more",
        "output": "<thought>\n根据问题描述，需要点击表格第一行中的名为\"more\"的小图标。可以使用ClickIconOfRow关键字来完成此操作。\n</thought>\n\n<code_block>\n# 点击表格第一行中的名为\"more\"的小图标\nClickIconOfRow | 1 | more | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取弹窗中的表格第一行的内容, 点击洞察分析右侧的分日文字, 然后将第一行中的开始日期的值输入到分日中",
        "output": "<thought>\n1. 使用`GetRowValues`获取弹窗中表格的第一行内容。\n2. 使用`ClickTextToTheDirectionOf`选择\"洞察分析\"右侧的\"分日\"文字。\n3. 使用`SetField`将之前获取的第一行的开始日期值输入到\"分日\"中。\n</thought>\n\n<code_block>\n# 获取弹窗中表格第一行的内容\n@{first_row_values}  GetRowValues | 1 | base=POPUP\n\n# 点击洞察分析右侧的分日文字\nClickTextToTheDirectionOf | 洞察分析 | right | 分日\n\n# 将第一行中的开始日期的值输入到分日中\nSetField | 分日 | ${first_row_values}[0]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击加速区域 Tab，将主播设为运营经纪人，点击__current_id=普通选择器_5984__7 的div元素",
        "output": "<thought>\n首先需要点击加速区域的Tab，这是一个基于文本的点击操作，所以可以使用`Click`关键字。然后，需要将主播设为运营经纪人，这涉及设置特定字段的值，可以使用`SetField`关键字。最后，需要通过选择器点击特定的div元素，选择器是`__current_id=普通选择器_5984__7`，可以使用`ClickElem`关键字进行操作。\n</thought>\n\n<code_block>\n# 点击加速区域Tab\nClick | 加速区域\n\n# 将主播设为运营经纪人\nSetField | 主播 | 运营经纪人\n\n# 点击特定的div元素\nClickElem | div[__current_id='普通选择器_5984__7']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击 网络类型 右侧的下拉框 点击 普通（bridge）",
        "output": "\n    \n<thought>\n 为了实现点击“网络类型”右侧的下拉框，然后选择“普通（bridge）”，需要按以下步骤进行：\n 1. 使用ClickElemToTheDirectionOf关键字点击“网络类型”右侧的下拉框（下拉框通常可表示为 select,input 等元素组合）。\n 2. 使用SelectOption关键字选择“普通（bridge）”选项。\n </thought>\n \n <code_block>\n # 点击“网络类型”右侧的下拉框\n ClickElemToTheDirectionOf | 网络类型 | right | select,input\n \n # 选择“普通（bridge）”\n SelectOption | 普通（bridge）\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "断言表格中只有一条数据",
        "output": "<thought>\n这个需求非常简单，我们只需要在使用关键字“CheckRowCount”时，将目标行数设置为1。\n</thought>\n\n<code_block>\n# 断言表格中只有一行数据\nCheckRowCount  |  1  |  tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置活动名称为my活动，活动时间为“2024年12月20日15:00”，“2024年12月20日15:30”，直播账号为3059263117461530",
        "output": "<thought>\n为了设置活动名称、活动时间和直播账号，我将使用BatchSetFields关键字，同时结合指定的格式为活动时间设置正确的值。\n</thought>\n\n<code_block>\n# 设置活动信息\nBatchSetFields  活动名称=my活动  活动时间=2024-12-20 15:00 ～ 2024-12-20 15:30  直播账号=3059263117461530\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 表头行中 Service subject 右边的筛选器，选择 Byteplus Pte. Ltd. 并点击Ok，检查表格第一行的 状态为 已撤销",
        "output": "<thought>\n首先需要点击表头行中\"Service subject\"单元格右边的筛选器图标。然后，在弹出的筛选菜单中选择\"Byteplus Pte. Ltd.\"选项，并点击\"Ok\"按钮进行确认。最后，校验表格第一行的状态列是否为\"已撤销\"。\n这里需要使用的关键字有：`ClickIconOfCell`来点击单元格中的图标，`SelectOptionForField`来选择筛选器中的选项，`Click`来确认选择，`CheckCellHas`来校验状态。\n</thought>\n\n<code_block>\n# 点击表头行中“Service subject”单元格右边的筛选器图标\nClickIconOfCell | HEAD | Service subject | filter\n\n# 选择 Byteplus Pte. Ltd.\nSelectOption | Byteplus Pte. Ltd.\n\n# 点击OK按钮\nClick | Ok\n\n# 检查表格第一行的状态列为已撤销\nCheckCellHas | 1 | 状态 | 已撤销\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入 支持名称  ${param_name_1}",
        "output": "<thought>\n为了操作这个字段，我们需要找到和“支持名称”相关的输入框，并将\"${param_name_1}\"填入该输入框。在这里我们使用SetField关键字来完成这个任务。\n</thought>\n\n<code_block>\n# 在支持名称输入框中输入${param_name_1}\nSetField | 支持名称 | ${param_name_1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "拼接 新增树形单选 和 ${current_time} 赋值给变量 attribute_name",
        "output": "<thought>\n解决思路：首先需要将字符串\"新增树形单选\"和变量`${current_time}`进行拼接，使用合适的RF关键字来完成这个任务。然后将拼接后的结果赋值给变量`attribute_name`。\n</thought>\n\n<code_block>\n# 拼接\"新增树形单选\"和${current_time}，并赋值给attribute_name\n${attribute_name}  Catenate  SEPARATOR=  新增树形单选  ${current_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果'${params_pwd}'!='${None}'，点击编辑",
        "output": "<thought>\n在这个场景中，我们需要判断'${params_pwd}'是否不等于'${None}'，如果不等于，就点击编辑。为了实现这个任务，我们可以使用Robot Framework的内置IF/ELSE关键字。在IF关键字中，我们可以使用表达式'${params_pwd}'!='${None}'，如果此表达式为真（意味着'${params_pwd}'确实不等于'${None}'），那么我们就执行'Click'关键字来点击编辑。否则，不执行任何操作。\n</thought>\n\n<code_block>\n# 使用Robot Framework的内置IF/ELSE关键字判断'${params_pwd}'是否不等于'${None}'\nIF  '${params_pwd}'!='${None}'\n    # 如果'${params_pwd}'不等于'${None}'，点击编辑\n    Click  编辑\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成一串随机中文，长度为5",
        "output": "<thought>\n为了解决这个问题，可以使用RobotFramework的自定义关键字`GenerateRandom`。由于目标是生成一串长度为5的随机中文，因此需要在`chars`参数中指定中文字符集，并将`length`参数设置为5。\n</thought>\n\n<code_block>\n# 生成长度为5的随机中文字符串\n${random_chinese}  GenerateRandom  | 5 | 赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将弹窗中的备注设置为八位随机字符串，点击确认，校验页面上含有$random_str，校验页面包含GB或MB",
        "output": "<thought>\n1. 使用`GenerateRandom`生成八位随机字符串。\n2. 使用`SetPopupField`将弹窗中的“备注”设置为该随机字符串。\n3. 使用`Click`点击弹窗中的“确认”。\n4. 使用`CheckHasText`校验页面上含有生成的随机字符串。\n5. 使用`CheckHasAnyText`校验页面包含文本“GB”或“MB”。\n</thought>\n\n<code_block>\n# 生成八位随机字符串\n${random_str}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n\n# 将弹窗中的备注设置为生成的随机字符串\nSetPopupField  备注  ${random_str}\n\n# 点击确认按钮\nClick  确认  | base=POPUP\n\n# 校验页面上含有生成的随机字符串\nCheckHasText  ${random_str}\n\n# 校验页面包含GB或MB\nCheckHasAnyText  GB  MB\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "#写一个名为：“导入企业日历”的关键字，业务逻辑为：点击导入，上传名为  import_calendar.xlsx的文件，然后点确定，校验页面包含  成功",
        "output": "<thought>\n首先，我们需要点击“导入”按钮，然后上传名为“import_calendar.xlsx”的文件。接下来，点击“确定”按钮。最后，校验页面是否包含文本“成功”。可以使用`Click`关键字点击按钮，`UploadFile`关键字上传文件，以及`CheckHasText`关键字进行校验。\n</thought>\n\n<code_block>\n*** Keywords ***\n导入企业日历\n    # 点击导入按钮\n    Click  导入\n    \n    # 上传文件 import_calendar.xlsx\n    UploadFile  import_calendar.xlsx\n    \n    # 点击确定按钮\n    Click  确定\n    \n    # 校验页面包含“成功”文本\n    CheckHasText  成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第一行字典列中的上传",
        "output": "<thought>\n为了解决这个问题，我们需要点击特定单元格内的文本。可以使用`ClickTextOfCell`关键字，行号和列号用于定位单元格。第一行对应的行号是1，字典列对应的列名为“字典”。因此我们可以直接指定行号和列名，再结合需要点击的文本“上传”。\n</thought>\n\n<code_block>\n# 点击表格第一行字典列中的上传\nClickTextOfCell | 1 | 字典 | 上传\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面包含download或者完成",
        "output": "<thought>\n这个场景很简单，要检查页面上是否包含\"download\"或者\"完成\"这两个文本。可以直接使用\"CheckHasAnyText\"关键字。\n</thought>\n\n<code_block>\n# 检查页面上是否包含\"download\"或者\"完成\"的文本\nCheckHasAnyText | download | 完成 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 ‘查看冲突’ 就点击它右上角的叉号",
        "output": "<thought>\n首先，使用IsAnyTextExisting关键字判断页面是否存在文本‘查看冲突’。如果存在，则使用ClickIconToTheDirectionOf关键字点击它右上角的close icon。\n</thought>\n\n<code_block>\n# 判断页面是否存在‘查看冲突’\n${exist}  IsAnyTextExisting | 查看冲突\n\n# 如果存在，点击右上角的关闭图标\nIF  $exist\n    ClickIconToTheDirectionOf | 查看冲突 | topRight | close\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入 admin",
        "output": "<thought>\n分析问题后，输入“admin”可以使用`SendText`关键字，该关键字允许在光标激活位置输入文本。由于没有指定是否输入回车，所以`enter`参数保持默认值`False`。\n</thought>\n\n<code_block>\n# 在光标位置输入admin\nSendText | admin\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "什么都不做",
        "output": "<thought>\n根据题目要求，需要实现一个\"什么都不做\"的操作。在RobotFramework中，BuiltIn库提供了`No Operation`关键字，这个关键字不会执行任何操作，正好符合题目要求。因此直接使用这个内置关键字即可。\n</thought>\n\n<code_block>\n# 什么都不做\nNo Operation\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到包含「元」的 input 元素并点击",
        "output": "<thought>\n根据题目要求，需要找到包含“元”的input元素并点击。通常来说，input元素的文案可能出现在placeholder或value属性中，因此可以使用jq选择器查找元素属性包含“元”的input元素，并对其进行点击。我们可以使用ClickElem关键字来实现点击。\n</thought>\n\n<code_block>\n# 查找并点击包含“元”的input元素，可能在placeholder或value属性中\nClickElem | input[placeholder*='元'],input[value*='元']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断审批节点字段值中存在${user_ceo}[user_name], 并检测页面不存在报错",
        "output": "<thought>\n首先，我们需要检查“审批节点”字段中是否包含文本`${user_ceo}[user_name]`。我们可以使用`CheckFieldContains`关键字来完成此任务。接下来，我们需要确保页面不存在报错，可以使用关键字`CheckErrMsg`来检测页面是否有异常提示，如果没有异常提示，`CheckErrMsg`将成功通过。\n</thought>\n\n<code_block>\n# 检查审批节点字段中存在指定用户\nCheckFieldContains | 审批节点 | ${user_ceo}[user_name]\n\n# 检查页面没有报错\nCheckErrMsg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“账号密码登录”的关键字，接受 user, password 参数，默认值分别为：${USERNAME} 和 ${PASSWORD}，业务逻辑为：输入账号、密码，然后点击登录，并等待页面加载完成",
        "output": "<thought>\n按照逻辑步骤，首先需要设置账号和密码字段，然后点击登录按钮，最后等待页面加载完成。使用`SetField`来填写账号和密码，用`Click`来点击登录按钮，`WaitLoading`来等待页面完成加载。\n</thought>\n\n<code_block>\n*** Keywords ***\n账号密码登录\n    [Arguments]  ${user}=${USERNAME}  ${password}=${PASSWORD}\n    \n    # 输入账号\n    SetField  账号  ${user}\n    \n    # 输入密码\n    SetField  密码  ${password}\n    \n    # 点击登录按钮\n    Click  登录\n    \n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 请输入签字 有几个，如果大于 2 个就点击下一步",
        "output": "<thought>\n首先，我们需要使用`GetElemCount`关键字获取\"请输入签字\"的文本元素数量。然后，我们可以使用RF的内置条件结构`IF/ELSE`来判断获取的数量是否大于2。如果大于2，则点击\"下一步\"按钮，使用`Click`关键字。\n</thought>\n\n<code_block>\n# 获取“请输入签字”文本元素的数量\n${cnt}  GetElemCount | :contains(请输入签字)\n\n# 如果数量大于2，点击“下一步”\nIF  ${cnt} > 2\n    Click  下一步\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断变量 ${current_url} 中是否包含 '/数字/' 这样的正则匹配字符串，如果有就打印 exist 否则打印 not exist",
        "output": "<thought>\n为了判断变量 `${current_url}` 中是否包含 '/数字/' 这样的正则匹配字符串，我们需要使用Python的正则表达式库检查。如果字符串匹配，就打印 `exist`，否则打印 `not exist`。由于没有现成的关键字支持这个正则表达式检查，我们可以使用 `Evaluate` 来执行Python代码。\n</thought>\n\n<code_block>\n# 使用Python正则表达式判断变量current_url中是否包含'/数字/'的格式\n${match}  Evaluate  re.search(r'/\\\\d+/', '''${current_url}''') is not None  modules=re\n\nIF  ${match}\n    Log  exist\nELSE\n    Log  not exist\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "A 应该为真，B 应该为假",
        "output": "<thought>\n这个问题的要求是验证 A 的值应为真，B 的值应为假，核心的 RF 关键字是 `Should Be True` 和 `Should Not Be True`。\n</thought>\n\n<code_block>\n# 验证 A 的值为真\nShould Be True  ${A}\n\n# 验证 B 的值为假\nShould Not Be True  ${B}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个进入高级分析子页面关键字，接受 ${menu}，关键字中先访问URL: ${MAIN_PAGE}/datafinder/project/${PROJECT_ID}/event-analysis，等待页面加载完成后，然后点击对应的菜单",
        "output": "<thought>\n首先打开给定的URL，然后等待页面加载完成，最后点击给定的菜单。我选择 \"OpenUrl\" 关键字来打开URL， \"WaitLoading\" 关键字来等待页面加载完成，并使用 \"ClickMenu\" 关键字点击菜单。\n</thought>\n\n<code_block>\n进入高级分析子页面\n    [Arguments]  ${menu}\n    OpenUrl  ${MAIN_PAGE}/datafinder/project/${PROJECT_ID}/event-analysis\n    WaitLoading\n    ClickMenu  ${menu}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“显微镜创建分群”的关键字，接受 name、desc 2个参数，默认值都为空 业务逻辑是：\n1. 点击存为用户分群\n2. 设置 ‘分群名称’ 为 name\n3. 如果 desc 不为空，就把 ‘分群描述’ 设置为 desc，否则就把 ‘分群描述’ 设置为 name + '的分群描述'\n4.点击确定\n5.检查页面应该包含“用户分群保存成功->查看分群”",
        "output": "<thought>\n首先，通过设置默认值为空，定义一个关键字“显微镜创建分群”接受两个参数name和desc。接着，点击“存为用户分群”，设置“分群名称”为name。接下来，使用IF条件判断desc是否为空。如果不为空，则设置“分群描述”为desc；否则，将“分群描述”设置为name加上“的分群描述”。最后，点击确定并检查页面是否包含“用户分群保存成功->查看分群”。\n</thought>\n\n<code_block>\n显微镜创建分群\n    [Arguments]  ${name}=  ${desc}=\n\n    # 点击存为用户分群\n    Click  存为用户分群\n\n    # 设置分群名称\n    SetField  分群名称  ${name}\n\n    # 判断分群描述是否为空\n    IF  '${desc}' != ''\n        # desc不为空，设置分群描述为desc\n        SetField  分群描述  ${desc}\n    ELSE\n        # desc为空，设置分群描述为name + '的分群描述'\n        SetField  分群描述  ${name}的分群描述\n    END\n\n    # 点击确定\n    Click  确定\n\n    # 检查页面包含“用户分群保存成功->查看分群”\n    CheckHasText  用户分群保存成功->查看分群\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义  数组 [\"xxx\", \"xx\", \"xxxxxx]",
        "output": "<thought>\n在这个场景中，我们可以使用Robot Framework的内置关键字或Python代码来定义并操作数组。\n我们将使用Robot Framework的内置关键字来创建数组。\n</thought>\n\n<code_block>\n# 使用内置关键字来定义数组\n${array}    Create List    xxx    xx    xxxxxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击创建合同，随后点击 ‘上传单个合同’，上传文件 ${CONTRACT_FILE1}，校验页面包含：文件已自动转为pdf",
        "output": "<thought>\n首先点击\"创建合同\"按钮，可以使用 `Click` 关键字。然后点击“上传单个合同”按钮，再使用 `Click` 关键字。接着使用 `UploadFile` 关键字上传文件 `${CONTRACT_FILE1}`。最后使用 `CheckHasText` 关键字来校验页面包含“文件已自动转为pdf”。\n</thought>\n\n<code_block>\n# 点击创建合同按钮\nClick | 创建合同\n\n# 点击上传单个合同按钮\nClick | 上传单个合同\n\n# 上传文件CONTRACT_FILE1\nUploadFile | ${CONTRACT_FILE1}\n\n# 校验页面包含“文件已自动转为pdf”\nCheckHasText | 文件已自动转为pdf\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击列表中带有 ‘测试’ 的选项",
        "output": "<thought>\n需要选择带有“测试”文本的选项，因此可以使用SelectOption关键字并传递“测试”作为参数。\n</thought>\n\n<code_block>\n# 选择带有‘测试’的选项\nSelectOption | 测试\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 配置优化，点击 配置模板。提示：依次点击",
        "output": "<thought>\n这个场景要求依次点击 \"配置优化\" 和 \"配置模板\"。可以使用 `ClickTextOneByOne` 关键字来实现。\n</thought>\n\n<code_block>\n# 依次点击 配置优化 和 配置模板\nClickTextOneByOne | 配置优化 | 配置模板\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击业务BP负责人下方输入框，输入凤银洁，选择下拉值",
        "output": "<thought>\n在这个场景中，我们需要先点击一个特定输入框或文本区域，然后输入名字“凤银洁”，最后选择相应的下拉值。首先可以通过定位文本“业务BP负责人”下方的input或textarea元素进行点击，接着在该输入框中输入文本“凤银洁”，最后选择下拉列表中的一个值。我们可以使用`FindElemToTheDirectionOf`来查找元素，然后用`FillArea`输入文本，最后使用`SelectOption`选择下拉值。具体步骤如下：\n</thought>\n\n<code_block>\n# 查找\"业务BP负责人\"下方的输入框\n${input_elem}  FindElemToTheDirectionOf | 业务BP负责人 | bottom | input,textarea\n\n# 在找到的输入框中输入\"凤银洁\"\nFillArea | ${input_elem} | 凤银洁\n\n# 选择下拉选项（假设需要选择第一个选项）\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面中有多少个 class包含 style__UICardsGrid的元素",
        "output": "<thought>\n我们需要计算页面中class包含style__UICardsGrid的元素数量。可以使用GetElemCount关键字，结合jquery选择器语法，来实现这一目标。选择器可以通过属性选择器语法来实现，即[class*='style__UICardsGrid']。\n</thought>\n\n<code_block>\n# 获取class包含style__UICardsGrid的元素个数\n${cnt}  GetElemCount | [class*='style__UICardsGrid']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待success出现，最长等待120s",
        "output": "<thought>\n为了完成此任务，我们可以利用RobotFramework提供的WaitText关键字。因为我们需要等待的文本是\"success\"，所以可以直接使用WaitText | success来实现。设置timeout参数为120秒以满足任务要求。\n</thought>\n\n<code_block>\n# 等待页面上出现success文本，最长等待120秒\nWaitText | success | timeout=120\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 流量层名称输入${layer_name} ，点击升级，检查单元格的第一行第一列内容为${layer_name}",
        "output": "<thought>\n首先，我们需要在页面中找到名为“流量层名称”的字段并输入变量`${layer_name}`，然后我们点击“升级”按钮。最后，我们需要检查表格中第一行第一列的内容是否为`${layer_name}`。为此，可以使用`SetField`关键字输入`layer_name`，使用`Click`关键字点击“升级”按钮，使用`CheckCellHas`关键字检查表格第一行第一列的内容。\n</thought>\n\n<code_block>\n# 向流量层名称输入${layer_name}\nSetField | 流量层名称 | ${layer_name}\n\n# 点击升级\nClick | 升级\n\n# 检查单元格的第一行第一列内容为${layer_name}\nCheckCellHas | 1 | 1 | ${layer_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认表格第一行的 状态 列，内容为 待领取",
        "output": "# 校验表格第一行的状态列，内容为待领取\nCheckCellHas | 1 | 状态 | 待领取"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行关键字 景区boe来客登录",
        "output": "<thought>\n由于问题描述中没有详细列出需要进行的具体操作步骤，因此假设“景区boe来客登录”是一个现成的关键字，可以直接调用。需要做的仅仅是执行此关键字即可。\n</thought>\n\n<code_block>\n# 执行关键字 景区boe来客登录\n景区boe来客登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 操作下边的 更多，点击创建后付费加速器",
        "output": "<thought>\n要实现这个任务，我需要首先找到文本为“操作”的基准元素，然后识别出其下方的“更多”按钮，并点击它。接着，在新的界面上点击“创建后付费加速器”文本。因此，我可以使用`ClickTextToTheDirectionOf`关键字来点击“操作”下方的“更多”，然后使用`Click`关键字点击“创建后付费加速器”。\n</thought>\n\n<code_block>\n# 点击“操作”下方的“更多”\nClickTextToTheDirectionOf | 操作 | bottom | 更多\n\n# 点击“创建后付费加速器”\nClick | 创建后付费加速器\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击包含「营销平台-活动圈品（sku）」文本的元素，设置活动名称为myUI自动化，点击回车，等待页面出现查看详情",
        "output": "<thought>\n首先，通过\"Click\"关键字点击包含“营销平台-活动圈品（sku）”文本的元素。然后，使用\"SetField\"关键字设置“活动名称”字段为“myUI自动化”并点击回车。最后，使用\"WaitText\"关键字等待“查看详情”文本出现。\n</thought>\n\n<code_block>\n# 点击包含「营销平台-活动圈品（sku）」的元素\nClick | 营销平台-活动圈品（sku）\n\n# 设置活动名称为myUI自动化并回车\nSetField | 活动名称 | myUI自动化 | enter=True\n\n# 等待页面出现查看详情\nWaitText | 查看详情\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击底部的编辑按钮",
        "output": "<thought>\n在这个场景中，我们需要点击位于屏幕底部的“编辑”按钮。使用`ClickElemToTheDirectionOf`关键字，可以通过指定基准元素和方向来点击目标元素。由于我们要点击“编辑”按钮，而未明确指出基准元素，我们可以假设基准元素为屏幕中心，这样可以确保在任何页面布局下都能正确定位到底部的“编辑”按钮。在此基础上，确定方向为“bottom”，并寻找名为“编辑”的文本。\n</thought>\n\n<code_block>\n# 点击屏幕底部的“编辑”按钮\nClickTextToTheDirectionOf | SCREEN_CENTER | bottom | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断${old_name}不等于${new_name}",
        "output": "<thought>\n可以使用RF的内置关键字来判断两个变量是否不相等，例如可以使用\"Should Not Be Equal As Strings\"关键字来完成这项任务。\n</thought>\n\n<code_block>\n# 判断${old_name} 不等于 ${new_name}\nShould Not Be Equal As Strings | ${old_name} | ${new_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左上角的返回按钮",
        "output": "<thought>\n要点击左上角的返回按钮，可以考虑以下几种方法：\n1. 使用ClickTextToTheDirectionOf关键字，以屏幕中心为基准，方向为左上角\n2. 使用ClickIconToTheDirectionOf关键字，如果返回按钮是一个图标\n3. 使用ClickElemToTheDirectionOf关键字，如果知道返回按钮的选择器\n\n根据题目描述\"左上角的返回按钮\"，最合适的是第一种方法，使用ClickTextToTheDirectionOf，以屏幕中心为基准(SCREEN_CENTER)，方向为topLeft，文本为\"返回\"\n</thought>\n\n<code_block>\n# 点击左上角的返回按钮\nClickTextToTheDirectionOf | SCREEN_CENTER | topLeft | 返回\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击保存，页面应该包含编辑成功",
        "output": "\n    \n<thought>\n 首先需要点击保存按钮，然后验证页面是否包含“编辑成功”文本。可以使用Click关键字点击保存，然后使用CheckHasText关键字检查文本。\n </thought>\n \n <code_block>\n # 点击保存按钮\n Click | 保存\n \n # 验证页面包含“编辑成功”文本\n CheckHasText | 编辑成功\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "断言表格中没有数据",
        "output": "<thought>\n问题中已经指出了要断言表格中没有数据，这就意味着我们需要对表格的行数进行检查。因此，这个问题的解决方案就是：我们可以通过“CheckRowCount”关键字来断言表格的行数为0来实现。这是因为如果表格中没有数据，则表格的行数应该为0。\n</thought>\n\n<code_block>\n# 断言表格中没有数据，即表格的行数应该为0\nCheckRowCount | 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "按照以下步骤创建 关键字，关键字命名为 创建TEA指标组，返回参数${tea_metric_name} ：\n1.点击 创建指标组 按钮\n2.填写 TEA产品 Libra\n3.点击确定按钮\n4.等待新页面加载 并 转换的新窗口\n5.点击 保存指标组 按钮\n6.生成八位的全小写随机字符串，存在变量 ${tea_metric_name} 里\n7.将 ${tea_metric_name} 开头加上 Libra_autotest_ 并存回 ${tea_metric_name}\n8.填写 名称 ${tea_metric_name}\n9.填写 描述 ${tea_metric_name}\n10.点击 确定 按钮创建TEA指标组",
        "output": "<thought>\n为了解决问题，我们需要依次实现以下步骤：  \n1. 点击“创建指标组”按钮使用 `Click` 关键字。  \n2. 使用 `SetField` 填入“TEA产品 Libra”。  \n3. 点击“确定”按钮使用 `Click`。  \n4. 使用 `WaitLoading` 和 `ToNewWindow`，等待新页面加载并切换窗口。  \n5. 点击“保存指标组”按钮使用 `Click`。  \n6. 生成8位随机小写字符串并赋值给 `${tea_metric_name}`。  \n7. 在 `${tea_metric_name}` 前添加前缀并重设变量。  \n8. 使用 `SetField` 填写名称和描述。  \n9. 点击“确定”按钮使用 `Click`。\n</thought>\n\n<code_block>\n*** Keywords ***\n创建TEA指标组\n    [Return]  ${tea_metric_name}\n\n    # 点击创建指标组按钮\n    Click  创建指标组\n\n    # 填写TEA产品 Libra\n    SetField  TEA产品  Libra\n\n    # 点击确定按钮\n    Click  确定\n\n    # 等待新页面加载 并 转换的新窗口\n    WaitLoading\n    ToNewWindow\n\n    # 点击保存指标组按钮\n    Click  保存指标组\n\n    # 生成八位的全小写随机字符串\n    ${tea_metric_name}  GenerateRandom  8  [LOWER]\n\n    # 将 ${tea_metric_name} 加上前缀并重设变量\n    ${tea_metric_name}  Set Variable  Libra_autotest_${tea_metric_name}\n\n    # 填写名称和描述\n    SetField  名称  ${tea_metric_name}\n    SetField  描述  ${tea_metric_name}\n\n    # 点击确定按钮创建TEA指标组\n    Click  确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置测试套件变量：${规则标签-全类型}, 其值为 ${name}",
        "output": "<thought>\n这个任务涉及设置一个测试套件变量，可以使用`Set Suite Variable`关键字，这个关键字允许我们在测试套件范围内设置一个变量。根据分析，需要将变量`${规则标签-全类型}`设置为`${name}`。\n</thought>\n\n<code_block>\n# 设置测试套件变量\nSet Suite Variable  ${规则标签-全类型}  ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 TEST_APP_ID 存在，就把它赋值给变量 app_id，否则就使用 ${host}  ${cookie_value}  ${project_name}  参数调用关键字 create_test_project 生成 app_id",
        "output": "<thought>\n首先要判断变量 TEST_APP_ID 是否存在，如果存在就赋值给 app_id。如果不存在，则调用 create_test_project 关键字并传递所需参数来生成 app_id。\n</thought>\n\n<code_block>\n# 判断变量 TEST_APP_ID 是否存在\n${exist}  IsVarExisting  TEST_APP_ID\n\n# 如果存在，直接赋值给 app_id\nIF  ${exist}\n    ${app_id}  Set Variable  ${TEST_APP_ID}\nELSE\n    # 如果不存在，调用 create_test_project 来生成 app_id\n    ${app_id}  create_test_project  ${host}  ${cookie_value}  ${project_name}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把p_date那一行的字段类型改成date, 其实就是要操作（p_date, 字段类型）单元格",
        "output": "<thought>\n首先，我要定位到目标单元格，我会选择FillCell关键字，因为这个关键字让我能够直接通过行和列确定一个具体的单元格，并输入指定的值。在这里，“p_date”就是行名，而“字段类型”就是列名，对应的值就是“date”。\n</thought>\n\n<code_block>\n# 设置p_date行的字段类型为date\nFillCell | p_date | 字段类型 | date\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 placeholder=\"Include all  by default\" ，设置 class=\"arco-input-tag-input arco-input-tag-input-size-default\" value=\"\"> 为 bptestsg02",
        "output": "<thought>\n首先需要点击弹窗中的目标元素，可以通过 `Click` 关键字，基于文本匹配来实现。这里的文本需要是唯一可识别的。其次，需要在特定的类名的输入框中设置值，可以使用 `FillArea` 关键字来完成，基于 jquery 选择器来找到对应的元素。\n</thought>\n\n<code_block>\n# 点击 placeholder=\"Include all  by default\" 的元素\nClick | Include all  by default | base=POPUP\n\n# 设置 class=\"arco-input-tag-input arco-input-tag-input-size-default\" 的元素的值为 a-big-shop\nFillArea | [class=\"arco-input-tag-input arco-input-tag-input-size-default\"] | a-big-shop\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class名为oc-row-radio内的文字：门店",
        "output": "<thought>\n需要使用Click关键字来点击class名为oc-row-radio内的文字\"门店\"。可以通过ClickElem选择器来实现，选择器为\".oc-row-radio:contains(门店)\"。\n</thought>\n\n<code_block>\n# 点击class名为oc-row-radio内的文字：门店\nClickElem | [class=oc-row-radio]:contains(门店)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查弹窗中元素<div class=\"arco-switch-text-holder\">存在文本 ‘是’",
        "output": "<thought>\n需要检查弹窗中是否存在类名为`arco-switch-text-holder`的`div`元素，并且该元素中包含文本。可以使用`CheckHasElem`关键字结合jQuery选择器来实现这个检查。选择器需要表示弹窗中的特定元素，因此需要使用`base=POPUP`来指定基准元素为弹窗。\n</thought>\n\n<code_block>\n# 校验弹窗中存在类名为arco-switch-text-holder的div元素，且包含文本：是\nCheckHasElem | div.arco-switch-text-holder:contains(是) | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成6个月后的时间，格式年月",
        "output": "<thought>\n为了生成6个月后的时间并将其格式化为年月，可以使用RobotFramework的`Add Time To Date`和`Convert Date`关键字。首先使用`Get Current Date`获取当前日期，然后使用`Add Time To Date`增加6个月，最后用`Convert Date`将日期格式化为所需的年月格式。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 增加6个月\n${future_date}  Add Time To Date  ${current_date}  6 months  result_format=%Y-%m-%d\n\n# 将日期格式化为年月格式\n${formatted_date}  Convert Date  ${future_date}  result_format=%Y%m\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 开始日期 为：2024.06.01，结束日期 为：2024.06.07",
        "output": "<thought>\n解决此问题的思路是使用BatchSetFields关键字，字段名为\"开始日期\"和\"结束日期\"，字段值为对应的日期。这样就可以批量操作这两个字段。\n</thought>\n\n<code_block>\n# 使用BatchSetFields批量设置日期\nBatchSetFields | 开始日期=2024.06.01 | 结束日期=2024.06.07\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格第一列的内容，校验他们任意包含 1-1  1-2和1-3",
        "output": "<thought>\n此问题需要获取表格第一列的内容，然后校验其任意包含 \"1-1\", \"1-2\" 和 \"1-3\"。首先使用`GetColValues`获取第一列的值，然后使用RF的Should系列关键字进行校验。\n</thought>\n\n<code_block>\n# 获取表格第一列的内容\n@{first_col_values}  GetColValues | 1\n\n# 校验第一列的任意内容包含 \"1-1\", \"1-2\" 和 \"1-3\"\nShould Contain Any  ${first_col_values}  1-1  1-2  1-3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行删除键10次",
        "output": "<thought>\n要在某个位置按删除键10次，可以使用`Press Keys`关键字直接模拟按键操作。此处需要发送BACKSPACE键10次，可以使用循环来重复执行`Press Keys`操作。\n</thought>\n\n<code_block>\n# 按删除键10次\nFOR    ${i}    IN RANGE    10\n    Press Keys    None    BACKSPACE\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第二行中的单选按钮",
        "output": "<thought>\n为了解决这个问题，我们可以使用\"ClickElemOfRow\"关键字，它允许我们在特定的表格行中点击一个元素。在这个特定的案例中，我们想要点击第二行中的单选按钮，这个单选按钮可以通过jquery选择器\":radio\"来选取。因此，我们将\"row_name_or_id\"设置为2(表示第二行)，\"selector\"设置为\":radio\"，并默认选择第一个表格(\"tbl=1\")，基准元素\"base\"我们暂时不设置，因为关键字的默认值就是当前页面。\n</thought>\n\n<code_block>\n# 点击表格第二行中的单选按钮\nClickElemOfRow | 2 | :radio | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "从这个字符串中\"//agent.oceanengine.com/apps/bi/new-chart?system_id=8&token=8940833a-ed9f-11ee-a367-b8599f1e9f3a\"取出token字段",
        "output": "<thought>\n解决问题思路：从URL字符串中提取token字段，可以使用Python的urllib库解析URL和查询参数。我们可以使用Evaluate关键字来执行Python代码，从URL中提取出token字段的值。\n</thought>\n\n<code_block>\n# 设置URL变量\n${url}    Set Variable    //agent.oceanengine.com/apps/bi/new-chart?system_id=8&token=8940833a-ed9f-11ee-a367-b8599f1e9f3a\n\n# 解析查询字符串\n${query}    Evaluate    urllib.parse.urlparse($url).query    modules=urllib\n\n# 提取token字段\n${token}    Evaluate    urllib.parse.parse_qs($query)['token'][0]    modules=urllib\n\n# 打印token\nLog    ${token}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入姓名李四",
        "output": "<thought>\n解决问题思路：\n要输入姓名李四，我们使用关键字SetField，将姓名字段填入“李四”。这是一个基本的关键字使用。\n</thought>\n\n<code_block>\n# 输入姓名李四\nSetField | 姓名 | 李四\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取元素 ${elem} 的图片并保存基准图, 命名为: 图片1",
        "output": "<thought>\n为了截取元素 ${elem} 的图片并保存为基准图，命名为“图片1”，可以使用`ElemScreenshot`关键字进行截图，然后保存为基准图。由于没有提供直接保存为基准图的关键字，可以使用`ImageDiff`进行截图并保存。\n</thought>\n\n<code_block>\n# 截取元素 ${elem} 的图片, 命名为：图片1，并保存为基准图\nImageDiff | ${elem} | pic_name=图片1 | sim=1.0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成长度为5的随机字段设置为新增数据源弹窗内的数据源名称",
        "output": "<thought>\n在这个场景中，我们首先需要生成一个长度为5的随机字符串，并将其用作数据源名称。这个字符串需要在一个特定的弹窗中设置为数据源名称字段的值。基于需求，我会首先使用`GenerateRandom`关键字生成随机字符串，然后通过`SetPopupField`关键字将其设置为数据源名称。因为涉及到弹窗，所以需要使用`SetPopupField`关键字，这个关键字可以直接用于弹窗中的字段操作。\n</thought>\n\n<code_block>\n# 生成长度为5的随机字符串\n${random_name}  GenerateRandom  | 5 | [LETTERS][NUMBERS]\n\n# 设置新增数据源弹窗内的数据源名称为生成的随机字符串\nSetPopupField | 数据源名称 | ${random_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面上表格的数量",
        "output": "<thought>\n要获取页面上表格的数量，可以使用RF提供的`GetElemCount`关键字，并结合jQuery选择器来查找所有的表格元素。表格在HTML中通常用`<table>`标签表示，因此可以使用选择器`table`来匹配所有表格元素。\n</thought>\n\n<code_block>\n# 获取页面上的表格数量\n${table_count}  GetElemCount | table\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个“打开数据源列表”关键字，操作逻辑是：打开浏览器，访问 DATASOURCE_PAGE",
        "output": "<thought>\n解决问题思路：我们需要打开浏览器并访问指定的数据源页面，使用OpenBrowser和OpenUrl关键字来实现。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开数据源列表\n    # 打开浏览器并访问数据源页面\n    OpenBrowser  ${DATASOURCE_PAGE} \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 去掉${time1} 的日期部分，其中 time1 是类似 2026-08-31 15:23:45 格式的字符串",
        "output": "<thought>\n 在这个场景中，我需要去掉时间字符串的日期部分，只保留时间部分。Robot Framework 的内置库中并没有直接提供这种操作的关键字，因此需要使用一些基本的字符串操作来实现。我会使用 Split String 关键字，该关键字可以将字符串从指定的分隔符处切分为一个列表，然后通过 Get From List 关键字获取列表中的第二个元素，即时间部分。\n </thought>\n \n <code_block>\n # 使用空格作为分隔符，切分字符串\n ${time_parts}= Split String ${time1} ${SPACE}\n # 获取切分后的列表中的第二个元素，即时间部分\n ${time_only}= Get From List ${time_parts} 1\n Log To Console ${time_only}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个：“弹窗关闭”的关键字，作用是当页面上出现立即推广或者跳过、下一步文字时 点击页面的 class 属性包含 close，没有则跳过",
        "output": "<thought>\n首先，需要定义一个自定义关键字\"弹窗关闭\"。该关键字的作用是先判断页面上是否存在文本\"立即推广\"、\"跳过\"或\"下一步\"，如果存在则点击页面上 class 属性包含 \"close\" 的元素。如果不存在这些文本，则跳过操作。\n\n具体步骤如下：\n1. 使用 `IsAnyTextExisting` 判断是否存在\"立即推广\"、\"跳过\"或\"下一步\"中的任意一个。\n2. 如果存在这些文本，则使用 `ClickElem` 点击 class 属性包含 \"close\" 的元素。\n3. 如果不存在这些文本，则跳过操作。\n\n用到的关键字：\n1. `IsAnyTextExisting` - 判断页面上是否存在指定的文本。\n2. `ClickIfElemExists` - 尝试点击指定的元素。\n3. `IF` - 条件判断。\n</thought>\n\n<code_block>\n*** Keywords ***\n弹窗关闭\n    # 判断页面上是否存在 \"立即推广\"、\"跳过\" 或 \"下一步\"\n    ${exist}  IsAnyTextExisting  立即推广  跳过  下一步\n    \n    # 如果存在这些文本，点击 class 属性包含 \"close\" 的元素\n    IF  ${exist}\n        ClickIfElemExists  [class*=close]\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击空白地方",
        "output": "<thought>\n 这个场景很简单，只需要调用ClickWhiteArea关键字即可实现点击空白地方的操作。\n </thought>\n \n <code_block>\n # 点击空白地方\n ClickWhiteArea\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置请选择开始日期为当前时间的五分钟后，请选择结束日期为当前时间的十分钟后",
        "output": "<thought>\n我们需要使用“Add Time To Date”关键字来计算当前时间之后的五分钟和十分钟的日期时间。首先，我们会获取当前时间，然后分别添加五分钟和十分钟得到所需的开始日期和结束日期。接下来，我们将使用“SetField”关键字来设置“请选择开始日期”和“请选择结束日期”字段。\n</thought>\n\n<code_block>\n# 获取当前日期时间\n${current_date}  Get Current Date\n\n# 计算五分钟后的日期时间\n${start_date}  Add Time To Date  ${current_date}  5 minutes  result_format=%Y-%m-%d %H:%M:%S\n\n# 计算十分钟后的日期时间\n${end_date}  Add Time To Date  ${current_date}  10 minutes  result_format=%Y-%m-%d %H:%M:%S\n\n# 设置“请选择开始日期”为五分钟后的日期时间\nSetField  请选择开始日期  ${start_date}\n\n# 设置“请选择结束日期”为十分钟后的日期时间\nSetField  请选择结束日期  ${end_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 弹窗中 “产品汇总”表 13列中 包含101 、15列中 包含77",
        "output": "<thought>\n要检查弹窗中“产品汇总”表格的特定列是否包含特定文本，可以使用`CheckColHas`关键字。需要分别校验第13列和第15列中是否包含“0.00”。\n</thought>\n\n<code_block>\n# 校验弹窗中“产品汇总”表的第13列包含“0.00”\nCheckColHas  13  101  tbl=产品汇总  base=POPUP\n\n# 校验弹窗中“产品汇总”表的第15列包含“0.00”\nCheckColHas  15  77  tbl=产品汇总  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击请选择送审队列，选择第一个",
        "output": "<thought>\n首先，我们需要点击\"请选择送审队列\"，这步可以通过使用Click关键字实现，然后我们需要选择第一个选项，可以通过SelectOption关键字实现，并使用OPTIONS_1作为参数。\n</thought>\n\n<code_block>\n# 点击\"请选择送审队列\"\nClick | 请选择送审队列 \n\n# 选择第一个选项\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 添加筛选条件 选择 加速域名，点击id=\"status\"底下的role为combobox的元素",
        "output": "<thought>\n首先，我需要点击文本为“添加筛选条件”的按钮，可以使用`Click`关键字。然后，通过`SelectOption`关键字选择“加速域名”。接下来，我需要找到id为“status”下方特定角色为combobox的元素并进行点击，可以使用`FindElemToTheDirectionOf`查找，并使用`ClickElem`进行点击操作。\n</thought>\n\n<code_block>\n# 点击 \"添加筛选条件\"\nClick | 添加筛选条件\n\n# 选择 \"加速域名\"\nSelectOption | 加速域名\n\n# 查找 id=\"status\" 元素下方的 role=\"combobox\" 的元素\n${combobox_elem}  FindElemToTheDirectionOf | [id=status] | bottom | [role=combobox]\n\n# 点击查找到的组合框元素\nClickElem | ${combobox_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上方“深圳汇艺谷网络”，选择“测试POI-单店解绑303“，点击“确认切换”",
        "output": "<thought>\n根据场景描述，我们需要实现以下步骤：\n\n1. 找到页面右上方的“深圳汇艺谷网络”文本并点击。\n2. 在出现的选项中，选择“测试POI-单店解绑303”。\n3. 点击“确认切换”按钮。\n\n我们可以使用ClickTextToTheDirectionOf来找到并点击右上方的“深圳汇艺谷网络”文本。然后使用SelectOption来选择需要的选项“测试POI-单店解绑303”。最后，使用Click关键字点击“确认切换”按钮。\n</thought>\n\n<code_block>\n# 点击右上方的“深圳汇艺谷网络”\nClickTextToTheDirectionOf | SCREEN_CENTER | topRight | 深圳汇艺谷网络\n\n# 选择“测试POI-单店解绑303”选项\nSelectOption | 测试POI-单店解绑303\n\n# 点击“确认切换”\nClick | 确认切换\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认警告弹窗",
        "output": "<thought>\n要确认警告弹窗，我们应使用接受/确认警告的关键字，即 `AcceptAlert`。如果需要检测弹窗中的某些文本，则还可以使用 `CheckAlertHas`。在这个场景中，我们不需要进行文本验证，所以只需使用 `AcceptAlert` 即可。\n</thought>\n\n<code_block>\n# 确认警告弹窗\nAcceptAlert\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验\"有效任务\"下方是“单协议”，“单协议”下方是“网络质量”",
        "output": "<thought>\n首先，我们需要使用`CheckHasTextToTheDirectionOf`关键字来校验\"有效任务\"下方是否包含“单协议”，然后再次使用`CheckHasTextToTheDirectionOf`关键字来校验“单协议”下方是否包含“网络质量”。在这个过程中，我们需要确保每一步都准确地找到相应的文本。\n</thought>\n\n<code_block>\n# 校验\"有效任务\"下方是“单协议”\nCheckHasTextToTheDirectionOf | 有效任务 | bottom | 单协议\n\n# 校验“单协议”下方是“网络质量”\nCheckHasTextToTheDirectionOf | 单协议 | bottom | 网络质量\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取浏览器当前的url，从中解析出域名 domain",
        "output": "<thought>\n在这个场景中，我们需要获取当前网页的URL，并从中解析出域名。可以使用`GetCurrentUrl`关键字获取URL，接着使用Python解析库`urllib`来提取域名。\n</thought>\n\n<code_block>\n# 获取当前URL\n${url}  GetCurrentUrl\n\n# 解析域名\n${domain}  Evaluate  urllib.parse.urlparse($url).netloc  modules=urllib\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 收入币种 为 人民币，设置 支出币种 为 人民币，设置 预估支出币种 为 人民币",
        "output": "<thought>\n此场景中，我们需要批量设置三个字段的值为\"人民币\"。通过使用`BatchSetFields`关键字，可以在一次调用中同时设置多个字段的值。这将通过提供字段名及其对应的值来实现。\n</thought>\n\n<code_block>\n# 批量设置 收入币种，支出币种，预估支出币种 为 人民币\nBatchSetFields  收入币种=人民币  支出币种=人民币  预估支出币种=人民币\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “计费模式”\n选择 弹窗 “包年包月”\n点击“确定”按钮",
        "output": "<thought>\n首先点击“计费模式”文本，然后选择弹窗中的“包年包月”，最后点击弹窗中的“确定”按钮。可以使用Click、SelectOption、Click关键字。\n</thought>\n\n<code_block>\n# 点击“计费模式”\nClick | 计费模式\n\n# 选择弹窗中的“包年包月”\nSelectOption | 包年包月 | base=POPUP\n\n# 点击弹窗中的“确定”按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 设置第1个账务账期为2024-09 ～ 2024-10",
        "output": "<thought>\n 根据题目描述，这个场景可以通过调用SetField关键字来实现，其中name为\"账务账期\"，要设置的值为\"2024-09 ～ 2024-10\"，idx为0表示第一个。\n </thought>\n \n <code_block>\n # 设置第1个账务账期为2024-09 ～ 2024-10\n SetField | 账务账期 | 2024-09 ～ 2024-10 | idx=0\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格第一行包含：删除",
        "output": "<thought>\n通过CheckRowHas关键字，可以检查表格的特定行是否包含指定的文本。这是EasyUILib的内置功能之一，不需要编写额外的代码。\n</thought>\n\n<code_block>\n# 校验表格第一行包含：删除\nCheckRowHas | 1 | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击规则创建下面的立即创建, 然后点击刷新方式右边的元素，最后点击分群Vm后面的更多icon",
        "output": "<thought>\n首先，我们需要点击规则创建下面的立即创建文本，我们可以使用ClickTextToTheDirectionOf关键字，base设为规则创建，direction设为bottom，text设为立即创建。\n然后，我们需要点击刷新方式右边的元素，这时我们并不知道元素的具体信息，此时我们需要先定位到刷新方式元素，再使用ClickElemToTheDirectionOf关键字，base设为刷新方式元素，direction设为right。\n最后，我们需要点击分群Vm后面的更多icon，我们可以使用ClickIconToTheDirectionOf关键字，base设为分群Vm，direction设为right，icon设为more。\n</thought>\n\n<code_block>\n# 首先点击规则创建下面的立即创建\nClickTextToTheDirectionOf | 规则创建 | bottom | 立即创建\n\n# 然后点击刷新方式右边的元素\nClickElemToTheDirectionOf | 刷新方式 | right \n\n# 最后点击分群Vm后面的更多icon\nClickIconToTheDirectionOf | 分群Vm | right | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 弹窗中 “Payer账号汇总”表中 第2行 第2列 为火山引擎",
        "output": "<thought>\n要解决这个问题，我们需要校验弹窗中表格的特定单元格内容。首先，我们需要选择正确的表格(“Payer账号汇总”)，然后确定我们要检查的单元格（第2行，第2列），最后校验该单元格的文本是否为“火山引擎”。我们可以使用`CheckCellHas`关键字来完成这个任务。\n</thought>\n\n<code_block>\n# 校验弹窗中“Payer账号汇总”表中第2行第2列为火山引擎\nCheckCellHas | 2 | 2 | 火山引擎 | tbl=Payer账号汇总 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在搜索框中输入\"商品A\"并点击搜索",
        "output": "<thought>\n首先需要找到搜索框并输入关键字\"商品A\"，然后找到搜索按钮并点击。可以使用SetField关键字来输入关键字，使用Click关键字来点击搜索按钮。\n</thought>\n\n<code_block>\n# 在搜索框中输入\"商品A\"，这里假设输入框中有placeholder属性包含 ‘搜索’\nSetField | 搜索 | 商品A\n\n# 点击搜索按钮\nClick | 搜索\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 请输入密钥 所在的元素，输入 123",
        "output": "<thought>\n需要查找并点击文本为“请输入密钥”的元素，然后在该元素处输入“123”。可以使用`FindByText`获取该元素，然后结合`ClickElem`与`SendText`实现点击和输入。\n</thought>\n\n<code_block>\n# 查找文本为“请输入密钥”的元素\n${elem}  FindByText | 请输入密钥\n\n# 点击该元素\nClickElem | ${elem}\n\n# 输入密钥123\nSendText | 123\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找div元素，class为xyz，内容包含“所属指标分组”",
        "output": "<thought>\n这个任务需要查找div元素，需要满足两个条件，class为xyz和内容包含“所属指标分组”。通过阅读RF关键字说明，可以发现关键字FindElem符合要求，它可以查找jquery选择器表示的元素。这里的jquery选择器可以写成\"div[class=xyz]:contains('所属指标分组')\"，其中div表示HTML中的div元素，[class=xyz]表示class为xyz，:contains('所属指标分组')表示内容包含\"所属指标分组\"。\n</thought>\n\n<code_block>\n# 查找class为xyz，内容包含“所属指标分组”的div元素\n${elem}  FindElem | div[class=xyz]:contains('所属指标分组')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在文本'失败'，则返回失败",
        "output": "<thought>\n首先，我们需要使用`IsAnyTextExisting`关键字来判断页面是否存在文本'失败'。如果存在，我们将使用`Should Be True`来检查结果，并返回失败。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本'失败'\n${exist}  IsAnyTextExisting | 失败\n\n# 如果存在'失败'文本，就返回失败\nIF  ${exist}\n    Fail  测试失败：页面存在文本'失败'\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标悬浮到conf_xXcWL, 点击autotest_生命周期_离线, 断言 实施中文案 出现, 点击操作, 将 备注 输入为：UI自动化通过CBA评估",
        "output": "<thought>\n首先，鼠标移动到名为 `conf_xXcWL` 的字段上。然后点击文本为 `autotest_生命周期_离线` 的元素。接下来，断言页面包含 `实施中文案` 文本。点击 `操作` 按钮，最后在名为 `备注` 的字段中输入 `UI自动化通过CBA评估`。\n</thought>\n\n<code_block>\n# 移动到字段 conf_xXcWL 上\nMoToField | conf_xXcWL\n\n# 点击 autotest_生命周期_离线\nClick | autotest_生命周期_离线\n\n# 校验页面包含实施中文案\nCheckHasText | 实施中文案\n\n# 点击操作\nClick | 操作\n\n# 设置备注为 UI自动化通过CBA评估\nSetField | 备注 | UI自动化通过CBA评估\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用关键字 判断数据集文件夹是否存在 如果返回false，执行关键字 创建数据集文件夹",
        "output": "<thought>\n首先，使用关键字判断数据集文件夹是否存在，如果返回结果为False，则执行创建数据集文件夹的关键字。利用RF内置的IF结构来实现逻辑判断。\n</thought>\n\n<code_block>\n# 判断数据集文件夹是否存在\n${exist}  判断数据集文件夹是否存在\n\n# 如果不存在，则创建数据集文件夹\nIF  '${exist}' == 'False'\n    创建数据集文件夹\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到第一个输入框，输入1111",
        "output": "<thought>\n为了找到第一个input或textarea元素并输入\"1111\"，我们可以使用`FindElem`关键字来定位符合条件的元素。由于我们需要定位第一个元素，使用`:eq(0)`选择器。然后可以使用`SendText`关键字将文本输入到此元素中。\n</thought>\n\n<code_block>\n# 查找第一个input或textarea元素\n${elem}  FindElem | input:eq(0), textarea:eq(0)\n\n# 点击激活此输入元素，然后向找到的第一个元素输入1111\nClick Element | ${elem}\nSendText | 1111\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待一秒，点击 结束咨询 按钮，弹窗中点击 确定 按钮，等待直到 结束咨询 按钮消失",
        "output": "<thought>\n对于此场景，我们首先需要等待一秒钟（使用Sleep关键字）。然后点击\"结束咨询\"按钮（使用Click关键字）。在弹出的弹窗中，我们需要点击\"确定\"按钮（使用Click关键字，并设置base为POPUP）。最后，等待\"结束咨询\"按钮消失（使用WaitTextDisappear关键字）。\n</thought>\n\n<code_block>\n# 等待1秒\nSleep | 1s\n\n# 点击结束咨询按钮\nClick | 结束咨询\n\n# 点击弹窗中的确定按钮\nClick | 确定 | base=POPUP\n\n# 等待结束咨询按钮消失\nWaitTextDisappear | 结束咨询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${是否成功}为：成功，则检测页面存在 提交成功！，如果为：失败，则检测页面存在 Invalid URL in request",
        "output": "<thought>\n首先需要判断变量`${是否成功}`的值，然后根据其值选择不同的校验逻辑。如果值为\"成功\"，则校验页面包含文本\"提交成功！\"。如果值为\"失败\"，则校验页面包含文本\"Invalid URL in request\"。可以使用`CheckHasText`关键字来实现文本的校验。\n</thought>\n\n<code_block>\n# 判断是否成功\nIF  \"${是否成功}\" == \"成功\"\n    # 检查页面是否包含“提交成功！”\n    CheckHasText  提交成功！\nELSE IF  \"${是否成功}\" == \"失败\"\n    # 检查页面是否包含“Invalid URL in request”\n    CheckHasText  Invalid URL in request\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击整体数据分析左侧的广告数据分析文字\n ",
        "output": "<thought>\n 首先，确定\"整体数据分析\"和\"广告数据分析\"都是文本，而且需要点击的目标是\"整体数据分析\"文本左侧的\"广告数据分析\"文本。因此，我们可以使用“ClickTextToTheDirectionOf”关键字，其中基准元素是\"整体数据分析\"，方向是左侧，目标文本是\"广告数据分析\"。\n </thought>\n \n <code_block>\n # 点击整体数据分析左侧的广告数据分析\n ClickTextToTheDirectionOf | 整体数据分析 | left | 广告数据分析\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择当前页面的第一个表格行",
        "output": "<thought>\n 选择当前页面的第一个表格行，可以使用关键字\"SelectTableRow\"，其中行名或id参数设置为1即表示第一行。\n </thought>\n \n <code_block>\n # 选择第一个表格行\n SelectTableRow | 1\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“等待标签人数计算完毕”的关键字；接受参数：name,操作逻辑为：\n查看当前页面是否包含：“计算中”，若有，就等待5s后刷新页面，等待页面加载好，重复此过程，最多15次，若没有就结束",
        "output": "<thought>\n首先，使用`IsAnyTextExisting`判断页面是否包含“计算中”。如果存在，使用`Sleep`等待5秒，然后调用`RefreshPage`刷新页面，再用`WaitLoading`等待页面加载完成。通过循环重复这个过程，直到“计算中”不存在或者达到最大尝试次数（15次）。\n</thought>\n\n<code_block>\n*** Keywords ***\n等待标签人数计算完毕\n    [Arguments]  ${name}\n    ${attempts}  Set Variable  0\n    FOR  ${INDEX}  IN RANGE  15\n       ${exist}  IsAnyTextExisting  计算中\n       IF  ${exist}\n           Sleep  5s\n           RefreshPage\n           WaitLoading  timeout=30\n           ${attempts}  Set Variable  ${INDEX}\n       ELSE\n           Exit For Loop\n       END\n    Log  检查完成，共尝试了${attempts}次\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置表格第一行的状态列为  是否健康",
        "output": "<thought>\n首先，需要找到第一行的状态列，然后使用`FillCell`关键字将其设置为“是否健康”。\n</thought>\n\n<code_block>\n# 将第一行的状态列设置为“是否健康”\nFillCell | 1 | 状态 | 是否健康\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击 ‘不同时段’",
        "output": "<thought>\n任务要求点击文本为“不同时段”的元素。可以直接使用`Click`关键字来完成这个任务。\n</thought>\n\n<code_block>\n# 点击文本为“不同时段”的元素\nClick | 不同时段\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义一个全局变量，名字叫“case_name”",
        "output": "<thought>\n可以使用Robot Framework的BuiltIn库中的Set Global Variable关键字来定义全局变量。\n</thought>\n\n<code_block>\n# 定义全局变量case_name\nSet Global Variable  ${case_name}  MyCase\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击下一页，然后点击删除，最后点击确定",
        "output": "<thought>\n要实现“点击下一页，然后点击删除，最后点击确定”的操作，可以使用`ClickTextOneByOne`关键字，该关键字可以依次点击指定的一系列文本。\n</thought>\n\n<code_block>\n# 依次点击“下一页”、“删除”和“确定”\nClickTextOneByOne | 下一页 | 删除 | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取属性名表格的行数",
        "output": "<thought>\n为了获取属性名表格的行数，可以使用提供的`GetRowCount`关键字。因为表格的名字是属性名，所以在调用时可以直接将其用作`tbl`参数的值。\n</thought>\n\n<code_block>\n# 获取属性名表格的行数\n${row_count}  GetRowCount | tbl=属性名\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 将任务结束时间设置为：一天后\n \n ",
        "output": "<thought>\n 任务是设置任务结束时间为一天后。可以使用RF标准库中的`Get Current Date`获取当前日期，然后使用`Add Time To Date`增加一天。最后，使用`SetField`输入计算出的日期到`任务结束时间` 字段中\n </thought>\n \n <code_block>\n # 获取当前日期\n ${current_date}  Get Current Date | result_format=%Y-%m-%d\n \n # 增加一天\n ${end_date}  Add Time To Date | ${current_date} | 1 days | result_format=%Y-%m-%d\n \n # 输入任务结束时间\n SetField | 任务结束时间 | ${end_date}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建关键字 用户登录, 接受3个参数，${user}, ${password}, ${token}, 返回 ${success}, 关键字逻辑为，输入用户名，密码，点击登录，判断页面是否包含 welcome, 如果存在，则登录成功",
        "output": "<thought>\n创建关键字\"用户登录\"，首先使用\"SetField\"关键字依次输入用户名和密码，然后点击登录按钮，最后使用\"IsAllTextExisting\"判断页面是否包含“welcome”字样。\n</thought>\n\n<code_block>\n用户登录\n    [Arguments]  ${user}  ${password}  ${token}\n    # 输入用户名\n    SetField  | 用户名  | ${user}\n    # 输入密码\n    SetField  | 密码  | ${password}\n    # 点击登录按钮\n    Click  | 登录\n    # 判断页面是否包含 welcome\n    ${success}  IsAllTextExisting  | welcome\n    # 返回登录成功\n    [Return]  ${success}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击火山引擎附近的问号图标",
        "output": "<thought>\n1. 首先分析需求：需要点击\"火山引擎\"附近的问号icon\n2. 根据关键字描述，ClickIcon关键字可以用于点击小图标，并且支持near参数来指定图标附近的文本\n3. 问号icon通常使用\"question\"或\"help\"作为名称，这里选择使用\"question\"\n4. 需要指定near参数为\"火山引擎\"来定位到正确的位置\n5. 不需要指定idx参数，因为默认就是第一个(0)\n6. 不需要指定base参数，因为不是弹窗中的元素\n</thought>\n\n<code_block>\n# 点击火山引擎附近的问号icon\nClickIcon    question    near=火山引擎\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "断言页面存在文字“CUPED-活跃天数-回到app(新)-20210901后开启实验可看”",
        "output": "<thought>\n这个任务很直接，我们只需要使用 CheckHasText 关键字检查页面上是否存在制定的文本即可。所以我们将文本 \"CUPED-活跃天数-回到app(新)-20210901后开启实验可看\" 作为参数传递给这个关键字。\n</thought>\n\n<code_block>\n# 断言页面存在文字“CUPED-活跃天数-回到app(新)-20210901后开启实验可看”\nCheckHasText | CUPED-活跃天数-回到app(新)-20210901后开启实验可看\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择弹出列表包含gender的选项",
        "output": "<thought>\n为了解决这个问题，需要从弹出列表中选择包含文本“gender”的选项。可以使用`SelectOption`关键字，并将`base`参数设置为`POPUP`来指定在弹出层中进行操作。\n</thought>\n\n<code_block>\n# 从弹出列表中选择包含gender的选项\nSelectOption | gender | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 placeholder为请输入的元素，然后输入快捷键：ALT+ARROW_DOWN",
        "output": "<thought>\n首先需要找到placeholder为“请输入”的元素。由于给定的关键字中没有直接查找placeholder属性的方法，可以通过jquery选择器来查找。假设元素是一个input，可以使用`input[placeholder='请输入']`选择器。找到元素后，需要将其点击以激活光标，然后使用`Press Keys`关键字发送快捷键`ALT+ARROW_DOWN`。\n</thought>\n\n<code_block>\n# 找到并点击placeholder为“请输入”的元素\nClickElem | input[placeholder='请输入']\n\n# 发送快捷键 ALT+ARROW_DOWN\nPress Keys | None | ALT+ARROW_DOWN\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 重新加载，点击重新加载，base弹窗",
        "output": "<thought>\n我们首先需要检测页面上是否存在“重新加载”文本。如果存在，则点击它，并且点击动作应该基于弹窗。我们可以使用IsAnyTextExisting来检查文本的存在性，然后使用Click关键字进行点击。\n</thought>\n\n<code_block>\n# 检查页面是否存在“重新加载”文本\n${exist}  IsAnyTextExisting | 重新加载\n\n# 如果文本存在，点击“重新加载”\nIF  ${exist}\n    Click  重新加载  | base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证列表第4列的每一个单元格都包含zhangli",
        "output": "<thought>\n要解决题目中的问题，我们需要先获取表格的总行数，然后逐行检查每个单元格中是否包含\"zhangli\"。 \n这个过程主要包含以下关键字： \n- `GetRowCount`：获取表格的总行数。\n- `FOR`循环：遍历所有的行。\n- `CheckCellHas`：检查某一单元格中是否包含特定的文字。\n</thought>\n\n<code_block>\n# 获取表格行数\n${row_count}=  GetRowCount \n\n# 遍历所有的行\nFOR  ${i}  IN RANGE  1  ${row_count}+1\n     # 检查单元格中是否含有zhangli\n     CheckCellHas | ${i} | 4 | zhangli\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验“预估实发金额”的单位是“万”，并且数字部分>=0",
        "output": "<thought>\n在这个场景中，我们需要校验名为“预估实发金额”的页面字段内容，确定其单位是“万”，且数字部分大于等于0。首先，我们可以使用CheckFieldContains关键字来检查字段内容包含“万”这个单位。然后，我们可以使用Evaluate执行Python代码来判断数字部分是否大于等于0。\n</thought>\n\n<code_block>\n# 校验名为“预估实发金额”字段包含“万”这个单位\nCheckFieldContains | 预估实发金额 | 万\n\n# 获取“预估实发金额”字段的内容并判断数字部分是否大于等于0\n${amount}  GetFieldVal   预估实发金额\n${num}    Evaluate    re.sub(r\"[^0-9.]\", \"\", \"${amount}\")    re\nShould Be True    ${num} >= 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class为filter-left-top的元素中的第一个class包含arco-space-item的元素输入aa",
        "output": "<thought>\n本任务要求在class为filter-left-top的元素中的第一个class包含arco-space-item的元素输入\"aa\"。我们需要利用FillArea关键字。首先，需要确定jQuery选择器的路径。首先，确定class为filter-left-top的元素，然后选择其下class包含arco-space-item的第一个元素。使用`FillArea`关键字，因为这是基于选择器的操作。选择jQuery选择器的方法可以表示为`.filter-left-top .arco-space-item:eq(0)`。\n</thought>\n\n<code_block>\n# 在class为filter-left-top的元素中的第一个class包含arco-space-item的元素输入\"aa\"\nFillArea  [class=filter-left-top] [class*=arco-space-item]:eq(0)  aa\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置第2个 '服务主体' 右边的筛选器的值为: 北京火山引擎科技有限公司。提示：右边的筛选器就是一个页面控件，这里就是要设置一个有名称的页面字段的值",
        "output": "<thought>\n对于这个问题，首先确定我们要操作的是第二个'服务主体'字段。然后我们需要设置其右边的筛选器，即设置其值为：北京火山引擎科技有限公司。根据题目中的关键字，最佳的操作顺序应该是使用 `SetField` 关键字，这个关键字可以设置具有特定名称的字段的值，通过将 `idx` 参数设置为1（因为在这里，索引从0开始），我们可以确保我们在第二个'服务主体' 字段上设置值。 关键字的参数 `@args` 会被设置为 '北京火山引擎科技有限公司'。此外，因为我们不需要在输入值后按下回车，`enter` 参数应该设置为 `False`，`base` 和 `near` 参数可以保留为空。\n</thought>\n\n<code_block>\n# 设置第2个'服务主体'字段的值为：北京火山引擎科技有限公司\nSetField | 服务主体 | 北京火山引擎科技有限公司 | idx=1 | enter=False\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待【审批中】出现",
        "output": "<thought>\n解决问题思路：\n1. 使用 `WaitText` 关键字等待页面上出现文本【审批中】。\n2. 如果需要等待特定的元素出现，可以使用 `WaitElem` 关键字配合jquery选择器。\n\n由于题目要求的是等待文本【审批中】出现，直接使用 `WaitText` 就可以解决问题。\n\n关键字选取：`WaitText`。\n</thought>\n\n<code_block>\n# 等待页面上出现文本【审批中】\nWaitText | 审批中 | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "移动到 class*=more_btn 的 button 上",
        "output": "<thought>\n首先我需要移动到一个满足 class 包含 \"more_btn\" 的 button 上。这个操作可以通过关键字 \"MoToElem\" 来实现。为了选择符合条件的元素，我将使用 jQuery 选择器。这种选择器可以通过 `[class*=more_btn]` 表示第一个匹配的元素。\n</thought>\n\n<code_block>\n# 移动到 class 包含 more_btn 的第一个 button\nMoToElem | button[class*=\"more_btn\"]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向‘写下你的问题’输入：这是做什么的？",
        "output": "<thought>\n此场景较为简单，只需要使用SetField关键字即可完成任务，其中，name参数为‘写下你的问题’，@args参数为‘这是做什么的？’。\n</thought>\n\n<code_block>\n# 输入问题\nSetField | 写下你的问题 | 这是做什么的？\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "出价系数修改为0.88。提示：这是一个设置页面字段值的操作，可以使用 SetField 关键字",
        "output": "<thought>\n 出价系数为页面字段，可以使用 SetField 关键字修改\n </thought>\n \n <code_block>\n # 设置出价系数为 0.88\n SetField | 出价系数 | 0.88\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格中出现 资产编号为 变量assetId 的表格行。提示：这里其实只需要校验 ‘资产编号’ 这个表格列中包含变量assetId的值即可证明这个值存在表格的一个表格行中",
        "output": "<thought>\n解决问题思路：这个场景需要用到CheckColHas关键字，校验表格的\"资产编号\"列中包含assetId的值。\n</thought>\n\n<code_block>\n# 校验表格的'资产编号'列中包含assetId值\nCheckColHas | 资产编号 | ${assetId}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印 div.demo 元素的信息",
        "output": "<thought>\n要打印 div.demo 元素的信息，可以使用PrintElemRect关键字，通过jquery选择器 \"div.demo\" 定位到该元素。然后将这个元素的空间尺寸/位置等信息打印出来。\n</thought>\n\n<code_block>\n# 打印div.demo元素的信息\nPrintElemRect | div.demo\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格第一行 包含 ${req} 已审批，点击此行中的取消工单，等待 确定取消工单吗 出现，输入撤回原因：已经有一台设备了",
        "output": "<thought>\n首先需要检查表格第一行是否包含文本 `${req}` 和 `已审批`。如果条件成立，则点击该行中的 `取消工单`。接着，等待文本 `确定取消工单吗` 出现，以确保弹窗已经出现。在弹窗中，输入撤回原因，即 `已经有一台设备了`。\n为实现这个逻辑，分多个步骤使用关键词：首先使用 `CheckRowHas` 确认第一行包含所需文本，然后用 `ClickTextOfRow` 点击 `取消工单`。接着使用 `WaitText` 等待确认弹窗，最后用 `SetPopupField` 输入撤回原因。\n</thought>\n\n<code_block>\n# 检查表格第一行包含所需文本\nCheckRowHas | 1 | ${req} | 已审批\n\n# 点击表格第一行中的“取消工单”\nClickTextOfRow | 1 | 取消工单\n\n# 等待“确定取消工单吗”文本出现\nWaitText | 确定取消工单吗\n\n# 在弹窗中输入撤回原因\nSetPopupField | 撤回原因 | 已经有一台设备了\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面弹窗包含“配置启用成功！”",
        "output": "<thought>\n我们需要制定一个策略来检查页面弹窗是否包含“配置启用成功！”。首先，我们需要使用`CheckHasText`关键字，参数为“配置启用成功！”。这将帮助我们校验页面弹窗是否包含该文本。但是，这个关键字默认是在页面级别上操作，它不能直接检查弹窗。为了指定弹窗，我们需要使用`base=POPUP`参数，这意味着我们希望在弹窗上进行操作，而不是在整个页面上。我们还需要注意的是，如果这个关键字在弹窗中找不到指定的文本，则它将返回一个错误，这也意味着我们的测试不会通过。\n</thought>\n\n<code_block>\n# 校验页面弹窗上出现“配置启用成功！”\nCheckHasText | 配置启用成功！ | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算 start_date 和 end_date 两个日期之间相差的天数",
        "output": "<thought>\n要计算两个日期之间的天数差，可以使用Python中的datetime模块。具体来说，我们可以使用datetime的strptime方法将字符串转换为日期对象，然后相减获得天数差。我们需要使用Evaluate关键字来执行Python代码。\n</thought>\n\n<code_block>\n# 计算两个日期之间相差的天数\n${days_difference}    Evaluate    (datetime.datetime.strptime($end_date, '%Y-%m-%d') - datetime.datetime.strptime($start_date, '%Y-%m-%d')).days    modules=datetime\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击立即部署，设置Step为1000秒，设置数据源为“自动化测试专用【请勿操作】”，设置请输入promQL语句进行查询为“test”，设置别名为“test”",
        "output": "<thought>\n 为了解决这个问题，我需要依次执行以下操作：\n 1. 点击“立即部署”按钮。\n 2. 设置“Step”为1000秒。\n 3. 设置“数据源”为“自动化测试专用【请勿操作】”。\n 4. 设置“请输入promQL语句进行查询”为“test”。\n 5. 设置“别名”为“test”。\n \n 我们可以使用以下关键字：\n - `Click` 用于点击“立即部署”。\n - `SetField` 用于设置“Step”、“数据源”、“请输入promQL语句进行查询”和“别名”。\n \n 我将依次使用这些关键字来实现需求。\n </thought>\n \n <code_block>\n # 点击立即部署按钮\n Click | 立即部署\n \n # 设置Step为1000秒\n SetField | Step | 1000秒\n \n # 设置数据源为自动化测试专用【请勿操作】\n SetField | 数据源 | 自动化测试专用【请勿操作】\n \n # 设置请输入promQL语句进行查询为test\n SetField | 请输入promQL语句进行查询 | test\n \n # 设置别名为test\n SetField | 别名 | test\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用「校验热点分析数据」关键字，其中第一个参数分别设置为：「URL」、「DOMAIN」，第二个参数分别设置为：「按流量」、「按请求数」、「按状态码」，就是多次调用，每次使用不同参数",
        "output": "<thought>\n基于以上需求，我们需要创建一个循环来多次调用「校验热点分析数据」关键字，每次调用时，参数的组合都不同。在Robot Framework中，通常使用FOR循环来实现这种需求。我将创建两个列表，一个列表包含「URL」、「DOMAIN」，另一个列表包含 「按流量」、「按请求数」、「按状态码」。然后，我将使用这两个列表来生成所有可能的参数组合并调用关键字「校验热点分析数据」。\n</thought>\n\n<code_block>\n# 创建两个列表来存储所有可能的参数值\n@{first_param}  Create List  URL  DOMAIN\n@{second_param}  Create List  按流量  按请求数  按状态码\n\n# 对第一个参数列表进行遍历\nFOR  ${item1}  IN  @{first_param}\n    # 对第二个参数列表进行遍历\n    FOR  ${item2}  IN  @{second_param}\n        # 调用「校验热点分析数据」关键字，使用不同参数的组合\n        校验热点分析数据  ${item1}  ${item2}\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击每周几不可用   选择周日",
        "output": "<thought>\n这个场景要求我们首先点击文本为“每周几不可用”的元素，然后选择一个选项“周日”。根据提供的关键字描述，“点击每周几不可用”可以使用`Click`关键字，而“选择周日”可以使用`SelectOption`关键字。两个操作之间没有复杂的依赖关系，因此可以依次执行。\n</thought>\n\n<code_block>\n# 点击文本“每周几不可用”\nClick | 每周几不可用\n\n# 选择选项“周日”\nSelectOption | 周日\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前日期前一天的日期，格式为\"2024-11-18\"，并存入参数data_time",
        "output": "<thought>\n为了解决这个问题，我们需要利用RF标准库中的日期时间处理关键字。首先，我们可以使用Get Current Date获取当前日期，然后使用Subtract Time From Date减去一天来得到前一天的日期。最后，使用Convert Date将日期格式化为所需的\"2024-11-18\"格式，并将结果存入参数data_time。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date\n\n# 减去一天以获得前一天的日期\n${previous_date}  Subtract Time From Date  ${current_date}  1 day\n\n# 将日期转换为指定格式\n${data_time}  Convert Date  ${previous_date}  result_format=%Y-%m-%d\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " #选择合同信息为“不需要合同” 无合同原因选择“时间紧急”，填写无合同说明为“前端UI测试demo”",
        "output": "<thought>\n 首先，选择合同信息为“不需要合同”，可以使用`SetField`关键字。然后，无合同原因选择“时间紧急”，同样使用`SetField`关键字。最后，填写无合同说明为“前端UI测试demo”，仍然可以使用`SetField`，因为 SetField 关键字的作用就是填写页面字段，它能自动识别字段的具体控件类型并完成填写。\n </thought>\n \n <code_block>\n # 选择合同信息为“不需要合同”\n SetField | 合同信息 | 不需要合同\n \n # 选择无合同原因为“时间紧急”\n SetField | 无合同原因 | 时间紧急\n \n # 填写无合同说明为“前端UI测试demo”\n SetField | 无合同说明 | 前端UI测试demo\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击当前页面上添加商品按钮，在弹出的模态框中输入商品ID，点击查询，然后勾选单选框，点击确认",
        "output": "<thought>\n首先，我们需要点击“添加商品”按钮。然后在弹出的模态框中输入商品ID并点击“查询”按钮。接下来，勾选单选框，最后点击“确认”按钮。可以使用Click、SetPopupField、CheckBoxOn等关键字来完成这些操作。\n</thought>\n\n<code_block>\n# 点击添加商品按钮\nClick | 添加商品\n\n# 在模态框中输入商品ID\nSetPopupField | 商品ID | example_id\n\n# 点击查询按钮\nClick | 查询 | base=POPUP\n\n# 勾选单选框，假设选框名为 example_name\nCheckBoxOn | example_name | base=POPUP\n\n# 点击确认按钮\nClick | 确认 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "REDIS_IPS 用，分割，取第一",
        "output": "<thought>\n这个任务需要处理一个包含多个Redis IP地址的字符串，用逗号分隔，然后取第一个IP地址。我们可以使用RobotFramework的内置关键字来处理字符串分割和获取列表中的第一个元素。\n\n1. 首先需要使用`Split String`关键字将字符串按逗号分割成列表\n2. 然后使用`Get From List`关键字获取列表中的第一个元素(索引为0)\n3. 可以将结果存储在一个变量中供后续使用\n</thought>\n\n<code_block>\n# 将REDIS_IPS字符串按逗号分割成列表\n@{redis_ip_list}    Split String    ${REDIS_IPS}    ,\n\n# 获取列表中的第一个IP地址\n${first_redis_ip}    Get From List    ${redis_ip_list}    0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：触发查询，如果包含查询的 button 元素存在, 就点击",
        "output": "<thought>\n先使用 RF 的内置关键字 \"IsAnyElemExisting\" 来检查是否存在包含查询的 button 元素，如果存在就点击。\n</thought>\n\n<code_block>\n触发查询\n    # 判断是否存在包含查询的 button 元素\n    ${exist}  IsAnyElemExisting | button:contains(查询)\n    IF  ${exist}\n        # 如果存在就点击\n        ClickElem | button:contains(查询)\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索请求 url 中包含 feishu.cn/search, 且请求方式为 GET，且请求体匹配 appid.*167 的最后5请求",
        "output": "<thought>\n在这个场景中，我们需要使用提供的关键字搜索特定的HTTP请求。使用`Search Requests`关键字可以从浏览器发出的请求中查找符合条件的请求。我们使用url中的模式`feishu.cn/search`，HTTP方法为`GET`，并且请求体需要匹配正则模式`appid.*167`。我们需要找到满足这些条件的最后5个请求，因此`mode`参数需要设置为`last5`。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 feishu.cn/search, 且请求方式为 GET，且请求体匹配 appid.*167 的最后5请求\n${resp_json}  Search Requests  feishu.cn/search  GET  last5  appid.*167\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选表格第一行",
        "output": "<thought>\n勾选表格第一行，其实就是选中表格第一行。为了选中表格的第一行，我们有一个关键字 `SelectTableRow` 可以使用。这个关键字需要一个参数，表示要选中的表格行。在这个例子中，我们要选中的是表格的第一行，所以我们传递 `1` 作为参数。\n</thought>\n\n<code_block>\n# 选中表格第一行\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问 ${MAIN_PAGE}/mdm",
        "output": "<thought>\n1. 这个场景只需要访问一个特定的URL路径，所以只需要使用`OpenUrl`关键字\n2. URL由基础地址`${MAIN_PAGE}`和路径`/mdm`组成，可以直接拼接\n</thought>\n\n<code_block>\n# 访问MDM主页面\nOpenUrl | ${MAIN_PAGE}/mdm\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向元素 ${elem} 中输入 @{config}",
        "output": "<thought>\n此问题的需求是向指定的元素（${elem}）中输入一串列表数据（@{config}）。在这种情况下，可用关键词“FillArea”来实现。FillArea能够操作页面的控件区域并将值填入到控件中，因此它完全适合这个场景。\n</thought>\n\n<code_block>\n# 向给定元素代表的控件区域填写一个或多个值\nFillArea | ${elem} | @{config}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 num =0, num1=1",
        "output": "<thought>\n使用`Set Variable`关键字来创建和初始化变量。\n首先创建变量 num，并将其值设为0。\n然后创建变量 num1，并将其值设为1。\n</thought>\n\n<code_block>\n# 创建变量 num 并设置为 0\n${num}  Set Variable  0\n\n# 创建变量 num1 并设置为 1\n${num1}  Set Variable  1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 设置arco-select-view-input类为tob",
        "output": "<thought>\n 要设置具有`arco-select-view-input`类的元素为`tob`，可以使用`FillArea`关键字与jQuery选择器相结合。选择器需要对应到包含该类的元素。\n </thought>\n \n <code_block>\n # 设置arco-select-view-input类元素的值为tob\n FillArea | [class=arco-select-view-input] | tob\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在placeholder=请选择对应流量层的input元素中输入${layer_name}",
        "output": "<thought>\n首先，我们需要定位到\"请选择对应流量层\"的input元素，然后在该元素中输入${layer_name}。我们可以使用\"SetField\"关键字来达到这个目标，其中\"name\"参数可以是元素的placeholder属性值。\n</thought>\n\n<code_block>\n# 定位placeholder为\"请选择对应流量层\"的input元素并输入${layer_name}\nSetField | 请选择对应流量层 | ${layer_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义一个list，里面的元素也为list类型，内层list的元素为string",
        "output": "<thought>\n在这个场景下，我们需要定义一个list，它里面的元素也是list类型，而内层list的元素是string类型。这个任务不涉及使用RobotFramework中的关键字，因为它只是一个Python数据结构的定义问题。我们可以直接在RobotFramework中使用Evaluate关键字来执行Python代码，定义这个list。\n</thought>\n\n<code_block>\n# 使用Evaluate关键字定义包含内层list的list\n${outer_list}=  Evaluate  [['string1', 'string2'], ['string3', 'string4'], ['string5']]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘请选择集群’ 为 ‘Dataleap-Hadoop安全模式集群’",
        "output": "<thought>\n要设置字段‘请选择集群’为‘Dataleap-Hadoop安全模式集群’，可以使用`SelectOptionForField`关键字，指定字段名称和选项即可完成。\n</thought>\n\n<code_block>\n# 设置‘请选择集群’为‘Dataleap-Hadoop安全模式集群’\nSelectOptionForField | 请选择集群 | Dataleap-Hadoop安全模式集群\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在第2个 请输入模糊匹配的信息 文本框输入A",
        "output": "<thought>\n首先要找到页面上所有名为\"请输入模糊匹配的信息\"的控件，然后选择第二个控件进行操作。由于该控件可能是input或textarea类型，我们可以使用jquery选择器来精确选择。使用SetField关键字可以实现输入操作。\n</thought>\n\n<code_block>\n# 在第2个 请输入模糊匹配的信息 input/textarea输入A\nSetField | 请输入模糊匹配的信息 | A | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class为dataset-input-search的div元素中输入 0412",
        "output": "<thought>\n通过class名为dataset-input-search的div元素的jquery选择器，使用FillArea关键字将\"0412\"输入到元素中。\n</thought>\n\n<code_block>\n# 输入 0412 到 class 为 dataset-input-search 的 div 中\nFillArea | div[class=dataset-input-search] | 0412\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面滚动到 多选模式",
        "output": "<thought>\n页面滚动到 多选模式，就是要将“多选模式”滚动到视野中，我们可以使用MoveIntoView关键字。此关键字能够将指定的元素滚动到视野中。我们需要首先确定“多选模式”在页面中的选择器，然后使用MoveIntoView关键字将其移动到视野。\n</thought>\n\n<code_block>\n# 将“多选模式”文本元素滚动到视野中\nMoveIntoView | :contains(\"多选模式\")\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到文本：防抖，然后双击",
        "output": "<thought>\n首先需要使用MoTo关键字移动到文本“防抖”，随后使用DClick关键字进行双击操作。\n</thought>\n\n<code_block>\n# 移动到文本“防抖”\nMoTo | 防抖\n\n# 双击文本“防抖”\nDClick | 防抖\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索产品输入框输入访问控制，然后选择访问控制(IAM) ",
        "output": "<thought>\n1. 首先需要定位到搜索产品输入框，可以使用`SetField`关键字来输入文本\n2. 输入\"访问控制\"后，需要从下拉选项中选择\"访问控制(IAM)\"\n3. 选择下拉选项可以使用`SelectOption`关键字\n4. 由于提示中没有提供具体的字段名称，我们可以假设输入框的名称为\"搜索\"或\"产品搜索\"\n5. 选择下拉选项时，可以直接使用文本\"访问控制(IAM)\"，或者如果知道它是第几个选项，可以使用OPTIONS_i格式\n</thought>\n\n<code_block>\n# 在搜索输入框中输入\"访问控制\"\nSetField | 搜索 | 访问控制\n\n# 从下拉选项中选择\"访问控制(IAM)\"\nSelectOption | 访问控制(IAM)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待 弹窗中 显示 不使用 OCR 比对原因，然后打印 ‘收获音浪’ 对应的数值",
        "output": "<thought>\n首先需要等待弹窗中出现文本\"不使用 OCR 比对原因\"，因此可以使用WaitText关键字，并将base设置为POPUP。接下来，获取页面字段\"收获音浪\"对应的值，可以使用GetFieldVal关键字。最后，将获取的值进行打印。\n</thought>\n\n<code_block>\n# 等待弹窗中出现文本\nWaitText | 不使用 OCR 比对原因 | base=POPUP\n\n# 获取字段'收获音浪'的值\n${yinlang_value}  GetFieldVal | 收获音浪\n\n# 打印字段值\nLog | ${yinlang_value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘主播列表’，点击表格第一行‘主播详情’，在主播详情弹框中将‘主播’设为：‘运营经纪人’，如果存在‘开始上麦’，就点击它",
        "output": "<thought>\n首先，使用Click关键字点击‘主播列表’。然后，使用ClickTextOfRow关键字点击表格第一行的‘主播详情’。在弹出的主播详情弹框中，使用SetField将‘主播’字段设为‘运营经纪人’。最后，使用IsAnyTextExisting检查弹框中是否存在‘开始上麦’，如果存在就点击它。\n</thought>\n\n<code_block>\n# 点击‘主播列表’\nClick  主播列表\n\n# 点击表格第一行的‘主播详情’\nClickTextOfRow  1  主播详情\n\n# 在弹窗中将‘主播’设为‘运营经纪人’\nSetField  主播  '运营经纪人'  base=POPUP\n\n# 检查是否存在‘开始上麦’，如果存在则点击\n${exist}  IsAnyTextExisting  开始上麦  base=POPUP\nIF  ${exist}\n    Click  开始上麦  base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面是否存在飞书，并且数量为 2 个",
        "output": "<thought>\n首先，我们需要找到文本内容为“飞书”的所有元素，并使用GetElemCount获取这些元素的数量；然后，我们用RF的内建关键字Should Be Equal As Integers校验获取到的数量是否等于2。\n</thought>\n\n<code_block>\n# 查找文本为”飞书“的所有元素，并获取数量\n${count}  GetElemCount | :contains(飞书)\n\n# 校验获取到的元素数量是否等于2\nShould Be Equal As Integers  ${count}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到包含「大于等于」的元素并点击",
        "output": "<thought>\n要找到包含「大于等于」的元素并点击，我们可以使用FindByText关键字来定位该元素。因为我们只查找一个文本元素，所以可以使用默认参数idx=0。找到元素后，使用Click关键字进行点击。\n</thought>\n\n<code_block>\n# 查找文本包含「大于等于」的元素\n${elem}  FindByText | 大于等于\n\n# 点击找到的元素\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击空白，获取合同总额值，然后对 class包含 style__UIPanelBody 进行截屏，校验截图文案中包含此值",
        "output": "<thought>\n这个问题需要分为三个步骤来解决：首先，点击空白区域以确保页面状态是未选择状态。其次，获取目标字段\"合同总额\"的值。最后，截取指定class元素的截图，并校验截图中的内容是否包含该值。我们将使用ClickWhiteArea、GetFieldVal、ElemScreenshot以及GetElemScreenshotText来实现此操作。最后通过Should Contain校验截图内容。\n</thought>\n\n<code_block>\n# 点击空白区域\nClickWhiteArea\n\n# 获取合同总额值\n${contract_total}  GetFieldVal  合同总额\n\n# 对class包含style__UIPanelBody的元素进行截图\nElemScreenshot | [class*=style__UIPanelBody]\n\n# 获取元素截图中的文本\n${screenshot_text}  GetElemScreenshotText  [class*=style__UIPanelBody]\n\n# 校验截图中包含合同总额值\nShould Contain  ${screenshot_text}  ${contract_total}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 ‘刷新页面重试’ 就点击它，并执行关键字：测试用例备用",
        "output": "<thought>\n首先，使用IsAnyTextExisting关键字判断页面是否存在文本“刷新页面重试”。如果存在，则使用Click关键字点击该文本。然后执行自定义关键字“测试用例备用”。\n</thought>\n\n<code_block>\n# 判断页面是否存在“刷新页面重试”\n${exist}  IsAnyTextExisting | 刷新页面重试\n\n# 如果存在，点击它，并执行关键字：测试用例备用\nIF  ${exist}\n    Click  刷新页面重试\n    测试用例备用\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "使用 python, 分别获取当前的日期 和 11 个月前的日期，年-月 格式",
        "output": "<thought>\n首先，我们需要获取当前的日期和11个月前的日期。这可以通过 `Evaluate` 执行Python代码来实现。可以使用Python的 `datetime` 模块来获取当前日期，然后使用 `relativedelta` 函数来得到11个月前的日期。最后，将这两个日期格式化为 \"年-月\" 格式。\n</thought>\n\n<code_block>\n# 获取当前的日期\n${current_date}  Evaluate  datetime.datetime.now().strftime('%Y-%m')  modules=datetime\n\n# 获取11个月前的日期\n${past_date}  Evaluate  (datetime.datetime.now() - dateutil.relativedelta.relativedelta(months=11)).strftime('%Y-%m')  modules=datetime, dateutil\n\n# 输出当前日期和11个月前的日期\nLog  ${current_date}\nLog  ${past_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 ‘火山登录’ 附近的第二个 ‘请输入’",
        "output": "<thought>\n首先，我们需要使用FindByText关键字查找‘火山登录’文本的元素。然后，应该使用FindNearElem关键字在‘火山登录’文本元素附近查找包含‘请输入’的元素。因为查找的是第二个‘请输入’，我们会使用jquery选择器的:eq(1)来表示第二个元素。\n</thought>\n\n<code_block>\n# 查找文本为‘火山登录’的元素\n${huoshan_elem}  FindByText | 火山登录\n\n# 查找‘火山登录’附近的第二个‘请输入’元素\n${second_placeholder}  FindNearElem | ${huoshan_elem} | :contains(请输入):eq(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置推流窗口为1000，设置推流频率为1000，设置事件定义为test，设置事件等级为L2",
        "output": "<thought>\n 根据给定的任务，我们需要设置四个字段：推流窗口、推流频率、事件定义和事件等级。可以使用 `BatchSetFields` 关键字来批量设置这些字段的值。\n </thought>\n \n <code_block>\n # 设置推流窗口、推流频率、事件定义和事件等级\n BatchSetFields  推流窗口=1000  推流频率=1000  事件定义=test  事件等级=L2\n </code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ${url} 包含 /home",
        "output": "<thought>\n解决问题思路：通过RF的内置关键字 \"Should Contain\" 对字符串进行断言判断，检查 ${url} 是否包含 \"/home\"。\n</thought>\n\n<code_block>\n# 校验 ${url} 包含 /home\nShould Contain  ${url}  /home\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击底部的编辑按钮",
        "output": "<thought>\n为了点击底部的编辑按钮，我们可以使用 ClickTextToTheDirectionOf 关键字，并将基准元素设置为屏幕中心（SCREEN_CENTER）。方向设置为 bottom，然后选择文本为“编辑”的按钮。\n</thought>\n\n<code_block>\n# 点击屏幕底部的编辑按钮\nClickTextToTheDirectionOf | SCREEN_CENTER | bottom | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开链接：https://contract.feishu-pre.cn/task-center/todo//d177fa0a-745c-4368-9489-87233f477f70，进入id为sign的frame，点击证书管理指引，点击超链接CSR生成，退出frame",
        "output": "<thought>\n解决问题思路：\n1. 使用OpenUrl关键字打开指定链接。\n2. 使用ToFrame关键字切换到id为sign的iframe。\n3. 使用Click关键字点击“证书管理指引”文本。\n4. 使用Click关键字点击超链接“CSR生成”文本。\n5. 使用ExitFrame关键字退出iframe。\n</thought>\n\n<code_block>\n# 打开指定的链接\nOpenUrl | https://contract.feishu-pre.cn/task-center/todo//d177fa0a-745c-4368-9489-87233f477f70\n\n# 切换到id为sign的iframe\nToFrame | iframe[id='sign']\n\n# 点击“证书管理指引”文本\nClick | 证书管理指引\n\n# 点击超链接“CSR生成”\nClick | CSR生成\n\n# 退出iframe\nExitFrame\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击监听 Tab，页面不包含：规格，但是展示有 加速域名接入",
        "output": "<thought>\n首先需要点击页面上的“监听”标签。接下来，需要验证页面上不包含“规格”这个文本。最后，确认页面上显示了“加速域名接入”这个文本。可以使用Click关键字点击“监听”标签，然后使用CheckNotHasText关键字检查页面不包含“规格”，最后使用CheckHasText关键字检查页面展示“加速域名接入”。\n</thought>\n\n<code_block>\n# 点击监听标签\nClick | 监听\n\n# 校验页面不包含“规格”\nCheckNotHasText | 规格\n\n# 校验页面展示“加速域名接入”\nCheckHasText | 加速域名接入\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 合同电子版1 基准元素：包括editor-container的class",
        "output": "<thought>\n要解决此问题，我们需要点击文本“合同电子版1”，并且指定一个基准元素，该基准元素是class包含“editor-container”的元素。可以使用关键字Click，并在base参数中使用FindElem来获取具有特定class的基准元素。\n</thought>\n\n<code_block>\n# 查找包含class 'editor-container' 的元素并点击文本 '合同电子版1'\n${base_elem}  FindElem | [class*=editor-container]\nClick | 合同电子版1 | base=${base_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面包含 增长分析，则执行移除操作，否则执行签署操作",
        "output": "<thought>\n首先需要判断页面是否包含文本\"增长分析\"，如果包含，则执行\"移除\"操作，否则执行\"签署\"操作。可以使用`IsAnyTextExisting`关键字来判断文本是否存在，然后用RF的IF/ELSE语句来执行相应的操作。\n</thought>\n\n<code_block>\n# 判断页面是否包含\"增长分析\"\n${exist}  IsAnyTextExisting | 增长分析\n\n# 如果包含\"增长分析\"，则执行移除操作，否则执行签署操作\nIF  $exist\n    移除\nELSE\n    签署\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "组件列表下方存在：Redis、ClickHouse",
        "output": "<thought>\n要实现这个场景，我们需要检查特定的文本是否出现在页面上的组件列表下方。根据给定的关键字集，我们可以选择使用`CheckHasTextToTheDirectionOf`关键字来确认特定文本是否存在于指定基准元素的方向上。由于方向是\"下方\"，所以我们用`bottom`。这里涉及两个文本——Redis和ClickHouse，因此需要分别进行校验。\n</thought>\n\n<code_block>\n# 校验组件列表下方存在 Redis\nCheckHasTextToTheDirectionOf | 组件列表 | bottom | Redis\n\n# 校验组件列表下方存在 ClickHouse\nCheckHasTextToTheDirectionOf | 组件列表 | bottom | ClickHouse\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "经办人设置为空值，手续费设置为100，鼠标hover添加区间，点击确定添加，校验弹框中包含 ‘添加了一条记录’。提示：将字段设置为空，就是清空字段",
        "output": "<thought>\n首先需要将“经办人”字段清空，然后将“手续费”设置为100。接下来需要将鼠标移动到“添加区间”上方来触发可能的效果，再点击“确定添加”按钮。最后，校验弹窗中是否包含文本“添加了一条记录”。\n</thought>\n\n<code_block>\n# 清空经办人字段\nSetField | 经办人 | ${KEY_BACKSPACE}\n\n# 设置手续费为100\nSetField | 手续费 | 100\n\n# 鼠标hover到添加区间\nMoTo | 添加区间\n\n# 点击确定添加\nClick | 确定添加\n\n# 校验弹窗中包含‘添加了一条记录’\nCheckHasText | 添加了一条记录 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问页面 ${BOE_MAIN_PAGE}，等待5s，商品ID设置为1809572504372252，然后点击查询，如果存在跳过任务清单，则点击跳过任务清单，校验页面存在 测试POI-测试海波006",
        "output": "<thought>\n首先使用OpenUrl关键字访问页面，然后使用Sleep等待5秒。接着使用SetField设置商品ID，点击查询按钮。判断“跳过任务清单”是否存在，如果存在则点击。最后，校验页面包含指定文本。\n</thought>\n\n<code_block>\n# 访问主要页面\nOpenUrl | ${BOE_MAIN_PAGE}\n\n# 等待5秒\nSleep | 5s\n\n# 设置商品ID\nSetField | 商品ID | 1809572504372252\n\n# 点击查询\nClick | 查询\n\n# 如果存在“跳过任务清单”则点击\n${exist}  IsAnyTextExisting | 跳过任务清单\nIF  ${exist}\n    Click | 跳过任务清单\nEND\n\n# 校验页面存在指定文本\nCheckHasText | 测试POI-测试海波006\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找第 1 个表格中的 第 1 行中的删除",
        "output": "<thought>\n我们需要查找第1个表格中的第1行中的\"删除\"文本。从描述来看，找到并与\"删除\"文本相匹配的元素。可以使用\"FindByText\"关键字查找文本为\"删除\"的元素，但为了精确定位，我们需要限定在第1个表格中的第1行。由于\"FindByText\"不能直接限定在特定表格行里，我们可以用\"FindElemOfRow\"来精确定位第1行的\"删除\"文本。通过明确行号和需要查找的文本，可以更准确地找到目标元素。\n</thought>\n\n<code_block>\n# 查找第1个表格中的第1行中的删除文本\n${elem}  FindTextOfRow | 1 | 删除 | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向span id=x中粘贴文本 123",
        "output": "<thought>\n根据要求，需要使用Paste关键字将文本123粘贴到指定的元素中。通过示例可知，需要传递选择器和文本作为参数。选择器可以直接使用`span[id=x]`。\n</thought>\n\n<code_block>\n# 向span id=x中粘贴文本 123\nPaste | span[id=x] | 123\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断当前页面，历史补贴这个列表，表头名称是不是：补贴规则、补贴类型、任务类型、规则状态、参与状态、规则生效时间",
        "output": "<thought>\n首先，我们需要获取历史补贴这个列表的表头行，来判断其是否包含指定的文案。使用`GetRowValues`可以获取特定行的所有列内容。因为是获取表头行的内容，所以在这个场景中可以使用特殊值`HEAD`来表示表头行。然后，我们可以使用`Evaluate`来执行Python代码判断获取的表头内容是否包含所有指定文案。\n</thought>\n\n<code_block>\n# 获取历史补贴列表的表头行的内容\n@{header_values}  GetRowValues | HEAD | tbl=历史补贴\n\n# 定义期望的表头名称列表\n@{expected_headers}  Create List  补贴规则  补贴类型  任务类型  规则状态  参与状态  规则生效时间\n\n# 判断表头是否包含指定的文案\n${result}  Evaluate  all(item in $header_values for item in ['补贴规则', '补贴类型', '任务类型', '规则状态', '参与状态', '规则生效时间'])\n\n# 如果包含，打印成功，否则打印失败\nIF  ${result}\n    Log  表头包含所有指定文案\nELSE\n    Log  表头不包含所有指定文案\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击第一个编辑右边的...",
        "output": "<thought>\n 首先，我们需要定位到第一个\"编辑\"文本，然后识别其右侧的目标元素。根据提供的关键字，\"ClickIconToTheDirectionOf\"是最适合的，因为它允许我们指定基准元素和方向。在这个场景中，基准元素是第一个\"编辑\"文本，方向是\"right\"，目标是一个图标。假设目标图标名称是\"more\"。\n </thought>\n \n <code_block>\n # 点击第一个编辑右边的更多icon\n ClickIconToTheDirectionOf | :contains(编辑):eq(0) | right | more\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 “费用明细”表 中 第2行第11列 包含“%”",
        "output": "<thought>\n为了校验“费用明细”表中第2行第11列是否包含“%”，我们可以使用CheckCellHas关键字。这个关键字可以直接用于检查特定单元格中是否存在指定文本。我们需要指定表格名称、行号和列号，然后提供要检查的文本“%”。\n</thought>\n\n<code_block>\n# 校验“费用明细”表中第2行第11列包含“%”\nCheckCellHas | 2 | 11 | % | tbl=费用明细\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ‘合同终止日期’ 设定为距离现在 2年零35天 的日期，年-月-日 格式",
        "output": "<thought>\n首先我们需要从当前日期开始，计算出距离现在2年零35天后的日期。通过使用RF的标准库日期时间关键字，我们可以实现这个计算。计算出目标日期后，我们需要将这个日期格式化为\"年-月-日\"格式。最后，使用SetField关键字将格式化后的日期设置为“合同终止日期”字段的值。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}    Get Current Date    result_format=%Y-%m-%d\n\n# 计算2年零35天后的日期\n${target_date}    Add Time To Date    ${current_date}    2 years 35 days    result_format=%Y-%m-%d\n\n# 设置合同终止日期为计算出的日期\nSetField    合同终止日期    ${target_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向${elem}中的那个‘取值’输入aaa",
        "output": "<thought>\n首先，分析任务是向`取值`字段中输入`aaa`。可以使用`SetField`关键字，因为它能够针对页面字段进行操作。至于`取值`具体在页面中的位置，可以假设需要在某个基准元素`${elem}`中查找并填入该字段。\n\n具体步骤如下：\n1. 使用`SetField`关键字。\n2. 定位字段名称为`取值`。\n3. 填入值`aaa`。\n4. 设置基准元素为`${elem}`。\n\n这样可以满足需求。\n</thought>\n\n<code_block>\n# 向${elem}中的‘取值’字段中输入aaa\nSetField | 取值 | aaa | base=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选表格第一行",
        "output": "<thought>\n要勾选表格第一行，可以使用`CheckBoxOn`关键字或`ClickElemOfRow`关键字来勾选复选框。首先需要确认复选框的位置和如何定位。假设每行都有一个复选框，第一个复选框可以通过`ClickElemOfRow`，选择`:checkbox`进行操作。\n</thought>\n\n<code_block>\n# 勾选表格第一行的复选框\nClickElemOfRow | 1 | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求：curl 'https://console.volcengine.com/datafinder/api/v1/projects/2190650/reports/list' \\\n--data-raw '{\"pagination\":{\"limit\":10,\"page\":1},\"sorting\":{\"field\":\"created_at\",\"direction\":\"descend\"},\"with\":[\"dashboards\",\"user_info\"],\"filter\":{}}'",
        "output": "<thought>\n需要将给定的curl命令转换为Robot Framework脚本。首先确定请求是POST请求，然后从curl命令中提取出URL、请求体和请求头。可以使用UiSendRequest关键字发送POST请求。\n</thought>\n\n<code_block>\n# 发送POST请求到指定URL，包含请求体，无需额外请求头\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/datafinder/api/v1/projects/2190650/reports/list | {\"pagination\":{\"limit\":10,\"page\":1},\"sorting\":{\"field\":\"created_at\",\"direction\":\"descend\"},\"with\":[\"dashboards\",\"user_info\"],\"filter\":{}} | ${None}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击一次‘产品名称’后面的搜索框，输入火山引擎，然后将第四个data-auto-id名为oc-table的页面区域保存为基准图，命名为数据列表校验，相似度为0.95",
        "output": "<thought>\n首先需要找到并点击“产品名称”后面的搜索框，使用`ClickElemToTheDirectionOf`关键字。然后在这个搜索框中输入“火山引擎”，用`SendText`关键字。最后对第四个名为`oc-table`的`data-auto-id`页面区域进行截图对比，使用`ImageDiff`关键字。\n</thought>\n\n<code_block>\n# 点击‘产品名称’后面的搜索框\nClickElemToTheDirectionOf | 产品名称 | right | input\n\n# 输入火山引擎\nSendText | 火山引擎\n\n# 截取第四个data-auto-id为oc-table的区域对比，命名为数据列表校验\nImageDiff | [data-auto-id='oc-table']:eq(3) | pic_name=数据列表校验 | sim=0.95\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“点击任一文本”，接受 args 参数，作用是尝试点击给定的一个或多个 args",
        "output": "<thought>\n这个任务需要根据传入的参数逐一点击文本。可以使用“ClickAny”关键字来实现该功能，因为它能够处理多个文本参数并尝试点击其中任意一个。\n</thought>\n\n<code_block>\n*** Keywords ***\n点击任一文本\n    [Arguments]  @{args}\n    # 尝试依次点击传入的多个文本\n    ClickAny  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在筛选条件中输入：${DEPLOY_MACHINE}",
        "output": "<thought>\n首先，理解任务需求是在筛选条件中输入一个变量 ${DEPLOY_MACHINE}。我们可以使用`SetField`关键字来实现这个操作。需要确认的是是否有一个明确的字段名称，比如 \"筛选条件\"，如果有，可以直接使用；如果没有，需要靠近某个文本，比如 \"筛选条件\" 下方。\n\n假设有一个字段名称 \"筛选条件\"，我们可以直接使用 `SetField`。如果没有明确字段名称但有明确位置，我们可以利用 `near` 参数来实现。\n</thought>\n\n<code_block>\n# 在筛选条件字段中输入 ${DEPLOY_MACHINE}\nSetField | 筛选条件 | ${DEPLOY_MACHINE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含topActionBar的元素中的第2个svg",
        "output": "<thought>\n1. 首先需要定位到class包含\"topActionBar\"的元素，这可以通过jQuery选择器`[class*=\"topActionBar\"]`实现\n2. 然后需要在这个元素内部查找第2个svg元素，jQuery中第2个元素应使用:eq(1)选择器\n3. 组合选择器应为`[class*=\"topActionBar\"] svg:eq(1)`\n4. 使用ClickElem关键字点击这个组合选择器表示的元素\n</thought>\n\n<code_block>\n# 点击class包含topActionBar的元素中的第2个svg\nClickElem  [class*=\"topActionBar\"] svg:eq(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检验当前截图包含 “应付金额=折后价-代金券抵扣=现金支付+信控额度退款抵扣+欠费金额；注：账务账期202303及之前的后付费非结算账单，应付金额=0；”",
        "output": "<thought>\n首先，我们需要获取页面截图中的文本，然后使用RF的校验关键字来判断截图文本是否包含目标文本。\n</thought>\n\n<code_block>\n# 获取页面截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验截图文本中包含目标文本\nShould Contain  ${txt}  应付金额=折后价-代金券抵扣=现金支付+信控额度退款抵扣+欠费金额；注：账务账期202303及之前的后付费非结算账单，应付金额=0；\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class为arco-dropdown-menu-inner的div下，class带有解决的span",
        "output": "<thought>\n要实现点击class为arco-dropdown-menu-inner的div下，class带有解决的span，可以使用ClickElem关键字，通过jQuery选择器来定位目标元素。我们需要在选择器中指定div的class为arco-dropdown-menu-inner，并且在其下选择class包含解决的span。\n</thought>\n\n<code_block>\n# 点击class为arco-dropdown-menu-inner的div下，class带有解决的span\nClickElem | [class='arco-dropdown-menu-inner'] span[class*=解决]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向文本为 ‘用户需提前’ 的span元素中输入两个值：1、天",
        "output": "<thought>\n首先需要找到文本为“用户需提前”的span元素，然后在该元素中输入两个值：“1”和“天”。可以使用FindByText找到该元素，并使用FillArea对其进行填值。\n</thought>\n\n<code_block>\n# 找到文本为‘用户需提前’的span元素\n${elem}  FindByText | 用户需提前 | tag=span\n\n# 向该元素中输入两个值：1、天\nFillArea | ${elem} | 1 | 天\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 ${输出数据集名称} 等于 ‘Clickhouse数据集UI专用’，就在名称中输入此值，否则就调用 ‘生成指定前缀和带有时间戳后缀的名称’ 关键字，使用 ${输出数据集名称} 为参数，生成一个名称并填入",
        "output": "<thought>\n首先判断变量 `输出数据集名称` 是否为 `Clickhouse数据集UI专用`。如果是，就在名称字段中输入此值；否则，调用自定义关键字 `生成指定前缀和带有时间戳后缀的名称` 来生成名称，并输入生成的名称。\n</thought>\n\n<code_block>\n# 检查变量输出数据集名称是否等于'Clickhouse数据集UI专用'\nIF  '${输出数据集名称}' == 'Clickhouse数据集UI专用'\n    # 在名称字段中输入 'Clickhouse数据集UI专用'\n    SetField  名称  Clickhouse数据集UI专用\nELSE\n    # 调用自定义关键字生成名称，并将生成的名称输入到名称字段中\n    ${generated_name}  生成指定前缀和带有时间戳后缀的名称  ${输出数据集名称}\n    SetField  名称  ${generated_name}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格 “项目”列 依次为default、default、default",
        "output": "<thought>\n解决问题思路：根据要求，需要校验表格中“项目”列的内容是否依次为default、default、default。可以使用CheckColHas关键字来验证“项目”列的内容。需要依次检查第一行到第三行的“项目”列是否为default。\n</thought>\n\n<code_block>\n# 校验第一行“项目”列包含default\nCheckCellHas | 1 | 项目 | default\n\n# 校验第二行“项目”列包含default\nCheckCellHas | 2 | 项目 | default\n\n# 校验第三行“项目”列包含default\nCheckCellHas | 3 | 项目 | default\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "读取文件 common.robot 中的所有内容，然后写入 localstorage 中 content字段",
        "output": "<thought>\n我们需要读取文件内容，可以使用内置关键字来读取文件，然后使用LocalStorageSetItem关键字将内容写入localStorage。步骤如下：1. 使用内置关键字读取文件内容。2. 使用LocalStorageSetItem将读取的内容存入localStorage。\n</thought>\n\n<code_block>\n# 使用内置关键字读取文件内容\n${content}  Get File  common.robot\n\n# 将读取的内容写入localStorage中的content字段\nLocalStorageSetItem  content  ${content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将class为oc-card-wrapper的页面区域保存为基准图，命名为推商品-抖音号（汇总）-数据明细页面校验，相似度为1",
        "output": "<thought>\n这个场景的主要任务是使用ImageDiff关键字将页面上class为oc-card-wrapper的区域截图保存为基准图，命名为推商品-抖音号（汇总）-数据明细页面校验，并设置相似度为1。关键点在于如何正确地生成对应的jquery选择器来定位到class为oc-card-wrapper的元素。\n</thought>\n\n<code_block>\n# 截取 class=oc-card-wrapper 的元素的图片，命名为推商品-抖音号（汇总）-数据明细页面校验，相似度为1\nImageDiff | [class=oc-card-wrapper] | pic_name=推商品-抖音号（汇总）-数据明细页面校验 | sim=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 需求单-需求行 后面的输入框，输入台式机，点击空白处，获取当前页面的截图 校验 包含 EPSPV202005170002",
        "output": "<thought>\n在这个场景中，我们需要点击“需求单-需求行”后的input/textarea元素，然后在其中输入“台式机”。为了找到这个input/textarea，我们可以使用`FindElemToTheDirectionOf`关键字来定位“需求单-需求行”右侧的元素。当我们找到这个元素后，可以使用`FillArea`关键字在这个元素上输入“台式机”。为了确认输入生效，我们可以在点击空白处后使用`Screenshot`来获取当前页面的截图，最后使用`GetPageScreenshotText`获取截图中的文本，并使用`Should Contain`校验文本中包含“EPSPV202005170002”。\n</thought>\n\n<code_block>\n# 查找“需求单-需求行”右侧的input/textarea元素\n${elem}  FindElemToTheDirectionOf | 需求单-需求行 | right | input, textarea\n\n# 在找到的元素中输入“台式机”\nFillArea | ${elem} | 台式机\n\n# 点击空白处以取消输入焦点\nClickWhiteArea\n\n# 获取当前页面的截图\nScreenshot\n\n# 从截图中获取文本信息\n${txt}  GetPageScreenshotText\n\n# 校验截图中包含文本“EPSPV202005170002”\nShould Contain  ${txt}  EPSPV202005170002\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“选择自定义日期” 的关键字，接受 start_date, end_date 参数，逻辑是：\n1. 鼠标移动到 ‘自定义时间’ 上\n2. 然后以 start_date, end_date 为参数，调用关键字 ‘操作日期控件’",
        "output": "<thought>\n在此场景中，我们需要创建一个新的关键字“选择自定义日期”。该关键字接受两个参数：start_date和end_date。步骤如下：\n\n1. 使用`MoTo`关键字将鼠标移动到“自定义时间”上。\n2. 调用已有关键字“操作日期控件”，并传入start_date和end_date作为参数。\n\nRF的关键字实现主要涉及到鼠标移动和参数传递。\n</thought>\n\n<code_block>\n*** Keywords ***\n选择自定义日期\n    [Arguments]  ${start_date}  ${end_date}\n    # 移动到 '自定义时间' 上\n    MoTo  自定义时间\n    # 调用关键字 '操作日期控件'，传入参数\n    操作日期控件  ${start_date}  ${end_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 等待页面中出现 ${party_name} 和 ${supplier_name}",
        "output": "<thought>\n页面上需要等待两个文本出现，可以使用WaitText关键字来实现。\n</thought>\n\n<code_block>\n# 等待页面中出现 ${party_name} 和 ${supplier_name}\nWaitText | ${party_name} | ${supplier_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器，输入百度地址，点击 “统计周期”右边的“明细”",
        "output": "<thought>\n首先使用OpenBrowser关键字打开浏览器并导航到百度页面。然后使用ClickTextToTheDirectionOf关键字点击“统计周期”右边的“明细”。\n</thought>\n\n<code_block>\n# 打开百度网址\nOpenBrowser | https://www.baidu.com\n\n# 点击“统计周期”右边的“明细”\nClickTextToTheDirectionOf | 统计周期 | right | 明细\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器访问 http://10.56.226.2:33060/product/ecs/region:ecs+cn-velab-auto/dashboard",
        "output": "<thought>\n根据需求，我们需要打开浏览器，并访问指定的URL。我们可以使用关键字`OpenBrowser`打开浏览器，指定URL参数为`http://10.56.226.2:33060/product/ecs/region:ecs+cn-velab-auto/dashboard`。\n</thought>\n\n<code_block>\n# 打开浏览器并访问指定的URL\nOpenBrowser | http://10.56.226.2:33060/product/ecs/region:ecs+cn-velab-auto/dashboard\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面包含1.116802、52.779047",
        "output": "<thought>\n这个任务是检查页面中同时包含两个指定的文本：1.116802 和 52.779047。可以使用提供的关键字 CheckHasText 来完成这个任务，因为这个关键字可以校验页面同时包含多个指定的文本。\n</thought>\n\n<code_block>\n# 校验页面同时包含文本1.116802和52.779047\nCheckHasText  1.116802  52.779047\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“新建交互” 的关键字，接受参数 trigger_name 表示触发的事件名，逻辑是：\n1. 点击 “交互”，等待0.5s\n2. 点击 “新建交互”，0.5s后，在 div data-testid=\"FloatLayer:body\" 的元素中输入 trigger_name",
        "output": "<thought>\n1. 使用`Click`关键字点击“交互”。\n2. 使用`Sleep`等待0.5秒。\n3. 使用`Click`关键字点击“新建交互”。\n4. 再次使用`Sleep`等待0.5秒。\n5. 使用`FillArea`在特定选择器的元素中输入参数`trigger_name`。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建交互\n    [Arguments]  ${trigger_name}\n    \n    # 点击交互并等待\n    Click  交互\n    Sleep  0.5s\n    \n    # 点击新建交互并等待\n    Click  新建交互\n    Sleep  0.5s\n    \n    # 在指定元素中输入触发事件名\n    FillArea  div[data-testid=\"FloatLayer:body\"]  ${trigger_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击Jack所在表格行中 id=a 且文本为 x 的元素",
        "output": "<thought>\n我们需要在表格中找到包含文本\"Jack\"的那一行，然后点击该行中ID为\"a\"且包含文本\"x\"的元素。可以使用`ClickElemOfRow`关键字来实现，这个关键字允许我们指定行中的元素选择器。\n</thought>\n\n<code_block>\n# 点击Jack所在表格行中 id=a 且文本为 x 的元素\nClickElemOfRow | Jack | [id=a]:contains(x)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 共享钱包，点击弹窗中的立即体验，输入转账金额：600，点击确认，通过弹窗右上角的叉号关闭弹窗 ",
        "output": "<thought>\n为了解决这个问题，我们需要依次执行以下操作：\n1. 使用 `Click` 关键字点击 \"共享钱包\"。\n2. 使用 `Click` 关键字点击弹窗中的 \"立即体验\"，指定 `base=POPUP` 表示在弹窗中查找。\n3. 使用 `SetPopupField` 关键字在弹窗的金额输入字段中输入 \"600\"。\n4. 使用 `Click` 关键字点击弹窗中的 \"确认\"，同样需要指定 `base=POPUP`。\n5. 使用 `ClickIcon` 关键字点击弹窗右上角的关闭小图标 \"close\"，并指定基准 `base=POPUP`。\n</thought>\n\n<code_block>\n# 点击共享钱包\nClick | 共享钱包\n\n# 点击弹窗中的立即体验\nClick | 立即体验 | base=POPUP\n\n# 输入转账金额 600\nSetPopupField | 金额 | 600\n\n# 点击弹窗中的确认\nClick | 确认 | base=POPUP\n\n# 通过弹窗右上角的close icon关闭弹窗\nClickIcon | close | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量y设置为空格",
        "output": "<thought>\n在此场景中，需要将变量y设置为空格。我们可以使用Robot Framework的内置关键字`Set Variable`，并利用`${SPACE}`来表示空格。\n</thought>\n\n<code_block>\n# 设置变量y为空格\n${y}  Set Variable  ${SPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "evaluate if zero count == 0",
        "output": "<thought>\n通过Evaluate关键字执行Python代码来判断zero count是否等于0\n</thought>\n\n<code_block>\n${result}    Evaluate    ${zero_count} == 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 等待页面加载完成，点击 arrow-down 小图标，等待0.5s，在光标处清空内容，并录入“【自动化测试专用】”，并回车",
        "output": "<thought>\n首先使用`WaitLoading`等待页面加载完成。接着使用`ClickIcon`点击`arrow-down`图标。等待0.5秒后，使用`SendText`清空光标处的内容并输入“【自动化测试专用】”，随后输入回车。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 点击arrow-down图标\nClickIcon | arrow-down\n\n# 等待0.5秒\nSleep | 0.5s\n\n# 在光标处清空内容并输入指定文本，最后回车\nSendText | ${KEY_BACKSPACE}【自动化测试专用】 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的第一个icon",
        "output": "<thought>\n要点击弹窗中的第一个icon，分析如下：\n1. 需要使用ClickIcon关键字，因为它专门用于点击图标\n2. 需要指定base=POPUP表示在弹窗中操作\n3. 需要设置idx=0表示点击第一个icon\n4. 由于没有指定具体icon名称，所以name参数可以留空\n</thought>\n\n<code_block>\n# 点击弹窗中的第一个icon\nClickIcon | base=POPUP | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测url是否为https://www.douyin.com/user/MS4wLjABAAAAc0CL7ZdBiVKO2N41W7SWxGrIsGrQ94MtpP4uyr8iwFC8YqUlZlQCOCZmsu8daxCy?imToSecUid=MS4wLjABAAAAc0CL7ZdBiVKO2N41W7SWxGrIsGrQ94MtpP4uyr8iwFC8YqUlZlQCOCZmsu8daxCy",
        "output": "<thought>\n在这个场景中，我们需要获取当前页面的URL，然后检查其是否等于指定的URL。RobotFramework提供了一个名为`GetCurrentUrl`的关键字，可以用于获取当前的URL。获取到URL后，我们可以使用`Should Be Equal As Strings`关键字来验证获取到的URL是否与预期的URL相符。\n</thought>\n\n<code_block>\n# 获取当前页面的URL\n${current_url}  GetCurrentUrl\n\n# 校验获取到的URL是否为预期值\nShould Be Equal As Strings  ${current_url}  https://www.douyin.com/user/MS4wLjABAAAAc0CL7ZdBiVKO2N41W7SWxGrIsGrQ94MtpP4uyr8iwFC8YqUlZlQCOCZmsu8daxCy?imToSecUid=MS4wLjABAAAAc0CL7ZdBiVKO2N41W7SWxGrIsGrQ94MtpP4uyr8iwFC8YqUlZlQCOCZmsu8daxCy\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 URL 包含 xxx",
        "output": "<thought>\n使用WaitURLContainsAny关键字来检查URL是否包含给定文本“xxx”。这个关键字可以直接用于等待和验证URL中包含特定字符串。\n</thought>\n\n<code_block>\n# 等待并校验 URL 包含 \"xxx\"\nWaitURLContainsAny | xxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验缺陷名称下方输入框，内容为：无法连接500",
        "output": "<thought>\n为了实现对缺陷名称下方输入框的内容进行校验，我们需要：\n1. 查找缺陷名称下方的input/textarea元素。\n2. 检查该元素中是否包含指定的文本\"无法连接500\"。\n使用`FindElemToTheDirectionOf`关键字可以查找基准元素下方的目标元素，可能需要使用多个选择器来准确找到input/textarea元素。之后，采用`CheckFieldContains`关键字来校验字段内容。\n</thought>\n\n<code_block>\n# 查找缺陷名称下方的第一个input/textarea元素，并检验内容\n${elem}  FindElemToTheDirectionOf | 缺陷名称 | bottom | input, textarea\nCheckFieldContains | ${elem} | 无法连接500\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击DNS状态右侧的筛选小图标，点击弹窗中的正常 点击确定",
        "output": "<thought>\n在这个任务中，我们需要首先点击“DNS状态”右侧的筛选icon图标，然后在弹窗中点击“正常”并最后点击“确定”。为了实现这个过程，可以使用以下关键字：\n\n1. `ClickIconToTheDirectionOf` 来点击 “DNS状态” 右侧的筛选icon。\n2. `Click` 来点击弹窗中的“正常”。\n3. `Click` 来点击弹窗中的“确定”。\n\n特别需要注意的是，在选择icon时，我们使用右侧方向选择筛选icon，而在弹窗中点击“正常”和“确定”时，我们会将它们的基准元素设置为`POPUP`。\n</thought>\n\n<code_block>\n# 点击“DNS状态”右侧的筛选icon\nClickIconToTheDirectionOf | DNS状态 | right | filter\n\n# 点击弹窗中的“正常”\nClick | 正常 | base=POPUP\n\n# 点击弹窗中的“确定”\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（row, col）中的OK",
        "output": "<thought>\n我们需要在表格中的指定单元格(row, col)点击文本“OK”。这可以通过使用关键字`ClickTextOfCell`来实现。此关键字允许我们指定目标单元格的行和列，然后点击其中的指定文本。\n</thought>\n\n<code_block>\n# 点击单元格（row, col）中的OK\nClickTextOfCell | row | col | OK\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class=arco-radio-button-inner 且 value=2",
        "output": "<thought>\n为了点击指定的元素，我们需要使用ClickElem关键字。根据要求，我们要点击class包含arco-radio-button-inner且value等于2的元素。可以通过jQuery选择器来实现这个选择。选择器可以写为[class='arco-radio-button-inner'][value='2']。\n</thought>\n\n<code_block>\n# 点击class为arco-radio-button-inner且value为2的元素\nClickElem | [class='arco-radio-button-inner'][value='2']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置单元格（4，字段类型）为int",
        "output": "<thought>\n通过查看关键字列表，我们可以看到 \"FillCell\" 关键词可以实现目标，它允许我们指定一个单元格并设置其值。在这个例子中，我们将使用这个关键词将（4，字段类型）单元格设为int。\n</thought>\n\n<code_block>\n# 设置单元格（4，字段类型）为int\nFillCell | 4 | 字段类型 | int\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到自动化分组1右边的icon并点击",
        "output": "<thought>\n根据场景描述，我们需要先移动鼠标到一个元素上，然后点击该元素。目标是“自动化分组1”右边的一个icon。因此，我们可以使用“MoveToIconToTheDirectionOf”关键字来移动鼠标，然后使用“ClickIconToTheDirectionOf”关键字来进行点击。我们假设该icon在“自动化分组1”右边且为第一个icon。\n</thought>\n\n<code_block>\n# 移动到“自动化分组1”右边的第一个icon\nMoveToIconToTheDirectionOf | 自动化分组1 | right | idx=0\n\n# 点击“自动化分组1”右边的第一个icon\nClickIconToTheDirectionOf | 自动化分组1 | right | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置产品合格证为：ISO9001，并忽略可能出现的失败",
        "output": "<thought>\n对于这一场景，需要使用`SetField`关键字来设置产品合格证字段。为了确保即使出现失败错误也不会影响测试执行，我们可以使用Robot Framework的`Run Keyword And Ignore Error`来忽略错误。\n</thought>\n\n<code_block>\n# 设置产品合格证为 ISO9001，并忽略可能出现的失败\nRun Keyword And Ignore Error  SetField | 产品合格证 | ISO9001\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取id=a的元素个数",
        "output": "<thought>\n这个场景要求获取特定id的元素个数，使用RF提供的GetElemCount关键字可以直接实现。使用selector为[id=a]即可。\n</thought>\n\n<code_block>\n# 获取id=a的元素个数\n${cnt}  GetElemCount | [id=a]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到先前的窗口，点击class没有arco-link-disabled的“详情”，校验页面url包含id=",
        "output": "<thought>\n首先，我们需要切换回先前的窗口。然后，使用`ClickElem`关键字来点击class不包含`arco-link-disabled`的“详情”。最后，通过`WaitURLContainsAny`关键字来校验页面的URL是否包含`id=`。\n</thought>\n\n<code_block>\n# 切换到先前的窗口\nToPrevWindow\n\n# 点击class没有arco-link-disabled的“详情”\nClickElem | :not([class*=arco-link-disabled]):contains(详情)\n\n# 校验页面url包含id=\nWaitURLContainsAny | id=\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对比 ${selector} 和名称为 11 的基准图，预期一致",
        "output": "<thought>\n解决问题思路: 本场景需要使用ImageDiff关键字对${selector}元素进行截图，并和预先保存的基准图进行对比。需要设置selector和pic_name参数。\n</thought>\n\n<code_block>\n# 对比 ${selector} 和名称为 11 的基准图，预期一致\nImageDiff | ${selector} | pic_name=11\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果表格行 ${resource_name} 中包含 ‘审批中’，就结束用例，并打印日志，当前在审批中状态，无法重新申请",
        "output": "<thought>\n这个问题的核心是判断表格行中是否包含指定文本。如果包含，则结束当前用例，并打印日志。因此，需要使用`IsRowContainsText`来检查指定文本是否存在。如果存在，则利用`Log`记录日志，并使用`Fail`关键字终止测试。\n</thought>\n\n<code_block>\n# 检查表格行 ${resource_name} 中是否包含 '审批中'\n${exist}  IsRowContainsText | ${resource_name} | 审批中\n\n# 如果包含 '审批中' 则打印日志并结束用例\nIF  ${exist}\n    Log  当前在审批中状态，无法重新申请\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“查看标签预估数量并完成创建” 的关键字，接受参数 count，默认值为 -1，逻辑为：\n1. 点击 ‘预估数量’，并校验页面无异常\n2. 等页面加载完成后，校验表格第一行的 ‘预估数量’ 列的值应该 > count\n3. 然后点击 ‘确定’，接着点击 ‘创建完成’，并校验页面无异常\n4. 最后校验页面包含 ‘新建标签’、‘标签预览’",
        "output": "<thought>\n为了解决这个问题，我们将按顺序执行以下步骤：\n\n1. 使用 `Click`关键字点击‘预估数量’。\n2. 使用 `CheckErrMsg` 确保页面无异常。\n3. 使用 `WaitLoading` 等待页面加载完成。\n4. 使用 `GetCellValue` 获取表格第一行‘预估数量’列的值。\n5. 使用内置 `Should Be True` 验证获取的值是否大于 `count`。\n6. 使用 `ClickTextOneByOne` 顺序点击‘确定’和‘创建完成’。\n7. 使用 `CheckErrMsg` 再次检查页面无异常。\n8. 使用 `CheckHasText` 验证页面包含‘新建标签’和‘标签预览’。\n\n如果 `count`为默认值 `-1`，我们将仍然进行上述验证。\n\n下面是自动化脚本。\n</thought>\n\n<code_block>\n*** Keywords ***\n查看标签预估数量并完成创建\n    [Arguments]  ${count}=-1\n\n    # 点击‘预估数量’\n    Click  预估数量\n    # 确保页面无异常\n    CheckErrMsg\n\n    # 等待页面加载完成\n    WaitLoading\n\n    # 获取表格第一行‘预估数量’列的值\n    ${estimated_count}  GetCellValue  1  预估数量\n\n    # 验证值是否大于count\n    Should Be True  ${estimated_count} > ${count}\n\n    # 点击‘确定’和‘创建完成’\n    ClickTextOneByOne  确定  创建完成\n\n    # 再次检查页面无异常\n    CheckErrMsg\n\n    # 验证页面包含‘新建标签’和‘标签预览’\n    CheckHasText  新建标签  标签预览\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面上有存量商家关键字，点击后校验页面table里有记录",
        "output": "<thought>\n首先，我们需要验证页面上是否包含“存量商家”这个关键词，可以使用`CheckHasText`方法。接着，我们点击这个关键词，可以使用`Click`关键字。最后，我们需要确认页面中的表格有记录，这可以通过`CheckRowCount`关键字来实现，假设至少有一条记录，所以我们校验行数大于0。\n</thought>\n\n<code_block>\n# 校验页面上存在“存量商家”关键字\nCheckHasText | 存量商家\n\n# 点击“存量商家”关键词\nClick | 存量商家\n\n# 校验表格中至少有一条记录\nCheckRowCount | 1 | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果text=${layer}且role=menuitem的元素存在就点击",
        "output": "<thought>\n首先需要判断具有文本${layer}且role属性为menuitem的元素是否存在，然后根据判断结果执行相应操作。可以使用IsAnyElemExisting来检查元素是否存在，然后用RF的IF语法进行条件判断。\n</thought>\n\n<code_block>\n# 判断具有文本${layer}且role属性为menuitem的元素是否存在\n${exist}  IsAnyElemExisting | [role='menuitem']:contains(${layer})\n\n# 如果存在该元素，就点击\nIF  ${exist}\n    ClickElem | [role='menuitem']:contains(${layer})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 即梦-图片生成 下方的第一张图片",
        "output": "<thought>\n对于这道题目，我们的目标是使用提供的关键字将鼠标移动到指定元素上。在描述中，我们需要将鼠标移动到“即梦-图片生成”下方的第一张图片，这个任务需要找到基准元素“即梦-图片生成”，并获取其下方方向的第一张图片元素。这里可以考虑使用`MoveToElemToTheDirectionOf`关键字来实现移动操作，目标选择器则是代表图片的`img`。由于题中没有给出更详细的选择器信息，只能假设图片是用`img`标签标识的。\n</thought>\n\n<code_block>\n# 移动到“即梦-图片生成”下方的第一张图片\nMoveToElemToTheDirectionOf | 即梦-图片生成 | bottom | img | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选Sheet",
        "output": "<thought>\n任务是勾选名为“Sheet”的复选框，可以直接使用关键字CheckBoxOn操作，因此应使用CheckBoxOn关键字，并将复选框名称传递给它。\n</thought>\n\n<code_block>\n# 勾选名为“Sheet”的复选框\nCheckBoxOn | Sheet\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字为：“导入”,接受name，file_path参数，file_path参数默认为空，\n1. 如果 file_path 非空，就上传 file_path 指定的文件，否则就上传 files/${name}.csv 文件",
        "output": "<thought>\n这个任务需要创建一个关键字“导入”，该关键字接受两个参数：name和file_path。根据file_path是否为空来决定上传哪个文件。如果file_path非空，则上传file_path指定的文件；否则，上传路径为files/${name}.csv的文件。可以利用RF中的条件语句和UploadFile关键字来实现。\n</thought>\n\n<code_block>\n*** Keywords ***\n导入\n    [Arguments]  ${name}  ${file_path}=\n\n    # 如果file_path非空，上传file_path指定的文件\n    IF  '${file_path}' != ''\n        UploadFile  ${file_path}\n    ELSE\n        # 否则，上传files/${name}.csv文件\n        UploadFile  files/${name}.csv\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取右侧资源类型选择器里的值，不是placeholder",
        "output": "<thought>\n首先，我们需要定位到\"资源类型\"字段。根据描述，它是一个选择器，我们需要获取其值而不是placeholder。为了实现这一点，可以使用`GetFieldVal`关键字，该关键字可以获取字段关联的页面控件的值。\n</thought>\n\n<code_block>\n# 获取 '资源类型' 字段的值\n${res_type_val}  GetFieldVal | 资源类型\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个class等于semi-icons semi-icons-caretdown semi-icons-small的元素",
        "output": "<thought>\n在这个场景中，我们需要点击第一个符合特定class选择器的元素。指定的类名是\"semi-icons semi-icons-caretdown semi-icons-small\"。我们可以使用RF提供的ClickElem关键字，并结合jQuery选择器来定位该元素。需要注意的是，由于jQuery选择器返回的是零基索引的元素，因此要点击第一个元素，我们需要使用:eq(0)。\n</thought>\n\n<code_block>\n# 点击第一个class等于semi-icons semi-icons-caretdown semi-icons-small的元素\nClickElem | [class=\"semi-icons semi-icons-caretdown semi-icons-small\"]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“添加页面” 的关键字，作用是：点击 title 为 ‘新增页面’ 的div中的后代元素 svg",
        "output": "<thought>\n首先，需要查找 title 为 ‘新增页面’ 的 div 元素，然后在其后代中找到 svg 元素进行点击。可以使用 `FindElem` 查找 div 元素并进一步选择其后代元素 svg。\n</thought>\n\n<code_block>\n# 查找 title 为 ‘新增页面’ 的 div 元素中的 svg 元素并点击\n${div_elem}  FindElem  div[title='新增页面']\nClickElem  svg  base=${div_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取变量 ${申请人用户名} 中 ‘@’ 前面的用户名部分，然后设置申请人为：${用户名}",
        "output": "<thought>\n为了获取变量 `${申请人用户名}` 中 '@' 前面的用户名部分，可以使用 Evaluate 执行 Python 代码提取该部分字符串。然后，使用 `SetField` 将提取的用户名设置为申请人。\n</thought>\n\n<code_block>\n# 提取用户名 '@' 前的部分，并设置为变量 ${用户名}\n${用户名}=    Evaluate    '${申请人用户名}'.split('@')[0]\n\n# 设置申请人为提取的用户名\nSetField    申请人    ${用户名}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行 js脚本，向 localstorage 中添加：{\"__noti_readed\": {\"66cff1f7e3521c1bc0996bec\": 1}}，等3秒后，校验页面不包含undefined字段",
        "output": "<thought>\n根据要求，首先需要使用JavaScript向localStorage添加数据。然后等待3秒，最后校验页面不包含\"undefined\"字段。可以使用LocalStorageSetItem来设置localStorage项，使用Sleep来等待，以及使用CheckNotHasText来校验页面内容。\n</thought>\n\n<code_block>\n# 向 localStorage 添加指定项\nExecute Javascript  window.localStorage.setItem('__noti_readed', JSON.stringify({\"66cff1f7e3521c1bc0996bec\": 1}))\n\n# 等待3秒\nSleep  3s\n\n# 校验页面不包含 undefined 字段\nCheckNotHasText  undefined\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置个变量 如果页面不包含 安装包Tag，变量加+1，最后变量不为0则报错 ",
        "output": "\n<thought>\n首先需要判断页面是否包含 \"安装包Tag\" 文本，可以使用 IsAnyTextExisting 关键字来实现。根据判断结果，决定是否给变量加1。最后判断变量是否不为0，不为0时使用 Fail 关键字报错。\n</thought>\n\n<code_block>\n# 初始化变量 x 为 0\n${x}  Set Variable  0\n\n# 判断页面是否包含 \"安装包Tag\"\n${exist}  IsAnyTextExisting | 安装包Tag\n\n# 如果不包含 \"安装包Tag\"，变量 x 加 1\nIF  not $exist\n    ${x}  Set Variable  ${x} + 1\nEND\n\n# 如果变量 x 不为 0，则报错\nIF  ${x} != 0\n    Fail  Page does not contain the text '安装包Tag'\nEND\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面有流水任务，点击，如果页面有任务完成进度，校验页面包含详细规则说明、任务完成进度、参与主播、导出数据",
        "output": "<thought>\n首先，我们需要判断页面上是否存在\"流水任务\"或\"任务完成进度\"文本，以决定是否需要进行相关操作。使用IsAnyTextExisting关键字来进行判断。如果\"流水任务\"存在，则点击它。如果\"任务完成进度\"存在，则校验页面包含\"详细规则说明\"、\"任务完成进度\"、\"参与主播\"、\"导出数据\"这四个文本。\n</thought>\n\n<code_block>\n# 判断页面是否存在“流水任务”或“任务完成进度”\n${exist_flow}  IsAnyTextExisting | 流水任务\n${exist_progress}  IsAnyTextExisting | 任务完成进度\n\n# 如果存在“流水任务”，点击它\nIF  ${exist_flow}\n    Click  流水任务\nEND\n\n# 如果存在“任务完成进度”，校验页面包含多个文本\nIF  ${exist_progress}\n    CheckHasText  详细规则说明  任务完成进度  参与主播  导出数据\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果发件渠道处于可点击状态，就点一下",
        "output": "<thought>\n要解决这个问题，我们需要：\n1. 首先检查发件渠道元素是否处于可点击状态(即enabled状态)\n2. 如果处于可点击状态，则点击该元素\n3. 可以使用IsElementEnabled关键字来判断元素状态\n4. 使用IF条件语句来处理不同状态下的操作\n5. 假设发件渠道元素的文本是\"发件渠道\"，我们可以使用Click关键字来点击它\n</thought>\n\n<code_block>\n# 检查发件渠道是否可点击，如果是则点击\n${status}  IsElementEnabled  :contains(发件渠道)\nIF  ${status}\n    Click  发件渠道\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘监控数据’ 下方的元素",
        "output": "<thought>\n我们需要点击“监控数据”下方的元素，可以使用`ClickElemToTheDirectionOf`关键字。这个关键字允许我们选择一个基准文本，然后指定一个方向和jquery选择器来确定目标元素的位置。在这个场景中，基准是“监控数据”，方向是下方（bottom），目标元素的选择器可以用`*`表示。\n</thought>\n\n<code_block>\n# 点击“监控数据”下方的元素\nClickElemToTheDirectionOf | 监控数据 | bottom | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标hover到class为vc-input-submit的div",
        "output": "<thought>\n为了完成这个任务，我们需要让鼠标移动到特定的元素上，通常对于这种需求我们可以使用MoToElem关键字。给定元素的选择器是class为vc-input-submit的div，我们可以利用jquery选择器来指定这个元素，因此选择器为div.vc-input-submit。我们将使用MoToElem来实现鼠标的hover行为。\n</thought>\n\n<code_block>\n# 鼠标hover到class为vc-input-submit的div\nMoToElem | div[class=vc-input-submit]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面存在至少有1个 mr_cost_center的文本",
        "output": "<thought>\n为了解决此问题，需要获取页面上文本“mr_cost_center”出现的次数，并确保至少有3个。可以使用关键字GetElemCount来获取该文本的数量，并通过Should Be True来验证数量。\n</thought>\n\n<code_block>\n# 获取mr_cost_center元素的数量\n${cnt}  GetElemCount | :contains(\"mr_cost_center\")\n\n# 校验数量至少为3\nShould Be True  ${cnt} >= 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 Export CSV 左边的小图标\n勾选 Select all",
        "output": "<thought>\n首先我们需要点击 \"Export CSV\" 左边的图标。可以使用`ClickIconToTheDirectionOf`关键字，基于给定的方向和目标元素。然后我们需要勾选 \"Select all\"，可以使用`CheckBoxOn`关键字。\n</thought>\n\n<code_block>\n# 点击 Export CSV 左边的图标\nClickIconToTheDirectionOf | Export CSV | left\n\n# 勾选 Select all\nCheckBoxOn | Select all\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为‘编辑指定新增源站响应头设置’的关键字，接受参数：index，配置类型，头部名称，取值方式，头部取值，参数默认值均为 ${EMPTY}，逻辑如下：\n# 1. 点击 id 为 OriginResponseHeader 元素中 第 index 个 编辑 按钮\n# 2. 调用 填充新增HTTP请求头设置弹窗 关键字，设置参数：配置类型，头部名称，取值方式，头部取值\n# 3. 点击弹窗中的确定",
        "output": "<thought>\n首先，根据步骤1，需要点击id为OriginResponseHeader的元素中第index个编辑按钮。我们可以使用ClickTextToTheDirectionOf关键字，指定基准元素为[id=OriginResponseHeader]，目标文本为\"编辑\"，使用idx参数指定第index个。\n\n接下来，步骤2提到调用关键字填充新增HTTP请求头设置弹窗，并传递参数：配置类型，头部名称，取值方式，头部取值。我们可以直接调用该自定义关键字，并传入这些参数。\n\n最后，步骤3要求点击弹窗中的确定按钮。我们可以使用Click关键字，并指定base为POPUP，来点击弹窗内的确定按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n编辑指定新增源站响应头设置\n    [Arguments]  ${index}  ${配置类型}=${EMPTY}  ${头部名称}=${EMPTY}  ${取值方式}=${EMPTY}  ${头部取值}=${EMPTY}\n\n    # 点击 id 为 OriginResponseHeader 元素中 第 index 个 编辑 按钮\n    ClickTextToTheDirectionOf | [id=OriginResponseHeader] | bottom | 编辑 | idx=${index-1}\n    \n    # 调用 填充新增HTTP请求头设置弹窗 关键字，设置参数\n    填充新增HTTP请求头设置弹窗  ${配置类型}  ${头部名称}  ${取值方式}  ${头部取值}\n    \n    # 点击弹窗中的确定\n    Click | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 内容合规查询 关键字，接受参数 data domain assert_list,业务逻辑如下\n# 1、点击 data\n# 2、设置 搜索域名 为 domain\n# 3. 校验点：循环 ${assert_list}，校验页面存在其中所有内容",
        "output": "<thought>\n为了解决这个问题，我需要实现一个关键字 \"内容合规查询\"，它接受三个参数：data、domain 和 assert_list。首先，我会点击 data 来触发相关操作，然后设置 搜索域名 为 domain。最后，我会循环遍历 assert_list 中的每一个元素，检查页面是否包含这些元素。基于问题说明，主要运用的关键字有 Click 和 SetField 用来分别点击和设定域名，CheckHasText 用于验证页面包含多个文本内容。\n</thought>\n\n<code_block>\n*** Keywords ***\n内容合规查询\n    [Arguments]  ${data}  ${domain}  @{assert_list}\n\n    # 点击 data\n    Click  ${data}\n\n    # 设置 搜索域名 为 domain\n    SetField  搜索域名  ${domain}\n\n    # 校验点\n    FOR  ${element}  IN  @{assert_list}\n       CheckHasText  ${element}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求，并校验响应中的stadus，为success，curl 'https://data.bytedance.net/nuwav2/api/v1/pro/bizMetric/directly/delete/10109922?T_BusinessId=100234' \\\n-X 'DELETE' \\\n--compressed",
        "output": "<thought>\n首先，使用 `UiSendRequest` 关键字发送 DELETE 请求。在接收到响应后，检查响应中的 `status` 字段是否为 `success`。这可以通过 `Should Be Equal As Strings` 关键字进行验证。\n</thought>\n\n<code_block>\n# 发送DELETE请求并校验响应\n${resp_json}  UiSendRequest | DELETE | https://xxx.yyy.zzz.com/nuwav2/api/v1/pro/bizMetric/directly/delete/10109922?T_BusinessId=100234\n\n# 校验响应中的status为success\nShould Be Equal As Strings  ${resp_json['status']}  success\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的‘删除账号’左边边的第1个小图标",
        "output": "<thought>\n首先，我们需要点击弹窗中的某个元素，因此可以使用以`base=POPUP`标识基准元素。因为需要点击“删除账号”左边的第一个icon，我们可以采用`ClickIconToTheDirectionOf`关键字，并指定方向为left。\n</thought>\n\n<code_block>\n# 点击弹窗中的‘删除账号’左边的第1个icon\nClickIconToTheDirectionOf | 删除账号 | left | idx=0 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置变量 domain 为 1.com，使用 domain 拼接为 URL，访问后，点击空白处，然后截图，校验截图文案中存在：可口可乐",
        "output": "<thought>\n首先，我们需要创建一个变量 domain 并赋值为 \"1.com\"。接下来，我们会使用这个 domain 拼接为一个完整的 URL。之后，我们将访问这个拼接的 URL。访问完 URL 后，点击页面的空白区域，然后进行截图。最后，获取截图中的文本，并校验文本中是否包含 \"可口可乐\"。为此，使用以下关键字：Set Variable、Catenate、OpenUrl、ClickWhiteArea、Screenshot、GetPageScreenshotText、Should Contain。\n</thought>\n\n<code_block>\n# 创建domain变量\n${domain}  Set Variable  1.com\n\n# 拼接URL\n${url}  Catenate  SEPARATOR=://  http  ${domain}\n\n# 打开URL\nOpenUrl  ${url}\n\n# 点击空白处\nClickWhiteArea\n\n# 截图\nScreenshot\n\n# 获取页面截图中的文本\n${screenshot_text}  GetPageScreenshotText\n\n# 校验截图文本中包含\"可口可乐\"\nShould Contain  ${screenshot_text}  可口可乐\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 is_enter, 如 enter 在 kwargs 中 is_enter 为 True 否则为 False",
        "output": "<thought>\n首先需要检查\"enter\"是否在kwargs中，然后根据检查结果设置变量is_enter为True或False。可以使用\"Evaluate\"关键字来判断\"enter\"是否在kwargs中。\n</thought>\n\n<code_block>\n# 判断 enter 是否在 kwargs 中并设置 is_enter\n${is_enter}    Evaluate    'enter' in ${kwargs}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传文件event_params_xg.csv",
        "output": "<thought>\n根据需求，需要上传一个文件。这可以通过使用`UploadFile`关键字来完成。我们需要提供文件路径或者URL。因为没有指定特殊的索引，默认情况下会使用第一个文件上传控件。\n</thought>\n\n<code_block>\n# 上传文件event_params_xg.csv\nUploadFile | event_params_xg.csv\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 id=xxx 且class 包含 abc 的元素里的 id=777的元素",
        "output": "<thought>\n首先需要点击id为xxx且class包含abc的元素中的id为777的元素。可以使用ClickElem关键字来实现。通过jquery选择器来定位这些元素。\n</thought>\n\n<code_block>\n# 点击 id=xxx 且class包含abc 的元素里的 id=777的元素\nClickElem | [id=xxx][class*=abc] [id=777]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击自动化分组1旁边的小图标并选择解除分组 ",
        "output": "<thought>\n根据给出的场景，我们需要点击“自动化分组1”后面的某个图标，并选择解除分组。\n\n首先，假设“自动化分组1”旁边的图标和解除分组选项都是通过鼠标操作的。\n\n1. 使用`ClickIconToTheDirectionOf`关键字，点击“自动化分组1”右边的图标，因为我们不知道图标的具体名称，所以不能使用特定名称。\n2. 然后，使用`SelectOption`选择解除分组选项。\n</thought>\n\n<code_block>\n# 点击\"自动化分组1\"右边的图标\nClickIconToTheDirectionOf | 自动化分组1 | right\n\n# 选择“解除分组”选项\nSelectOption | 解除分组\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在表格中选择秒杀价column,填入1，然后按tab,填入1",
        "output": "<thought>\n给定的场景需要在表格的\"秒杀价\"列中输入数据。首先需要找到对应单元格，然后在单元格中执行输入操作。使用`FillCell`关键字可以将单元格内容设为特定值，然后结合`Press Keys`模拟按下Tab键，完成后续输入。\n</thought>\n\n<code_block>\n# 假设要操作的是将表格中第一行 秒杀价 列的单元格设为1\nFillCell | 1 | 秒杀价 | 1\n\n# 模拟按下Tab键\nPress Keys |  NONE | TAB\n\n# 再次输入1\nSendText | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在帮助中心，就点击右上角的最后一个叉号",
        "output": "<thought>\n首先，判断页面是否存在“帮助中心”文本。若存在，则点击右上角的最后一个关闭图标。可以使用 `IsAnyTextExisting` 来检测文本是否存在，然后使用 `ClickIconToTheDirectionOf` 来点击右上角的图标。\n</thought>\n\n<code_block>\n# 判断页面是否存在“帮助中心”\n${exist}  IsAnyTextExisting | 帮助中心\n\n# 如果存在，就点击右上角的最后一个关闭图标\nIF  ${exist}\n    ClickIconToTheDirectionOf | SCREEN_CENTER | topRight | close | idx=-1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击页面中class=pendant-arouse的元素，点击plus-circle小图标，设置会话的名称为：${testName}，设置选用的Agent为：ChatLLM。点击确定",
        "output": "<thought>\n 首先需要点击class为pendant-arouse的元素，可以使用ClickElem关键字。接着点击plus-circleicon图标，使用ClickIcon关键字。然后设置会话名称为变量${testName}，使用SetField关键字。接下来设置Agent为ChatLLM，也使用SetField关键字。最后点击确定按钮，使用Click关键字。\n </thought>\n \n <code_block>\n # 点击class=pendant-arouse的元素\n ClickElem | [class=pendant-arouse]\n \n # 点击plus-circleicon图标\n ClickIcon | plus-circle\n \n # 设置会话名称为变量${testName}\n SetField | 会话名称 | ${testName}\n \n # 设置选用的Agent为ChatLLM\n SetField | Agent | ChatLLM\n \n # 点击确定按钮\n Click | 确定\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 团购人数 右侧存在10，左侧存在螺狮粉，下方存在提交按钮",
        "output": "<thought>\n这个问题需要校验多个方向的文本和元素是否存在。我们可以使用CheckHasTextToTheDirectionOf来验证方向性的文本，并使用CheckHasElemToTheDirectionOf来验证方向性的元素。具体思路是：首先验证\"团购人数\"右侧是否有文本\"10\"，然后验证左侧是否有文本\"螺狮粉\"，最后验证下方是否有提交按钮。\n</thought>\n\n<code_block>\n# 验证 团购人数 右侧存在 10\nCheckHasTextToTheDirectionOf | 团购人数 | right | 10\n\n# 验证 团购人数 左侧存在 螺狮粉\nCheckHasTextToTheDirectionOf | 团购人数 | left | 螺狮粉\n\n# 验证 团购人数 下方存在 提交按钮\nCheckHasElemToTheDirectionOf | 团购人数 | bottom | button:contains(提交)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器，输入手机号111111，点击验证码登录",
        "output": "<thought>\n我们需要使用以下步骤解决问题：首先使用`OpenBrowser`关键字打开浏览器，然后使用`SetField`填写手机号，最后使用`Click`点击\"验证码登录\"按钮。\n</thought>\n\n<code_block>\n# 打开浏览器并访问默认URL\nOpenBrowser\n\n# 输入手机号 111111\nSetField | 手机号 | 111111\n\n# 点击验证码登录按钮\nClick | 验证码登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 class*=ddd 或 name=x的元素",
        "output": "<thought>\n我们需要选择class属性包含“ddd”或name属性为“x”的元素。可以使用FindElem关键字，通过构建适当的selector来定位元素。可以利用jQuery的属性选择器来实现。\n</thought>\n\n<code_block>\n# 查找class包含ddd或name为x的元素\n${elem}  FindElem | [class*=ddd], [name=x]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘10 条/页’，然后接着点击 ‘30 条/页’",
        "output": "<thought>\n首先，我们需要依次点击两个文本元素：'10 条/页'和'30 条/页'。这可以通过使用`ClickTextOneByOne`关键字来实现。\n</thought>\n\n<code_block>\n# 依次点击 '10 条/页' 和 '30 条/页'\nClickTextOneByOne | 10 条/页 | 30 条/页\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在弹窗的 搜索模板名称中 输入${temple_name}，并回车",
        "output": "<thought>\n要在弹窗的“搜索模板名称”字段中输入变量`${temple_name}`，并回车，使用`SetPopupField`关键字，并设置`enter=True`。\n</thought>\n\n<code_block>\n# 在弹窗的搜索模板名称字段中输入变量${temple_name}，并回车\nSetPopupField | 搜索模板名称 | ${temple_name} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加，设置 ‘计算列名称’ 为 task_date，字段类型为 date，编辑表达式 为 {TASK_DATE}，然后点击确定",
        "output": "<thought>\n这一步骤包含点击操作和批量设置字段的操作。首先点击“添加”，然后使用`BatchSetFields`设置“计算列名称”、“字段类型”和“编辑表达式”三个字段的值，最后点击“确定”。\n</thought>\n\n<code_block>\n# 点击添加\nClick | 添加\n\n# 批量设置计算列名称、字段类型和编辑表达式\nBatchSetFields 计算列名称=task_date 字段类型=date 编辑表达式={TASK_DATE}\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘取消’左侧的保存，向请输入关键词输入${me_name}，鼠标悬停${me_name}",
        "output": "<thought>\n在这个场景中，我们需要完成三个步骤：首先，点击“取消”左侧的“保存”按钮；其次，向“请输入关键词”输入框中输入变量`${me_name}`；最后，将鼠标悬停在`${me_name}`文本上。\n\n为此，我们可以使用以下关键字：\n1. `ClickTextToTheDirectionOf`：用于点击“取消”左侧的“保存”。\n2. `SetField`：用于在“请输入关键词”输入框中输入`${me_name}`。\n3. `MoTo`：用于将鼠标移动到`${me_name}`文本上。\n\n为了实现上述需求，我会依次调用这些关键字。\n</thought>\n\n<code_block>\n# 点击“取消”左侧的“保存”\nClickTextToTheDirectionOf | 取消 | left | 保存\n\n# 在“请输入关键词”输入框中输入${me_name}\nSetField | 请输入关键词 | ${me_name}\n\n# 鼠标悬停在${me_name}文本上\nMoTo | ${me_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${val} 里面的30天最佳\\30天最差\\万\\小时和逗号以及括号都替换成空字符串,${val}转为float类型的数字，希望使用正则表达式，一行代码",
        "output": "<thought>\n为了解决这个问题，我们可以使用Python内置的正则表达式模块`re`来删除字符串中的指定模式。使用`re.sub()`函数替换 undesired 部分为空字符串。最后将处理后的字符串转化为`float`类型。一个正则表达式就可以同时匹配“30天最佳”、“30天最差”、“万”、“小时”、逗号和括号。\n</thought>\n\n<code_block>\n# 使用正则表达式替换指定字符串并转换为float类型\nEvaluate | float(re.sub(r'30天最佳|30天最差|万|小时|[，,()]', '', '''${val}''')) | re\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 打开浏览器访问：https://sso.bytedance.com, 然后关闭浏览器",
        "output": "<thought>\n 在这个场景中，我们需要使用`OpenBrowser`关键字来打开浏览器并访问指定的URL，然后使用`CloseBrowser`关键字来关闭浏览器。\n </thought>\n \n <code_block>\n # 打开浏览器并访问 https://sso.bytedance.com\n OpenBrowser | https://sso.bytedance.com\n \n # 关闭浏览器\n CloseBrowser\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击分享icon",
        "output": "<thought>\n任务需要点击分享icon，可以直接使用ClickIcon关键字，并指定name参数为'share'。\n</thought>\n\n<code_block>\n# 点击分享icon\nClickIcon | share\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待2秒",
        "output": "<thought>\n由于要求等待2秒，这个任务相对简单。Robot Framework 的标准库包含一个名为 Sleep 的关键词，可以让测试脚本在一段时间内暂停执行。在这个场景中，我们可以使用此关键词，参数为2秒。Sleep关键字需要一个时间参数，可以是秒，分钟或小时，在这个场景中，我们设定参数为2秒。\n</thought>\n\n<code_block>\n# 等待2秒\nSleep  2s\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面表格包含 xiongcui 的那一行的第一个单元格",
        "output": "<thought>\n要点击页面表格中包含“xiongcui”的那一行的第一个单元格，我们可以使用 `ClickTextOfCell` 关键字。首先需要选择包含“xiongcui”的行，然后点击第一个单元格。\n</thought>\n\n<code_block>\n# 点击包含 xiongcui 的行的第一个单元格\nClickTextOfCell | xiongcui | 1 | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击菜单管理，等待5s，校验页面无报错，点击审批状态，点击审批中，点击申请员工  输入xingxiangyu enter=True，校验审批列表员工部门是产品研发和工程架构-质量保障-Growth-营销中台",
        "output": "<thought>\n开始时需要点击菜单项，接着是等待过程，然后检查页面是否有错误信息。接下来是依次点击审批相关的文本。最后在员工输入框中输入信息，并验证审批列表中员工部门列的内容。\n</thought>\n\n<code_block>\n# 进入管理菜单\nClickMenu | 管理\n\n# 等待5秒\nSleep | 5s\n\n# 校验页面无报错\nCheckErrMsg  \n\n# 点击审批状态\nClick | 审批状态\n\n# 依次点击审批中和申请员工\nClickTextOneByOne | 审批中 | 申请员工\n\n# 输入xingxiangyu并回车\nSetField | 申请员工 | xingxiangyu | enter=True\n\n# 校验审批列表中员工部门列包含指定文本\nCheckColHas | 员工部门 | 产品研发和工程架构-质量保障-Growth-营销中台 | tbl=审批列表\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击入住时间右边的选择框",
        "output": "<thought>\n场景要求点击入住时间右边的选择框，可以使用ClickElemToTheDirectionOf关键字。首先找到基准元素“入住时间”，然后指定它右边的选择框，并使用jQuery选择器定位点击。\n</thought>\n\n<code_block>\n# 点击入住时间右边的选择框\nClickElemToTheDirectionOf | 入住时间 | right | [class*=select]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${表信息} 设置为其最前面的 14 个字符",
        "output": "<thought>\n首先，提到的任务是将 `${表信息}` 变量的值设置为其最前面的 14 个字符。为此，可以利用Python的字符串切片操作。因为没有直接的RF关键字来处理字符串切片，所以我们可以使用Evaluate关键字来执行Python代码。\n</thought>\n\n<code_block>\n# 将 ${表信息} 设置为其最前面的 14 个字符\n${表信息} =    Evaluate    \"${表信息}\"[:14]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "精准匹配‘退会cohort’span元素，找到下面前四个canvas图表",
        "output": "<thought>\n首先，使用FindElem找到文本为‘退会cohort’的span元素。然后，使用FindElemToTheDirectionOf在找到的span元素下方找到前四个canvas图表。\n</thought>\n\n<code_block>\n# 查找文本为‘退会cohort’的span元素\n${elem}  FindElem | span:textMatch(退会cohort)\n\n# 查找‘退会cohort’span元素下方的第一个canvas\n${canvas1}  FindElemToTheDirectionOf | ${elem} | bottom | canvas:eq(0)\n\n# 查找‘退会cohort’span元素下方的第二个canvas\n${canvas2}  FindElemToTheDirectionOf | ${elem} | bottom | canvas:eq(1)\n\n# 查找‘退会cohort’span元素下方的第三个canvas\n${canvas3}  FindElemToTheDirectionOf | ${elem} | bottom | canvas:eq(2)\n\n# 查找‘退会cohort’span元素下方的第四个canvas\n${canvas4}  FindElemToTheDirectionOf | ${elem} | bottom | canvas:eq(3)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 第1个 “订单号/账单号” 为 空，即清空 “订单号/账单号”",
        "output": "<thought>\n要清空第一个“订单号/账单号”字段，我们可以使用`SetField`关键字来完成。通过设置`idx`参数为0指定第一个字段，然后输入一个特殊键值如`${KEY_BACKSPACE}`来清空。\n</thought>\n\n<code_block>\n# 清空第1个订单号/账单号字段\nSetField | 订单号/账单号 | ${KEY_BACKSPACE} | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标悬停于推送方式右侧的企业群",
        "output": "<thought>\n在这个场景中，我们需要使用“MoveToTextToTheDirectionOf”关键字。首先，将\"推送方式\"作为基准，然后选择\"right\"作为方向，最后选择\"企业群\"作为需要移动到的目标文本。在RF中，\"MoveToTextToTheDirectionOf\"关键字能够实现鼠标移动到基准元素给定方位的目标文本上。\n</thought>\n\n<code_block>\n# 鼠标悬停于推送方式右侧的企业群\nMoveToTextToTheDirectionOf | 推送方式 | right | 企业群\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面加载完成，超时60s，点击 包括 ‘变更’ 的按钮，base：class包括 ‘detail_info’，然后填写 ‘播放时段’ 为0000-00-15 ~ 0000-00-21",
        "output": "<thought>\n首先，使用WaitLoading关键字等待页面加载完成，最多等待60秒。接下来，使用Click关键字点击包含‘变更’的按钮，基准元素是class包括‘detail_info’。最后，使用SetField关键字填写‘播放时段’字段为‘0000-00-15 ~ 0000-00-21’。\n</thought>\n\n<code_block>\n# 等待页面加载完成，最多60秒\nWaitLoading | timeout=60\n\n# 点击class包含'detail_info'的基准元素中的‘变更’按钮\nClick | 变更 | base=[class*=detail_info]\n\n# 设置‘播放时段’为‘0000-00-15 ~ 0000-00-21’\nSetField | 播放时段 | 0000-00-15 ~ 0000-00-21\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面包含：请确认是否覆盖，然后点击确定",
        "output": "<thought>\n首先需要校验页面是否包含文本“请确认是否覆盖”。然后，点击“确定”按钮。可以使用 `CheckHasText` 来校验文本，以及 `Click` 来点击文本。\n</thought>\n\n<code_block>\n# 校验页面包含“请确认是否覆盖”\nCheckHasText | 请确认是否覆盖\n\n# 点击“确定”\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截图整个屏幕图片并对比，相似度取 0.96",
        "output": "<thought>\n要截取整个屏幕并与基准图对比，可以使用`ImageDiff`关键字。由于截图整个屏幕不需要指定selector，pic_name可选，同时我们需要将相似度设置为0.96。\n</thought>\n\n<code_block>\n# 截取全屏幕并与基准图对比，相似度设置为0.96\nImageDiff | sim=0.96\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器，访问 ${url}, 等页面加载完成后,输入用户名张三, 密码password，点击登录，等待 Welcome出现",
        "output": "<thought>\n首先使用OpenBrowser关键字打开浏览器并访问指定的${url}。然后使用WaitLoading等待页面加载完成。接下来，通过BatchSetFields批量输入用户名和密码。最后，点击登录按钮，并使用WaitText等待Welcome文本出现。\n</thought>\n\n<code_block>\n# 打开浏览器并访问指定URL\nOpenBrowser | ${url}\n\n# 等待页面加载完成\nWaitLoading\n\n# 输入用户名和密码\nBatchSetFields  用户名=张三  密码=password\n\n# 点击登录\nClick | 登录\n\n# 等待出现Welcome文本\nWaitText | Welcome\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 校验加速器费用为2000.00。提示，这里需要先获取字段的值，然后进行比较",
        "output": "<thought>\n 首先需要使用`GetFieldVal`关键字获取加速器费用字段的值。然后使用`Should Be Equal As Strings`关键字来验证该字段的值是否等于\"2000.00\"。\n </thought>\n \n <code_block>\n # 获取加速器费用字段的值\n ${fee}  GetFieldVal | 加速器费用\n \n # 校验加速器费用为2000.00\n Should Be Equal As Strings | ${fee} | 2000.00\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 付费方式 下面的 第二个 请选择，再点击 预付费",
        "output": "<thought>\n1. 首先需要定位\"付费方式\"下方的第二个\"请选择\"元素\n   - 可以使用ClickTextToTheDirectionOf关键字，以\"付费方式\"为基准，方向为bottom\n   - 目标文本是\"请选择\"，idx=1表示第二个(因为idx从0开始)\n2. 然后需要点击\"预付费\"选项\n   - 可以直接使用Click关键字点击文本\"预付费\"\n   - 或者如果是在下拉框中，可能需要使用SelectOption关键字\n   - 根据提示，这里应该是点击操作\n</thought>\n\n<code_block>\n# 点击付费方式下方的第二个\"请选择\"\nClickTextToTheDirectionOf | 付费方式 | bottom | 请选择 | idx=1\n\n# 点击预付费选项\nClick | 预付费\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器访问${WODEQUANXIAN_PAGE_URL}，等待页面出现获权方（类型）和华北2（北京），即校验成功",
        "output": "<thought>\n首先需要使用OpenBrowser关键字打开浏览器并访问指定的URL。然后使用WaitLoading关键字确保页面加载完成。接下来使用WaitText关键字等待页面上出现“获权方（类型）”和“华北2（北京）”这两个文本，表示校验成功。\n</thought>\n\n<code_block>\n# 打开浏览器并访问目标页面\nOpenBrowser | ${WODEQUANXIAN_PAGE_URL}\n\n# 等待页面加载完成\nWaitLoading | timeout=80\n\n# 校验页面出现指定文本\nWaitText | 获权方（类型）| 华北2（北京）\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入 弹性块存储 回车",
        "output": "<thought>\n在这个场景中，我们需要在当前光标位置输入文本“弹性块存储”并在输入后按下回车键。根据提供的关键字描述，`SendText`关键字可以在光标激活位置输入文本并且可选地按下回车键。因此，我们可以使用`SendText`关键字完成此操作。\n</thought>\n\n<code_block>\n# 输入 弹性块存储 并回车\nSendText | 弹性块存储 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘使用模型’ 右边的向右小图标，获取arco-comment-datetime的span值，把该值 ${datetime} 从字符串表示的时间 转换成 int型的时间戳",
        "output": "<thought>\n首先，使用`ClickIconToTheDirectionOf`点击‘使用模型’右边的向右icon。接着，使用`FindElem`查找arco-comment-datetime的span元素。然后，用`GetElemText`获取该元素的文本值。最后，利用`Convert Date`将字符串时间转换为时间戳。\n</thought>\n\n<code_block>\n# 点击‘使用模型’右边的向右icon\nClickIconToTheDirectionOf | 使用模型 | right | right-arrow\n\n# 查找arco-comment-datetime的span元素\n${elem}  FindElem | span[class='arco-comment-datetime']\n\n# 获取元素文本值\n${datetime}  GetElemText | ${elem}\n\n# 将字符串时间转换为时间戳\n${timestamp}  Convert Date | ${datetime} | result_format=epoch\n${timestamp}  Evaluate  int(${datetime})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在搜索中输入 auto_test",
        "output": "<thought>\n解决问题思路：首先，考虑到这是一个输入操作，我们需要分析要输入的控件名称，从而选择合适的关键字。在本例中，“搜索”这个关键词可以让我们确定“搜索框”可能是一个输入框控件，因此我们可以使用SetField关键字进行操作。\n</thought>\n\n<code_block>\n# 在搜索框中输入 auto_test\nSetField | 搜索 | auto_test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写实验名称，前缀为 ‘高优插入-支持TT推荐大反转实验父子实验流程 - 测试服务端0402’，后缀为当前日期",
        "output": "<thought>\n解决问题思路\n\n根据题目要求，需要填写实验名称的前缀和后缀。前缀是给出的常量字符串，后缀是当前日期。\n\n首先，我们需要获取当前日期，这可以通过Robot Framework的内置关键字“Get Current Date”来实现。其次，我们需要将前缀、后缀拼接起来，得到完整的实验名称并填入。这可以通过内置关键字“Set Variable”和“Catnate”来实现。\n\n具体步骤如下：\n1. 使用关键字“Get Current Date”，以“YYYYMMDD”的格式获取当前日期并赋值给变量“${date}”\n2. 定义前缀字符串，并赋值给变量“${prefix}”\n3. 使用关键字“Catenate”，将前缀和日期拼接起来，并赋值给变量“${experiment_name}”\n4. 使用关键字“SetField”，将变量“${experiment_name}”的值填入\"实验名称\"字段\n</thought>\n\n<code_block>\n# 获取当前日期\n${date}=  Get Current Date  result_format=%Y%m%d\n\n# 定义前缀字符串\n${prefix}=  Set Variable  高优插入-支持TT推荐大反转实验父子实验流程 - 测试服务端0402\n\n# 将前缀和日期拼接起来，得到实验名称\n${experiment_name}=  Catenate  SEPARATOR=  ${prefix}  ${date}\n\n# 填入实验名称\nSetField  实验名称  ${experiment_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面上存在帮助中心，就点击最后一个叉号",
        "output": "<thought>\n首先，需要判断页面上是否存在“帮助中心”，如果存在，则点击最后一个 close icon。\n</thought>\n\n<code_block>\n# 判断页面上是否存在“帮助中心”\n${exist}  IsAnyTextExisting | 帮助中心\n\n# 如果存在“帮助中心”，则点击最后一个 close icon\nIF  $exist\n    ClickIcon | close | idx=-1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击更多小图标，点击分享，页面中包含“复制分享链接成功”，粘贴板上内容包含“/chatops/chatllm?action=quickChat”",
        "output": "\n    \n<thought>\n 首先，我们需要点击“更多”icon，接着点击“分享”按钮。然后验证页面中是否包含“复制分享链接成功”的文本，最后检查剪贴板内容是否包含指定的链接路径。使用`ClickIcon`和`Click`进行点击操作，`GetCopied`获取剪贴板内容，最后使用`Should Contain`来断言。\n </thought>\n \n <code_block>\n # 点击更多icon\n ClickIcon | more\n \n # 点击分享\n Click | 分享\n \n # 验证页面中包含“复制分享链接成功”\n Wait Until Page Contains | 复制分享链接成功\n \n # 获取剪贴板内容\n ${clipboard_content}  GetCopied\n \n # 验证剪贴板内容包含指定路径\n Should Contain | ${clipboard_content} | /chatops/chatllm?action=quickChat\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查询页面所有类型为 td 元素, class 的值为 \"art-table-cell lock-left cell\" 中第一个 div 元素所包含的字符串",
        "output": "<thought>\n要查询页面中符合条件的第一个 div 元素的字符串内容，首先需要找到符合 class 为 \"art-table-cell lock-left cell\" 的 td 元素，然后获取其包含的第一个 div 元素的内容。我们可以使用 FindElem 查找元素，再通过 Get Text 获取字符串。\n</thought>\n\n<code_block>\n# 查找 class 为 \"art-table-cell lock-left cell\" 的第一个 td 元素中的第一个 div\n${div_elem}  FindElem | td[class=\"art-table-cell lock-left cell\"] div:eq(0)\n\n# 获取第一个 div 元素的文本内容\n${text}  Get Text | ${div_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测当前页面截图中包含2处【自动化测试专用】",
        "output": "<thought>\n首先，我们需要获取当前页面的截图文本。然后，我们判断文本中是否包含两处“自动化测试专用”。可以使用`GetPageScreenshotText`获取文本，并通过计算出现次数来判断。\n</thought>\n\n<code_block>\n# 获取页面截图中的文本\n${txt}  GetPageScreenshotText\n\n# 如果文本中出现两次“自动化测试专用”，打印ok\n${count}  Evaluate | ${txt}.count(\"自动化测试专用\")\nIF  ${count} == 2\n Log | ok\nELSE\n Fail | 数量不足2次\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选中页面左侧导航栏的：任务管理，点击“任务组视图”右侧的搜索图标，判断${url}中含有https://www.volcengine.com/docs/6758/1336079\n\n提示：导航栏一般就是菜单栏",
        "output": "<thought>\n根据问题描述，首先需要从页面的左侧导航栏中选择“任务管理”，使用ClickMenu关键字可以实现。接着，点击“任务组视图”右侧的搜索icon，可以使用ClickIconToTheDirectionOf关键字完成。最后，需要判断${url}中是否包含https://www.volcengine.com/docs/6758/1336079，这可以通过IsURLContains关键字实现。\n</thought>\n\n<code_block>\n# 点击任务管理菜单\nClickMenu 任务管理\n\n# 点击“任务组视图”右侧的搜索icon\nClickIconToTheDirectionOf | 任务组视图 | right | search\n\n# 判断url中是否包含指定的文本\n${status}  IsURLContains | https://www.volcengine.com/docs/6758/1336079\nShould Be True  ${status}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 远程连接 右侧的元素",
        "output": "<thought>\n解决问题思路：\n1. 根据需求，需要点击 \"远程连接\" 右侧的元素。\n2. 使用 `ClickElemToTheDirectionOf` 关键字，其中基准元素选取 \"远程连接\"，方向选取 \"right\"，选择器为 \"*\"\n3. 生成对应的代码。\n</thought>\n\n<code_block>\n# 点击 \"远程连接\" 右侧的元素\nClickElemToTheDirectionOf | 远程连接 | right | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求：curl 'https://cloudapi.bytedance.net/faas/services/ttwy2i/invoke/query_onpremise_env_record' \\\n-H 'authority: cloudapi.bytedance.net' \\\n-H 'accept: application/json' \\\n-H 'accept-language: zh-CN,zh;q=0.9,en;q=0.8' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n-H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' \\\n--data-raw '{\"current\":1,\"pageSize\":10,\"env_id\":\"64002434acff42002cd29798\",\"only_favor\":false,\"sorter\":{},\"filter\":{},\"page\":1,\"limit\":10,\"product_id\":\"61360660bb258b00459e2c1c\",\"current_user\":\"胡雷庭(huleiting.hlt@bytedance.com)\"}' \\\n--compressed",
        "output": "\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/faas/services/ttwy2i/invoke/query_onpremise_env_record | {\"current\":1,\"pageSize\":10,\"env_id\":\"64002434acff42002cd29798\",\"only_favor\":false,\"sorter\":{},\"filter\":{},\"page\":1,\"limit\":10,\"product_id\":\"61360660bb258b00459e2c1c\",\"current_user\":\"胡雷庭(huleiting.hlt@bytedance.com)\"} | {\"accept\": \"application/json\", \"content-type\": \"application/json;charset=UTF-8\"}"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个设置属性筛选条件关键字，接受 ${line_no}, @{config} 参数，分别表示组名和筛选条件配置，关键字会向组名${line_no}关联的字段中输入给定的一个或多个事件参数，\n请注意在输入前，需要先判断页面是否存在${line_no}，如果不存在就要点击对照组按钮，此过程最多循环3次，直到页面出现了文本${line_no}，才在${line_no}关联的字段中输入",
        "output": "<thought>\n这个任务主要涉及到两个关键功能，一个是设置属性筛选条件，另一个是判断页面上是否有某个元素。\n首先，我们需要在给定的组名字段中输入一系列的事件参数。这可以通过`SetField`关键字实现，这个关键字可以找到指定的字段，并在其中输入指定的值。\n其次，我们需要判断页面上是否存在指定的元素，如果不存在，就需点击对照组按钮，然后再次检查。这个过程可能需要多次重复，直到元素出现。这可以通过两个关键字来实现，一个是`IsAnyTextExisting`，用来检查文本是否存在，另一个是`Click`，用来点击按钮。\n由于这个过程可能需要多次重复，我们使用RobotFramework的FOR循环结构。在循环中，我们首先检查所需的元素是否存在，如果存在就退出循环，如果不存在就点击按钮然后再次检查。\n最后，我们用Exit For Loop If将检查结果和True进行比较，如果为True，则退出循环，否则继续。\n</thought>\n\n<code_block>\n设置属性筛选条件\n    [Arguments]  ${line_no}  @{config}\n    ${i}  Set Variable  0\n    FOR   ${i}  IN RANGE  0  3\n      ${exist}  IsAnyTextExisting | ${line_no} | timeout=3\n      Exit For Loop If  ${exist}\n      Click | 对照组\n      Sleep | 2s\n    END\n    SetField | ${line_no} | @{config}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数据类型下面的EMR Hive表，然后设置更新人为liuxiang",
        "output": "<thought>\n首先点击数据类型下面的EMR Hive表，需要使用 ClickTextToTheDirectionOf 关键字，接着设置更新人为liuxiang需要使用 SetField 关键字。\n</thought>\n\n<code_block>\n# 点击数据类型下方的 EMR Hive表\nClickTextToTheDirectionOf | 数据类型 | bottom | EMR Hive表\n\n# 设置更新人为liuxiang\nSetField | 更新人 | liuxiang\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面存在 ‘张三’ 或 ‘李四’，但是不存在 ‘删除’",
        "output": "<thought>\n我们可以使用`CheckHasAnyText`来检测页面上是否存在‘张三’或者‘李四’，然后通过使用`CheckNotHasText`来检测页面上是否不存在‘删除’。\n</thought>\n\n<code_block>\n# 检查页面上存在'张三'或者‘李四’\nCheckHasAnyText | 张三 | 李四\n\n# 检查页面上不存在‘删除’\nCheckNotHasText | 删除\n<code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "会员专享品设置为 是，地点 选择 中国大陆>广州>赫基大厦>51F服务台，校验页面弹出 提交成功 文案",
        "output": "<thought>\n首先，我会使用`SetField`关键字将会员专享品设置为\"是\"。接着，使用`SetField`关键字选择地点为\"中国大陆 > 广州 > 赫基大厦 > 51F服务台\"。最后，使用`CheckHasText`关键字校验页面是否弹出包含\"提交成功\"的文案。\n</thought>\n\n<code_block>\n# 设置会员专享品为\"是\"\nSetField | 会员专享品 | 是\n\n# 设置地点为\"中国大陆 > 广州 > 赫基大厦 > 51F服务台\"\nSetField | 地点 | 中国大陆 > 广州 > 赫基大厦 > 51F服务台\n\n# 校验页面弹出\"提交成功\"文案\nCheckHasText | 提交成功 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左侧菜单 实物资产",
        "output": "<thought>\n我们可以使用ClickMenu关键字，只需要将\"实物资产\"作为参数输入。\n</thought>\n\n<code_block>\n# 单击左侧菜单 实物资产\nClickMenu | 实物资产\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“进入${menu}页面”，主要逻辑是：先删除变量menu前后的空白字符, 然后使用空格或>作为分隔符对menu进行分隔，然后等于页面加载完成，并点击分隔出的每一项，每次点击间隔1s",
        "output": "<thought>\n这个任务需要我创建一个新的关键字“进入${menu}页面”。首先，我需要删除变量menu的前缀和后缀空格，然后用空格或者\">\"符号来分隔它。然后，我需要等待页面加载完成。在页面加载完成后，我需要逐个点击分隔出的每一个项，并在每次点击之间停顿1秒钟。这个任务需要我使用RobotFramework的内置关键字和循环结构来完成。\n</thought>\n\n<code_block>\n进入${menu}页面\n    [Arguments]  ${menu}\n    ${menu}=   Evaluate   '${menu}'.strip()\n    @{menu_items}=   Evaluate   re.split(r'\\\\s+|>', '${menu}')\n    WaitLoading\n    FOR   ${item}   IN   @{menu_items}\n        ClickMenu   ${item}\n        Sleep   1s\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击链接内容下方的添加",
        "output": "<thought>\n根据描述，我们需要点击“链接内容”下方的“添加”按钮。可以使用ClickTextToTheDirectionOf关键字，其中“链接内容”作为基准元素，方向为“bottom”，目标文本为“添加”。\n</thought>\n\n<code_block>\n# 点击链接内容下方的添加\nClickTextToTheDirectionOf | 链接内容 | bottom | 添加\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面上名为 直播数据的tab，点击表格第一行中的查看详情，判断弹出的框内有checkbox",
        "output": "<thought>\n要解决这个问题，首先需要点击页面上名为 \"直播数据\" 的 tab，可以使用 `Click` 关键字，通过文本定位这个 tab。接着，在表格的第一行中点击 \"查看详情\"，使用 `ClickTextOfRow` 关键字即可实现。然后，我们需要判断弹出的框内是否存在一个复选框（checkbox），可以使用 `IsAnyElemExisting` 关键字来判断弹窗中是否存在复选框元素。\n</thought>\n\n<code_block>\n# 点击名为 \"直播数据\" 的 tab\nClick | 直播数据\n\n# 点击表格第一行中的 \"查看详情\"\nClickTextOfRow | 1 | 查看详情\n\n# 判断弹出的框内是否存在复选框\n${exist}  IsAnyElemExisting | input[type='checkbox'] | base=POPUP\n\n# 如果存在复选框，记录日志\nIF  ${exist}\n    Log  弹窗中存在复选框\nELSE\n    Fail  弹窗中不存在复选框\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“添加产品授权”的关键字，接受参数 license，业务逻辑为如果页面不包含 授权许可，就点击 添加产品授权，license 中有一系列 product 和 value ，先将每一个 value值输入 product字段中，然后点击点击确定，sleep3 秒后校验页面包含 正常 授权许可",
        "output": "<thought>\n首先，需要检查页面是否包含“授权许可”文本。如果不包含，则点击“添加产品授权”按钮。然后，遍历参数license中的product和value，将value输入到对应product字段中。最后，点击“确定”按钮，等待3秒后，检查页面是否包含“正常授权许可”文本。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加产品授权\n    [Arguments]  &{license}\n\n    # 检查页面是否包含“授权许可”\n    ${exist}  IsAnyTextExisting  授权许可\n\n    # 如果不包含，则点击“添加产品授权”\n    IF  not ${exist}\n        Click  添加产品授权\n    END\n\n    # 遍历每一个product和value\n    FOR  ${product}  ${value}  IN  &{license}\n        SetField  ${product}  ${value}\n    END\n\n    # 点击确定\n    Click  确定\n\n    # Sleep 3秒\n    Sleep  3s\n\n    # 校验页面包含“正常授权许可”\n    CheckHasText  正常授权许可\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数据查询，在搜索中输入 aaa",
        "output": "<thought>\n首先，我需要点击“数据查询”，这里可以使用Click关键字。然后，我需要在搜索框中输入\"aaa\"，这部分可以使用SetField关键字完成。而且，由于SetField关键字需要知道字段的名称，我假设搜索框的字段名为\"搜索\"。\n</thought>\n\n<code_block>\n# 点击数据查询\nClick | 数据查询\n\n# 在搜索中输入 aaa\nSetField | 搜索 | aaa\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "断言存在全部 我的收藏 草稿箱 回收站",
        "output": "<thought>\n思路上我计划采用自定义关键字CheckHasText，因为它可以检查网页是否包含特定的文本。在这个场景中，我需要确定\"全部\"，\"我的收藏\"，\"草稿箱\"和\"回收站\"这些文本是否同时出现在页面上。\n</thought>\n\n<code_block>\n# 使用关键字检查页面是否包含特定文本\nCheckHasText | 全部 | 我的收藏 | 草稿箱 | 回收站\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在表格中找到${metric_group_name},点击这一行中的class为arco-icon-more-horizontal的svg",
        "output": "<thought>\n首先，我们需要找到表格中的目标元素${metric_group_name}所在的行，然后再在这一行中找到class为arco-icon-more-horizontal的svg元素并点击。这里我们可以使用ClickElemOfRow关键字，row_name_or_id参数为${metric_group_name}，selector参数为\"svg[class=arco-icon-more-horizontal]\"。\n<thought>\n\n<code_block>\n# 在目标行中寻找并点击指定svg\nClickElemOfRow | ${metric_group_name} | svg[class=arco-icon-more-horizontal]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 验证 等待实施 文案出现",
        "output": "<thought>\n 为了验证页面上出现“等待实施”文案，我们可以使用 `WaitText` 关键字，该关键字会等待页面上出现指定的文本。在这里，我们需要等待“等待实施”这个文本。\n </thought>\n \n <code_block>\n # 等待页面包含“等待实施”文案\n WaitText | 等待实施\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将变更结果设置为：成功",
        "output": "<thought>\n 解决问题思路：首先需要找到变更结果这个字段，然后使用 SetField 关键字将其设置为成功。\n </thought>\n \n <code_block>\n # 将变更结果设置为：成功\n SetField | 变更结果 | 成功\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义一个变量 Contract 并赋值为 ${Contract_No}，在搜索合同编号中输入${Contract}",
        "output": "<thought>\n首先，需要定义一个变量 `Contract` 并赋值为 `${Contract_No}`。然后，在输入字段中使用此变量。可以使用 `Set Variable` 来定义变量，接着使用 `SetField` 在搜索合同编号字段中输入该变量的值。\n</thought>\n\n<code_block>\n# 定义变量 Contract 并赋值为 ${Contract_No}\n${Contract}  Set Variable  ${Contract_No}\n\n# 在搜索合同编号中输入 ${Contract}\nSetField | 搜索合同编号 | ${Contract}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等页面加载完成后，点击 deliver-center 这个表格行中的 ‘下载’ 小图标",
        "output": "<thought>\n首先需要等待页面加载完成，可以使用 `WaitLoading` 关键字。然后，需要在指定的表格行中点击名为“下载”的icon，可以使用 `ClickIconOfRow` 关键字。\n</thought>\n\n<code_block>\n# 等待加载完成\nWaitLoading\n\n# 点击 deliver-center 表格行中的 '下载' icon\nClickIconOfRow | deliver-center | download\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击关闭图标",
        "output": "<thought>\n根据场景描述，我们需要使用ClickIcon关键字来点击关闭icon。由于没有指定是第几个关闭icon，因此默认点击第一个。\n</thought>\n\n<code_block>\n# 点击第一个关闭icon\nClickIcon | close | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击最后一个 ‘新增响应’ 然后选择 ‘单击’",
        "output": "<thought>\n首先需要点击最后一个“新增响应”。根据描述，可以使用`Click`关键字，并设置`idx=-1`来点击最后一个匹配的文本。接下来，选择“单击”，使用`SelectOption`关键字进行选择。\n</thought>\n\n<code_block>\n# 点击最后一个新增响应\nClick | 新增响应 | idx=-1\n\n# 选择单击\nSelectOption | 单击\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取100秒后的时间，格式为：年-月-日 时:分:秒",
        "output": "<thought>\n要获取100秒后的时间，可以使用RF的`Get Current Date`关键字，并通过设置`increment`参数来增加时间。`Get Current Date`允许调整秒数，并指定输出的日期时间格式。\n</thought>\n\n<code_block>\n# 获取当前时间并增加100秒，格式化为'年-月-日 时:分:秒'\n${future_time}  Get Current Date  increment=+100s  result_format=%Y-%m-%d %H:%M:%S\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class=\"arco-input-tag-inner\"控件，并选择名字为${name1}的选项",
        "output": "<thought>\n首先，应点击class为\"arco-input-tag-inner\"的控件，然后使用`SelectOption`关键字选择名字为`${name1}`的选项。由于选择器是基于class的，我们可以使用`ClickElem`来点击元素。\n</thought>\n\n<code_block>\n# 点击class为\"arco-input-tag-inner\"的控件\nClickElem | [class=arco-input-tag-inner]\n\n# 选择名字为${name1}的选项\nSelectOption | ${name1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成，设置 搜索Agent关键词 为：【自动化测试专用】请勿操作，点击Agent编排，等待2s后校验页面包含class=sysd_chat_ops元素",
        "output": "\n    \n<thought>\n 首先等待页面加载完成，然后设置搜索关键字，再点击“Agent编排”。接着等待2秒，最后校验页面包含指定元素。使用的关键字有：`WaitLoading`、`SetField`、`Click`、`Sleep`、`CheckHasElem`。\n </thought>\n \n <code_block>\n # 等待页面加载完成\n WaitLoading\n \n # 设置搜索Agent关键词\n SetField | 搜索Agent关键词 | 【自动化测试专用】请勿操作\n \n # 点击Agent编排\n Click | Agent编排\n \n # 等待2秒\n Sleep | 2s\n \n # 校验页面包含class=sysd_chat_ops元素\n CheckHasElem | [class=sysd_chat_ops]\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 请选择资产型号，输入UI自动化专用型号，点击 MacBook Pro UI自动化专用型号",
        "output": "<thought>\n首先点击文本 \"请选择资产型号\"，然后输入 \"UI自动化专用型号\" ，最后点击 \"MacBook Pro UI自动化专用型号\"。\n</thought>\n\n<code_block>\n# 点击 请选择资产型号\nClick | 请选择资产型号\n\n# 输入 UI自动化专用型号\nSendText | UI自动化专用型号\n\n# 点击 MacBook Pro UI自动化专用型号\nClick | MacBook Pro UI自动化专用型号\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击finder_001后面的取消",
        "output": "<thought>\n需要选择\"finder_001\"基准文本，并在其右侧点击\"取消\"文本按钮。使用ClickTextToTheDirectionOf关键字指定方向为右。\n</thought>\n\n<code_block>\n# 点击 finder_001 右边的取消\nClickTextToTheDirectionOf | finder_001 | right | 取消\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 发送请求，并获取返回的 BlockRemain 值，请求如下： curl 'https://v-vconsole.bytedance.net/api/top/CDN/2021-03-01/DescribeContentQuota' \\\n  # -H 'accept: application/json, text/plain, */*' \\\n  # -H 'accept-language: zh,zh-CN;q=0.9' \\\n  # -H 'cache-control: no-cache' \\\n  # -H 'sec-ch-ua: \"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\"' \\\n  # -H 'sec-ch-ua-mobile: ?0' \\\n  # -H 'sec-ch-ua-platform: \"macOS\"' \\\n  # -H 'sec-fetch-dest: empty' \\\n  # -H 'sec-fetch-mode: cors' \\\n  # -H 'sec-fetch-site: same-origin' \\\n  # -H 'servicename: CDN' \\\n  # -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36' \\\n  # -H 'x-cdn-entrypoint: 1' \\\n  # -H 'x-csrf-token: 74d8c1f1a50132244f08533ca160c69d' \\\n  # -H 'x-tt-env: boe_hyh_test001' \\\n  # -H 'x-tt-volccdn: Console'\n # ",
        "output": "<thought>\n 我们需要使用 `UiSendRequest` 关键字发送请求，然后使用 `GetValuesFromJson` 关键字提取返回的 `BlockRemain` 值。请求需要设置多个自定义头部，因此我们需要构造一个包含请求头的JSON对象。\n </thought>\n \n <code_block>\n # 设置请求头\n &{headers} Create Dictionary | accept=application/json, text/plain, */* \n ... servicename=CDN \n ... x-cdn-entrypoint=1 \n ... x-tt-env=boe_hyh_test001 \n ... x-tt-volccdn=Console\n \n # 发送GET请求\n ${resp_json}  UiSendRequest | GET | https://xxx.yyy.zzz.com/api/top/CDN/2021-03-01/DescribeContentQuota | ${None} | ${headers}\n \n # 获取返回的BlockRemain值\n ${block_remain}  GetValuesFromJson | ${resp_json} | BlockRemain\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写字段A 设置成 appid  总人数",
        "output": "<thought>\n根据需求，我们需要完成以下动作：在字段A处填入appid 和 总人数\n为完成这个任务，我们可以使用SetField关键字。\n</thought>\n\n<code_block>\n# 在字段A处填入appid和总人数\nSetField | A | appid | 总人数\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查 ${reqTime} 与 ${apply_time} 差距小于10分钟",
        "output": "<thought>\n解决问题需要三个主要步骤：首先，使用 `Convert Date` 将 `${reqTime}` 和 `${apply_time}` 转换为可计算的时间格式（如 epoch 时间）。其次，使用 `Subtract Time From Time` 计算两者的时间差。最后，使用 `Should Be True` 检查时间差是否小于10分钟（600秒）。\n</thought>\n\n<code_block>\n# 将 `${reqTime}` 和 `${apply_time}` 转换为 epoch 时间\n${reqTime_epoch}  Convert Date  ${reqTime}  result_format=epoch\n${apply_time_epoch}  Convert Date  ${apply_time}  result_format=epoch\n\n# 计算两者的时间差\n${time_difference}  Subtract Time From Time  ${reqTime_epoch}  ${apply_time_epoch}\n\n# 校验时间差小于10分钟（600秒）\nShould Be True  abs(${time_difference}) < 600\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 Split bills，遍历页面上所有aria-controls包含\"semiTabPanel\"的元素并点击",
        "output": "<thought>\n首先，我们需要点击包含文本 \"Split bills\" 的元素。接着，我们需要查找页面上所有 aria-controls 属性包含 \"semiTabPanel\" 的元素，并逐一点击这些元素。可以使用 Click 关键字来点击文本 \"Split bills\"，然后使用 FindElem 获取满足条件的所有元素，并使用 ClickElem 迭代对每个元素进行点击。\n</thought>\n\n<code_block>\n# 点击 Split bills\nClick | Split bills\n\n# 查找并点击所有 aria-controls 包含 semiTabPanel 的元素\n${elems}  FindElem | [aria-controls*=semiTabPanel]\nFOR    ${elem}    IN    @{elems}\n    ClickElem    ${elem}\nEND"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在变量 SSO_URL，就等待页面加载完成，否则就打印 ‘1111’",
        "output": "<thought>\n首先需要判断变量 SSO_URL 是否存在。可以使用 `IsVarExisting` 关键字。如果变量存在，则调用 `WaitLoading` 关键字等待页面加载完成。如果变量不存在，则使用 `Log` 打印 '1111'。\n</thought>\n\n<code_block>\n# 判断变量 SSO_URL 是否存在\n${exist}  IsVarExisting  SSO_URL\n\n# 根据变量是否存在执行不同操作\nIF  ${exist}\n    WaitLoading  timeout=60\nELSE\n    Log  1111\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "取class含有product-name__id的span的内容，并从其中取出由一连串5个以上数字组成的id",
        "output": "<thought>\n为了实现这个需求，需要首先找到包含特定class的span元素，然后获取其文本内容。接着，我们可以使用正则表达式从文本中提取出一串5个以上的数字。Robot Framework中没有直接支持正则匹配的关键字，因此需要使用`Evaluate`关键字来执行Python代码进行这个操作。\n</thought>\n\n<code_block>\n# 查找class包含product-name__id的span\n${elem}  FindElem | span[class*=product-name__id]\n\n# 获取该元素的文本内容\n${text}  Get Text | ${elem}\n\n# 使用正则表达式提取一串5个以上数字组成的id\n${id}  Evaluate | re.search(r'\\\\d{5,}', '''${text}''').group() | re\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 如果 save的变量值为true, 将edit_mode设为false",
        "output": "<thought>\n 首先，我们需要判断变量save是否为true。如果是，我们将edit_mode设为false。可以使用Robot Framework的IF语法来实现这个逻辑，并使用Set Variable关键字来改变edit_mode的值。\n </thought>\n \n <code_block>\n # 判断save是否为true\n IF  \"${save}\" == \"true\"\n  # 将edit_mode设为false\n  ${edit_mode}  Set Variable | false\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击售卖延期左边的查看，界面出现 软件类咨询 文字",
        "output": "<thought>\n在这个场景中，需要点击“售卖延期”左边的“查看”按钮，然后验证界面上是否出现“软件类咨询”文字。可以使用ClickTextToTheDirectionOf关键字来点击目标“查看”按钮，基于“售卖延期”作为基准元素并朝向左侧寻找“查看”按钮。接着使用WaitText关键字等待“软件类咨询”文本的出现。\n</thought>\n\n<code_block>\n# 点击售卖延期左边的查看\nClickTextToTheDirectionOf | 售卖延期 | left | 查看\n\n# 等待页面上出现 软件类咨询 文本\nWaitText | 软件类咨询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“测试”的关键字，接收a参数,作用是：1.点击 可视化查询页面  2，点击 确定按钮 3.检查页面是否包含a",
        "output": "<thought>\n对于这个任务，我们需要以下步骤：\n1. 使用 `Click` 关键字点击“可视化查询”文本。\n2. 使用 `Click` 关键字点击“确定”文本。\n3. 使用 `CheckHasText` 关键字检查页面是否包含参数 a。\n</thought>\n\n<code_block>\n*** Keywords ***\n测试\n    [Arguments]  ${a}\n\n    # 点击 可视化查询页面\n    Click  可视化查询\n\n    # 点击 确定按钮\n    Click  确定\n    \n    # 检查页面是否包含参数 a\n    CheckHasText  ${a}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击证书认证前的元素",
        "output": "<thought>\n在该场景中，我们需要点击某个基准元素“证书认证”前面的一个元素。由于是点击元素，应该使用关键字`ClickElemToTheDirectionOf`。基准元素为“证书认证”，方向为left（左侧），要点击的是其左侧的元素。由于题目没有指定jquery选择器，我们只需要提供一个通用的选择器即可，如`*`，这样就可以点击“证书认证”左边第一个找到的元素。\n</thought>\n\n<code_block>\n# 点击 \"证书认证\" 左侧的第一个元素\nClickElemToTheDirectionOf | 证书认证 | left | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“输入我方名称进行搜索”并输入“字节跳动”，等待下拉列表中出现“字节跳动”，选择“字节跳动”，击“请输入对方名称或证件号搜索”并输入“高思琪”，等待下拉列表中出现“高思琪”，选择“高思琪”",
        "output": "<thought>\n此场景涉及输入和选择操作。首先，我们需要点击并输入“字节跳动”，然后等待下拉列表出现目标选项，并使用“SelectOption”选择。接着，进行类似操作以输入和选择“高思琪”。\n</thought>\n\n<code_block>\n# 点击输入我方名称进行搜索并输入“字节跳动”\nClick | 输入我方名称进行搜索\nSendText | 字节跳动\n\n# 等待下拉列表中出现“字节跳动”\nWaitText | 字节跳动\n\n# 选择“字节跳动”\nSelectOption | 字节跳动\n\n# 点击请输入对方名称或证件号搜索并输入“高思琪”\nClick | 请输入对方名称或证件号搜索\nSendText | 高思琪\n\n# 等待下拉列表中出现“高思琪”\nWaitText | 高思琪\n\n# 选择“高思琪”\nSelectOption | 高思琪\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class包含arco-input-size-mini的元素且包含文本为取值1的元素内的class包含feature-variant_valu的元素输入test2",
        "output": "<thought>\n问题需要向特定的包含文本为\"取值1\"的元素内的某个具有特定class的元素输入文本\"test2\"。这个问题可以分解为两步：\n1. 查找包含文本为\"取值1\"且class包含\"arco-input-size-mini\"的元素。\n2. 在该元素内查找class包含\"feature-variant_valu\"的子元素。\n我们可以使用FillArea关键字来进行操作。\n</thought>\n\n<code_block>\n# 在class包含arco-input-size-mini的元素且文本包含取值1的元素内的class包含feature-variant_valu的元素输入test2\nFillArea | [class*=arco-input-size-mini]:contains(取值1) [class*=feature-variant_valu] | test2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待文字 “确认要提交合同申请吗” 出现，点击事件参数右侧的icon",
        "output": "<thought>\n首先，我们要等待页面上出现文本“确认要提交合同申请吗”。一旦检测到该文本，我们需要找到文本“事件参数”右侧的icon并点击它。为此，我们可以使用`WaitText`关键字等待文本出现，然后使用`ClickIconToTheDirectionOf`关键字来点击文本右侧的icon。\n</thought>\n\n<code_block>\n# 等待文本“确认要提交合同申请吗”出现\nWaitText | 确认要提交合同申请吗\n\n# 点击“事件参数”右侧的icon\nClickIconToTheDirectionOf | 事件参数 | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 设置磁盘队列数为 ESSD 1个",
        "output": "\n    \n<thought>\n 需要设置磁盘队列数为“ESSD 1个”。可以使用SetField关键字来完成，因为这是一个页面字段的填写操作。\n </thought>\n \n <code_block>\n # 设置磁盘队列数为 “ESSD 1个”\n SetField | 磁盘队列数 | ESSD 1个\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取“评价人次”的右边的元素的文案",
        "output": "<thought>\n要获取“评价人次”右边元素的文案，我们可以使用FindElemToTheDirectionOf关键字来定位到“评价人次”这个基准元素右边的目标元素。然后，使用GetElemText关键字获取该元素的文本内容。\n</thought>\n\n<code_block>\n# 查找“评价人次”右边的元素\n${elem}  FindElemToTheDirectionOf | 评价人次 | right\n\n# 获取该元素的文本内容\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 将e2a1e1d0dd0648659efa5dbb5341d492 注入cookie到ade_sessionid",
        "output": "\n    \n<thought>\n 要在RobotFramework中将值注入cookie，可以使用Execute Javascript关键字执行相应的JavaScript代码。我们需要使用document.cookie属性来设置cookie值。\n </thought>\n \n <code_block>\n # 设置ade_sessionid为指定值的JavaScript代码\n Execute Javascript | document.cookie = 'ade_sessionid=e2a1e1d0dd0648659efa5dbb5341d492';\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标hover 第二个online_script文本上",
        "output": "<thought>\n这个任务比较直观，只需要使用MoTo关键字并指定idx来实现。首先，我们需要将焦点移动到第二个 \"online_script\" 文本上，因此我们需要使用 \"MoTo\" 关键字，并设置idx为1（因为RF中的索引是从0开始的）。这样就可以实现对第二个 \"online_script\" 文本的hover操作\n</thought>\n\n<code_block>\n# 移动鼠标到第二个\"online_script\"文本上\nMoTo | online_script | idx=1 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认申请理由字段值为 UI自动化测试-实物借用",
        "output": "<thought>\n首先需要检查名为“申请理由”的输入框中的值是否为“UI自动化测试-实物借用”。可以通过使用CheckFieldContains关键字来实现这个需求。\n</thought>\n\n<code_block>\n# 校验申请理由字段值为 UI自动化测试-实物借用\nCheckFieldContains | 申请理由 | UI自动化测试-实物借用\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击按钮 话题分析",
        "output": "<thought>\n这是一个简单的点击操作，可以使用Click关键字实现。我们只需要传递要点击的文本即可。\n</thought>\n\n<code_block>\n# 点击按钮 话题分析\nClick | 话题分析\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "办公地点 选择 赫基大厦",
        "output": "<thought>\n解决问题思路\n\n在这个任务中，我会首先使用SetField关键字来定位并填入“办公地点”字段中的“赫基大厦”。SetField关键字可以操作页面字段name关联的控件区域，填入一个或多个值到控件中。\n</thought>\n\n<code_block>\n# 首先在\"办公地点\"中填入\"赫基大厦\"\nSetField | 办公地点 | 赫基大厦\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击文案为‘PO24122600041”的超链接，进入到详情页",
        "output": "<thought>\n对于这个场景，我们需要点击一个包含特定文本的超链接。可以使用`ClickElem`关键字，因为我们可以通过jQuery选择器找到包含特定文本的a标签。要选取`a`标签，其文本内容包含'PO24122600041'。然后，我们使用`ClickElem`进行点击操作。\n</thought>\n\n<code_block>\n# 点击文案为‘PO24122600041”的超链接\nClickElem | a:contains('PO24122600041')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 打开浏览器访问 https://bytegrowth.com/cloud/login\n 输入邮箱 ${EMAIL}, 密码 ${PASSWORD}，点击登录",
        "output": "\n<thought>\n 首先需要使用`OpenBrowser`关键字打开浏览器并访问指定的URL。然后，使用`SetField`关键字输入邮箱和密码。最后，使用`Click`关键字点击登录按钮。\n </thought>\n \n <code_block>\n # 打开浏览器并访问登录页面\n OpenBrowser | https://bytegrowth.com/cloud/login\n \n # 输入邮箱\n SetField | 邮箱 | ${EMAIL}\n \n # 输入密码\n SetField | 密码 | ${PASSWORD}\n \n # 点击登录\n Click | 登录\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击 ‘数据管理’、‘自定义 Session’",
        "output": "<thought>\n这个场景需要依次点击两个文本按钮。因此可以用 `ClickTextOneByOne` 关键字来解决。需要提供这两个文本按钮的名称。\n</thought>\n\n<code_block>\n# 依次点击‘数据管理’和‘自定义 Session’\nClickTextOneByOne | 数据管理 | 自定义 Session\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 ‘错误检测并关闭浏览器’ 的关键字，接受 check 参数，表示是否进行错误检测，默认为 True，逻辑是：\n1. 如果 check 为真，则校验页面无报错\n2. 关闭浏览器，并根据 check 决定是否进行浏览器关闭阶段的错误检测",
        "output": "<thought>\n为了实现这个关键字，我会使用RF的IF/ELSE结构来判断check参数的值。首先判断check是否为真，如果为真则调用CheckErrMsg关键字来校验页面无报错。然后在关闭浏览器时，根据check参数的值来决定是否进行错误检测。\n</thought>\n\n<code_block>\n*** Keywords ***\n错误检测并关闭浏览器\n    [Arguments]  ${check}=${True}\n    # 如果check为真，则校验页面无报错\n    IF  ${check}\n        CheckErrMsg\n    END\n    # 关闭浏览器，并根据check参数决定是否进行错误检测\n    CloseBrowser  check=${check}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "起一个变量名，含义为短期融资利率",
        "output": "<thought>\n为了定义一个变量，表示短期融资利率，我们可以使用Robot Framework中的`Set Variable`关键字。变量命名应简洁明了，例如：`${ShortTermInterestRate}`。\n</thought>\n\n<code_block>\n# 定义变量短期融资利率\n${ShortTermInterestRate}  Set Variable  0.05\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击为button class包含arco-switch-type-circle的${elem}的兄弟元素",
        "output": "<thought>\n为了解决这个问题，我将首先使用FindElem关键字找到class包含arco-switch-type-circle的button元素。然后使用标准的jquery选择器“~”，来查找指定元素${elem}的所有兄弟元素。最后使用ClickElem关键字点击找到的兄弟元素。\n</thought>\n\n<code_block>\n# 找到含有特定class的button元素\n${elem}  FindElem | button[class*='arco-switch-type-circle']\n\n# 找到${elem}的兄弟元素\n${siblingElem}  FindElem | ${elem} ~ *\n\n# 点击兄弟元素\nClickElem | ${siblingElem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入用户名 kehu_gl ， 密码 88888Aa ， 点击登录， 然后等页面加载完",
        "output": "<thought>\n首先使用`BatchSetFields`关键字来设置用户名和密码。然后使用`Click`关键字点击登录按钮。最后使用`WaitLoading`关键字等待页面加载完成。\n</thought>\n\n<code_block>\n# 设置用户名和密码\nBatchSetFields  用户名=kehu_gl  密码=88888Aa  \n\n# 点击登录按钮\nClick | 登录\n\n# 等待页面加载完成\nWaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 切换到之前的窗口",
        "output": "<thought>\n 解决问题思路：通过使用关键字\"ToPrevWindow\"来实现切换到之前的窗口。\n </thought>\n \n <code_block>\n # 切换到之前的窗口\n ToPrevWindow\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘输码核销’ 下面的 '测试POI'，然后在 ‘门店名/ID' 中输入 ‘测试POI-批量4(KTV预约3)’，并点击它",
        "output": "<thought>\n首先需要点击“输码核销”下方的“测试POI”，可以使用`ClickTextToTheDirectionOf`关键字。接下来，在“门店名/ID”中输入“测试POI-批量4(KTV预约3)”，并点击它。可以使用`SetField`关键字进行输入，然后使用`Click`关键字直接点击该文本。\n</thought>\n\n<code_block>\n# 点击'输码核销'下方的'测试POI'\nClickTextToTheDirectionOf | 输码核销 | bottom | 测试POI\n\n# 在'门店名/ID'中输入‘测试POI-批量4(KTV预约3)’\nSetField | 门店名/ID | 测试POI-批量4(KTV预约3)\n\n# 点击‘测试POI-批量4(KTV预约3)’\nClick | 测试POI-批量4(KTV预约3)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击开启状态下方第一个开启按钮",
        "output": "<thought>\n 首先，分析需求是点击开启状态下方的第一个开启按钮。可以利用ClickTextToTheDirectionOf关键字，通过选择\"开启状态\"作为基准元素，然后在其下方找到第一个\"开启\"按钮进行点击。需要结合jQuery选择器来确认第一个元素。\n </thought>\n \n <code_block>\n # 点击开启状态下方的第一个开启按钮\n ClickTextToTheDirectionOf | 开启状态 | bottom | 开启 | idx=0\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取2分钟后的时分，向请选择时间输入${time_after_2_minutes}",
        "output": "<thought>\n为了获取2分钟后的时分，可以使用Robot Framework的`Get Current Date`关键字，并利用其`increment`参数增加2分钟。然后，将结果输入到\"请选择时间\"字段中。使用`SetField`关键字完成输入操作。\n</thought>\n\n<code_block>\n# 获取2分钟后的时间，并格式化为时:分\n${time_after_2_minutes}  Get Current Date  result_format=%H:%M  increment=2min\n\n# 输入计算后的时间到\"请选择时间\"字段\nSetField | 请选择时间 | ${time_after_2_minutes}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行关键字 ‘判断数据连接是否存在’ 参数为 ${数据连接名称}",
        "output": "<thought>\n此问题的解决思路非常直接，我们只需要直接调用已有关键字，并传入参数 ${数据连接名称}。既然关键字已经存在，我们无需关心它内部的实现，只需要传递正确的参数即可。\n</thought>\n\n<code_block>\n# 调用关键字 “判断数据连接是否存在”，参数为 ${数据连接名称}\n${ret} 判断数据连接是否存在 ${数据连接名称}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查元素 ${elem} 的 aria-checked的属性为false",
        "output": "<thought>\n要检查元素 ${elem} 的 aria-checked 属性是否为 false，可以使用 GetElemAttr 关键字获取该属性的值，然后使用 Should Be Equal As Strings 验证其值为 \"false\"。\n</thought>\n\n<code_block>\n# 获取 ${elem} 元素的 aria-checked 属性值\n${val}  GetElemAttr | ${elem} | aria-checked\n\n# 校验 aria-checked 的值为 false\nShould Be Equal As Strings  ${val}  false\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个关键字：“添加漏斗事件过滤条件”， 接受参数 line_no, args, 主要逻辑是：\n1. 找到 div class包含FunnelEvent__container的第line_no个元素elem1\n2. 点击 elem1 的后代元素 span class包含styles__icon，并等待0.5s\n3. 向elem1的后代元素 div class包含FilterConditionItem__expression的元素 elem2 中输入给定的一个或多个 args",
        "output": "<thought>\n1. 使用`FindElem`查找第line_no个包含`FunnelEvent__container`的div元素。\n2. 使用`ClickElem`点击`elem1`的后代元素，选择器为`span`，`class`包含`styles__icon`。\n3. 使用`Sleep`等待0.5秒。\n4. 使用`FillArea`在`elem1`的后代元素中输入`args`。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加漏斗事件过滤条件\n    [Arguments]  ${line_no}  @{args}\n    ${elem1}  FindElem  div[class*=FunnelEvent__container]:eq(${line_no})\n    ClickElem  ${elem1} span[class*=styles__icon]\n    Sleep  0.5s\n    FillArea  ${elem1} div[class*=FilterConditionItem__expression]  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 i 为 1",
        "output": "<thought>\n我们需要使用RobotFramework中的Set Variable关键字来创建变量i并将其设置为1。\n</thought>\n\n<code_block>\n# 创建变量 i 并设置为 1\n${i}  Set Variable  1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "同时勾选US-EastRed和US-TTP",
        "output": "<thought>\n在这个场景中，我们需要同时勾选两个复选框，分别是“US-EastRed”和“US-TTP”。可以分别使用CheckBoxOn关键字来实现。由于这两个复选框没有提供基准元素或靠近哪个文本的描述，因此可以直接使用CheckBoxOn关键字针对它们的名称。\n</thought>\n\n<code_block>\n# 勾选“US-EastRed”复选框\nCheckBoxOn | US-EastRed\n\n# 勾选“US-TTP”复选框\nCheckBoxOn | US-TTP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 ‘节点类型’ 的值，校验其中同时包含 IDC 和 LM",
        "output": "<thought>\n首先，我们需要获取字段‘节点类型’的值。可以使用关键字GetFieldVal来获取指定字段的值。然后，我们需要校验获得的值同时包含文本 IDC 和 LM。可以使用RF的Should系列校验关键字来实现这个文本校验。\n</thought>\n\n<code_block>\n# 获取字段‘节点类型’的值\n${node_type_value}  GetFieldVal  节点类型\n\n# 校验‘节点类型’的值同时包含文本 IDC 和 LM\nShould Contain  ${node_type_value}  IDC\nShould Contain  ${node_type_value}  LM\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 包含TitleWrapper的class中的内容",
        "output": "<thought>\n要获取包含TitleWrapper的class中的内容，我们可以使用FindElem关键字来定位具有该class的元素，然后使用GetElemText关键字获取元素的文本内容。\n</thought>\n\n<code_block>\n# 查找class包含TitleWrapper的元素\n${elem}  FindElem | [class*=TitleWrapper]\n\n# 获取该元素的文本内容\n${content}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在coral公有云自动化测试-勿动，鼠标悬停该文本",
        "output": "<thought>\n首先，我们需要判断页面上是否存在文本“coral公有云自动化测试-勿动”，可以使用`IsAnyTextExisting`关键字。如果文本存在，我们就使用`MoTo`关键字将鼠标移动到该文本上。\n</thought>\n\n<code_block>\n# 判断文本是否存在\n${exist}  IsAnyTextExisting  coral公有云自动化测试-勿动\n\n# 如果存在则移动鼠标到该文本上\nIF  ${exist}\n    MoTo  coral公有云自动化测试-勿动\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击包含doubao-pro文本的class=custom-radio-auto元素，并点击确定",
        "output": "<thought>\n首先，通过给定文本\"doubao-pro\"以及class=\"custom-radio-auto\"来查找元素，然后点击该元素。接下来，再点击文本为\"确定\"的项。\n</thought>\n\n<code_block>\n# 点击包含doubao-pro文本的class=custom-radio-auto元素\nClickElem | [class=custom-radio-auto]:contains(doubao-pro)\n\n# 点击确定按钮\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 弹窗中 “产品汇总”表 “收款人”字段 包含 huleiting",
        "output": "<thought>\n根据需求，首先确定需要校验的内容是弹窗中的表格。我们需要校验“产品汇总”表中的“收款人”字段是否包含“huleiting”。可以使用CheckColHas关键字来实现这个校验。\n\n步骤：\n1. 确认表格是在弹窗中，因此base参数应为POPUP。\n2. 使用CheckColHas关键字，校验“收款人”列包含“huleiting”。\n\n选择框架中的CheckColHas关键字，因为它可以校验特定列包含指定文本。\n</thought>\n\n<code_block>\n# 校验弹窗中“产品汇总”表“收款人”字段包含 huleiting\nCheckColHas  收款人  huleiting  tbl=产品汇总  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹窗内数据源名称为自动化数据源+随机3位数字   ",
        "output": "<thought>\n首先，题目的要求是设置弹窗内的数据源名称为“自动化数据源”加随机3位数字。首先可以使用`GenerateRandom`关键字来生成一个长度为3的随机数字字符串。然后使用`SetPopupField`关键字在弹窗中设置数据源名称为“自动化数据源”加上生成的随机字符串。\n</thought>\n\n<code_block>\n# 生成3位随机数字字符串\n${random_digits}  GenerateRandom  3  [NUMBERS]\n\n# 设置弹窗内数据源名称为自动化数据源+随机3位数字\nSetPopupField  数据源名称  自动化数据源${random_digits}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击 绑核（CpuPin） 右侧的是",
        "output": "\n    \n<thought>\n 首先，需要识别“绑核（CpuPin）”文本，然后点击其右侧的目标元素。可以使用`ClickElemToTheDirectionOf`关键字，选择方向为`right`。\n </thought>\n \n <code_block>\n # 点击绑核（CpuPin）右侧的目标元素\n ClickElemToTheDirectionOf | 绑核（CpuPin） | right | 是\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 中文（简体） 并 选择 English",
        "output": "<thought>\n首先需要点击文本“中文（简体）”，然后选择“English”选项。可以使用Click关键字点击文本，再使用SelectOption关键字选择选项。\n</thought>\n\n<code_block>\n# 点击中文（简体）\nClick | 中文（简体）\n\n# 选择 English\nSelectOption | English\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击星星小图标，等待0.5s后，页面包含“收藏成功”",
        "output": "\n    \n<thought>\n 首先需要点击星星icon，可以使用`ClickIcon`关键字。然后等待0.5秒，这可以用`Sleep`关键字实现。最后，检查页面是否包含“收藏成功”，可以使用`WaitText`关键字。\n </thought>\n \n <code_block>\n # 点击星星icon\n ClickIcon | star\n \n # 等待0.5秒\n Sleep | 500ms\n \n # 检查页面包含“收藏成功”\n WaitText | 收藏成功\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 422.59375x855.140625 的位置",
        "output": "<thought>\n在RobotFramework中，通常点击坐标位置不是直接支持的功能，需要使用JavaScript来实现。对于此类问题，我们可以利用Execute Javascript关键字，将点击行为转换成JavaScript代码，在指定坐标位置触发点击事件。这样可以绕过RF的局限性，直接通过JavaScript操作。\n</thought>\n\n<code_block>\n# 使用JavaScript在指定坐标位置(422.59375x855.140625)点击\nExecute Javascript | window.document.elementFromPoint(422.59375, 855.140625).click();\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断当前页面标题是不是\"物料下载\"",
        "output": "<thought>\n要判断当前页面的标题是否为\"物料下载\"，我们需要获取页面的标题并进行比较。Robot Framework 中有一个内置库叫做 \"SeleniumLibrary\"，它提供了一个关键字 \"Title Should Be\" 可以直接用于检查页面标题是否符合预期。因此，我们可以直接使用这个关键字来完成任务。\n</thought>\n\n<code_block>\n# 检查当前页面标题是否为\"物料下载\"\nTitle Should Be    物料下载\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击文案为：Settings，或 「设置」的元素",
        "output": "<thought>\n根据需求，我们需要查找到文案为Settings或设置的元素，并点击它。这里我们可以使用ClickAny关键字，该关键字会尝试点击传入的文本中任一个。这里我们需要传入\"Settings\"和\"设置\"两个文本。\n</thought>\n\n<code_block>\n# 点击文案为：Settings，或 「设置」的元素\nClickAny | Settings | 设置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "先点击按省份  点击按区域，门店名输入${Rate_The_Store}",
        "output": "<thought>\n首先需要根据提供的关键字来完成任务。任务要求先点击“按省份”，然后点击“按区域”，最后在门店名输入一个变量`${Rate_The_Store}`。根据这些需求，我可以使用`Click`关键字来实现点击操作，并使用`SetField`关键字来实现向字段中输入操作。\n</thought>\n\n<code_block>\n# 点击“按省份”\nClick | 按省份\n\n# 点击“按区域”\nClick | 按区域\n\n# 输入门店名\nSetField | 门店名 | ${Rate_The_Store}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击Custom Error Pages下边的 Add Rule按钮",
        "output": "<thought>\n根据描述，需要点击 \"Custom Error Pages\" 下边的 \"Add Rule\" 按钮。可以使用ClickTextToTheDirectionOf关键字来实现这个操作。\n\n首先，定位 \"Custom Error Pages\" 这个文本，然后在其下方查找并点击 \"Add Rule\" 按钮。\n</thought>\n\n<code_block>\n# 点击 Custom Error Pages 下方的 Add Rule 按钮\nClickTextToTheDirectionOf | Custom Error Pages | bottom | Add Rule\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格的列数，校验列数小于等于1",
        "output": "<thought>\n要获取表格的列数，可以先获取第一行的单元格数量。然后使用内置关键字校验列数是否小于等于1。\n</thought>\n\n<code_block>\n# 获取表格第一行的值\n@{first_row_values}  GetRowValues | 1\n\n# 获取列数\n${col_count}  Evaluate  len(${first_row_values})\n\n# 校验列数小于等于1\nShould Be True  ${col_count} <= 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击svg class包含MetaFloatDetail__icon第二个",
        "output": "<thought>\n 首先需要通过ClickElem关键字，使用jquery选择器定位到包含MetaFloatDetail__icon的svg class的第二个元素，并点击之。这里需要注意的是，在jquery中，索引是从0开始的，第二个元素对应的索引是1。\n </thought>\n \n <code_block>\n # 定位到包含MetaFloatDetail__icon的svg class的第二个元素并点击\n ClickElem | svg[class*='MetaFloatDetail__icon']:eq(1)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 elem 向下滚动 50",
        "output": "<thought>\n给定需求是将元素向下滚动50%，可以直接使用关键字`ScrollUpDown`，指定元素和滚动百分比。\n</thought>\n\n<code_block>\n# 将元素elem向下滚动50%\nScrollUpDown | ${elem} | 50%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击 class=arco-space-align-center 的第一个元素",
        "output": "<thought>\n 这个问题比较简单，要点击一个元素，我们只需要使用ClickElem关键字，并为其传递正确的选择器即可。在这种情况下，我们的选择器是'.arco-space-align-center'，这将选择所有具有这个类的元素。由于我们想要点击第一个元素，我们可以使用:eq选择器来获取第一个元素。在JQuery中，索引是从0开始的，所以我们需要使用:eq(0)来选择第一个元素。\n </thought>\n \n <code_block>\n # 点击 class=arco-space-align-center 的第一个元素\n ClickElem | .arco-space-align-center:eq(0)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发送的 /xxx/yyy 的最后一个 delete 请求，响应的 json 中 respone:headers:abc 的值应该是 666",
        "output": "<thought>\n首先我们需要使用 `Search Requests` 关键字来搜索请求 URL 中包含 `/xxx/yyy` 的最后一个 DELETE 请求。然后，我们可以通过 `GetValuesFromJson` 关键字从响应的 JSON 中提取 `respone:headers:abc` 的值。最后，使用 `Should Be Equal As Strings` 关键字来验证提取的值是否等于 `666`。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 /xxx/yyy, 且请求方式为 DELETE 的最后一个请求\n${resp_json}  Search Requests  /xxx/yyy  DELETE  last\n\n# 获取 resp_json 中的 respone:headers:abc 的值\n${value}  GetValuesFromJson  ${resp_json}  respone:headers:abc\n\n# 校验 value 是否等于 666\nShould Be Equal As Strings  ${value}  666\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面上第二个停止",
        "output": "<thought>\n根据描述，需要点击页面上第二个包含“停止”文本的元素。可以使用`Click`关键字并结合`idx=1`参数（表示第二个）来实现。\n</thought>\n\n<code_block>\n# 点击页面上第二个停止\nClick | 停止 | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取canvas的图片，并校验图片中包含：运行失败",
        "output": "<thought>\n要解决这个问题，我会首先使用ElemScreenshot关键字，这个关键字能够帮助我们截取到canvas元素的图片。然后，我会使用GetElemScreenshotText关键字获取到图片中的文本。最后，我会使用Should Contain关键字来校验图片中包含文本\"运行失败\"。\n因此，我需要使用的关键字有：ElemScreenshot、GetElemScreenshotText、Should Contain。\n</thought>\n\n<code_block>\n# 截取canvas的图片\nElemScreenshot| canvas\n\n# 获取图片中的文本\n${txt}  GetElemScreenshotText | canvas \n\n# 校验图片中包含 \"运行失败\"\nShould Contain  ${txt}  运行失败\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待10s，点击ComfyUI-LightColorCulling表格中的 ’下载‘ 小图标，在弹框中输入：内场",
        "output": "<thought>\n首先，我们需要等待10秒钟，然后在名为ComfyUI-LightColorCulling的表格中找到并点击“下载”图标。在表格操作中，我们可以使用ClickIconOfRow或ClickIconOfCell关键字来点击表格中的图标。\n接下来，在弹框中输入“内场”，可以使用SetPopupField关键字来输入文本。\n</thought>\n\n<code_block>\n# 等待10秒\nSleep | 10s\n\n# 点击ComfyUI-LightColorCulling表格中 '下载' icon，默认点击第一行中的\nClickIconOfRow | 1 | download | tbl=ComfyUI-LightColorCulling\n\n# 在弹框中输入：内场\nSetPopupField | 内场\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将autotest所在的下拉框拖动到底部",
        "output": "<thought>\n1. 首先需要定位到包含\"autotest\"文本的元素区域\n2. 使用FindByText定位\"autotest\"元素\n3. 使用ScrollUpDown执行滚动操作\n4. 滚动到最底部可以设置percent为100%\n</thought>\n\n<code_block>\n# 定位包含autotest文本的元素\n${elem}  FindByText  autotest\n\n# 滚动到底部\nScrollUpDown  ${elem}  100%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“选择产品” 的关键字，接受product_name 、tenant_id 参数，逻辑如下：\n1.找到请输入中填写  ${product_name}  ，点击搜索\n2.需判断是否存在 ${tenant_id}，若存在则点击",
        "output": "<thought>\n1. 通过SetField关键字填入product_name到\"请输入\"字段中\n2. 使用Click关键字点击\"搜索\"\n3. 使用IsAnyTextExisting判断是否存在tenant_id\n4. 使用IF...END结构来实现存在tenant_id时点击tenant_id\n5. 创建一个名为\"选择产品\"的关键字\n</thought>\n\n<code_block>\n选择产品\n    [Arguments]  ${product_name}  ${tenant_id}\n    # 填入product_name到请输入字段中\n    SetField | 请输入 | ${product_name}\n    # 点击搜索按钮\n    Click | 搜索\n    # 判断是否存在tenant_id\n    ${exist}  IsAnyTextExisting | ${tenant_id}\n    # 如果存在tenant_id，则点击tenant_id\n    IF  ${exist}\n        Click  ${tenant_id}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断Table出现一行",
        "output": "<thought>\n判断Table出现一行，即判断表格行数至少为1，可以使用CheckRowCount来校验表格的行数是否至少为1。可以将行数设置为1，然后使用此关键字进行校验。\n</thought>\n\n<code_block>\n# 校验表格行数量至少为1\nCheckRowCount | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "读取并打印文件 byte-test.key 的内容。提示，可以用 OperatingSystem 库中的 Get File",
        "output": "<thought>\n为了读取并打印文件内容，我们可以使用RobotFramework中的OperatingSystem库提供的关键字Get File来读取文件，然后使用BuiltIn库中的Log关键字打印内容。\n</thought>\n\n<code_block>\n# 读取文件 byte-test.key 的内容\n${file_content}    Get File    byte-test.key\n\n# 打印文件内容\nLog    ${file_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击菜单icon",
        "output": "<thought>\n为了完成“点击菜单icon”这个任务，可以使用提供的关键字 `ClickIcon`。我们需要点击一个图标而不是文本或其他元素，因此 `ClickIcon` 是最合适的选择。\n</thought>\n\n<code_block>\n# 点击菜单图标\nClickIcon | menu\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 第一行第2列单元格 中输入：100",
        "output": "<thought>\n在这个场景中，我们需要向表格的特定单元格（第一行，第二列）输入一个值“100”。根据提供的关键字描述，我们可以使用`FillCell`关键字来实现这个功能。这个关键字允许我们指定具体的行和列，然后填写/设置该单元格的值。我们将使用`FillCell | 1 | 2 | 100`来完成此任务，其中“1”表示第一行，“2”表示第二列，“100”是需要输入的值。\n</thought>\n\n<code_block>\n# 向第一行第2列单元格中输入：100\nFillCell | 1 | 2 | 100\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取DEVICE_ID后面span的value",
        "output": "<thought>\n首先需要找到文本为“DEVICE_ID”的元素，然后选择它后面的span元素。最后，获取该span元素的value属性。\n</thought>\n\n<code_block>\n# 查找DEVICE_ID后面的span元素\n${span_elem}  FindElem | :contains(DEVICE_ID) + span\n\n# 获取该span元素的value属性\n${value}  GetElemAttr | ${span_elem} | value\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在搜索框中输入李四",
        "output": "<thought>\n在搜索框中输入李四，可以通过使用SetField关键字来实现。我们假设搜索框的字段名为“搜索”，那么我们只需要向这个字段输入要搜索的名字即可。\n</thought>\n\n<code_block>\n# 在搜索框中输入李四\nSetField | 搜索 | 李四\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验class为“E13VVZJODGtlZehKDD4V”的div，一共有3个，内容依次为\"绩效进度\"、\"常规提成\"、\"补充激励\"",
        "output": "<thought>\n首先，我们需要校验页面中class为“E13VVZJODGtlZehKDD4V”的div元素的数量，并确认数量为3个。然后，我们需要检查这些元素的内容分别为\"绩效进度\"、\"常规提成\"和\"补充激励\"。为此，我们可以使用GetElemCount关键字来确定元素的数量，以及CheckFieldContains关键字来检查每个元素的内容。\n</thought>\n\n<code_block>\n# 校验class为“E13VVZJODGtlZehKDD4V”的div元素个数是否是3个\n${cnt}  GetElemCount | div[class=E13VVZJODGtlZehKDD4V]\nShould Be Equal As Numbers  ${cnt}  3\n\n# 校验第一个div的内容为\"绩效进度\"\nCheckFieldContains | div[class=E13VVZJODGtlZehKDD4V]:eq(0) | 绩效进度\n\n# 校验第二个div的内容为\"常规提成\"\nCheckFieldContains | div[class=E13VVZJODGtlZehKDD4V]:eq(1) | 常规提成\n\n# 校验第三个div的内容为\"补充激励\"\nCheckFieldContains | div[class=E13VVZJODGtlZehKDD4V]:eq(2) | 补充激励\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置子网下面的名称和描述分别为：子网1、子网描述1",
        "output": "<thought>\n首先找到靠近\"子网\"的\"名称\"和\"描述\"控件，然后分别输入\"子网1\"和\"子网描述1\"。\n</thought>\n\n<code_block>\n# 设置名称为“子网1”\nSetField | 名称 | 子网1 | near=子网\n\n# 设置描述为“子网描述1”\nSetField | 描述 | 子网描述1 | near=子网\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 第1个Payer账号 Doooo|WtestRZA",
        "output": "<thought>\n需要将Payer字段的第一个实例设置为“Doooo|WtestRZA”。可以使用SetField关键字，并指定idx=0。\n</thought>\n\n<code_block>\n# 设置第1个Payer账号为“Doooo|WtestRZA”\nSetField | Payer | Doooo|WtestRZA | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开谷歌浏览器，进入{salary_url}页面，点击弹窗右上角的关闭按钮",
        "output": "<thought>\n在这个场景中，我们需要执行以下步骤：\n1. 使用`OpenBrowser`关键字打开谷歌浏览器并访问指定的URL。\n2. 点击位于弹窗右上角的关闭按钮。这需要使用`ClickIconToTheDirectionOf`，基准是弹窗，需要点击右上方的“close”小图标。\n\n可以使用直接的关键字操作，而不是用复杂的选择器。\n</thought>\n\n<code_block>\n# 打开谷歌浏览器并访问薪资页面\nOpenBrowser | ${salary_url} | name=google\n\n# 点击弹窗右上角的关闭按钮\nClickIconToTheDirectionOf | POPUP | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查事件属性弹窗数据范围是否有“是否首日访问”和“是否登录”，若有则检查事件属性弹窗的数据范围是否有“AND”，有则点击“AND”并点击确定退出事件属性弹窗，若没有“是否首日访问”和“是否登录”则点击“添加规则”",
        "output": "<thought>\n首先检查事件属性弹窗是否包含“是否首日访问”和“是否登录”，使用IsAnyTextExisting关键字来实现。如果存在，进一步检查是否包含“AND”，使用IsAnyTextExisting关键字实现；如果存在，依次点击“AND”和“确定”按钮，使用ClickTextOneByOne关键字实现。如果不存在“是否首日访问”和“是否登录”，则点击“添加规则”，使用Click关键字实现。\n</thought>\n\n<code_block>\n# 检查事件属性弹窗数据范围是否有“是否首日访问”和“是否登录”\n${exist}  IsAnyTextExisting  是否首日访问  是否登录  base=POPUP\n\nIF  ${exist}\n    # 如果存在“是否首日访问”或“是否登录”，检查是否存在“AND”\n    ${and_exist}  IsAnyTextExisting  AND  base=POPUP\n    IF  ${and_exist}\n        # 如果存在“AND”，点击“AND”和“确定”\n        ClickTextOneByOne  AND  确定  base=POPUP\n    END\nELSE\n    # 如果不存在“是否首日访问”和“是否登录”，点击“添加规则”\n    Click  添加规则  base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印剪切板内容",
        "output": "<thought>\n为了打印剪切板内容，我们需要使用`GetCopied`关键字获取当前剪切板内容，并在不需要粘贴到任何元素的情况下将其打印。可以直接使用`Log`关键字来输出获取的值。\n</thought>\n\n<code_block>\n# 获取剪切板内容\n${clipboard_content}  GetCopied\n\n# 打印剪切板内容\nLog  ${clipboard_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 合同管理，并点击我的合同，‘搜索合同名称、交易方’ 中输入${contract_number}",
        "output": "<thought>\n根据题干描述，需要进行以下几个操作步骤：\n1. 需要点击文本“合同管理”。\n2. 然后点击文本“我的合同”。\n3. 在输入字段‘搜索合同名称、交易方’中输入变量${contract_number}。\n根据给定的关键字，使用Click关键字分别点击“合同管理”和“我的合同”，再用SetField设置输入区域。\n</thought>\n\n<code_block>\n# 点击 合同管理\nClick | 合同管理\n\n# 点击 我的合同\nClick | 我的合同\n\n# 在‘搜索合同名称、交易方’中输入${contract_number}\nSetField | 搜索合同名称、交易方 | ${contract_number}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 等待页面加载完成后，设置搜索Agent关键字为：“【自动化测试专用】”，等待0.5s后，检测页面中class=ste-card的元素至少要有一个",
        "output": "\n    \n<thought>\n 首先需要等待页面加载完成，可以使用`WaitLoading`关键字。然后使用`SetField`关键字设置搜索Agent的值。接下来使用`Sleep`关键字等待0.5秒。最后，使用`GetElemCount`关键字检查页面中class=ste-card的元素数量。\n </thought>\n \n <code_block>\n # 等待页面加载完成\n WaitLoading\n \n # 设置搜索Agent关键字为：“【自动化测试专用】”\n SetField | Agent | 【自动化测试专用】\n \n # 等待0.5秒\n Sleep | 0.5s\n \n # 检测页面中class=ste-card的元素至少有一个\n ${count}  GetElemCount | [class=ste-card]\n IF  ${count} < 1\n     Fail | 元素数量不足\n END\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面是否存在白屏，如果白屏则刷新页面",
        "output": "<thought>\n我们需要使用CheckWhiteScreen关键字来检查页面是否存在白屏。如果白屏存在，CheckWhiteScreen会抛出异常。因此，我们应该使用Run Keyword And Return Status来捕捉异常，从而判断页面是否是白屏。如果CheckWhiteScreen执行成功（返回False），页面不是白屏，否则（返回True）页面是白屏，则刷新页面。\n</thought>\n\n<code_block>\n# 使用 Run Keyword And Return Status 判断白屏\n${is_white_screen}  Run Keyword And Return Status  CheckWhiteScreen\n\n# 如果是白屏，则刷新页面\nIF  ${is_white_screen}\n    RefreshPage\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击id=x的div或name=x的span",
        "output": "<thought>\n我们需要点击id为x的div元素或者name为x的span元素，可以利用`ClickElem`关键字并结合jquery选择器来选择这些元素。\n</thought>\n\n<code_block>\n# 点击id=x的div或name=x的span\nClickElem | div[id='x'],span[name='x']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印 ‘关联属性’ 字段的值",
        "output": "<thought>\n首先，我们需要使用GetFieldVal关键字获取'关联属性'字段的值。获取到值后，再使用Log关键字打印出来。\n</thought>\n\n<code_block>\n# 获取'关联属性'字段的值\n${val}  GetFieldVal | 关联属性\n\n# 打印获取到的值\nLog  ${val}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“新增单个AP” 的关键字，接受可变参数 config, 作用是：\n1. 点击新增AP, 然后点击 ‘新增单个 AP’\n2. 对于 config 中的每一个 key, value 对，将页面上名为 key 的字段的值设置为 value\n3. 最后点击 ‘新增’",
        "output": "<thought>\n1. 使用 `ClickTextOneByOne` 点击 `新增AP` 和 `新增单个AP`。\n2. 使用 `BatchSetFields` 将 `config` 中的字段值填入页面。\n3. 使用 `Click` 点击 `新增`。\n</thought>\n\n<code_block>\n*** Keywords ***\n新增单个AP\n    [Arguments]  @{config}\n    # 点击新增AP和新增单个AP\n    ClickTextOneByOne  新增AP  新增单个AP\n    # 批量设置字段值\n    BatchSetFields  &{config}\n    # 点击新增\n    Click  新增\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将元素 ele 设置为 张三",
        "output": "<thought>\n要将元素ele设置为张三，可以使用FillArea关键字。通常情况下，使用jquery选择器来定位页面上的元素。这里给出的提示是元素适合用FillArea，因此可以直接使用该关键字进行设置。\n</thought>\n\n<code_block>\n# 将元素ele设置为张三\nFillArea | ${ele} | 张三\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中 Custom column，校验存在 2个 “Amount after discount” ",
        "output": "<thought>\n为了完成此任务，我们需要在弹窗中执行特定操作。首先，我们需要点击弹窗中的文本 \"Custom column\"。接着，我们需要检查弹窗中是否存在两个 \"Amount after discount\"。这可以通过获取包含指定文本的元素数量并进行校验来实现。首先使用`Click`关键字进行点击，然后使用`GetElemCount`结合适当的选择器来获取元素的数量，最后用RF内置的`Should Be Equal As Numbers`进行校验。\n</thought>\n\n<code_block>\n# 点击弹窗中 Custom column\nClick | Custom column | base=POPUP\n\n# 获取弹窗中 \"Amount after discount\" 的元素个数\n${cnt}  GetElemCount | :contains(Amount after discount) | base=POPUP\n\n# 校验个数是否等于2\nShould Be Equal As Numbers  ${cnt}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面上${project_name}的个数",
        "output": "<thought>\n首先，我们需要使用`FindByText`关键字来查找页面上文本为`${project_name}`的元素，然后使用`GetElemCount`关键字来获取这些元素的数量。\n</thought>\n\n<code_block>\n# 查找文本为${project_name}的元素个数\n${cnt}  GetElemCount | :contains(${project_name})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 localstorage, age 18",
        "output": "<thought>\n为了满足设置 localStorage 的需求，可以使用关键字 LocalStorageSetItem 来添加键值对。根据场景描述，我们需要将名为 \"age\" 的键设置为 \"18\" 的值。\n</thought>\n\n<code_block>\n# 设置 localStorage 中的键 \"age\" 为值 \"18\"\nLocalStorageSetItem | age | 18\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行 shell 命令：ls -la",
        "output": "<thought>\n在Robot Framework中，为了执行shell命令，我们可以使用OperatingSystem库中的Run关键字。根据提示，${output}变量用于存储命令执行后的输出。因此，我们需要调用Run关键字并传递要执行的shell命令，即\"ls -la\"。为了确保代码的可读性和清晰性，我们应该在代码中添加注释，以指明使用了哪种关键字和为何使用它。\n</thought>\n\n<code_block>\n# 使用OperatingSystem库中的Run关键字执行shell命令`ls -la`\n${output}  Run | ls -la\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对class中包含 oc-row-select 的所有元素，进行截图对比，相似度为0.99，截图命名为唯一的名称，如demo1、demo2等",
        "output": "<thought>\n为了解决这个问题，我们需要先找到所有class包含\"oc-row-select\"的元素。我们可以使用FindElem关键字来定位这些元素。由于需要对这些元素分别进行截图对比，并且命名为唯一的名称，我们可以使用循环来遍历这些元素，并在每次迭代中生成唯一的截图名称，然后使用ImageDiff关键字进行截图对比。\n</thought>\n\n<code_block>\n# 查找所有class中包含oc-row-select的元素\n@{elements}  FindElem  [class*=oc-row-select]\n\n# 初始化计数器\n${index}  Set Variable  1\n\n# 对每个元素进行操作\nFOR  ${elem}  IN  @{elements}\n    # 生成唯一的截图名称\n    ${pic_name}  Evaluate  \"demo\" + str(${index})\n\n    # 截图对比，相似度为0.99\n    ImageDiff  selector=${elem}  pic_name=${pic_name}  sim=0.99\n\n    # 增加计数器\n    ${index}  Set Variable  ${index} + 1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待确定按钮消失",
        "output": "<thought>\n 要解决这个问题，我们需要使用WaitElemDisappear关键字，并传入一个选择器，该选择器可以定位到确定按钮。\n </thought>\n \n <code_block>\n # 等待确定按钮消失\n WaitElemDisappear \n  button:contains(确定)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面包含“点击刷新”， 就点击它，检查任务同步成功  ${数据集名称}",
        "output": "<thought>\n根据任务描述，需要判断页面是否存在“点击刷新”文本，如果存在则点击它。然后检查页面是否包含“任务同步成功”和`${数据集名称}`两个文本。可以使用IsAnyTextExisting关键字判断“点击刷新”是否存在，用Click关键字点击文本。随后使用CheckHasText关键字检查两个目标文本是否在页面上。\n</thought>\n\n<code_block>\n# 判断页面是否存在“点击刷新”文本\n${exist}  IsAnyTextExisting  点击刷新\n\n# 如果存在，则点击“点击刷新”\nIF  ${exist}\n    Click  点击刷新\n\n    # 检查页面是否包含“任务同步成功”和`${数据集名称}`\n    CheckHasText  任务同步成功  ${数据集名称}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Policy多选下拉框选中Auto-GT-Code",
        "output": "<thought>\nPolicy多选下拉框选中Auto-GT-Code，其实就是设置Policy字段的值，选取关键字SetField来实现设置Policy字段的值为Auto-GT-Code。\n</thought>\n\n<code_block>\n# 设置Policy字段的值为Auto-GT-Code\nSetField | Policy | Auto-GT-Code\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 离${elem}最近的【禁用】自动化-非托管-基础",
        "output": "<thought>\n首先需要找到最近的元素，并且点击靠近给定元素的文本 \"禁用\"。可以使用 Click 关键字，并通过 near 参数指定距离最近的元素。\n</thought>\n\n<code_block>\n# 点击靠近给定元素(${elem}) 最近的 \"禁用\"\nClick | 禁用 | near=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 叉号",
        "output": "<thought>\n根据需求，需要点击名为close的小图标，使用`ClickIcon`关键字即可完成此操作。\n</thought>\n\n<code_block>\n# 点击名为close的小图标\nClickIcon | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检验class包含 arco-form-label-item 的元素中不包含文本：‘协议’",
        "output": "<thought>\n为了解决这个问题，我需要校验class包含`arco-form-label-item`的元素中不包含文本`协议`。这可以通过使用`CheckNotHasText`关键字在指定选择器内进行文本校验。首先我需要构建一个正确的jQuery选择器，该选择器的格式为`[class*='arco-form-label-item']`，然后使用`CheckNotHasText`关键字来确保这些元素中不包括文本`协议`。\n</thought>\n\n<code_block>\n# 校验class包含arco-form-label-item的元素中不包含文本‘协议’\nCheckNotHasText | 协议 | base=[class*='arco-form-label-item']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传 ${FILE_DOCX} 文件",
        "output": "<thought>\n问题需要上传一个文件，适合使用`UploadFile`关键字，该关键字允许通过指定文件路径或URL来上传文件。这里需要上传变量`${FILE_DOCX}`，所以可以直接使用`UploadFile | ${FILE_DOCX}`。\n</thought>\n\n<code_block>\n# 上传指定的DOCX文件\nUploadFile | ${FILE_DOCX}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 备注输入 已解决完成\n \n ",
        "output": "<thought>\n 根据任务要求，使用SetField来填写备注信息。由于没有提供具体位置或上下文，因此假设直接操作相关字段即可。\n </thought>\n \n <code_block>\n # 输入备注已解决完成\n SetField | 备注 | 已解决完成\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击id 为value__0_key_input的元素，并在鼠标激活处输入custom1",
        "output": "<thought>\n首先使用`ClickElem`关键字点击指定的元素。然后使用`SendText`关键字在光标激活的位置输入文本\"custom1\"。\n</thought>\n\n<code_block>\n# 点击id为value__0_key_input的元素\nClickElem | [id=value__0_key_input]\n\n# 在鼠标激活处输入custom1\nSendText | custom1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击第一行操作下面 删除 按钮",
        "output": "<thought>\n 需要点击第一行中的“删除”按钮。可以使用`ClickTextOfCell`关键字来定位表格的单元格，指定行号和列名或列号来点击按钮。\n </thought>\n \n <code_block>\n # 点击第一行操作列中的删除按钮\n ClickTextOfCell | 1 | 操作 | 删除\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个关键字 ‘明细表_删除所有行’，获取表格行数，FOR循环每次点击表格第 1 行中的 ‘删除’，点击弹出的确定，直到删除了所有行",
        "output": "<thought>\n为了解决这个问题，我们需要实现一个循环来删除表格中的所有行。首先，获取表格的行数，然后检查行数是否大于零。如果大于零，则执行循环操作：对于每一次循环，点击表格第一行的“删除”按钮，并然后点击确认弹窗中的“确定”按钮。重复此过程，直到表格中不再有行。使用关键字`GetRowCount`获取行数，`ClickTextOfRow`来点击“删除”按钮，以及`Click`关键字用于确认操作。\n</thought>\n\n<code_block>\n*** Keywords ***\n明细表_删除所有行\n    ${row_count}    GetRowCount\n    FOR    ${i}    IN RANGE    ${row_count}\n        ClickTextOfRow    1    删除\n        Click    确定    base=POPUP\n        ${row_count}    GetRowCount\n        IF    ${row_count} == 0\n            Exit For Loop\n        END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前页面url，然后打印当前页面 cookies",
        "output": "<thought>\n根据任务要求，我们需要使用RobotFramework来获取当前页面的URL以及打印当前页面的cookies。首先可以使用GetCurrentUrl关键字来获取URL。然后，利用SeleniumLibrary中的Get Cookies关键字来获取cookies并打印。通过使用Builtin库中的Log关键字，我们可以将cookies输出到日志，以便查看。\n</thought>\n\n<code_block>\n# 获取当前页面的URL\n${url}  GetCurrentUrl\n\n# 打印当前页面的cookie\n${cookies}  Get Cookies\nLog  ${cookies}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到所有的checkbox 都变成off状态",
        "output": "<thought>\n为了将所有复选框元素都设置为off状态，我们需要找到所有的checkbox元素，然后逐一取消勾选。可以使用FindElem关键字来获取所有checkbox元素的选择器，然后使用CheckBoxOff关键字取消勾选。\n</thought>\n\n<code_block>\n# 找到所有的checkbox元素\n${checkboxes}  FindElem | input[type=checkbox]\n\n# 循环遍历每一个checkbox元素并将其设置为off状态\nFOR  ${index}  IN  @{checkboxes}\n   CheckBoxOff | ${index}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${SQL} 粘贴到 div.abc 中",
        "output": "<thought>\n首先，我们需要使用Paste关键字将给定的文本${SQL}粘贴到指定的元素div.abc中。我们不需要获取剪切板的内容，因此直接使用Paste关键字即可。通过指定选择器来选择目标元素即可将文本粘贴到该位置。\n</thought>\n\n<code_block>\n# 将文本${SQL}粘贴到选择器为div.abc的元素中\nPaste | div.abc | ${SQL}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置placeholder包含限购的输入框为18，点击文案包含添加商品的按钮",
        "output": "<thought>\n首先，根据问题要求，需要设置placeholder属性包含\"限购\"的输入框（input或textarea）为值“18”。这可以通过使用`FillArea`来实现。然后，需要点击一个按钮，其文案包含“添加商品”，可以使用`Click`关键字。需要注意的是，选择器对于选择特定的input或者textarea, 我们可以通过`:contains`来过滤条件。\n</thought>\n\n<code_block>\n# 设置placeholder属性中包含\"限购\"的input或textarea为18\nFillArea | input[placeholder*=限购], textarea[placeholder*=限购] | 18\n\n# 点击文案包含\"添加商品\"的按钮\nClick | 添加商品\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前 url 与 cookie",
        "output": "<thought>\n要获取当前的URL，可以使用RF的内置函数`GetCurrentUrl`。而获取cookie可以通过RF的浏览器相关库，如SeleniumLibrary中的`Get Cookies`关键字来实现。因为题目没有明确指定使用哪个库来获取cookie，这里假设使用SeleniumLibrary。综合分析，代码需要获取当前的URL然后获取cookie。\n</thought>\n\n<code_block>\n# 获取当前页面的 URL\n${current_url}  GetCurrentUrl\n\n# 获取当前页面的 Cookies\n${cookies}  Get Cookies\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击 自定义字段配置 下面的 添加一行，向“自定义字段配置”表格的第一行输入多个值：testtesttest、1，校验当前页面截图中包含两个：testtesttest",
        "output": "<thought>\n 首先，需要点击“自定义字段配置”下方的“添加一行”按钮。然后，向“自定义字段配置”表格的第一行输入指定的值“testtesttest”和“1”。最后，获取当前页面的截图并校验截图中包含两个“testtesttest”。\n </thought>\n \n <code_block>\n # 点击自定义字段配置下方的添加一行\n ClickTextToTheDirectionOf | 自定义字段配置 | bottom | 添加一行\n \n # 向自定义字段配置表格的第一行输入值：testtesttest、1\n FillRow | 1 | testtesttest | 1 | base=自定义字段配置\n \n # 截取当前页面截图\n Screenshot\n \n # 获取页面截图中的文本\n ${txt}  GetPageScreenshotText\n \n # 校验截图中包含两个testtesttest\n Should Be Equal As Strings  ${txt.count('testtesttest')}  2\n </code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“删除统计口径”，接受一个参数name, 作用是：\n1. 输入name 到 “请输入属性名”中，查询\n2. 点击删除，校验页面包含 ‘是否要删除统计口径’，然后点击确定按钮",
        "output": "<thought>\n要解决此问题，我需要：\n1. 使用`SetField`将参数`name`输入到“请输入属性名”中。\n2. 查询后点击删除按钮。\n3. 使用`CheckHasText`校验页面是否包含‘是否要删除统计口径’。\n4. 确认后，点击“确定”按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n删除统计口径\n    [Arguments]  ${name}\n    \n    # 输入name到请输入属性名字段中\n    SetField  请输入属性名  ${name}\n\n    # 点击删除按钮\n    Click  删除\n\n    # 校验页面包含‘是否要删除统计口径’\n    CheckHasText  是否要删除统计口径\n\n    # 点击确定按钮\n    Click  确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格的表头行中的第三个 radio",
        "output": "<thought>\n为了点击表格表头行中的第三个 radio，我们可以利用关键字ClickElemOfRow。表头行在方法中使用特殊值HEAD表示，因此可以使用ClickElemOfRow | HEAD来定位表头行。同时，指定我们要点击的元素是第三个radio，因此我们需要使用jquery selector来选择第3个radio，具体表现为:eq(2)。\n</thought>\n\n<code_block>\n# 点击表头行中的第三个 radio\nClickElemOfRow | HEAD | :radio:eq(2)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发送到https://qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery的所有POST请求,校验响应中的message为success",
        "output": "<thought>\n在这个场景中，我们需要完成以下几个任务：\n1. 使用 `Search Requests` 关键字搜索发送到特定 URL 的所有 POST 请求。\n2. 对于每一个请求，我们需要检查响应消息中的 \"message\" 字段。\n3. 验证 \"message\" 是否等于 \"success\"。\n\n我们可以先使用 `Search Requests` 关键字来获取所有匹配条件的请求响应数据，然后使用 `GetValuesFromJson` 关键字提取响应中的 \"message\" 字段，最后使用 `Should Be Equal As Strings` 来验证 \"message\" 是否为 \"success\"。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery 且请求方式为 POST 的所有请求\n${responses}  Search Requests  qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery  POST  all\n\n# 对于搜索到的每一个响应，校验 message 是否为 success\nFOR  ${resp}  IN  @{responses}\n    ${message}  GetValuesFromJson  ${resp}  message\n    Should Be Equal As Strings  ${message}  success\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "往请选择商机报备状态中选择创建中",
        "output": "<thought>\n在这个场景中，我们需要选择一个特定的选项“创建中”在名为“请选择商机报备状态”的字段中。可以使用SelectOptionForField关键字来实现这个操作。\n</thought>\n\n<code_block>\n# 选择字段“请选择商机报备状态”并设置为“创建中”\nSelectOptionForField | 请选择商机报备状态 | 创建中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找第 3 个表格中的 小夜曲 这一行中的文案为删除的 button 元素",
        "output": "<thought>\n为了查找第三个表格中特定行的元素，首先要锁定表格范围，然后在此范围内对行进行识别。对于表格中指定的行，使用参数 row_name_or_id 来定义“表格行中的文本或行号”，这是直接识别行的方式。然后需要选择行内特定的元素，这是通过 FindElemOfRow 实现的。为了捕获特定的 `button` 元素，需要使用 jquery selector 定位其属性为 `删除` 的 `button`。由于需要处理第三个表格，因此需要为 `tbl` 参数指定为 `3`。\n</thought>\n\n<code_block>\n# 查找第三个表格中小夜曲所在行的文案为删除的button元素\n${elem}  FindElemOfRow | 小夜曲 | button:contains(删除) | tbl=3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查看包含 close 的 svg 元素的数量",
        "output": "<thought>\n解决问题思路：通过使用GetElemCount关键字得到jquery选择器\"[class*=close]\"所示元素的数量，其中，class*=close表示class属性包含close字符的元素。\n</thought>\n\n<code_block>\n# 使用GetElemCount关键字获取class属性包含close的svg元素的数量\n${cnt}  GetElemCount | svg[class*=close]\n# 打印元素数量\nLog | ${cnt}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个关键字：设置第${group_no}组属性筛选条件，接受 ${line_no}, @{config} 参数，分别表示行号和该行的筛选条件配置，\n# 主要逻辑：\n# 1. 先判断第${group_no}个 div class包含InlineFirstItem__outer-container__TQuRy的元素${elem1}是否存在，如果不存在就要点击对照组按钮，并等待1s，此过程最多循环4次，\n# 2. 如果以上元素已经存在，则再判断此元素下的第${line_no}个 div class包含xxxx的元素${elem2}是否存在，如果不存在就要点击该元素内部的属性过滤按钮，并等待1s，此过程最多循环4次，\n# 3. 最后向元素${elem2} 中输入给定的多个筛选条件",
        "output": "<thought>\n我们首先需要设置两个循环，一个用于检查group div是否存在，另一个用于检查line div是否存在。这两个循环都需要点击特定的按钮以显示隐藏的元素，然后停顿一下以等待元素加载。\n在每个循环中，我们都有一个计数器来跟踪重试次数，并在达到最大重试次数后退出循环。\n在这两个循环结束后，我们可以确认这两个div都存在，然后我们就能找到这些div并在line div中输入给定的筛选条件。\n\n因此，我们需要使用以下关键词：\n- Set Variable: 为计数器设置初始值\n- FOR...IN RANGE...END: 执行循环\n- IsAnyElemExisting: 检查某个元素是否存在\n- Exit For Loop If: 在满足条件时退出循环\n- Click: 点击一个按钮\n- Sleep: 暂停执行\n- FindElem: 找到一个元素\n- FillArea: 在一个元素中输入多个值\n</thought>\n\n<code_block>\n设置第${group_no}组属性筛选条件\n    [Arguments]    ${group_no}    ${line_no}    @{config}\n    ${counter}    Set Variable    0\n    FOR    ${i}    IN RANGE    4\n        ${exist}    IsAnyElemExisting    div[class*='InlineFirstItem__outer-container__TQuRy']:eq(${group_no-1})\n        Exit For Loop If    ${exist}\n        Click    对照组\n        Sleep    1s\n        ${counter}    Set Variable    ${counter+1}\n        Exit For Loop If    ${counter} == 4\n    END\n    ${elem1}    FindElem    div[class*='InlineFirstItem__outer-container__TQuRy']:eq(${group_no-1})\n\n    ${counter}    Set Variable    0\n    FOR    ${i}    IN RANGE    4\n        ${exist}    IsAnyElemExisting   ${elem1} div[class*='xxxx']:eq(${line_no-1})\n        Exit For Loop If    ${exist}\n        ClickElem    ${elem1} button:contains('属性过滤')\n        Sleep    1s\n        ${counter}    Set Variable    ${counter+1}\n        Exit For Loop If    ${counter} == 4\n    END\n    ${elem2}    FindElem    ${elem1} div[class*='xxxx']:eq(${line_no-1})\n    FillArea    ${elem2}    @{config}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击新建，然后在 ‘搜索想要接入的数据源’ 中输入 ${数据源类型}，然后点击 section class=type-name 且文本包含 ${数据源类型} 的元素",
        "output": "<thought>\n首先，我们需要先点击“新建”按钮，可以使用 `Click` 关键字来实现。接下来，在搜索框中输入 `${数据源类型}`，使用 `SetField` 填入文本。最后，点击 class 为 `type-name` 且文本包含 `${数据源类型}` 的元素，使用 `ClickElem` 来实现。\n</thought>\n\n<code_block>\n# 点击新建按钮\nClick | 新建\n\n# 在“搜索想要接入的数据源”中输入 ${数据源类型}\nSetField | 搜索想要接入的数据源 | ${数据源类型}\n\n# 点击匹配的 section 元素\nClickElem | section[class=type-name]:contains(${数据源类型})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中 右上角的关闭小图标",
        "output": "<thought>\n在这个场景中，我们需要点击弹窗中的右上角的关闭icon。根据关键字描述，应该使用ClickIconToTheDirectionOf关键字。基准元素可以是弹窗，它在此处用POPUP表示。我们要点击的是位于弹窗右上角的close图标。因此，基准元素设置为POPUP，方向设置为topRight，图标名称设置为close。\n</thought>\n\n<code_block>\n# 点击弹窗中右上角的关闭icon\nClickIconToTheDirectionOf | POPUP | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开地址为TEST_URL的页面，其中TEST_URL被赋值为baidu.com",
        "output": "<thought>\n在这个任务中，我需要打开指定的URL，然后考虑如何在Robot Framework中使用OpenUrl关键字完成这项任务。我知道TEST_URL被赋值为baidu.com，因此我需要确保在OpenUrl命令中使用这个URL。这里不需要使用任何复杂的选择器或者脚本语言的执行，只需要一个简单的OpenUrl调用。\n</thought>\n\n<code_block>\n# 打开指定的URL页面\nOpenUrl | baidu.com\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印元素 ${elem} 的信息",
        "output": "<thought>\n首先，考虑到需要打印元素的信息，可以使用 PrintElemRect 关键字。该关键字可以获取并打印元素的空间尺寸和位置信息。由于目标元素为变量 ${elem}，我们直接将其传递给 PrintElemRect 即可。\n</thought>\n\n<code_block>\n# 打印元素 ${elem} 的信息\nPrintElemRect  ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击高意愿，点击业务BP负责人下方输入框，输入章江虹，并选择",
        "output": "<thought>\n首先，我们需要点击文本“高意愿”，这可以通过使用`Click`关键字来实现。接下来，我们需要点击文本“业务BP负责人”下方的`input`或`textarea`，这可以通过使用`ClickElemToTheDirectionOf`关键字并设置基准元素和方向来实现。然后，我们需要在光标激活位置输入文本“章江虹”，这可以通过使用`SendText`关键字来实现。最后，我们需要选择这个选项，由于实现选择的操作可以通过`SelectOption`关键字来实现。\n</thought>\n\n<code_block>\n# 点击高意愿\nClick | 高意愿\n\n# 点击业务BP负责人下方的input/textarea\nClickElemToTheDirectionOf | 业务BP负责人 | bottom | input,textarea\n\n# 输入章江虹\nSendText | 章江虹\n\n# 选择此选项\nSelectOption | 章江虹\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${text_end}中包含2个${current_date}",
        "output": "<thought>\n在这个场景中，我们需要校验一个文本变量`${text_end}`中是否包含两个`${current_date}`。Robot Framework的内置关键字`Should Contain`可以用于检查一个字符串是否包含另一个字符串。为了验证`${text_end}`中有两个`${current_date}`，我们需要利用Python的能力来计算出现次数。我们可以使用`Evaluate`关键字来执行Python代码，计算`${text_end}`中`${current_date}`出现的次数，然后验证该次数是否等于2。\n</thought>\n\n<code_block>\n# 获取${text_end}中${current_date}出现的次数\n${count}  Evaluate  ${text_end}.count(${current_date})\n\n# 校验${current_date}出现次数为2\nShould Be Equal As Numbers  ${count}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“打开拜访管理页”的关键字，具体逻辑是：1. 打开谷歌浏览器使用cookies=${ZZR_SSO_COOKIES}访问 ${APP_MAIN_PAGE}  2. 等待页面加载完成",
        "output": "<thought>\n首先需要使用OpenBrowser关键字打开浏览器，并传入url和cookies参数。然后使用WaitLoading关键字等待页面加载完成。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开拜访管理页\n    # 打开谷歌浏览器并访问 ${APP_MAIN_PAGE}，使用给定的cookies\n    OpenBrowser | ${APP_MAIN_PAGE} | cookies=${ZZR_SSO_COOKIES}\n    \n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把“Ui Open Browser\n    Ui Open Url  ${MAIN_PAGE}\n    Ui Click  Accept all\n    Ui Click  中文（简体）\n    Ui Select Item  English\n    ui wait loading complete\n    BatchSetFields  Username/Email=${USERNAME}  Password=${PASSWORD}\n    Ui Click  Sign in\n    ui wait loading complete\n”封装为关键字“登录BP控制台”",
        "output": "<thought>\n我们需要将给定的步骤封装为一个新的RobotFramework关键字，名为“登录BP控制台”。为了实现这一点，我们需要将步骤中的可变参数提取为关键字的参数，并为它们设置默认值，以便在调用关键字时可以传递不同的值。\n</thought>\n\n<code_block>\n*** Keywords ***\n登录BP控制台\n    [Arguments]  ${url}=${MAIN_PAGE}  ${username}=${USERNAME}  ${password}=${PASSWORD}\n    \n    # 打开浏览器并导航到指定页面\n    Ui Open Browser\n    Ui Open Url  ${url}\n    \n    # 接受所有协议和选择语言\n    Ui Click  Accept all\n    Ui Click  中文（简体）\n    \n    # 选择语言为英文\n    Ui Select Item  English\n    \n    # 等待页面加载完成\n    ui wait loading complete\n    \n    # 设置用户名和密码\n    BatchSetFields  Username/Email=${username}  Password=${password}\n    \n    # 点击登录按钮并等待重定向\n    Ui Click  Sign in\n    ui wait loading complete\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量 resp 是个 JSON，如果 resp 的 data 字段是个列表，找出data中第一个 children长度为 1的列表项， 取出其中的 dashboard_id 字段，若无符合的 则就抛出异常",
        "output": "# 判断resp的data字段是否是列表\n${is_list}  Evaluate  isinstance(${resp['data']}, list)\n\n# 如果data是列表，查找符合条件的项\nIF  ${is_list}\n    # 初始化找到的项为None\n    ${found_item}  Set Variable  ${None}\n\n    # 遍历data列表\n    FOR  ${item}  IN  @{resp['data']}\n        # 判断列表项的children长度是否为1\n        ${length}  Evaluate  len(${item['children']})\n        IF  ${length} == 1\n            # 找到符合条件的项，退出循环\n            ${found_item}=  Set Variable  ${item}\n            Exit For Loop\n        END\n    END\n\n    # 如果找到了符合条件的项，取出dashboard_id字段\n    IF  ${found_item} != ${None}\n        ${dashboard_id}  Set Variable  ${found_item['dashboard_id']}\n    ELSE\n        # 未找到符合条件的项，抛出异常\n        Fail  未找到符合条件的列表项\n    END\nELSE\n    # resp的data字段不是列表，抛出异常\n    Fail  resp的data字段不是列表\nEND"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 拦截方式后面的 自动限速",
        "output": "<thought>\n需要点击“拦截方式”后面的“自动限速”文本。可以使用`ClickTextToTheDirectionOf`关键字，通过定位“拦截方式”文本，然后选择它右边的“自动限速”。\n</thought>\n\n<code_block>\n# 点击拦截方式右边的自动限速\nClickTextToTheDirectionOf | 拦截方式 | right | 自动限速\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "让“操作快捷键”出现在画面中央",
        "output": "<thought>\n1. 要让元素出现在画面中央，需要先确保元素在可视区域内(使用MoveIntoView)\n2. 可以使用MoveIntoView确保元素可见，这通常会使元素出现在视图中央\n</thought>\n\n<code_block>\n# 确保\"操作快捷键\"元素在可视区域内并出现在画面中央\nMoveIntoView | 操作快捷键\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击抖音号右侧的直播间文字",
        "output": "<thought>\n这个问题可以通过使用关键字 \"ClickTextToTheDirectionOf\" 来解决。具体来说，\"抖音号\" 是基准元素，目标文本是 \"直播间\"，方向是 \"right\"。\n</thought>\n\n<code_block>\n# 点击抖音号右侧的直播间文字\nClickTextToTheDirectionOf | 抖音号 | right | 直播间\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个用户登录关键字，接受${user}, ${password}参数，它们的默认值分别为${ADMIN_ACCOUNT}, ${ADMIN_PASSWORD}, 关键字先输入用户名、密码，然后点击登录，等待页面出现个人中心，即登录成功",
        "output": "<thought>\n首先，我们使用BatchSetFields关键字为用户名和密码字段赋值。然后，我们点击“登录”按钮，最后我们等待页面上出现“个人中心”。如果“个人中心”出现，那么我们就认为登录成功。\n</thought>\n\n<code_block>\n用户登录\n    [Arguments]  ${user}=${ADMIN_ACCOUNT}  ${password}=${ADMIN_PASSWORD}\n    # 设置用户名和密码\n    BatchSetFields | 用户名=${user} | 密码=${password}\n    # 点击登录按钮\n    Click  登录\n    # 等待个人中心出现在页面上\n    WaitText  个人中心\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 如果'${version_user_clustering}' !='None'，执行aaa",
        "output": "<thought>\n需要使用IF语句判断`${version_user_clustering}`是否不等于'None'，如果为真则执行aaa。\n</thought>\n\n<code_block>\n# 判断version_user_clustering是否不等于'None'，如果是则执行aaa\nIF  \"${version_user_clustering}\" != \"None\"\n aaa\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“前往升级”的关键字，逻辑如下：\n1、点击前往升级\n2、等待页面加载完成\n3、验证页面中存在套餐更配\n4、点击套餐更配左边的icon",
        "output": "<thought>\n为了实现这个关键字，我们需要分几个步骤完成：\n1. 使用`Click`关键字点击“前往升级”。\n2. 使用`WaitLoading`关键字等待页面加载完成。\n3. 使用`CheckHasText`关键字验证页面是否包含“套餐更配”。\n4. 使用`ClickIconToTheDirectionOf`关键字点击“套餐更配”左边的icon。\n</thought>\n\n<code_block>\n*** Keywords ***\n前往升级\n    # 点击文本为“前往升级”的按钮\n    Click  前往升级\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 验证页面中是否存在“套餐更配”\n    CheckHasText  套餐更配\n    \n    # 点击“套餐更配”左边的icon\n    ClickIconToTheDirectionOf  套餐更配  left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置全局变量‘PAGE_ACCOUNT’，值为变量ACCOUNT，SUB_ACCOUNT，StartTime 采用 下划线拼接",
        "output": "<thought>\n首先需要将变量ACCOUNT, SUB_ACCOUNT和StartTime用下划线拼接成一个字符串，然后将这个字符串赋值给全局变量PAGE_ACCOUNT。可以利用RobotFramework的Catenate关键字来进行字符串拼接。\n</thought>\n\n<code_block>\n# 以\"_\"为分隔符进行字符串连接\n${combined_string}  Catenate  SEPARATOR=_  ${ACCOUNT}  ${SUB_ACCOUNT}  ${StartTime}\n\n# 设置全局变量PAGE_ACCOUNT为拼接后的字符串\nSet Global Variable  ${PAGE_ACCOUNT}  ${combined_string}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到已完成并进行点击",
        "output": "<thought>\n要找到并点击文本为 \"已完成\" 的元素，可以直接使用 Click 关键字，因为通过 Click 关键字可以直接点击文本为指定内容的元素。此外，如果要先找到 \"已完成\" 元素再点击，也可以使用 FindByText 关键字配合 ClickElem 来实现，但在这个场景中是等效的，只需使用 Click 关键字即可实现要求。\n</thought>\n\n<code_block>\n# 直接点击文本为 \"已完成\" 的元素\nClick | 已完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在暂停，直接结束函数",
        "output": "<thought>\n首先，需要判断页面上是否存在文本“暂停”。如果存在，则直接结束函数。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本“暂停”\n${exist}  IsAnyTextExisting | 暂停\n\n# 如果存在“暂停”，则结束函数\nIF  $exist\n    Fail  Function ended due to presence of \"暂停\"\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击铅笔形状的icon，这个icon 一般都代表编辑的意思",
        "output": "<thought>\n这个场景要求点击铅笔形状的icon，通常这种图标用于编辑，所以可以通过点击名为“edit”的icon来实现。我们可以使用提供的`ClickIcon`关键字，其中`name`参数设为'edit'，而`idx`参数设为默认值0即可，因为没有特别说明需要点击多个同类图标中的某一个。\n</thought>\n\n<code_block>\n# 点击名为edit的图标\nClickIcon | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "拼接New Annotation Task 和${CURRENT_DATE}，更新到Suite variable ${TASK_NAME} 中",
        "output": "<thought>\n首先，我们需要将字符串 \"New Annotation Task\" 和变量 ${CURRENT_DATE} 拼接在一起。可以使用机器人框架的内置关键字 Catenate 来实现这一点。然后将结果更新到 Suite variable ${TASK_NAME} 中。\n</thought>\n\n<code_block>\n# 使用Catenate关键字进行字符串拼接\n${TASK_NAME}  Catenate  SEPARATOR=  New Annotation Task  ${CURRENT_DATE}\n\n# 将拼接结果更新到Suite variable ${TASK_NAME}\nSet Suite Variable  ${TASK_NAME}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格 ‘环境名称’ 列中包含：线上",
        "output": "<thought>\n在这个案例中，需要验证“环境名称”列包含“线上”。我们可以使用关键字 \"CheckColHas\" 完成校验。\n</thought>\n\n<code_block>\n# 校验表格 '环境名称' 列中包含：线上\nCheckColHas | 环境名称 | 线上\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 经办人 设置成空值，也就是将经办人字段清空",
        "output": "<thought>\n 这是一个非常直接的任务。我们可以使用SetField关键字，将\"经办人\"字段的值设置为空。为了实现这个，我们需要在SetField关键字中使用${KEY_BACKSPACE}特殊值，这个特殊值可以清空一个输入字段。\n </thought>\n \n <code_block>\n # 清空\"经办人\"字段\n SetField | 经办人 | ${KEY_BACKSPACE}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "DataFinder所在行应该包含部署和成功",
        "output": "<thought>\n任务要求检查数据表中名为\"DataFinder\"的行是否包含\"部署\"和\"成功\"。这是一个典型的行内容验证问题，因此可以使用CheckRowHas关键字来实现。首先我们需要确认表格的选择器，假设为默认表格1。然后列出需要校验的文本内容。\n</thought>\n\n<code_block>\n# 校验DataFinder所在行包含部署和成功\nCheckRowHas | DataFinder | 部署 | 成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验字段全端口模式所选值为关闭",
        "output": "<thought>\n为了解决这个问题，我们需要校验页面中名为\"全端口模式\"的字段包含的文本为\"关闭\"。可以使用`CheckFieldContains`关键字来实现这个功能。需要指定字段名称为\"全端口模式\"，同时检查文本\"关闭\"是否存在。\n</thought>\n\n<code_block>\n# 校验字段全端口模式所选值为关闭\nCheckFieldContains | 全端口模式 | 关闭\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击生图模型下方的‘图片 2.0pro’按钮",
        "output": "<thought>\n首先，需要找到生图模型，然后点击其下方的‘图片 2.0pro’按钮。可以使用ClickTextToTheDirectionOf关键字来完成这个操作。\n</thought>\n\n<code_block>\n# 找到生图模型下方的‘图片 2.0pro’按钮并点击\nClickTextToTheDirectionOf | 生图模型 | bottom | 图片 2.0pro\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找第一个class包含arco-icon-plus的元素且包含文本添加受众规则",
        "output": "<thought>\n首先，我们需要查找一个class包含特定值的元素，同时该元素还需要包含特定的文本。这可以使用`FindElem`和`FindByText`关键字来实现。\n为了找到第一个class包含`arco-icon-plus`且包含文本`添加受众规则`的元素，我们可以构建一个jquery选择器。\n由于我们只需要第一个匹配的元素，所以不需要使用`:eq`选择器。\n</thought>\n\n<code_block>\n# 查找class包含arco-icon-plus且文本为添加受众规则的元素\n${elem}  FindElem | [class*=arco-icon-plus]:contains(添加受众规则)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击基础信息旁边的监听 Tab",
        "output": "<thought>\n在这个场景中，我们需要点击一个靠近文本\"基础信息\"的\"监听\" Tab。可以使用Click关键字，并结合near参数来实现。通过指定near=基础信息，确保我们点击的是正确的\"监听\" Tab。\n</thought>\n\n<code_block>\n# 点击基础信息旁边的监听 Tab\nClick | 监听 | near=基础信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击下载，验证文件可以下载成功",
        "output": "<thought>\n为了完成“点击下载，验证文件可以下载成功”的任务，我需要以下步骤：\n1. 使用 `Click` 关键字点击包含“下载”文本的按钮或链接。\n2. 验证文件是否下载成功，这可能涉及到检查某个目录中是否存在预期的文件。由于Robot Framework没有内置关键字来直接检查文件下载，需要使用Evaluate执行Python代码来实现这个功能。\n</thought>\n\n<code_block>\n# 点击下载按钮或链接\nClick | 下载\n\n# 使用Python代码检查文件是否下载成功\n${file_exists}=  Evaluate  os.path.exists('/path/to/download/directory/filename.ext')  os\n\n# 校验文件是否存在\nShould Be True  ${file_exists}  # 确保文件存在以验证下载成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 强制跳转设置 下面的 跳转方式 设置为：302",
        "output": "<thought>\n在这个问题中，我需要将\"强制跳转设置\"下面的\"跳转方式\"设置为\"302\"。根据上下文，我暂时假设\"强制跳转设置\"和\"跳转方式\"是页面上的字段名称，而\"302\"是我需要设置的值。因此，我可以使用关键字\"SetField\"来达到目标。将\"near\"参数设置为\"强制跳转设置\"，这样RF就知道我要设置的\"跳转方式\"字段在哪个文本附近。然后，我将\"跳转方式\"和\"302\"作为参数传递给\"SetField\"关键字。\n</thought>\n\n<code_block>\n# 在 \"强制跳转设置\" 下方的 \"跳转方式\" 字段中设置值 \"302\"\nSetField | 跳转方式 | 302 | near=强制跳转设置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击取消button",
        "output": "<thought>\n对于给定任务，要求点击一个包含文本“取消”的button元素。可以直接使用`ClickElem`关键字和jQuery选择器来实现。\n</thought>\n\n<code_block>\n# 点击取消button\nClickElem | button:contains(取消)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${use_sub} 为假，就点击 主用户登录，然后输入主账号用户名 ${user_name}, 子用户 ${sub_username}, 密码 ${password}, 否则就输入用户名 张三，密码 password",
        "output": "<thought>\n需要使用RF的IF/ELSE语法来判断变量${use_sub}是否为假。如果为假，首先点击“主用户登录”，然后使用BatchSetFields批量设置用户名、子用户名和密码。否则，直接使用BatchSetFields来输入用户名“张三”和密码“password”。\n</thought>\n\n<code_block>\n# 判断 ${use_sub} 是否为假\nIF  not $use_sub\n    # 点击主用户登录\n    Click  主用户登录\n    # 输入主账号用户名、子账号用户名和密码\n    BatchSetFields  用户名=${user_name}  子用户名=${sub_username}  密码=${password}\nELSE\n    # 输入用户名和密码\n    BatchSetFields  用户名=张三  密码=password\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等第4个id包含A, na=C,文本为OK的span",
        "output": "<thought>\n解决问题需要等待满足特定条件的元素出现。可以使用`WaitElem`关键字并构建适当的jquery选择器。选择器需要同时满足以下条件：id包含\"A\"、属性na等于\"C\"、文本为\"OK\"。对于第4个匹配元素，使用:eq(3)。\n</thought>\n\n<code_block>\n# 等第4个id包含A, na=C,文本为OK的span\nWaitElem | span[id*=A][na=C]:contains(OK)[na=C]:eq(3)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格第一行的型号编码列的值，记录到 ${sn}",
        "output": "<thought>\n此场景中需要获取表格第一行中的某一列的值，使用RF框架中的GetCellValue关键字能够实现该需求。首先需要找到第一行和型号编码列，然后使用GetCellValue关键字获取单元格值，并记录到变量${sn}。\n</thought>\n\n<code_block>\n# 使用GetCellValue关键字来获取表格第一行中型号编码列的值\n${sn}  GetCellValue  |  1  |  型号编码\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新窗口，并等待 ‘自定义事件’ 出现，然后点击它",
        "output": "<thought>\n我们需要切换到新窗口，并等待‘自定义事件’文本出现，然后点击它。可以使用`ToNewWindow`切换到新窗口，使用`WaitText`等待指定文本，最后使用`Click`点击文本。\n</thought>\n\n<code_block>\n# 切换到新窗口\nToNewWindow\n\n# 等待‘自定义事件’文本出现\nWaitText | 自定义事件\n\n# 点击‘自定义事件’\nClick | 自定义事件\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${ip_name} 后面 删除按钮",
        "output": "<thought>\n首先需要找到名为 `${ip_name}` 的文本，然后点击其右边的 删除 按钮。这可以通过使用 `ClickTextToTheDirectionOf` 关键字实现。\n</thought>\n\n<code_block>\n# 点击 ${ip_name} 右边的删除按钮\nClickTextToTheDirectionOf | ${ip_name} | right | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击class包含arco-input-tag-view的元素",
        "output": "<thought>\n 需要点击class包含`arco-input-tag-view`的元素，可以使用`ClickElem`关键字并通过jquery选择器来实现。选择器中使用`[class*=arco-input-tag-view]`来定位目标元素。\n </thought>\n \n <code_block>\n # 点击class包含arco-input-tag-view的元素\n ClickElem | [class*=arco-input-tag-view]\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 专属Server 下方的 立即新增",
        "output": "<thought>\n在这个场景中，我们需要点击位于\"专属Server\"下方的\"立即新增\"。根据提供的关键字信息，\"ClickTextToTheDirectionOf\"关键字最适合用于这种通过相对定位进行点击的场景。具体来说，我们可以使用\"专属Server\"作为基准文本，并选择\"bottom\"方向进行查找和点击\"立即新增\"。\n</thought>\n\n<code_block>\n# 点击 专属Server 下方的 立即新增\nClickTextToTheDirectionOf | 专属Server | bottom | 立即新增\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等class包含show, 文本包含张三的元素消失",
        "output": "<thought>\n首先，我们需要根据具体要求构造jquery选择器，然后使用WaitElemDisappear关键字将其作为参数传递。\n</thought>\n\n<code_block>\n# 构造jquery选择器\n${selector}    Set Variable    div[class*=show]:contains(张三)\n\n# 等待具有class属性包含show并且文本包含张三的元素消失\nWaitElemDisappear    ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待【工单类型】出现，设置请选择时间为：11:12，点击1元升级专业版，校验域名待找回存在于页面上",
        "output": "<thought>\n首先需要等待页面上出现“工单类型”文本。然后使用`SetField`关键字设置“请选择时间”字段的值为\"11:12\"。接下来，点击“1元升级专业版”。最后，校验页面上存在“域名待找回”文本。\n</thought>\n\n<code_block>\n# 等待页面包含工单类型\nWaitText | 工单类型 \n\n# 设置请选择时间为11:12\nSetField | 请选择时间 | 11:12 \n\n# 点击1元升级专业版\nClick | 1元升级专业版 \n\n# 校验页面包含域名待找回\nCheckHasText | 域名待找回 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "使用 OCR 方式获取 “姓名” 字段的值",
        "output": "<thought>\n在这个问题中，我们需要使用OCR的方式获取姓名字段的值，所以我们可以直接使用RF库中的GetFieldVal关键字来解决这个问题，并将OCR参数设置为True。\n</thought>\n\n<code_block>\n# 使用OCR方式获取姓名字段的值\n${val}  GetFieldVal | 姓名 | ocr=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 离线日志查询 关键字，接受参数 domain、time，业务逻辑如下\n# 1、点击 离线日志 下面的输入框，设置字段为 domain\n# 2、点击选中 domain\n# 3、设定日志时间区间为 前一天 00:00:00 - 23:59:59",
        "output": "<thought>\n为了解决这个问题，我们需要依次完成以下步骤：\n1. 使用 ClickElemToTheDirectionOf 关键字点击“离线日志”下面的 input/textarea元素，这样可以定位到输入框。\n2. 然后使用 SendText 输入域名。\n3. 再次点击确认选中输入的域名。\n4. 设置日志时间区间。我们需要使用 RF 的时间处理关键字来获得前一天的日期，然后构造时间区间。\n</thought>\n\n<code_block>\n*** Keywords ***\n离线日志查询\n    [Arguments]  ${domain}  ${time}\n    \n    # 点击离线日志下的输入框\n ClickElemToTheDirectionOf  离线日志  bottom  input,textarea\n    \n    # 输入域名\n    SendText  ${domain}\n    \n    # 选择已输入的域名\n    Click  ${domain}\n    \n    # 计算前一天的日期\n    ${yesterday}  Get Current Date  result_format=%Y-%m-%d  increment=-1 days\n    \n    # 设置日志时间为前一天的00:00:00到23:59:59\n    ${start_time}  Set Variable  ${yesterday} 00:00:00\n    ${end_time}  Set Variable  ${yesterday} 23:59:59\n    \n    # 设定时间区间\n    SetField  时间区间  ${start_time} ~ ${end_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“验证搜索结果不存在”，接受参数 name ，逻辑是：\n#1.提取class包含AnalysisDropdown__options的元素中的文案text\n#2.校验text中不包含参数name",
        "output": "<thought>\n解决问题思路：我们需要寻找一个包含特定class的元素，然后提取其文本内容，并检查该文本中不包含指定的name。可以使用`FindElem`提取元素，使用`GetElemText`获取文本，再使用`Should Not Contain`进行校验。\n</thought>\n\n<code_block>\n*** Keywords ***\n验证搜索结果不存在\n    [Arguments]  ${name}\n    # 查找class包含AnalysisDropdown__options的元素\n    ${elem}  FindElem | [class*=AnalysisDropdown__options]\n    # 获取元素的文本内容\n    ${text}  GetElemText | ${elem}\n    # 校验text中不包含参数name\n    Should Not Contain  ${text}  ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将分辨率设置为2000 1000",
        "output": "<thought>\n为设置浏览器尺寸，我们可以使用`SetWindowSize`关键字，直接指定宽度和高度即可。\n</thought>\n\n<code_block>\n# 设置浏览器尺寸为 2000 x 1000\nSetWindowSize | 2000 | 1000\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击设备DID 右侧文本，随后点击aid右上方的icon",
        "output": "<thought>\n对于这个场景，我们需要依次执行两个操作：\n1. 点击 \"设备DID\" 右侧的文本。\n2. 点击 \"aid\" 右上方的 icon。\n\n根据问题描述，我们可以使用 `ClickTextToTheDirectionOf` 和 `ClickIconToTheDirectionOf` 这两个关键字来实现这两个步骤。因为我们要点击 \"设备DID\" 右侧的文本，所以需要用 `ClickTextToTheDirectionOf`，并确保 text 参数为*。而对于 \"aid\" 右上方的 icon，我们可以使用 `ClickIconToTheDirectionOf`，指明方向为 topRight。\n</thought>\n\n<code_block>\n# 点击设备DID右侧的文本\nClickTextToTheDirectionOf | 设备DID | right | *\n\n# 点击aid右上方的icon\nClickIconToTheDirectionOf | aid | topRight\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前URL, 等待URL包含/home",
        "output": "<thought>\n为了实现获取当前URL并等待URL包含/home，我们可以使用GetCurrentUrl和WaitURLContainsAll关键字。先获取当前URL，然后使用WaitURLContainsAll关键字等待URL包含/home。\n</thought>\n\n<code_block>\n# 获取当前URL\n${current_url}  GetCurrentUrl\n\n# 等待URL包含/home\nWaitURLContainsAll  /home\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击span标签为class=\"ygSKg qDzjx\"的位置",
        "output": "<thought>\n需要点击class为“ygSKg qDzjx”的span标签，可以使用ClickElem关键字，通过jquery选择器表示该元素。\n</thought>\n\n<code_block>\n# 点击class为“ygSKg qDzjx”的span标签\nClickElem | span[class='ygSKg qDzjx']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“校验核心数据大于基准值1\" 的关键字，接受card_name 和 num 参数，num默认值为1，关键字的作用是:\n# 将 经办组 设置为：QA测试组new\n# 找到 class 包含 coreDataItem 且文本包含 card_name 的元素，获取此元素中 class包含 webcast-data-browser 元素的文案，校验此文案的值大于 num",
        "output": "<thought>\n为了解决这个任务，我们需要依次执行以下操作：\n\n1. 利用 `SetField` 设置“经办组”为“QA测试组new”。\n2. 利用 `FindElem` 找到 class 包含 `coreDataItem` 且文本包含 `card_name` 的元素。\n3. 在前一步找到的元素中，再利用 `FindElem` 找到 class 包含 `webcast-data-browser` 的元素。\n4. 获取该元素的文本内容，使用 `GetElemText` 。\n5. 将获取到的文本内容转换为数字，然后比对它是否大于 `num`，这里可以采用 `Should Be True` 关键字进行判断。\n\n我们可以安全地假设文本能被成功解析为数值。如果解析时出现错误，需考虑添加处理逻辑。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验核心数据大于基准值1\n    [Arguments]  ${card_name}  ${num}=1\n    \n    # 设置“经办组”为“QA测试组new”\n    SetField  经办组  QA测试组new\n    \n    # 查找 class 包含 coreDataItem 且文本包含 card_name 的元素\n    ${card_elem}  FindElem  [class*=coreDataItem]:contains(${card_name})\n    \n    # 在 card_elem 中查找 class 包含 webcast-data-browser 的元素\n    ${data_elem}  FindElem  [class*=webcast-data-browser]  base=${card_elem}\n    \n    # 获取 data_elem 的文本\n    ${data_text}  GetElemText  ${data_elem}\n    \n    # 将文本转换为数值并比较\n    ${data_value}  Evaluate  float(${data_text})\n    Should Be True  ${data_value} > ${num}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（行：app_channel， 列：字典）中的上传",
        "output": "<thought>\n要解决这个问题，我们需要点击表格中指定单元格内的文本。使用`ClickTextOfCell`关键字即可。参数包括行名或ID、列名或ID，以及要点击的文本。本例中行是`app_channel`，列是`字典`，目标文本是`上传`。\n</thought>\n\n<code_block>\n# 点击行app_channel和列字典交汇处的单元格内的上传按钮\nClickTextOfCell | app_channel | 字典 | 上传\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印 ‘属性名’ 表格的，第一个行的内容",
        "output": "<thought>\n要获取‘属性名’表格第一行的内容，可以使用GetRowValues关键字，该关键字返回行的所有值作为列表。我们需要指定表格名称和行号。\n</thought>\n\n<code_block>\n# 获取属性名表格第一行的值\n@{first_row_values}  GetRowValues | 1 | tbl=属性名\n\n# 打印第一行的内容\nLog Many | @{first_row_values}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“清理保存的SQL”，逻辑为：\n1. 发送一个请求：curl 'https://e168-6-35finder.datarangers-onpremise.volces.com/datafinder/api/v1/projects/15/1/editors/1' \\\n-X 'DELETE' \\\n--data-raw '{}'",
        "output": "<thought>\n任务是编写一个自动化测试脚本，用于删除特定的编辑器内容。可以使用`UiSendRequest`关键字发送HTTP DELETE请求到给定的URL。请求体是一个空的JSON对象。只需调用一次`UiSendRequest`即可实现。\n</thought>\n\n<code_block>\n*** Keywords ***\n清理保存的SQL\n    # 发送DELETE请求到指定的URL\n    ${resp_json}  UiSendRequest  DELETE  https://xxx.yyy.zzz.com/datafinder/api/v1/projects/15/1/editors/1  {}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 使用post方法,请求 ${GLATA_HOME}/v2/api/ticket/GetActions, header和当前页面保持一致，body设置为{'TicketId': ${seq}}",
        "output": "<thought>\n 为了完成这个任务，需要使用`UiSendRequest`关键字来发送POST请求。请求的URL是`${GLATA_HOME}/v2/api/ticket/GetActions`，请求头保持与当前页面一致，假设可以通过某种方式获取当前页面的请求头。请求体需要设置为`{'TicketId': ${seq}}`。\n </thought>\n \n <code_block>\n # 获取当前页面的请求头，假设存储在变量${current_headers}\n # 发送POST请求\n ${resp_json} UiSendRequest | POST | ${GLATA_HOME}/v2/api/ticket/GetActions | {'TicketId': ${seq}} | ${current_headers}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "进入页面上第三个 iframe",
        "output": "<thought>\n需要进入页面上第三个 iframe，可以使用 `ToFrame` 关键字。使用 jQuery 选择器时，第 num 个元素用 `:eq(num-1)` 表示，第三个元素为 `:eq(2)`。\n</thought>\n\n<code_block>\n# 进入页面上第三个 iframe\nToFrame | iframe:eq(2)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字，名为 新增消息接收人，逻辑为：\n# 1.接收七个参数 姓名 邮箱 区号 手机号 基本接收管理 消息类型，都是必填参数;\n# 2.点击 新增消息接收人\n# 3.输入 姓名为 姓名，邮箱为 邮箱，手机号为 区号 加 手机号，选中 基本接收管理 左边的复选框，选中 消息类型 左边的复选框；\n# 4.点击 确定；\n# 5.校验弹框中存在文本 '接收人添加成功'，点击 确定；\n# 6.点击 姓名 最右侧的 删除；\n# 7.点击 确定；\n# 8.校验 接收人 中不包含 姓名；",
        "output": "<thought>\n首先需要编写一个关键字函数，并接收七个参数：姓名、邮箱、区号、手机号、基本接收管理、消息类型。然后，按照任务要求的步骤进行操作。使用RobotFramework 提供的关键字来实现步骤 2至 8。需要注意的是，手机号由区号加上手机号组成。对于复选框的操作可以使用 `CheckBoxOn`，而校验文本可以使用 `CheckHasText`。对于删除操作，需找准删除按钮的位置。校验最后的结果时，可以使用`CheckNotHasText`。\n</thought>\n\n<code_block>\n*** Keywords ***\n新增消息接收人\n    [Arguments]  ${姓名}  ${邮箱}  ${区号}  ${手机号}  ${基本接收管理}  ${消息类型}\n\n    # 点击新增消息接收人\n    Click | 新增消息接收人\n\n    # 输入姓名\n    SetField | 姓名 | ${姓名}\n\n    # 输入邮箱\n    SetField | 邮箱 | ${邮箱}\n\n    # 输入手机号\n    SetField | 手机号 | ${区号}${手机号}\n\n    # 勾选基本接收管理\n    CheckBoxOn | ${基本接收管理}\n\n    # 勾选消息类型\n    CheckBoxOn | ${消息类型}\n\n    # 点击确定\n    Click | 确定\n\n    # 校验接收人添加成功\n    CheckHasText | 接收人添加成功 | base=POPUP\n\n    # 点击弹窗中的确定\n    Click | 确定 | base=POPUP\n\n    # 点击姓名最右侧的删除\n    ClickIconToTheDirectionOf | ${姓名} | right | delete\n\n    # 点击确定\n    Click | 确定\n\n    # 校验接收人中不包含姓名\n    CheckNotHasText | ${姓名}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含AeolusArrowLeft的svg，如果页面有确定按钮就点击, 并等待按钮消失",
        "output": "<thought>\n首先，我们需要点击一个具有特定class的svg元素。接着，通过检查页面是否存在“确定”按钮来决定是否点击。最后，等待该按钮消失。我们可以使用ClickElem关键字来点击svg，然后用IsAnyTextExisting检查“确定”按钮是否存在，存在则点击，并使用WaitElemDisappear等待消失。\n</thought>\n\n<code_block>\n# 点击class包含AeolusArrowLeft的svg\nClickElem | svg[class*='AeolusArrowLeft']\n\n# 检查页面是否有“确定”按钮，存在则点击\n${exist}  IsAnyTextExisting | 确定\nIF  ${exist}\n    Click  确定\nEND\n\n# 等待“确定”按钮消失\nWaitTextDisappear | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求, 校验 resp 中 code 为 0, 且 data 长度大于等于1，并且 data 中第一项包含 admin_account 字段 , 请求为：curl 'https://cloudapi.bytedance.net/faas/services/ttwy2i/invoke/query_onpremise_env_record' \\\n--data-raw '{\"current\":1,\"pageSize\":10,\"env_id\":\"64002434acff42002cd29798\",\"only_favor\":false,\"sorter\":{},\"filter\":{},\"page\":1,\"limit\":10,\"product_id\":\"61360660bb258b00459e2c1c\",\"current_user\":\"胡雷庭(huleiting.hlt@bytedance.com)\"}' \\\n--compressed",
        "output": "# 发送请求\n${resp_json}  UiSendRequest | POST | https://cloudapi.bytedance.net/faas/services/ttwy2i/invoke/query_onpremise_env_record | {\"current\":1,\"pageSize\":10,\"env_id\":\"64002434acff42002cd29798\",\"only_favor\":false,\"sorter\":{},\"filter\":{},\"page\":1,\"limit\":10,\"product_id\":\"61360660bb258b00459e2c1c\",\"current_user\":\"胡雷庭(huleiting.hlt@bytedance.com)\"}\n\n# 校验 resp 中 code 为 0\nShould Be Equal As Strings  ${resp_json[\"code\"]}  0\n\n# 校验 data 长度大于等于1\nShould Be True  len(${resp_json[\"data\"]}) >= 1\n\n# 校验 data 中第一项包含 admin_account 字段\nDictionary Should Contain Key  ${resp_json[\"data\"][0]}  admin_account"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘预估数量’，并校验页面无异常，然后点击 ‘确定’",
        "output": "<thought>\n首先使用`Click`关键字点击'预估数量'文本。接下来，使用`CheckErrMsg`关键字来校验页面无异常提示。最后，再次使用`Click`关键字点击'确定'文本。\n</thought>\n\n<code_block>\n# 点击‘预估数量’\nClick | 预估数量\n\n# 校验页面无异常\nCheckErrMsg\n\n# 点击‘确定’\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "滑动页面到“4｜团队经营提升建议”模块\n\n提示： 就要要将给定文案移动到视野内",
        "output": "<thought>\n在这个场景中，我们需要将特定文本“4｜团队经营提升建议”模块移动到视野内。根据问题提示，我们可以使用`MoveIntoView`关键字将包含该文本的模块移动到视野内。\n</thought>\n\n<code_block>\n# 移动到包含“4｜团队经营提升建议”的模块\nMoveIntoView | :contains('4｜团队经营提升建议')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面存在 177125，严格匹配",
        "output": "<thought>\n根据需求，我们需要在页面上使用严格匹配的方式检查是否存在文本 177125。根据提供的关键字描述，我们可以使用 CheckHasText 关键字，通过设置 strict=True 来实现严格匹配。\n</thought>\n\n<code_block>\n# 校验页面严格匹配出现177125\nCheckHasText | 177125 | strict=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "滑动到“服务满意度”",
        "output": "<thought>\n为了将页面上的文本“服务满意度”移入视野，可以使用MoveIntoView关键字。我们需要先确定“服务满意度”的jQuery选择器，假设我们选择使用基于文本内容的选择器。如果需要更复杂的选择器，可以在实际场景中根据DOM结构进行调整。\n</thought>\n\n<code_block>\n# 将文本“服务满意度”移动到视野内\nMoveIntoView | :contains(\"服务满意度\")\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数据查询",
        "output": "<thought>\n这个问题相对简单，只需要点击文本“数据查询”。用Click关键字即可实现。\n</thought>\n\n<code_block>\n# 点击文本 \"数据查询\"\nClick | 数据查询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“飞书登录” 的关键字，接受 url, session 参数，表示被测页面URL以及飞书session，默认值分别为变量 MAIN_PAGE 和 FEISHU_SESSION，作用是：\n1. 打开浏览器\n2. 使用session登录飞书\n3. 访问url",
        "output": "<thought>\n这个任务需要创建一个自定义关键字“飞书登录”，用来执行浏览器的打开、飞书的登录以及指定URL的访问。首先打开浏览器，然后使用“LoginFeiShu”关键字进行登录，最后用“OpenUrl”打开指定的页面。在这过程中需要处理默认参数。\n</thought>\n\n<code_block>\n飞书登录\n    [Arguments]  ${url}=${MAIN_PAGE}  ${session}=${FEISHU_SESSION}\n    # 打开浏览器\n    OpenBrowser\n    \n    # 使用给定或默认的session登录飞书\n    LoginFeiShu  ${session}\n\n    # 访问URL\n    OpenUrl    ${url}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为: \"截图并关闭浏览器\" 的关键字，作用是：先截图然后关闭浏览器",
        "output": "<thought>\n这个任务需要创建一个新的RF关键字，首先调用截图功能，然后关闭浏览器。可以使用提供的`Screenshot`和`CloseBrowser`关键字来完成这项任务。\n</thought>\n\n<code_block>\n*** Keywords ***\n截图并关闭浏览器\n    # 进行截图\n    Screenshot\n    \n    # 关闭浏览器\n    CloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到表格行 ‘可视化建模_autotest’ 中的 svg class包含arco-icon-more的元素上，然后点击删除",
        "output": "<thought>\n首先需要移动鼠标到指定表格行中的目标元素上，然后执行点击删除操作。可以使用`MoveToElemOfRow`来定位并移动到目标元素上，再使用`Click`完成点击操作。\n</thought>\n\n<code_block>\n# 移动到 '可视化建模_autotest' 行中的指定元素上\nMoveToElemOfRow | 可视化建模_autotest | [class*=arco-icon-more]\n\n# 点击删除\nClick | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字 接收${records}作为参数 对${records}里每一条记录，点击添加记录值 将记录值设置为records.value",
        "output": "<thought>\n我们需要为每一条记录执行两个操作：点击“添加”按钮，然后设置记录的值。可以使用`Click`关键字来点击“添加”，使用`SetField`关键字来设置记录的值。通过循环遍历${records}，并在每次迭代中执行这两个操作。\n</thought>\n\n<code_block>\n*** Keywords ***\n处理记录\n    [Arguments]  ${records}\n    FOR  ${record}  IN  @{records}\n        # 点击添加记录值按钮\n        Click  添加记录值\n        # 设置记录值为record.value\n        SetField  记录值  ${record.value}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第一行的工单编号字段，点击 ‘操作’，点击请选择合同二级类型，勾选报告人，设置 输入配置名称搜索 为：${ip_name_black}",
        "output": "<thought>\n要完成这些操作，我们需要逐步进行。首先，根据任务要求，我们需要点击表格的第一行中\"工单编号\"字段。然后，我们将点击页面上的\"操作\"。接下来，我们选择并点击\"合同二级类型\"的选项。之后，我们需要勾选\"报告人\"这个选项。最后，输入\"${ip_name_black}\"到\"配置名称搜索\"字段。\n\n以下是我们可以使用的关键字：\n1. 使用`ClickTextOfCell`来点击表格中指定单元格的\"工单编号\"。\n2. 使用`Click`来点击\"操作\"。\n3. 使用`Click`来点击并选择\"合同二级类型\"。\n4. 使用`CheckBoxOn`来勾选\"报告人\"。\n5. 使用`SetField`来输入\"配置名称搜索\"。\n\n这些步骤确保了我们按顺序进行每个操作。现在，我们将这些步骤转换为代码。\n</thought>\n\n<code_block>\n# 点击表格第一行的工单编号字段\nClickTextOfCell | 1 | 工单编号\n\n# 点击 ‘操作’\nClick | 操作\n\n# 点击请选择合同二级类型\nClick | 请选择合同二级类型\n\n# 勾选报告人\nCheckBoxOn | 报告人\n\n# 设置 输入配置名称搜索 为：${ip_name_black}\nSetField | 配置名称搜索 | ${ip_name_black}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${表信息}  粘贴到元素 div.view-lines.monaco-mouse-cursor-text，然后依次点击 格式化 和 解析",
        "output": "<thought>\n首先，需要将`${表信息}`粘贴到指定的元素中，此时可以使用`Paste`关键字。然后，依次点击`格式化`和`解析`，可以使用`ClickTextOneByOne`关键字完成。\n</thought>\n\n<code_block>\n# 将${表信息}粘贴到指定的元素中\nPaste | div.view-lines.monaco-mouse-cursor-text | ${表信息}\n\n# 依次点击格式化和解析\nClickTextOneByOne | 格式化 | 解析\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class为publish-target-wrapper的div中填写  应用ID  =  10000006",
        "output": "<thought>\n这是一个很简单的场景，只需要用FillArea关键字，将“应用ID”、“=”和“10000006”这三个元素通过 Jquery 选择器选择出来，然后填入到class为publish-target-wrapper的div中即可。\n</thought>\n\n<code_block>\n# 在class为publish-target-wrapper的div中填入\"应用ID\" \"=\" \"10000006\"\nFillArea | div[class=publish-target-wrapper] | 应用ID | = | 10000006\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取aria_checked的value",
        "output": "<thought>\n为了获取元素的aria_checked的值，我可以使用GetElemAttr关键字。在此之前，我需要找到包含aria_checked属性的元素。我们假设该元素可以使用选择器来确定。\n</thought>\n\n<code_block>\n# 查找包含aria_checked属性的元素\n${elem}  FindElem | [aria-checked]\n\n# 获取aria_checked属性的值\n${val}  GetElemAttr | ${elem} | aria-checked\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到“本月新增申诉通过解冻金额”右边的黑色问号图标上，会展示以下文案：\"公会申诉通过后，从历史冻结金额中解冻的金额，将通过本月合并结算\"",
        "output": "<thought>\n在这个场景中，我们需要将鼠标移动到“本月新增申诉通过解冻金额”文本右边的黑色问号icon上。我们可以使用`MoveToIconToTheDirectionOf`关键字来实现这个操作。这个关键字可以让我们指定一个基准元素（在这里是“本月新增申诉通过解冻金额”）以及icon的方向（在这里是right）。然后我们用`CheckHasText`来验证目标文本是否出现。\n</thought>\n\n<code_block>\n# 将鼠标移动到“本月新增申诉通过解冻金额”右侧的黑色问号icon上\nMoveToIconToTheDirectionOf | 本月新增申诉通过解冻金额 | right | black_question_mark\n\n# 校验期望的文案出现\nCheckHasText | 公会申诉通过后，从历史冻结金额中解冻的金额，将通过本月合并结算\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（uitest， 操作）中的移除",
        "output": "<thought>\n场景是需要点击表格中特定的单元格，所以可以使用关键字ClickTextOfCell. 参数row_name_or_id和col_name_or_id即对应的行名（uitest）和列名（操作),值对应的是移除.\n\n</thought>\n\n<code_block>\n# 点击\"uitest\"行\"操作\"列中的\"移除\"文本\nClickTextOfCell | uitest | 操作 | 移除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 第一个 输入姓名或邮箱模糊搜索，并输入 刘星",
        "output": "<thought>\n1. 首先需要定位到'输入姓名或邮箱模糊搜索'元素，由于要点击第一个，使用Click关键字并设置idx=0\n2. 输入文本'刘星'可以使用SendText关键字，因为是在光标激活位置输入\n</thought>\n\n<code_block>\n# 点击第一个'输入姓名或邮箱模糊搜索'并输入'刘星'\nClick  输入姓名或邮箱模糊搜索  idx=0\nSendText  刘星\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量name 等于 事件分析",
        "output": "<thought>\n此任务要求创建一个名为name的变量，并将其值设置为“事件分析”。可以使用RobotFramework的内置关键字Set Variable来完成此操作。\n</thought>\n\n<code_block>\n# 创建变量 name = 事件分析\n${name}  Set Variable  事件分析\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字，名称为 校验跳转链接，逻辑为：\n# 1.接收三个个参数 入口名称 路径 文本，都是必填参数；\n# 2.点击 入口名称，切换到新页面，校验当前页面的url中包含 路径，校验当前页面中包含 文本；\n# 3.切换到先前的窗口；",
        "output": "<thought>\n要实现“校验跳转链接”的关键字，我需要完成三个主要步骤：\n1. 点击指定的入口名称。这可以通过`Click`关键字实现，使用入口名称作为文本参数。\n2. 切换到新页面后，校验页面URL包含路径，以及页面内容包含文本。这需要使用`ToNewWindow`切换窗口，随后使用`CheckHasText`和`WaitURLContainsAll`进行校验。\n3. 最后，返回到先前的窗口，可以使用`ToPrevWindow`关键字。\n\n这三个步骤中，确保在切换窗口和进行校验时使用相应的关键字来保持测试流程的正确性。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验跳转链接\n    [Arguments]  ${入口名称}  ${路径}  ${文本}\n    \n    # Step 1: 点击入口名称\n    Click  ${入口名称}\n    \n    # Step 2: 切换到新窗口\n    ToNewWindow\n    \n    # Step 3: 校验当前页面URL包含路径\n    WaitURLContainsAll  ${路径}\n    \n    # Step 4: 校验当前页面中包含文本\n    CheckHasText  ${文本}\n    \n    # Step 5: 切换回先前的窗口\n    ToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击上一步右边的提交审核，并等待一会，校验页面存在审核中，点击售卖延期左边的查看，校验页面存在 分店收款 大龙虾 2碟 298元",
        "output": "<thought>\n为了实现这个场景，我们需要按照以下步骤操作：\n\n1. 使用`ClickTextToTheDirectionOf`关键字定位并点击“上一步”右边的“提交审核”按钮。\n2. 使用`Sleep`关键字等待一段时间，以确保页面更新。\n3. 利用`CheckHasText`关键字校验页面上存在“审核中”文本。\n4. 使用`ClickTextToTheDirectionOf`关键字找到并点击“售卖延期”左边的“查看”按钮。\n5. 最后，使用`CheckHasText`关键字校验弹框中是否存在“分店收款 大龙虾 2碟 298元”文本。\n</thought>\n\n<code_block>\n\n# 点击“上一步”右边的“提交审核”\nClickTextToTheDirectionOf | 上一步 | right | 提交审核\n\n# 等待页面更新\nSleep | 5s\n\n# 校验页面存在“审核中”\nCheckHasText | 审核中\n\n# 点击“售卖延期”左边的“查看”\nClickTextToTheDirectionOf | 售卖延期 | left | 查看\n\n# 校验弹框中存在“分店收款 大龙虾 2碟 298元”\nCheckHasText | 分店收款 | 大龙虾 | 2碟 | 298元 | base=POPUP\n\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发往 CalculateInstancePrice 的最后一个 GET 请求，校验其 json 响应中的 originalAmount 字段中包含：1.45",
        "output": "<thought>\n在这个场景中，我们需要搜索最后一个发往 CalculateInstancePrice 的 GET 请求，并从该请求的响应中获取 JSON 对象。然后，我们需要检查这个 JSON 响应中的 originalAmount 字段是否包含 1.45。我们可以使用 `Search Requests` 关键字来搜索请求，并使用 `GetValuesFromJson` 关键字获取 originalAmount 字段的值。最后，我们可以使用内置的 Should 系列关键字来验证这一点。\n</thought>\n\n<code_block>\n# 搜索发往 CalculateInstancePrice 的最后一个 GET 请求\n${resp_json}  Search Requests  CalculateInstancePrice  GET  last\n\n# 获取响应中的 originalAmount 字段值\n${original_amount}  GetValuesFromJson | ${resp_json} | originalAmount\n\n# 校验 originalAmount 字段中包含 1.45\nShould Contain  ${original_amount}  1.45\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 placeholder*=请输入指标id/指标名称/指标英文缩写 的元素中输入：‘sssssss’",
        "output": "<thought>\n需要在具有特定placeholder属性的元素中输入文本。可以使用`FillArea`关键字，使用jquery选择器根据placeholder属性选择目标元素。\n</thought>\n\n<code_block>\n# 向placeholder包含'请输入指标id/指标名称/指标英文缩写'的输入框中输入'sssssss'\nFillArea | input[placeholder*='请输入指标id/指标名称/指标英文缩写'] | sssssss\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击发布文章",
        "output": "\n    \n<thought>\n 我们需要点击文本为“发布文章”的元素。可以使用`Click`关键字，通过指定文本进行点击操作。\n </thought>\n \n <code_block>\n # 点击发布文章\n Click | 发布文章\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检验发往接口 /api/create/message 的所有 POST 请求的响应码 status_code 都等于 200",
        "output": "<thought>\n为了解决此问题，我需要获取发往接口 /api/create/message 的所有 POST 请求的响应信息，然后检查这些响应的状态码是否都等于 200。可以使用 \"Search Requests\" 关键字来找到所有符合条件的请求，接着遍历响应数据并校验 status_code 是否为 200。\n</thought>\n\n<code_block>\n# 搜索所有发往 /api/create/message 接口的 POST 请求\n${responses}  Search Requests  /api/create/message  POST  all\n\n# 遍历每个响应校验其 status_code\nFOR  ${response}  IN  @{responses}\n    # 获取响应的状态码\n    ${status_code}  Evaluate  ${response}['status_code']\n\n    # 校验状态码是否等于200\n    Should Be Equal As Numbers  ${status_code}  200\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗的 账务账期 右边的 第一个框",
        "output": "<thought>\n我们需要点击弹窗中的“账务账期”右边的第一个框。可以使用 `ClickElemToTheDirectionOf` 关键字，基准是“账务账期”，方向是右边，目标是框。假设框可以通过jQuery选择器表示为 `input[type='text']`。\n</thought>\n\n<code_block>\n# 点击弹窗中“账务账期”右边的第一个输入框\nClickElemToTheDirectionOf | 账务账期 | right | input[type='text']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到内嵌的iframe，等待 描述字段包含 编辑主任务UI自动化测试描述 ，断言 工单标题字段包含 编辑主任务UI自动化测试，然后点击推广方式下方字体我知道了",
        "output": "<thought>\n首先需要切换到内嵌的iframe，可以使用 `ToFrame` 关键字。然后等待“描述”字段包含指定内容，使用 `WaitFieldContainsAll`。接下来，断言“工单标题”字段包含指定文本，使用 `CheckFieldContains`。最后，找到“推广方式”下方的“我知道了”，并点击，可以使用 `ClickTextToTheDirectionOf`。\n</thought>\n\n<code_block>\n# 进入第一个iframe\nToFrame | iframe:eq(0)\n\n# 等待描述字段包含指定文本\nWaitFieldContainsAll | 描述 | 编辑主任务UI自动化测试描述\n\n# 校验工单标题字段包含指定文本\nCheckFieldContains | 工单标题 | 编辑主任务UI自动化测试\n\n# 点击推广方式下方的“我知道了”\nClickTextToTheDirectionOf | 推广方式 | bottom | 我知道了\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击id为EMR的元素中的第一个包含HSQL的元素",
        "output": "<thought>\n首先需要定位到id为EMR的元素，然后在这个元素的上下文中查找包含文本HSQL的第一个元素。可以通过`FindElem`查找id为EMR的元素，并使用`Click`关键字点击包含HSQL的文本。\n</thought>\n\n<code_block>\n# 查找id为EMR的元素\n${emrElem}  FindElem | [id=EMR]\n\n# 点击EMR元素中的第一个包含HSQL的元素\nClick | HSQL | base=${emrElem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问主页：MAIN_PAGE，点击选择联系手机，点击选择手机号下面的 123****9124",
        "output": "<thought>\n根据提示，我们需要实现以下步骤：  \n1. 访问主页（MAIN_PAGE）。可以使用 `OpenUrl` 关键字来打开主页。  \n2. 点击选择\"联系手机\"。可以使用 `Click` 关键字直接点击\"联系手机\"文本。  \n3. 在点击\"联系手机\"后，点击选择\"联系手机\"选项下方的指定手机号\"123****9124\"。这个可以通过 `ClickTextToTheDirectionOf` 关键字，指定在\"联系手机\"下方点击对应号码。\n</thought>\n\n<code_block>\n# 访问主页\nOpenUrl | ${MAIN_PAGE}\n\n# 点击选择联系手机\nClick | 联系手机\n\n# 点击选择手机号下面的 123****9124\nClickTextToTheDirectionOf | 联系手机 | bottom | 123****9124\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 20 条/页，5s后检查表格行数量为 20",
        "output": "<thought>\n为了实现这个场景，首先需要点击文本“20 条/页”，然后等待5秒以确保页面加载完成。之后，我们需要检查表格行的数量是否为20。\n我将使用`Click`关键字来点击“20 条/页”文本，然后使用`Sleep`关键字来等待5秒，最后使用`CheckRowCount`关键字检查表格行的数量。\n</thought>\n\n<code_block>\n# 点击 20 条/页\nClick | 20 条/页\n\n# 等待 5 秒以确保页面加载完成\nSleep  | 5s\n\n# 检查表格行数量是否为20\nCheckRowCount | 20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class为oc-more-filter-pop-body内的class为right-content中的第一个class为body-title-item的页面区域",
        "output": "<thought>\n首先需要点击class为oc-more-filter-pop-body下的class为right-content下的第一个class为body-title-item的元素。可以通过嵌套的jquery选择器来实现这个操作。外层class为oc-more-filter-pop-body，内层class为right-content，再内层选择第一个class为body-title-item的元素进行点击。使用ClickElem关键字来完成这个操作。\n</thought>\n\n<code_block>\n# 点击class为oc-more-filter-pop-body下的class为right-content下的第一个class为body-title-item的元素\nClickElem | [class=oc-more-filter-pop-body] [class=right-content] [class=body-title-item]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器登录飞书",
        "output": "<thought>\n1. 首先需要使用OpenBrowser关键字打开浏览器\n2. 然后使用LoginFeiShu关键字进行飞书登录，需要提供有效的session\n</thought>\n\n<code_block>\n# 打开浏览器\nOpenBrowser\n\n# 使用有效session登录飞书\nLoginFeiShu | session=${VALID_SESSION}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘接单’ 右边的元素",
        "output": "<thought>\n要点击\"接单\"右边的元素，我将使用关键字 \"ClickElemToTheDirectionOf\"，将 \"接单\" 作为基准元素，选取右方向。由于题目中没有给出右边元素的具体信息，比如 id 或 class，我将使用 \"*\" 作为默认的选择器，它可以匹配任何元素。\n</thought>\n\n<code_block>\n# 点击 \"接单\" 右边的元素\nClickElemToTheDirectionOf | 接单 | right | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置待归因事件”，接受 group_name, args 参数，主要作用是：\n1. 将group_name映射成index, 映射关系为：A:0, B:1, C:2, D:3, E:4, F:5\n2. 找到第index个div class包含AttributionTouchPointEvent__container的元素elem1，向其中输入一个或多个 args",
        "output": "<thought>\n首先，需要将 group_name 映射到相应的 index。接着，使用该 index 查找指定的 div 元素，并使用 FillArea 向其中输入 args。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置待归因事件\n    [Arguments]  ${group_name}  @{args}\n    # 创建映射关系字典\n    ${group_index_map}  Create Dictionary  A=0  B=1  C=2  D=3  E=4  F=5\n    # 从字典中获取相应的index\n    ${index}  Get From Dictionary  ${group_index_map}  ${group_name}\n    # 创建选择器以查找目标元素\n    ${selector}  Set Variable  div[class*=AttributionTouchPointEvent__container]:eq(${index})\n    # 填入args到选择器指定的元素\n    FillArea  ${selector}  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取7天前和今天的日期，以 2022-01-11 格式输出",
        "output": "<thought>\n首先，我们需要使用RobotFramework的标准库关键字来获取当前日期。然后，我们可以使用Add Time To Date关键字将日期减少7天。最后，使用Convert Date关键字以所需格式输出日期。\n</thought>\n\n<code_block>\n# 获取当前日期\n${today}  Get Current Date\n\n# 计算7天前的日期\n${seven_days_ago}  Add Time To Date  ${today}  -7 days\n\n# 以指定格式输出今天的日期\n${formatted_today}  Convert Date  ${today}  result_format=%Y-%m-%d\n\n# 以指定格式输出7天前的日期\n${formatted_seven_days_ago}  Convert Date  ${seven_days_ago}  result_format=%Y-%m-%d\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开url https://contract.feishu-pre.cn/admin/contract-config/process-list，点击第一个video元素，点击空白处，然后截屏",
        "output": "<thought>\n首先，我们需要使用 `OpenUrl` 关键字打开指定的 URL。接下来，为了点击第一个 video 元素，使用 `ClickElem`，因为我们可以通过 jQuery 选择器选择第一个 video 元素。然后，使用 `ClickWhiteArea` 点击空白处。最后，使用 `Screenshot` 进行截图。\n</thought>\n\n<code_block>\n# 打开指定的URL\nOpenUrl | https://contract.feishu-pre.cn/admin/contract-config/process-list\n\n# 点击第一个video元素\nClickElem | video:eq(0)\n\n# 点击空白处\nClickWhiteArea\n\n# 截图\nScreenshot\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘数据源’ 为 'ByteHouse CDW'；设置 ‘请选择数据库’ 为 ${BH_CDW数据库}；设置 ‘请选择数据表’ 为 ${BH_CDW_TABLE1}",
        "output": "<thought>\n这是一个需要通过设置选项来配置数据源和相应数据库及数据表的任务。可以使用 `SetField` 关键字来完成这些设置。\n</thought>\n\n<code_block>\n# 设置数据源为 'ByteHouse CDW'\nSetField | 数据源 | ByteHouse CDW\n\n# 设置数据库\nSetField | 请选择数据库 | ${BH_CDW数据库}\n\n# 设置数据表\nSetField | 请选择数据表 | ${BH_CDW_TABLE1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查是否存在 placeholder 为mobile_number_input的元素",
        "output": "<thought>\n这个问题需要检查页面上是否存在一个特定的元素。可以使用IsAnyElemExisting关键字来判断是否存在一个带有特定选择器的元素。在这个例子中，选择器需要查找具有特定placeholder属性的元素。可以通过jQuery选择器语法来实现，使用[placeholder='mobile_number_input']来选择具有该placeholder的元素。\n</thought>\n\n<code_block>\n# 检查是否存在placeholder为mobile_number_input的元素\n${exist}  IsAnyElemExisting | [placeholder='mobile_number_input']\n\n# 如果存在，打印存在\nIF  ${exist}\n    Log  存在\nELSE\n    Log  不存在\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "ui find element div near element A",
        "output": "<thought>\n根据要求，我们需要查找一个div元素，该元素在某个目标元素 A 附近。可以使用“FindNearElem”关键字来实现这一点，其中 A 是基准元素，div是目标元素。\n</thought>\n\n<code_block>\n# 查找 A 附近的 'div'\n${elem}  FindNearElem | ${A} | div\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择选项  ${MACHINE}",
        "output": "<thought>\n此任务要求选择`${MACHINE}`选项，这可以使用`SelectOption`关键字来完成。关键字冒号后的参数可以直接使用变量`${MACHINE}`。\n\n解决思路：\n1. 使用`SelectOption`关键字选择`${MACHINE}`选项即可。\n\n</thought>\n\n<code_block>\n# 选择`${MACHINE}`选项\nSelectOption | ${MACHINE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开URL，URL默认值为 变量中的UG_URL，当页面出现我知道了，就点击三次我知道了，没有则忽略",
        "output": "<thought>\n首先，通过OpenUrl关键字打开URL。如果\"我知道了\"存在，使用循环依次点击三次\"我知道了\"，否则忽略。\n</thought>\n\n<code_block>\n# 打开URL，URL默认值为变量中的UG_URL\nOpenUrl  ${UG_URL}\n\n# 判断“我知道了”是否存在\n${exist}  IsAnyTextExisting  我知道了\n\n# 如果“我知道了”存在，则点击三次\nIF  ${exist}\n    FOR  ${i}  IN RANGE  3\n        Click  我知道了\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${template_type}等于结论报告模板，点击${template_type}",
        "output": "<thought>\n首先需要判断变量${template_type}是否等于\"结论报告模板\"。如果是，则点击该文本。可以使用Click关键字来完成点击操作。\n</thought>\n\n<code_block>\n# 判断template_type是否为\"结论报告模板\"\nIF  \"${template_type}\" == \"结论报告模板\"\n    # 点击template_type文本\n    Click  ${template_type}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把feishu_session变量放在全局变量中",
        "output": "<thought>\n在Robot Framework中，我们可以使用\"Set Global Variable\"关键词将变量设置为全局变量。这样，该变量就可以在整个测试套件中使用，而不仅仅是在单个测试用例或关键词中。这样我们就可以将feishu_session变量设置为全局变量。\n</thought>\n\n<code_block>\n# 设置全局变量 feishu_session\nSet Global Variable  ${feishu_session}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加数据盘\n向 ‘存储’ 中输入多个值：极速、Flex、 50、极速、Flex、 50",
        "output": "<thought>\n在这个场景中，我们需要执行两个主要动作：首先点击“添加数据盘”，然后在“存储”字段中依次输入多个值。根据描述，应该使用Click关键字来点击特定的文本，然后使用SetField关键字来输入多个值到目标字段中。\n</thought>\n\n<code_block>\n# 点击添加数据盘\nClick | 添加数据盘\n\n# 在“存储”字段中依次输入“极速”、“Flex”、“50”、“极速”、“Flex”、“50”\nSetField | 存储 | 极速 | Flex | 50 | 极速 | Flex | 50\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 ‘访问量最高’ 字段的值，校验其包含 ‘/data_search’",
        "output": "<thought>\n首先，我们将通过使用GetFieldVal关键字获取 ‘访问量最高’ 字段的值。然后，我们将用RF的built-in关键字Should Contain来校验获取到的值是否包含 ‘/data_search’。\n</thought>\n\n<code_block>\n# 获取 '访问量最高' 字段的值\n${val}  GetFieldVal | 访问量最高 \n\n# 校验此值是否包含 '/data_search' \nShould Contain  ${val}  /data_search  \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成15min前的时间，格式为：2024-11-11 10:12:09，可以使用 Subtract Time From Date 实现",
        "output": "<thought>\n生成15min前的时间，可以使用 Subtract Time From Date 关键字，这个关键字可以从一个日期/时间字符串中减去指定的时间。需要注意的是，Subtract Time From Date 的时间单位是秒，所以计算15分钟需要转换成900秒。\n<thought>\n\n<code_block>\n# 获取当前时间\n${current_time}   Get Current Date  result_format=%Y-%m-%d %H:%M:%S\n\n# 计算15min前的时间\n${before_time}   Subtract Time From Date  ${current_time}  900 \n# 输出15min前的时间\nLog  ${before_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含by-picker-column__item的div，text是：23时",
        "output": "<thought>\n对于这个场景，我们需要点击一个div元素，其class包含`by-picker-column__item`，并且文本内容为`23时`。我们可以利用`ClickElem`关键字来实现这一点击操作。通过jQuery选择器，可以直接定位到class匹配的元素，再通过`:contains`选择器来匹配具体的文本内容。\n</thought>\n\n<code_block>\n# 点击class包含by-picker-column__item且文本内容为23时的div\nClickElem | div[class*='by-picker-column__item']:contains('23时')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 用户运营商分布 下面的 流量",
        "output": "<thought>\n在这个场景中，我们需要点击“用户运营商分布”下面的“流量”。我们可以使用`ClickTextToTheDirectionOf`关键字，其中基准元素为“用户运营商分布”，方向为“bottom”，目标文本为“流量”。\n</thought>\n\n<code_block>\n# 点击用户运营商分布下方的流量\nClickTextToTheDirectionOf | 用户运营商分布 | bottom | 流量\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击变更配置下方的 小型，一旦加载好就执行关键字：取消订阅，等出现退订原因调查后，点击跳过",
        "output": "<thought>\n首先，我们需要点击“变更配置”下方的小型元素。接着，等待加载完成后执行“取消订阅”关键字。最后，等待“退订原因调查”的出现，然后点击“跳过”。\n</thought>\n\n<code_block>\n# 点击变更配置下方的“小型”\nClickTextToTheDirectionOf | 变更配置 | bottom | 小型\n\n# 等待加载\nWaitLoading\n\n# 执行取消订阅关键字\n取消订阅\n\n# 等待页面上出现“退订原因调查”\nWaitText | 退订原因调查\n\n# 点击“跳过”\nClick | 跳过\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 ‘您有未完成的账户开通’，就点击取消",
        "output": "<thought>\n首先使用IsAnyTextExisting判断页面是否存在“您有未完成的账户开通”这个文本。如果文本存在，则点击“取消”按钮。\n</thought>\n\n<code_block>\n# 判断页面中是否存在文本“您有未完成的账户开通”\n${exist}  IsAnyTextExisting | 您有未完成的账户开通\n\n# 如果文本存在，点击“取消”按钮\nIF  ${exist}\n    ClickElem | button:contains(取消)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格中 粉丝 这一列的所有值，然后剔除数组中第一条数据，然后剔除数组中每个元素的非数字的部分，将数组中的元素全部转换为数字，然后计算出一共有多少为0的值，并且计算出为0值的百分比，校验这个百分比是否小于20% ",
        "output": "\n<thought>\n首先使用GetColValues获取表格中“粉丝”列的所有值。然后剔除数组中第一条数据。接下来使用Evaluate去除每个元素中的非数字部分，并将其转换为数字。计算数组中值为0的数量，并计算其百分比。最后，使用RF的Should Be True验证百分比是否小于20%。\n</thought>\n\n<code_block>\n# 获取表格中“粉丝”列的所有值\n@{fans_col_values}  GetColValues | 粉丝\n\n# 剔除数组中第一条数据\n@{fans_col_values}  Set Variable | @{fans_col_values}[1:]\n\n# 去除每个元素的非数字部分并转换为数字\n@{fans_numeric_values}  Evaluate | [int(re.sub(r'\\\\D', '', x) or 0) for x in $fans_col_values] | re\n\n# 计算为0的值的个数\n${zero_count}  Evaluate | $fans_numeric_values.count(0)\n\n# 计算为0值的百分比\n${total_count}  Get Length | ${fans_numeric_values}\n${zero_percentage}  Evaluate | (${zero_count} / ${total_count}) * 100\n\n# 校验百分比是否小于20%\nShould Be True  ${zero_percentage} < 20\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查看元素 star 的 class 属性",
        "output": "<thought>\n我们需要获取元素star的class属性，可以直接使用GetElemAttr关键字并传入元素和属性名称。\n</thought>\n\n<code_block>\n# 获取star元素的class属性\n${class}  GetElemAttr  |  ${star}  |  class\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面包含活动名称为my活动，活动时间开始为“2024年12月20日15:00”，活动时间结束为“2024年12月20日15:30”，直播UID为3059263117461530，参赛团体为添加参赛团体账号后，将自动拉取账号下绑定的团员账号",
        "output": "<thought>\n我们需要校验几个页面字段的值，包括活动名称、活动时间开始和结束、直播UID，以及参赛团体的相关信息。可以使用CheckFieldContains关键字来逐一验证这些字段的值。\n</thought>\n\n<code_block>\n# 校验活动名称包含 'my活动'\nCheckFieldContains  活动名称  my活动\n\n# 校验活动时间开始包含 '2024年12月20日15:00'\nCheckFieldContains  活动时间开始  2024年12月20日15:00\n\n# 校验活动时间结束包含 '2024年12月20日15:30'\nCheckFieldContains  活动时间结束  2024年12月20日15:30\n\n# 校验直播UID包含 '3059263117461530'\nCheckFieldContains  直播UID  3059263117461530\n\n# 校验参赛团体信息\nCheckFieldContains  参赛团体  添加参赛团体账号后  将自动拉取账号下绑定的团员账号\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 购买方式 移动到视野内，购买方式选择：在线支持，等待5s，校验团购库存数量右侧存在0，校验 顾客实际需支付的右侧存在数字239",
        "output": "<thought>\n首先需要将\"购买方式\"移动到视野内，然后选择\"在线支持\"。接着等待5秒，最后检查两个条件：团购库存数量右侧存在数字0，以及顾客实际需支付的右侧存在数字239。\n</thought>\n\n<code_block>\n# 将购买方式移动到视野内\nMoveIntoView | :contains(购买方式)\n\n# 选择购买方式为在线支持\nSelectOptionForField | 购买方式 | 在线支持\n\n# 等待5秒\nSleep | 5s\n\n# 校验团购库存数量右侧存在0\nCheckHasElemToTheDirectionOf | 团购库存数量 | right | :contains(0)\n\n# 校验顾客实际需支付的右侧存在数字239\nCheckHasElemToTheDirectionOf | 顾客实际需支付 | right | :contains(239)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 icon  plus",
        "output": "<thought>\n在这个场景中，我们只需要使用一个关键字`ClickIcon`来点击图标“plus”。因为没有提供任何特殊的基准元素或索引，所以可以直接使用该关键字并指定图标名为“plus”。\n</thought>\n\n<code_block>\n# 点击图标 plus\nClickIcon | plus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "双击‘登录’，然后等待页面不再包含：‘密码登录’",
        "output": "\n<thought>\n首先，需要使用DClick关键字双击“登录”按钮。然后，使用WaitTextDisappear关键字等待“密码登录”文本消失。\n</thought>\n\n<code_block>\n# 双击‘登录’按钮\nDClick | 登录\n\n# 等待‘密码登录’文案消失\nWaitTextDisappear | 密码登录\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断play_list_values列表所有数据都不为空",
        "output": "<thought>\n为了验证play_list_values列表中的所有数据都不为空，可以使用Robot Framework中内置的循环结构和条件判断关键字。首先，需要遍历列表中的每一项，然后检查每项是否非空。在Robot Framework中，这可以通过FOR循环结构来实现，并结合Should Not Be Empty关键字或者使用IF/ELSE结构来判断每一个元素是否为空。如果发现任何一个元素为空，就应该在测试中断言失败。\n</thought>\n\n<code_block>\n# 校验play_list_values列表所有数据都不为空\nFOR    ${item}    IN    @{play_list_values}\n    Should Not Be Empty    ${item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 判断ele的这个button元素中 aria-checked属性是否等于true",
        "output": "<thought>\n 首先需要找到元素ele的button，然后使用GetElemAttr关键字获取aria-checked属性，最后判断其值是否为true。\n </thought>\n \n <code_block>\n # 找到ele的button元素\n ${button_elem} FindElem | ${ele} button\n \n # 获取button元素的aria-checked属性\n ${aria_checked} GetElemAttr | ${button_elem} | aria-checked\n \n # 判断aria-checked属性是否为true\n IF '${aria_checked}' == 'true'\n  Log 属性为true\n ELSE\n  Log 属性不为true\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击删除，不包含‘批量删除’",
        "output": "<thought>\n我们需要点击文本为“删除”，但是不能包含“批量删除”。因此，我们可以使用关键字`Click`，并通过`exclude`参数排除“批量删除”。\n</thought>\n\n<code_block>\n# 点击删除，不包括批量删除\nClick | 删除 | exclude=批量删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面有 5 个升级，则点击其中的第三个，否则点击第一个",
        "output": "<thought>\n解决问题的思路是首先获取页面中‘升级’出现的数量，然后根据数量来判断执行相应的点击操作。可以利用GetElemCount关键字来获取数量，并通过RF的IF/ELSE进行判断和分支处理。\n</thought>\n\n<code_block>\n# 获取‘升级’的数量\n${count}  GetElemCount  :contains(升级)\n\n# 判断数量，并点击相应的元素\nIF  ${count} >= 3\n    Click  升级  idx=2\nELSE\n    Click  升级  idx=0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个新建标签的方法，字段上级分类输入${Tag_Directory}，字段名称输入${Tag},字段描述输入自动化测试标签，字段保密级别输入L3，点击下一步，点击字段名，字段正则表达式输入小写英文字母，字段命中率阈值输入100，点击下一步，点击提交，等待页面出现操作成功",
        "output": "<thought>\n这个场景需要填写多个字段，因此可以使用`BatchSetFields`来简化操作。需要注意的是，所有字段的输入操作可以合并为一个`BatchSetFields`。然后通过点击和输入来完成后续步骤。最终需要等待操作成功的文本出现。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建标签\n    [Arguments]  ${Tag_Directory}  ${Tag}\n    \n    # 批量填写字段信息\n    BatchSetFields  上级分类=${Tag_Directory}  名称=${Tag}  描述=自动化测试标签  保密级别=L3\n    \n    # 点击下一步\n    Click | 下一步\n    \n    # 点击字段名\n    Click | 字段名\n    \n    # 填写正则表达式和命中率阈值\n    BatchSetFields  正则表达式=小写英文字母  命中率阈值=100\n    \n    # 点击下一步\n    Click | 下一步\n    \n    # 点击提交\n    Click | 提交\n    \n    # 等待页面上出现操作成功\n    WaitText | 操作成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第三个运营经纪人右侧的输入框",
        "output": "<thought>\n为了完成这一任务，首先需要通过文本“运营经纪人”定位到基准元素。然后，我需要在这个基准元素的右侧寻找目标元素。在问题描述中，我们需要点击的是第三个“运营经纪人”右侧的input/textarea元素。这意味着我们需要用`ClickElemToTheDirectionOf`关键字来实现这个操作，并指定`right`方向和idx为2（因为索引从0开始）。\n</thought>\n\n<code_block>\n# 点击第三个运营经纪人右侧的input/textarea元素\nClickElemToTheDirectionOf | :contains(运营经纪人):eq(2) | right | input,textarea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查${code}是否是纯数字字符串，如果是返回true",
        "output": "<thought>\n为了解决这个问题，我们需要检查变量${code}是否是一个由纯数字组成的字符串。在Robot Framework中，我们可以使用正则表达式来验证这一点。RF支持使用Should Match Regexp关键字来执行正则表达式匹配。对于纯数字，可以使用正则表达式^\\\\d+$。因此，我们应该使用此关键字来实现验证。\n</thought>\n\n<code_block>\n# 检查${code}是否是纯数字字符串\nShould Match Regexp  ${code}  ^\\\\d+$\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如何检查到页面中有「重新加载组件」的文本，让用例失败",
        "output": "<thought>\n我们可以使用`CheckHasText`来验证页面中是否包含特定文本「重新加载组件」。如果存在该文本，则用例失败。为了实现这种逻辑，可以使用Built-In库中的`Fail`关键字。\n</thought>\n\n<code_block>\n# 校验页面中包含文本「重新加载组件」，如果存在则用例失败\n${exist}  IsAllTextExisting  重新加载组件\nIF  ${exist}\n    Fail  检测到页面中有「重新加载组件」\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 检查页面是否报错",
        "output": "<thought>\n 我们需要检查页面是否存在异常提示。可以使用`CheckErrMsg`关键字来判断页面是否报错。\n </thought>\n \n <code_block>\n # 使用CheckErrMsg 关键字来检查页面是否存在异常提示\n CheckErrMsg\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传图片 https://datarangers-dev.tos-cn-beijing.volces.com/autotest_data/大屏-海洋.jpeg",
        "output": "<thought>\n解决问题思路\n这个场景的要求是上传图片，可用关键字 `UploadFile`，我们可以使用它，将图片的URL作为参数传入。\n\n</thought>\n\n<code_block>\n# 上传图片 https://datarangers-dev.tos-cn-beijing.volces.com/autotest_data/大屏-海洋.jpeg\nUploadFile | https://datarangers-dev.tos-cn-beijing.volces.com/autotest_data/大屏-海洋.jpeg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "1.打开浏览器访问主页·MAIN_PAGE\n2.解密·user,sub_user, password,然后将它们分别输入到·主账号名、子用户、和密码·字段中\n点击登录按钮",
        "output": "<thought>\n1. 首先需要使用OpenBrowser关键字打开浏览器并访问MAIN_PAGE\n2. 需要使用DecryptStr关键字解密user,sub_user和password三个加密字符串\n3. 使用SetField或BatchSetFields关键字将解密后的值填入对应的字段中\n4. 最后使用Click或ClickElem关键字点击登录按钮\n5. 考虑到需要填写多个字段，使用BatchSetFields会更简洁高效\n</thought>\n\n<code_block>\n# 打开浏览器访问主页\nOpenBrowser  ${MAIN_PAGE}\n\n# 解密账号密码\n${user}  DecryptStr  ${user}\n${sub_user}  DecryptStr  ${sub_user}  \n${password}  DecryptStr  ${password}\n\n# 批量设置账号密码字段\nBatchSetFields  主账号名=${user}  子用户=${sub_user}  密码=${password}\n\n# 点击登录按钮\nClick  登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到距离 ${filtered_elems}[0] 元素 x 轴方向的 -1 处",
        "output": "<thought>\n首先，我们需要找到 `${filtered_elems}[0]` 元素。由于 `${filtered_elems}[0]` 是一个已知的元素变量，可以直接使用 `MoToElem` 关键字进行操作。`MoToElem` 允许我们根据选择器移动到元素上，并通过参数 dx 和 dy 进行调整，因此可以将 dx 设置为 -1。\n</thought>\n\n<code_block>\n# 移动鼠标到 ${filtered_elems}[0] 元素 x 轴方向的 -1 处\nMoToElem | ${filtered_elems}[0] | dx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击下一步，点击添加一项，设置字段类型为数值、设置字段值为test、设置判断符为!=、设置字段类型为数值列表、设置字段值为1|2",
        "output": "\n    \n<thought>\n 分析任务步骤：首先，依次点击“下一步”和“添加一项”。接着，设置字段类型为“数值”，然后设置字段值为“test”。随后，设置判断符为“!=”。接着，设置字段类型为“数值列表”，最后设置字段值为“1|2”。可以使用ClickTextOneByOne和SetField关键字完成这些操作。\n </thought>\n \n <code_block>\n # 点击下一步，然后点击添加一项\n ClickTextOneByOne | 下一步 | 添加一项\n \n # 设置字段类型为数值\n SetField | 字段类型 | 数值\n \n # 设置字段值为test\n SetField | 字段值 | test\n \n # 设置判断符为 !=\n SetField | 判断符 | !=\n \n # 设置字段类型为数值列表\n SetField | 字段类型 | 数值列表\n \n # 设置字段值为 1|2\n SetField | 字段值 | 1|2\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘我创建的’ 附近的 ‘用户分群’",
        "output": "<thought>\n需要点击靠近“我创建的”的“用户分群”文本，可以使用Click关键字，并通过near参数指定基准文本。\n</thought>\n\n<code_block>\n# 点击‘我创建的’附近的‘用户分群’\nClick | 用户分群 | near=我创建的\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "双击第二个展现数据，然后点击转化数",
        "output": "<thought>\n首先，我会双击第二个\"展现数据\"，然后在页面中点击\"转化数\"。这可以通过使用关键字DClick和Click来实现。\n</thought>\n\n<code_block>\n# 双击第二个\"展现数据\"\nDClick | 展现数据 | idx=1\n\n# 点击\"转化数\"\nClick | 转化数\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在确定选择 点击我知道了",
        "output": "<thought>\n首先需要判断页面是否存在文本“确定选择”，如果存在，则点击“我知道了”。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本“确定选择”\n${exist}  IsAnyTextExisting | 确定选择\n\n# 如果存在，则点击“我知道了”\nIF  ${exist}\n    Click  我知道了\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 点击 的关键字，参数 text 表示要点击的文案，作用是点击对应的 text 文案",
        "output": "<thought>\n要实现一个名为\"点击\"的关键字，并接收一个参数\"text\"用于点击指定的文本，可以使用`Click`关键字。`Click`关键字能够通过文本定位元素并进行点击操作。考虑到可能需要在不同的上下文中使用这个关键字，应该确保该关键字能够在不同情况下正确点击指定文本。\n</thought>\n\n<code_block>\n*** Keywords ***\n点击\n    [Arguments]  ${text}\n    # 使用Click关键字点击指定的text文案\n    Click  ${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 响应时间过长文字，则刷新页面",
        "output": "<thought>\n首先，使用`IsAnyTextExisting`关键字检查页面是否存在“响应时间过长”文字。如果存在，则使用`RefreshPage`关键字刷新页面。RF内置的IF语法可以用于条件判断。\n</thought>\n\n<code_block>\n# 检查页面是否存在\"响应时间过长\"\n${exist}  IsAnyTextExisting  响应时间过长\n\n# 如果存在\"响应时间过长\"，则刷新页面\nIF  ${exist}\n    RefreshPage\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对生效条件右侧输入项依次填入Tag_1051、近线层、10、因子执行失败率、10",
        "output": "<thought>\n根据题目描述，我们需要在同一个输入框中依次输入不同的值。我们可以使用RobotFramework的SetField关键字来完成这个任务。\n</thought>\n\n<code_block>\n# 对生效条件右侧输入项依次输入Tag_1051、近线层、10、因子执行失败率、10\nSetField | 生效条件 | Tag_1051 | 近线层 | 10 | 因子执行失败率 | 10\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取input placeholder=结束日期的value",
        "output": "<thought>\n我们需要获取一个特定input元素的值，其属性是placeholder=\"结束日期\"。首先，我们可以使用`FindElem`来定位该input元素，然后使用`GetElemAttr`获取其value属性的值。\n</thought>\n\n<code_block>\n# 定位placeholder为结束日期的input元素\n${elem}  FindElem | input[placeholder=\"结束日期\"]\n\n# 获取上述元素的value属性\n${val}  GetElemAttr | ${elem} | value\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“SSO登录” 的关键字，接受 url，session, company, 默认值分别为变量 MAIN_PAGE, FEISHU_SESSION 和 COMPANY_CODE，操作逻辑为：\n0. 如果页面包括“全部功能”按钮，就结束，否则执行下面的步骤1和2\n1. 打开浏览器，使用 session 登录飞书，然后打开 url\n2. 先点击 ‘SSO 登录’，然后输入企业识别码, 接着点击下一步，最后点击授权，等页面url中不再包含feishu 即可",
        "output": "SSO登录\n    [Arguments]  ${url}=${MAIN_PAGE}  ${session}=${FEISHU_SESSION}  ${company}=${COMPANY_CODE}\n    # 如果页面包括“全部功能”按钮，就结束\n    IF  IsElemExists | :contains(全部功能)\n        Log  页面已登录\n    ELSE\n        # 打开浏览器，使用 session 登录飞书，然后打开 url\n        OpenBrowser\n        LoginFeiShu | ${session}\n        OpenUrl | ${url}\n        # 先点击 ‘SSO 登录’，然后输入企业识别码为test, 接着点击下一步，最后点击授权\n        Click | SSO 登录\n        SetField | 企业识别码 | ${company}\n        Click | 下一步\n        Click | 授权\n        # 等页面url中不再包含feishu 即可\n        WaitURLNotContains | feishu\n    END"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 ‘使用推荐配置创建随机域名’ 的关键字，逻辑如下：\n# 1. 点击 新增 按钮\n# 2. 调用关键字「随机生成域名」，并获取返回的域名\n# 3. 点击第 1 个 使用推荐配置\n# 3. 设置加速域名为：domain\n# 4. 调用关键字「新增源站」，接受参数：  主源站  源站 IP  1.2.1.2\n# 5. 点击 提交 按钮\n# 6. 等待页面出现文字 域名已添加成功\n# 7. 点击 完成 按钮",
        "output": "<thought>\n为了完成“使用推荐配置创建随机域名”的关键字，我们需要按照逻辑顺序一步步实现。首先点击“新增”按钮，然后调用“随机生成域名”关键字并获取返回的域名。在此之后，点击第一个“使用推荐配置”，设置生成的域名，调用“新增源站”关键字并传递参数，最后点击“提交”按钮并等待成功提示，再点击“完成”按钮。通过这些步骤，可以实现该关键字的完整功能。\n</thought>\n\n<code_block>\n*** Keywords ***\n使用推荐配置创建随机域名\n    # Step1: 点击新增按钮\n    Click  新增\n\n    # Step2: 调用随机生成域名关键字\n    ${domain}  随机生成域名\n\n    # Step3: 点击第一个使用推荐配置\n    Click  使用推荐配置  idx=0\n\n    # Step4: 设置加速域名\n    SetField  加速域名  ${domain}\n\n    # Step5: 调用新增源站关键字\n    新增源站  主源站  源站 IP  1.2.1.2\n\n    # Step6: 点击提交按钮\n    Click  提交\n\n    # Step7: 等待页面出现文字“域名已添加成功”\n    WaitText  域名已添加成功\n\n    # Step8: 点击完成按钮\n    Click  完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 id=\"SplitItemName_input\" 为 空",
        "output": "<thought>\n通过选择器选择id为SplitItemName_input的元素，然后清空其内容。\n</thought>\n\n<code_block>\nFillArea | [id=SplitItemName_input] | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置第3个表格中，表头字段 服务主体 为 北京火山引擎科技有限公司",
        "output": "<thought>\n这个任务需要在一个网页中找到第3个表格，并将表头字段 服务主体 设置为 北京火山引擎科技有限公司。使用的关键字为 FillRow，因为在表头行上进行操作。需要指定 tbl 参数为3，并将 row_name_or_id 设置为 HEAD 来指示表头行。\n</thought>\n\n<code_block>\n# 设置第三个表格中的表头字段 服务主体 为 北京火山引擎科技有限公司\nFillRow | HEAD | 服务主体 | 北京火山引擎科技有限公司 | tbl=3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置标签为多个值：tag1, tag2, tag3, tag4",
        "output": "<thought>\n考虑到“设置标签”这个操作对应于关键字“SetField”，而且需要设置多个值，所以将其各个值以参数形式列出即可。标签字段的名称已经确定为“标签”。\n</thought>\n\n<code_block>\n# 设置标签为多个值：tag1, tag2, tag3, tag4\nSetField | 标签 | tag1 | tag2 | tag3 | tag4\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到第一行第一列的单元格，设置第一行 收款单列 为积分",
        "output": "<thought>\n在这个场景中，我们需要分两步操作。首先，使用MoveToElemOfCell关键字将鼠标移动到第一行第一列的单元格上。然后，使用FillCell关键字来设置第一行中名为\"收款单\"列的值为\"积分\"。\n</thought>\n\n<code_block>\n# 移动鼠标到第一行第一列的单元格\nMoveToElemOfCell | 1 | 1\n\n# 设置第一行 \"收款单\" 列的值为 \"积分\"\nFillCell | 1 | 收款单 | 积分\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面滚动到底部",
        "output": "<thought>\n使用PageDown关键字，使页面滚动到底部。通过尝试设置滚动次数，找到适当的次数，使页面滚动到底部。\n</thought>\n\n<code_block>\n# 向下滚动3次以使页面滚动到底部\nPageDown | 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "模块 选择 OpenSearch FluenBit",
        "output": "<thought>\n要解决这个问题，我们需要将“模块”字段选择为“OpenSearch FluenBit”这个选项。可以使用`SelectOptionForField`关键字，因为它允许我们为指定字段选择一个文本选项。在此场景中，字段名为“模块”，选项为“OpenSearch FluenBit”。\n</thought>\n\n<code_block>\n# 将‘模块’字段选择为‘OpenSearch FluenBit’\nSelectOptionForField | 模块 | OpenSearch FluenBit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待1s，点击上传小图标，检测页面出现“成功”。等待1s后，检测 版本字段 包含：已发布。",
        "output": "<thought>\n我们需要执行以下步骤来完成任务：\n1. 使用 `Sleep` 关键字等待1秒。\n2. 使用 `ClickIcon` 点击上传icon。\n3. 使用 `WaitText` 等待页面上出现“成功”。\n4. 再次使用 `Sleep` 关键字等待1秒。\n5. 使用 `GetFieldVal` 获取版本字段的值，然后检查其中是否包含“已发布”。\n\n为了实现这些步骤，需合理使用RF的关键字。对于步骤5，需要用条件判断来验证“已发布”是否在获取的版本字段值中。\n</thought>\n\n<code_block>\n# 等待1秒\nSleep | 1s\n\n# 点击上传icon\nClickIcon | upload\n\n# 等待页面出现“成功”\nWaitText | 成功\n\n# 再次等待1秒\nSleep | 1s\n\n# 检测版本字段包含“已发布”\n${version_status}  GetFieldVal | 版本\nIF  '已发布' in '${version_status}'\n Log | 版本字段已发布\nELSE\n Fail | 版本字段未发布\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对请求 url 中包含 feishu.cn/path/download, 且请求方式为 POST, 且请求体匹配 user.*xiaoli 的接口进行 mock，mock 数据存放在: https://mysite.net/mock1.json",
        "output": "<thought>\n对于这个场景，我们需要针对请求URL中包含`feishu.cn/path/download`且请求方法为`POST`的请求进行mock。请求体需要匹配正则表达式`user.*xiaoli`。我们要使用的关键字是`Start Mock`，它允许我们对符合条件的请求进行mock，使用指定的mock数据文件。在此场景中，我们的mock数据存储在`https://mysite.net/mock1.json`。实现时需要按照提供的条件填写`Start Mock`的参数。\n</thought>\n\n<code_block>\n# 对请求 url 中包含 feishu.cn/path/download, 且请求方式为 POST, 且请求体匹配 user.*xiaoli 的接口进行 mock\nStart Mock  feishu.cn/path/download  POST  user.*xiaoli  mock_data_path=https://mysite.net/mock1.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击编辑图标",
        "output": "<thought>\n这个任务需要点击一个名为“编辑”的图标，可以直接使用ClickIcon关键字来处理这个需求。\n</thought>\n\n<code_block>\n# 点击编辑图标\nClickIcon | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量 count 按 '|' 进行分割，将分割后的所有部分输入 '导出ID数量'",
        "output": "<thought>\n需要将变量 `count` 按 `|` 进行分割，并依次输入到 `导出ID数量` 字段中。可以使用 `Evaluate` 来分割字符串，然后使用 `SetField` 来输入每个部分。\n</thought>\n\n<code_block>\n# 将 count 按 '|' 分割成列表 parts\n@{parts}  Evaluate  ${count}.split('|')\n\n# 依次将分割后的部分输入到 导出ID数量\nSetField  导出ID数量  @{parts}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ‘审批状态‘ 字段的值为：成功",
        "output": "<thought>\n需要验证页面中“审批状态”字段的值为“成功”。可以使用`CheckFieldContains`关键字来检查指定字段中是否包含期望的文本。因为字段是“审批状态”，文本是“成功”，所以可以直接调用此关键字进行校验。\n</thought>\n\n<code_block>\n# 校验审批状态字段的值为成功\nCheckFieldContains | 审批状态 | 成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第三个data-auto-id=popover-hover-slot的区域，勾选列表中的第一行，点击上一步右侧的提交上线",
        "output": "<thought>\n首先，我们需要点击第三个具有属性data-auto-id=popover-hover-slot的元素。为了实现这一点，我们可以使用ClickElem关键字并指定选择器[data-auto-id='popover-hover-slot']:eq(2)。接下来，我们需要勾选列表中的第一行，可以使用ClickElemOfRow关键字，选择表格的第一行并勾选checkbox。最后，点击上一步右侧的提交上线。为此，可以使用ClickElemToTheDirectionOf关键字，通过\"上一步\"的基准位置判断出\"提交上线\"按钮的位置。\n</thought>\n\n<code_block>\n# 点击第三个 data-auto-id=popover-hover-slot 的区域\nClickElem | [data-auto-id='popover-hover-slot']:eq(2)\n\n# 勾选列表中的第一行\nClickElemOfRow | 1 | :checkbox\n\n# 点击上一步右侧的提交上线\nClickElemToTheDirectionOf | 上一步 | right | :contains(提交上线)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证确定按钮不可点击, 即校验存在处于disabled状态的确定按钮",
        "output": "<thought>\n解决问题思路：校验存在禁用状态的确定按钮，可以通过jquery选择器查找具有禁用状态的包含文本“确定”的元素。\n</thought>\n\n<code_block>\n# 校验页面存在禁用状态的确定按钮\nCheckHasElem | :contains(确定):disabled\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘进组用户剔除被动事件触发条件’ 为 ‘ON’，然后点击第一个 ‘保存’，等待 ‘设置成功’",
        "output": "<thought>\n首先需要将‘进组用户剔除被动事件触发条件’设置为‘ON’，应该使用`SetField`函数来完成。然后点击第一个‘保存’按钮，使用`Click`函数，并将`idx`设置为`0`。最后等待‘设置成功’文本出现，使用`WaitText`函数。\n</thought>\n\n<code_block>\n# 设置‘进组用户剔除被动事件触发条件’为‘ON’\nSetField | 进组用户剔除被动事件触发条件 | ON\n\n# 点击第一个 ‘保存’ 按钮\nClick | 保存 | idx=0\n\n# 等待‘设置成功’出现\nWaitText | 设置成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击包含 飞书 的元素，然后在App ID中输入cli_a3ee609d383b9013",
        "output": "<thought>\n首先需要找到包含文本“飞书”的元素，然后点击该元素。接下来需要在名为“App ID”的输入字段中输入“cli_a3ee609d383b9013”。我们可以使用`Click`关键字来点击包含“飞书”的元素，并使用`SetField`关键字在“App ID”字段中输入内容。\n</thought>\n\n<code_block>\n# 点击包含\"飞书\"的第一个元素\nClick | 飞书\n\n# 在 \"App ID\" 字段中输入指定的值\nSetField | App ID | cli_a3ee609d383b9013\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "按下 ctrl v",
        "output": "<thought>\n要实现这个操作，我需要使用内置的\"SendCtrlV\"关键字。这个关键字可以向当前光标处或特定的元素发送 ctrl + v 指令，使剪贴板上的内容被粘贴。当没有指定 selector 参数时，指令会被发送到当前光标所在的位置。如果应用情境需要指定元素，可以通过 selector 参数来指定。\n</thought>\n\n<code_block>\n# 使用 SendCtrlV 关键字发送 ctrl + v 指令\nSendCtrlV\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“添加${type}事件过滤条件”， 接受 args 参数，作用是：\n点击第一个“过滤条件”按钮, 等待0.5s，\n然后找到第一个 div class=query-event-filter 元素的 elem1,\n在 elem1 后代中找到 class包含index_container 的元素 elem2,\n在 elem2 中找到最后一个 class包含ant-row 的孩子 elem3,\n向 elem3 中输入变长参数 args",
        "output": "<thought>\n为了完成这个任务，我们需要依次实现以下步骤：\n1. 点击第一个“过滤条件”按钮，使用Click关键字。\n2. 等待0.5秒，使用Sleep关键字。\n3. 找到第一个class包含query-event-filter的div元素，使用FindElem关键字。\n4. 在找到的elem1中，找到class包含index_container的后代元素，使用FindElem关键字。\n5. 在找到的elem2中，找到最后一个class包含ant-row的孩子元素，使用FindElem关键字。\n6. 在找到的elem3中，依次填入args参数，使用FillArea关键字。\n\n按照这个思路，我们可以构建出具体的代码块。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加${type}事件过滤条件\n    [Arguments]  @{args}\n    # 点击第一个“过滤条件”按钮\n    Click  过滤条件  idx=0\n    \n    # 等待0.5秒\n    Sleep  0.5s\n    \n    # 找到第一个 div class=query-event-filter 元素的 elem1\n    ${elem1}  FindElem  div.query-event-filter:eq(0)\n    \n    # 在 elem1 后代中找到 class包含index_container 的元素 elem2\n    ${elem2}  FindElem  ${elem1}  [class*=index_container]\n    \n    # 在 elem2 中找到最后一个 class包含ant-row 的孩子 elem3\n    ${elem3}  FindElem  ${elem2}  [class*=ant-row]:eq(-1)\n    \n    # 向 elem3 中输入变长参数 args\n    FillArea  ${elem3}  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘实例与镜像’下面的‘实例’，进入实例页面。获取页面表格中‘实例名称/ID’列的值保存到${values}，校验 ${values}第一个值如果包含‘ECS-XXY01’，则勾选第一个值",
        "output": "<thought>\n首先点击导航栏中“实例与镜像”下面的“实例”按钮，进入实例页面。然后获取表格中“实例名称/ID”列的值存入${values}变量。最后判断 ${values} 列表的第一个值是否包含 'ECS-XXY01'，若包含，则勾选第一个值。\n</thought>\n\n<code_block>\n# 点击导航栏中‘实例与镜像’下面的‘实例’按钮\nClickMenu | 实例与镜像 | 实例\n\n# 获取表格中’实例名称/ID‘列的值\n@{values}  GetColValues | 实例名称/ID\n\n# 判断${values[0]}是否包含‘ECS-XXY01’\n${contain}  Run Keyword And Return Status  Should Contain  ${values[0]}  ECS-XXY01\nIF  ${contain}\n    # 勾选第一个值\n    ClickElemOfRow | 1 | :checkbox\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成 ‘auto分群’ 和 ‘auto描述’ 开头的随机字符串，然后把他们填写到分群名和分群描述中",
        "output": "<thought>\n首先使用 GenerateRandomWithPrefix 关键字生成以 \"auto分群\" 和 \"auto描述\" 开头的随机字符串，然后使用 SetField 关键字将生成的随机字符串填写到 \"分群名\" 和 \"分群描述\" 字段中。\n</thought>\n\n<code_block>\n# 生成以 'auto分群' 开头的随机字符串\n${random_group_name}  GenerateRandomWithPrefix | auto分群 | 20 | [LETTERS][NUMBERS]\n\n# 生成以 'auto描述' 开头的随机字符串\n${random_group_desc}  GenerateRandomWithPrefix | auto描述 | 20 | [LETTERS][NUMBERS]\n\n# 填写分群名\nSetField | 分群名 | ${random_group_name}\n\n# 填写分群描述\nSetField | 分群描述 | ${random_group_desc}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在‘业务定义’输入‘维度单表业务定义’",
        "output": "<thought>\n我们需要在名为‘业务定义’的字段中输入‘维度单表业务定义’。根据关键字描述，使用`SetField`可以满足要求。\n</thought>\n\n<code_block>\n# 在‘业务定义’输入‘维度单表业务定义’\nSetField | 业务定义 | 维度单表业务定义\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选数据复选框",
        "output": "<thought>\n我们需要使用CheckBoxOn关键字来操作名为“数据”的复选框。没有指定base或near参数，因此仅需直接使用名称。\n</thought>\n\n<code_block>\n# 勾选 “数据” 复选框\nCheckBoxOn | 数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 ‘开启利润比例’ 的关键字，接受  text 参数，逻辑是：\n1. 找到 class包含FilterContainer__filterItemContainer，且文本包含 A 的元素 elem，然后将鼠标移动到 elem 中第二个 class包含styles__icon 的元素上，然后点击 ‘开启利润比例’\n2. 将文本 text 输入到元素 elem 中的最后一个输入框元素中",
        "output": "<thought>\n为了实现需求，我们需要依次执行几个步骤：首先，找到包含特定class和文本的元素；然后移动鼠标并点击相关元素；最后，将文本输入到指定元素中。\n</thought>\n\n<code_block>\n*** Keywords ***\n开启利润比例\n    [Arguments]  ${text}\n    # 找到 class包含FilterContainer__filterItemContainer，且文本包含 A 的元素 elem\n    ${elem}  FindElem  [class*=FilterContainer__filterItemContainer]:contains(A)\n    \n    # 将鼠标移动到 elem 中第二个 class包含styles__icon 的元素上\n    MoveToElem  ${elem} [class*=styles__icon]:eq(1)\n    \n    # 点击 ‘开启利润比例’\n    Click  开启利润比例\n    \n    # 将文本 text 输入到元素 elem 中的最后一个input/textarea元素中\n    FillArea  ${elem} input:last, ${elem} textarea:last  ${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 生活服务-服务商 选项处于禁用状态",
        "output": "<thought>\n要校验\"生活服务-服务商\"选项处于禁用状态，我们需要：\n1. 首先需要定位到这个选项元素\n2. 然后验证它是否处于禁用状态\n3. 可以使用CheckElemDisabled关键字直接断言禁用状态\n4. 或者使用IsElementDisabled获取状态后再进行判断\n\n由于题目明确要求校验禁用状态，使用CheckElemDisabled更直接简洁，不需要额外的判断逻辑。\n</thought>\n\n<code_block>\n# 校验\"生活服务-服务商\"选项处于禁用状态\nCheckElemDisabled    生活服务-服务商\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前 URL，然后从中提取出查询字符串中 contractID 的值",
        "output": "<thought>\n要解决这个问题，我们需要完成以下步骤：\n1. 首先使用GetCurrentUrl关键字获取当前URL\n2. 然后从URL中提取查询字符串部分\n3. 最后从查询字符串中提取contractID参数的值\n\n由于RobotFramework没有直接提取URL参数的内置关键字，我们需要使用Evaluate来执行Python代码解析URL。Python的urllib.parse模块可以很好地处理URL解析任务。\n</thought>\n\n<code_block>\n# 获取当前URL\n${url}  GetCurrentUrl\n\n# 使用Python解析URL并提取contractID参数\n${contract_id}  Evaluate  urllib.parse.parse_qs(urllib.parse.urlparse(\"${url}\").query).get('contractID', [''])[0]  modules=urllib.parse\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加数据源，向编辑器输入：autotest，向 role=\"dialog\"中 class=\"ud__input-input-wrap\"的输入框中输入Giraffe_add_parameter+当前时间是年月日时分秒。提示：向元素定位器给定的区域中输入用 FillArea",
        "output": "<thought>\n首先，使用`Click`关键字点击\"添加数据源\"。然后，使用`FillEditor`关键字向编辑器输入文本\"autotest\"。接下来，构建日期时间字符串，最后使用`FillArea`将\"Giraffe_add_parameter+当前时间\"输入到指定的输入框中。\n</thought>\n\n<code_block>\n# 点击添加数据源\nClick | 添加数据源\n\n# 向编辑器输入autotest\nFillEditor | autotest\n\n# 获取当前时间\n${current_time}  Get Current Date  result_format=%Y%m%d%H%M%S\n\n# 向指定输入框输入Giraffe_add_parameter+当前时间\nFillArea | [role=\"dialog\"] [class=ud__input-input-wrap] | Giraffe_add_parameter${current_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个“访问主页”的关键字，接受参数 url，默认值为${HOST}，作用为：访问给定的 url",
        "output": "<thought>\n我们需要编写一个自定义关键字，名为“访问主页”，接受一个参数“url”，并设置默认值为${HOST}。通常情况下，通过调用OpenUrl关键字来访问给定的URL。\n</thought>\n\n<code_block>\n*** Keywords ***\n访问主页\n    [Arguments]  ${url}=${HOST}\n    # 访问给定的url\n    OpenUrl  ${url}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查‘发布’按钮是不可用状态",
        "output": "<thought>\n对于检查按钮的可用状态，我们可以使用CheckElemDisabled关键字来验证页面上“发布”按钮是不可用状态。假设页面上有一个按钮，其选择器为button:contains(发布)。我们可以直接使用CheckElemDisabled关键字，传入这个选择器，完成对按钮状态的验证。\n</thought>\n\n<code_block>\n# 验证发布按钮不可用状态\nCheckElemDisabled | button:contains(发布)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击操作列下的第一个编辑按钮，输入模版信息：外部路由配置，然后保存，页面预期出现文案：更新成功",
        "output": "<thought>\n首先，我们需要点击表格中“操作”列下的第一个“编辑”按钮，这可以使用`ClickTextOfCell`关键字。然后，我们使用`SetField`或`SendText`来输入“外部路由配置”到模版信息字段中。接着点击保存按钮，最后使用`CheckHasText`关键字检查页面上是否出现“更新成功”的文案。\n</thought>\n\n<code_block>\n# 点击表格操作列下的第一个 '编辑' 按钮\nClickTextOfCell | 1 | 操作 | 编辑\n\n# 输入模版信息：外部路由配置\nSetField | 模版信息 | 外部路由配置\n\n# 点击保存按钮\nClick | 保存\n\n# 检查页面出现更新成功的文案\nCheckHasText | 更新成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将页面下拉至完全可见class为overview-trend-com-wrapper页面\n ",
        "output": "<thought>\n 需要将页面滚动至特定元素可见，可以使用MoveIntoView关键字。首先，定义一个变量来存储jquery选择器，然后调用MoveIntoView进行操作。\n </thought>\n \n <code_block>\n # 定义选择器变量\n ${selector}  Set Variable | [class=overview-trend-com-wrapper]\n \n # 将目标元素滚动到视野内\n MoveIntoView | ${selector}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 ‘下一步’ 就点击，然后检查页面如果存在 ‘跳过’ 也点击",
        "output": "<thought>\n首先，我们需要判断页面上是否存在文本“下一步”。如果存在，就点击它。然后，我们需要再次检查页面上是否存在“跳过”这个文本。如果存在，我们也点击它。使用`IsAnyTextExisting`来判断文本是否存在，并使用`Click`关键字点击文本文字。\n</thought>\n\n<code_block>\n# 判断页面是否存在“下一步”\n${exist}  IsAnyTextExisting | 下一步\n\n# 如果存在“下一步”，则点击\nIF  ${exist}\n    Click  下一步\n\n    # 再次判断页面是否存在“跳过”\n    ${exist}  IsAnyTextExisting | 跳过\n    \n    # 如果存在“跳过”，则点击\n    IF  ${exist}\n        Click  跳过\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 日历小图标，随后点击 弹窗中的 近3月",
        "output": "<thought>\n首先需要点击弹窗中的日历icon，然后再点击弹窗中的“近3月”文本。分别使用ClickIcon和Click关键字来实现这些操作，并基于弹窗上下文使用base=POPUP。\n</thought>\n\n<code_block>\n# 点击弹窗中的日历icon\nClickIcon | calendar | base=POPUP\n\n# 点击弹窗中的“近3月”\nClick | 近3月 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击data_source_us后面的加号",
        "output": "<thought>\n需要点击“data_source_us”文本右边的加号图标。可以使用ClickIconToTheDirectionOf关键字，以“data_source_us”为基准元素，方向为right，图标名为plus。\n</thought>\n\n<code_block>\n# 点击data_source_us右边的加号图标\nClickIconToTheDirectionOf | data_source_us | right | plus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置转化窗口期”， 接受参数 args, 主要任务是：向转化窗口期中输入给定的变长参数 args",
        "output": "<thought>\n首先，我需要分析怎样将变长参数 `args` 填入到页面字段 `转化窗口期` 中。对于这个任务，使用关键字 `SetField` 是最合适的，因为它允许我们向指定的字段中填写多个值。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置转化窗口期\n    [Arguments]  @{args}\n    SetField  转化窗口期  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置全局变量‘StartTime’为上个月1号的日期，格式为：2024/07/21 10:00",
        "output": "<thought>\n要设置全局变量‘StartTime’为上个月1号的日期，格式为指定的格式，可以通过RF的日期处理关键字和变量设置关键字来实现。首先，获取当前日期，然后使用Subtract Time From Date关键字减去当前日期中的日期部分，以获得上个月的日期。最后，使用Set Variable设置格式化后的日期字符串为全局变量。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date\n\n# 获取上个月1号的日期\n${last_month}  Subtract Time From Date  ${current_date}  1month  result_format=%Y/%m/01 10:00\n\n# 设置全局变量 'StartTime'\nSet Global Variable  ${StartTime}  ${last_month}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格行数，直到表格行数变成 1，每次重试间隔 1s,打印表格行数",
        "output": "<thought>\n需要反复获取表格行数，直到表格行数为1。可以使用RF的循环与条件判断。为了避免进入死循环，可以设置最大循环次数为60。每次循环等待1秒并输出当前行数。\n</thought>\n\n<code_block>\n# 初始化循环计数器\n${count} =  0\n\n# 循环直到表格行数为1或者达到最大循环次数\nWHILE  ${count} < 60\n    # 获取当前表格行数\n    ${row_count}=  GetRowCount\n\n    # 输出当前行数\n    Log  当前表格行数: ${row_count}\n\n    # 如果行数为1，退出循环\n    IF  ${row_count} == 1\n        Exit For Loop\n    END\n\n    # 等待1秒\n    Sleep  1s\n\n    # 增加循环计数器\n    ${count}=  Evaluate  ${count} + 1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对弹框中包含文本 豆包大模型 的元素进行滚动 90%",
        "output": "<thought>\n首先，根据场景要求，我们需要在弹框中对包含文本“豆包大模型”的元素进行操作。这里的关键步骤是要找到文本为“豆包大模型”的元素。我们可以使用`FindByText`关键字来找到这个元素。为了在弹框中找到这个元素，我们需要确保关键字使用了正确的选择器，即`POPUP`。找到元素后，我们需要对该元素进行上下滚动操作，这可以通过`ScrollUpDown`关键字实现，其中需要提供选择器和滚动百分比作为参数。\n</thought>\n\n<code_block>\n# 查找弹框中包含文本 豆包大模型 的元素\n${elem}  FindByText | 豆包大模型 | base=POPUP\n\n# 对找到的元素进行上下滚动到90%处\nScrollUpDown | ${elem} | 90%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“输入” 的关键字，接受 location content, 作用是：向location中输入content，然后回车",
        "output": "<thought>\n这个任务需要创建一个名为“输入”的自定义关键字，该关键字接受两个参数：location和content。通过“SetField”关键字将content输入到location中，并启用回车功能。\n</thought>\n\n<code_block>\n*** Keywords ***\n输入\n    [Arguments]  ${location}  ${content}\n    # 向指定位置输入文本并回车\n    SetField  ${location}  ${content}  enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击我参与的，点击搜索算法场景，输入【自动化测试专用】，点击刷新小图标",
        "output": "<thought>\n首先，使用`Click`关键字点击文本“我参与的”。然后，使用`Click`关键字选择“搜索算法场景”。接下来，使用`SendText`关键字输入“自动化测试专用”。最后，使用`ClickIcon`关键字点击刷新图标。\n</thought>\n\n<code_block>\n# 点击“我参与的”\nClick | 我参与的\n\n# 点击“搜索算法场景”\nClick | 搜索算法场景\n\n# 输入“自动化测试专用”\nSendText | 自动化测试专用\n\n# 点击刷新图标\nClickIcon | refresh\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 影响区域，点击 撤 回，把 yyyy-mm-dd hh:mm:ss 的字符串时间${t}转换 hh:mm:ss，然后填入开始时间中",
        "output": "<thought>\n首先，我们需要依次点击“影响区域”和“撤回”。然后利用RF的时间处理关键字将日期时间字符串转换为仅包含时间的格式。最后，将转换后的时间输入到“开始时间”字段中。\n</thought>\n\n<code_block>\n# 点击影响区域和撤回\nClickTextOneByOne | 影响区域 | 撤回\n\n# 转换时间字符串\n${converted_time}  Convert Date | ${t} | result_format=%H:%M:%S\n\n# 输入开始时间\nSetField | 开始时间 | ${converted_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 new_browser 为真，则调用关键字 ‘ui open browser  ${HOST}   session=not_given’ 否则，就调用 ‘ui open url  ${HOST}’",
        "output": "<thought>\n根据条件需要选择不同的关键字来打开浏览器。判断变量 `new_browser` 是否为真来决定调用哪个关键字。因此，可以使用Robot Framework的IF/ELSE语句来实现这个逻辑。\n</thought>\n\n<code_block>\n# 判断new_browser是否为真\nIF  ${new_browser}\n    # 变量为真时，打开新浏览器会话\n    ui open browser  ${HOST}  session=not_given\nELSE\n    # 变量不为真时，打开URL\n    ui open url  ${HOST}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 尝试点击 '新建指标组' 或 '创建指标组'",
        "output": "<thought>\n这个任务要求尝试点击两个文本：'新建指标组' 或 '创建指标组'，可以使用 `ClickAny` 关键字，它可以按照顺序尝试点击给定的文本。如果第一个文本不存在，它将尝试点击第二个文本。因此，这里选择 `ClickAny` 关键字来解决这个问题。\n</thought>\n\n<code_block>\n# 尝试点击 '新建指标组' 或 '创建指标组'\nClickAny | 新建指标组 | 创建指标组\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 校验页面菜单名称存在回归菜单01",
        "output": "\n    \n<thought>\n 首先需要访问目标页面，然后检查页面的菜单中是否存在“回归菜单01”。可以使用`OpenUrl`打开页面，接着使用`CheckHasText`来验证菜单名称是否存在。\n </thought>\n \n <code_block>\n # 打开目标页面\n OpenUrl | ${目标页面地址}\n \n # 校验页面菜单名称存在“回归菜单01”\n CheckHasText | 回归菜单01\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "若果表格中包含 ‘张三’ 就点击 ‘建联’",
        "output": "<thought>\n要解决这个问题，首先需要判断表格中是否包含文本'张三'。可以使用关键字`IsAnyTextExisting`或`IsRowContainsText`来确认'张三'是否存在于表格中。假设这是一个单表格，我们可以直接用`IsRowContainsText`来判断。如果存在，就使用`Click`关键字来点击'建联'按钮。\n</thought>\n\n<code_block>\n# 判断表格中是否有“张三”这一行\n${exist}  IsRowContainsText | 张三\n\n# 如果存在张三，则点击“建联”\nIF  ${exist}\n    Click  建联\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 清空icon",
        "output": "<thought>\n解决问题思路：\n1. 根据题目要求，需要点击一个名称为“清空”的icon。\n2. 使用`ClickIcon`关键字，并指定name为\"清空\"。\n\n步骤：\n1. 使用`ClickIcon`关键字，name参数设置为\"clear\"。\n\n下面的代码会实现点击名称为“清空”的icon。\n</thought>\n\n<code_block>\n# 点击清空icon\nClickIcon | clear\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击操作按钮，切换到新开的弹窗，如果有前往新版文字则点击，没有则跳过，设置 管理原为：1158268，设置 是否生成Hive为:是，设置 规则编码为：Giraffe_add_rule+当前时间是年月日时分秒",
        "output": "<thought>\n解决问题的关键是按照顺序执行以下几个步骤：\n1. 点击操作按钮。\n2. 切换到新打开的弹窗。\n3. 判断“前往新版”文本是否存在并决定是否点击。\n4. 使用批量设置功能设置不同字段的值。需要生成当前时间并格式化为所需格式。\n5. 使用RobotFramework的内置关键字和自定义关键字组合实现需求。\n</thought>\n\n<code_block>\n# 点击操作按钮\nClick | 操作\n\n# 切换到新窗口\nToNewWindow\n\n# 判断是否存在“前往新版”并点击\n${exist}  IsAnyTextExisting | 前往新版\nIF  ${exist}\n    Click | 前往新版\nEND\n\n# 获取当前时间\n${current_time}  Get Current Date  result_format=%Y%m%d%H%M%S\n\n# 批量设置字段\nBatchSetFields  管理原=1158268  是否生成Hive=是  规则编码=Giraffe_add_rule${current_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击表格中第一条状态为运行中的数据的第二列。提示：这是要操作满足条件的行和列，即单元格",
        "output": "<thought>\n 这个问题的解决思路是：首先，我们需要找到状态为运行中的第一条数据，然后在这行中找到第二列。这个操作看起来就是对一个具体单元格的操作，因此，我们可以使用ClickElemOfCell关键字来完成这个任务。row_name_or_id参数应该是运行中，col_name_or_id应该是2，表示第二列。selector 设为 *，表示任意元素\n </thought>\n \n <code_block>\n # 点击表格中第一条状态为运行中的数据的第二列\n ClickElemOfCell | 运行中 | 2 | selector=*\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待确定按钮消失",
        "output": "<thought>\n首先，根据需求，我们需要等待一个按钮元素消失。因此我们应选择使用`WaitElemDisappear`关键字。假设\"确定\"按钮的选择器是基于其文本内容或某个属性来识别的，需要通过jQuery选择器来定位该按钮。假设我们通过文本内容来识别按钮，可以使用`:contains`来选择元素。\n</thought>\n\n<code_block>\n# 等待确定按钮消失\nWaitElemDisappear | button:contains(确定)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（1， 5）中的编辑",
        "output": "\n    \n<thought>\n 在这个场景中，我们需要点击表格第一行第五列中的“编辑”元素。可以使用`ClickTextOfCell`关键字来实现这个操作。我们需要指定行号、列号以及文本“编辑”。\n </thought>\n \n <code_block>\n # 点击第一行第五列中的编辑\n ClickTextOfCell | 1 | 5 | 编辑\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将第2个class为ovui-select__options保存为基准图",
        "output": "<thought>\n在这个场景中，我们需要截取第2个class为ovui-select__options的元素并保存为基准图。根据规则，第2个元素在jQuery选择器中应表示为:eq(1)。我们可以使用ImageDiff关键字来截取图片并保存。需要传递selector参数来定位元素，并使用pic_name参数来指定保存的基准图片名称。\n</thought>\n\n<code_block>\n# 截取第2个class为ovui-select__options的元素的图片并保存为基准图\nImageDiff | [class=ovui-select__options]:eq(1) | pic_name=基准图\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将‘商品信息’移动到屏幕中，点击 class  包含  aily-card-expand_button 的按钮，点击批量下架",
        "output": "<thought>\n首先，我们需要将文本为‘商品信息’的元素移动到屏幕中，以确保元素在视野范围内。接下来，使用ClickElem关键字，点击class中包含\"aily-card-expand_button\"的按钮。最后，点击文本为“批量下架”的按钮。\n</thought>\n\n<code_block>\n# 将‘商品信息’移动到屏幕中\nMoveIntoView | :contains(商品信息)\n\n# 点击 class包含aily-card-expand_button 的按钮\nClickElem | [class*=aily-card-expand_button]\n\n# 点击批量下架\nClick | 批量下架\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 需求单-需求行 为 WR000038/SR000045-软件采购、开发-1000x",
        "output": "<thought>\n我们需要设置“需求单-需求行”的值。首先，我们应确定使用哪个关键字来操作页面字段。根据需求，`SetField`关键字最合适，因为它可以指定字段名并输入值。接下来，需要填入的值为“WR000038/SR000045-软件采购、开发-1000x”。\n\n为了更好地组织代码，我们使用注释来说明每一步的操作。\n</thought>\n\n<code_block>\n# 设置需求单-需求行为 WR000038/SR000045-软件采购、开发-1000x\nSetField | 需求单-需求行 | WR000038/SR000045-软件采购 | 开发-1000x\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成由字母数字下划线组成的，以autotest开头的，长度为20的随机字符串",
        "output": "<thought>\n使用GenerateRandomWithPrefix关键字生成长度为20的随机字符串，该字符串应以“autotest”开头，字符集包含字母、数字和下划线。\n</thought>\n\n<code_block>\n# 使用GenerateRandomWithPrefix生成以autotest开头的随机字符串\n${rand_str}  GenerateRandomWithPrefix  autotest  20  [LETTERS][NUMBERS]_\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“选择Session包含的事件” 的关键字，接受 args 参数，作用是：向 ‘请选择’ 中输入给定的一个或多个 args，然后点击 ‘添加’",
        "output": "<thought>\n首先，我需要在“请选择”字段中输入给定的参数，然后点击“添加”按钮。可以用`SetField`关键字将args填入“请选择”字段，再使用`Click`关键字点击“添加”按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n选择Session包含的事件\n    [Arguments]  @{args}\n    # 将给定的args依次填入“请选择”字段\n    SetField  请选择  @{args}\n    # 点击添加按钮\n    Click  添加\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击placeholder=请输入属性名称或属性值，并输入app_version，回车",
        "output": "<thought>\n在这个任务中，我们需要点击一个具有特定placeholder的输入框，然后在其中输入文本并回车。我们可以使用`ClickElem`关键字来点击具有特定属性的元素，然后使用`SendText`关键字来输入文本并回车。\n</thought>\n\n<code_block>\n# 点击placeholder=请输入属性名称或属性值的输入框\nClickElem | [placeholder='请输入属性名称或属性值']\n\n# 输入app_version并回车\nSendText | app_version | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置PO 单号为 PO+生成一串8位随机数字 并记录为变量 poId",
        "output": "<thought>\n首先，我们需要使用关键字\"GenerateRandom\"生成8位随机数字，然后将\"PO\"字符串与这个随机数字连接在一起，设置为PO单号。这个PO单号需要被记录下来，所以将其作为变量保存起来。\n</thought>\n\n<code_block>\n# 生成8位随机数字\n${rand_num}  GenerateRandom | 8 | [NUMBERS]\n\n# 连接\"PO\"和随机数字生成PO单号\n${poId}  Catenate  | SEPARATOR=  |  PO  |  ${rand_num}\n\n# 设置PO单号\nSetField | PO单号 | ${poId}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二行第六列",
        "output": "<thought>\n根据场景需求，目标是点击表格中的某个单元格。由于任务是点击第二行第六列的内容，关键字`ClickTextOfCell`或`ClickElemOfCell`可以满足需求。假设没有指定具体内容或选择器，使用默认值即可。\n</thought>\n\n<code_block>\n# 点击第二行第六列的任意元素\nClickElemOfCell | 2 | 6 | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 debug 级别日志",
        "output": "<thought>\n这个任务相对简单，只需要使用Robot Framework内置的`Set Log Level`关键字来设置日志级别为DEBUG。\n</thought>\n\n<code_block>\n# 设置日志级别为DEBUG\nSet Log Level    DEBUG\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击送审渠道号输入框，勾选13_juliang_shenhe",
        "output": "\n    \n<thought>\n 首先需要点击送审渠道号的input或textarea，然后勾选名为13_juliang_shenhe的复选框。可以使用ClickElem关键字选择input/textarea元素，并使用CheckBoxOn关键字勾选复选框。\n </thought>\n \n <code_block>\n # 点击送审渠道号的input/textarea\n ClickElem | input[placeholder*='送审渠道号'],textarea[placeholder*='送审渠道号']\n \n # 勾选13_juliang_shenhe复选框\n CheckBoxOn | 13_juliang_shenhe\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击：基础操作、送标",
        "output": "<thought>\n这个场景需要依次点击两个文本元素：\"基础操作\"和\"送标\"。根据提供的关键字，最适合的是使用`ClickTextOneByOne`关键字，因为它专门设计用于依次点击多个文本元素。不需要考虑元素定位的特殊情况，因为题目没有给出额外的限制条件。\n\n由于没有提到需要在弹窗或特定基准元素内操作，所以不需要使用`base`参数。直接使用`ClickTextOneByOne`关键字即可满足需求。\n</thought>\n\n<code_block>\n# 依次点击基础操作和送标\nClickTextOneByOne | 基础操作 | 送标\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置全局变量 xxx 的值为：yyy",
        "output": "<thought>\n在Robot Framework中，设置全局变量可以通过BuiltIn库的Set Global Variable关键字来实现。该关键字允许我们将指定的值赋给全局变量，确保在整个测试执行过程中该变量可以被访问和使用。\n</thought>\n\n<code_block>\n# 设置全局变量xxx的值为yyy\nSet Global Variable  ${xxx}  yyy\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个‘创建物理专线’的关键字。接受参数${DC_name}。步骤如下：\n1.点击目录中的物理专线，点击接入物理专线。\n2.设置名称为${DC_name},设置接入点为北京-大兴-A，设置专线宽带为100，勾选计费规则\n3.设置联系人姓名为${contact_name},联系人手机为${contact_phone},联系人邮箱为${email},点击确定",
        "output": "<thought>\n为了实现创建物理专线的关键字，我们将使用一系列的关键字，包括Click，BatchSetFields和CheckBoxOn。首先，我们将点击目录中的物理专线和接入物理专线的选项。然后，我们将使用BatchSetFields关键字设置名称，接入点和专线宽带。之后，我们勾选计费规则。最后，我们将设置联系人的相关信息，并点击确定完成操作。\n</thought>\n\n<code_block>\n创建物理专线\n    [Arguments]  ${DC_name}  ${contact_name}  ${contact_phone}  ${email}\n    # 点击目录中的物理专线\n    Click | 物理专线\n    # 点击接入物理专线\n    Click | 接入物理专线\n    # 设置名称为${DC_name},设置接入点为北京-大兴-A,设置专线宽带为100\n    BatchSetFields | 名称=${DC_name} | 接入点=北京-大兴-A | 专线宽带=100\n    # 勾选计费规则\n    CheckBoxOn | 计费规则\n    # 设置联系人姓名为${contact_name},联系人手机为${contact_phone},联系人邮箱为${email}\n    BatchSetFields | 联系人姓名=${contact_name} | 联系人手机=${contact_phone} | 联系人邮箱=${email}\n    # 点击确定\n    Click | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 缓存键值下的新增规则",
        "output": "<thought>\n 首先，我们需要确定\"缓存键值\"的元素，然后在其下方寻找\"新增规则\"的元素，然后点击它。我们可以使用\"ClickTextToTheDirectionOf\"关键字来实现这个操作。\n </thought>\n \n <code_block>\n # 点击 缓存键值下的新增规则\n ClickTextToTheDirectionOf | 缓存键值 | bottom | 新增规则\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 鼠标移动到class=arco-icon-more元素，点击新增任务，设置任务名称为${testName}加上job，设置负责人为zhangxiaoyu.613，点击空白处，设置任务类型为在线任务，设置任务描述为今天的日期。点击确定。",
        "output": "<thought>\n首先，移动鼠标到指定元素上，然后点击“新增任务”。接着设置任务名称、负责人、任务类型和任务描述。最后，点击确定。需要使用的关键字包括`MoToElem`、`Click`、`SetField`、`ClickWhiteArea`和`Get Current Date`。\n</thought>\n\n<code_block>\n# 移动到class为arco-icon-more的元素\nMoToElem | [class=arco-icon-more]\n\n# 点击新增任务\nClick | 新增任务\n\n# 设置任务名称为${testName}加上job\nSetField | 任务名称 | ${testName}job\n\n# 设置负责人为zhangxiaoyu.613\nSetField | 负责人 | zhangxiaoyu.613\n\n# 点击空白处\nClickWhiteArea\n\n# 设置任务类型为在线任务\nSetField | 任务类型 | 在线任务\n\n# 获取今天的日期\n${today}  Get Current Date | result_format=%Y-%m-%d\n\n# 设置任务描述为今天的日期\nSetField | 任务描述 | ${today}\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "粘贴文本 ${SQL} 到光标处",
        "output": "<thought>\n在这个场景中，需要将变量`${SQL}`的内容粘贴到当前光标处。可以使用`Paste`关键字，selector设置为空以表示光标处，然后直接使用`${SQL}`作为待粘贴的文本。\n</thought>\n\n<code_block>\n# 将变量${SQL}的内容粘贴到当前位置\nPaste | ${EMPTY} | ${SQL}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击应用场景，在下拉框选择通用管报，再点击分组选择分组1",
        "output": "<thought>\n首先需要点击“应用场景”文本，可以使用`Click`关键字，然后在下拉框中选择“通用管报”，为此可以使用`SelectOption`关键字。最后，需要点击“分组”选择“分组1”，这里同样使用`SelectOptionForField`关键字来完成。\n</thought>\n\n<code_block>\n# 点击“应用场景”\nClick | 应用场景\n\n# 在下拉框中选择“通用管报”\nSelectOption | 通用管报\n\n# 在“分组”下拉框选择“分组1”\nSelectOptionForField | 分组 | 分组1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成4位16进制数",
        "output": "<thought>\n使用RobotFramework的GenerateRandom关键字来生成4位16进制数，可以通过指定字符集为0-9和a-f来实现。\n</thought>\n\n<code_block>\n# 生成4位16进制数\n${hex}  GenerateRandom | 4 | [NUMBERS]abcdef\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格 (${task_name}, 操作) 中的 icon",
        "output": "<thought>\n该场景需要点击表格中某个单元格内的图标。我们可以使用 `ClickIconOfCell` 关键字来实现这一操作。我们首先需要确定单元格的位置，即行名或行号（`row_name_or_id`）和列名或列号（`col_name_or_id`）。在该场景中，行由 `${task_name}` 标识，列为 操作。为了点击单元格中的图标，我们需要知道图标名称，如果没有具体提供，可以默认选择第一个图标（`idx=0`）。因此选择关键字 `ClickIconOfCell` 来完成这项任务。\n</thought>\n\n<code_block>\n# 点击单元格 (${task_name}, 操作) 中的第一个图标\nClickIconOfCell | ${task_name} | 操作 | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 知识 按钮，点击class 包含 view-overlays 的最后一个元素，等待直到 思考中 文字消失",
        "output": "<thought>\n为了完成这个任务，可以分为几个步骤：首先点击“知识”按钮，然后找到class包含“view-overlays”的元素，并点击它。在使用jQuery选择器时，通过\":eq(-1)\"表示最后一个元素。最后，等待“思考中”文本消失。\n\n可以通过以下关键字完成：\n1. 使用 `Click` 关键字点击“知识”按钮。\n2. 使用 `ClickElem` 关键字点击 class 包含 view-overlays 的最后一个元素。\n3. 使用 `WaitTextDisappear` 关键字等待“思考中”文本消失。\n</thought>\n\n<code_block>\n# 点击知识按钮\nClick | 知识\n\n# 点击class包含view-overlays的最后一个元素\nClickElem | [class*=view-overlays]:eq(-1)\n\n# 等待'思考中'文本消失\nWaitTextDisappear | 思考中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击撤销原因下拉框并选择第2项",
        "output": "<thought>\n首先，我们需要使用内置的SetField关键字来操作撤销原因字段，并为其选择下拉列表的第二个选项。在Robot Framework中，我们使用SetField关键字来操作字段，并可以设置其值。在这里，我们将撤销原因字段设置为特殊值 OPTIONS_2，这代表第二个选项。\n</thought>\n\n<code_block>\n# 设置撤销原因字段为下拉列表的第二个选项\nSetField | 撤销原因 | OPTIONS_2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “提交”，出现 “确定” 后，点击确定",
        "output": "<thought>\n首先需要使用Click关键字点击“提交”按钮，然后等待“确定”文本出现，最后再次使用Click关键字点击“确定”。\n</thought>\n\n<code_block>\n# 点击提交按钮\nClick | 提交\n\n# 等待确定按钮出现\nWaitText | 确定\n\n# 点击确定按钮\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在加载失败，则返回失败",
        "output": "<thought>\n为了判断页面是否存在加载失败，我们可以使用 `IsAnyTextExisting` 关键字检查页面上是否存在 \"加载失败\" 的文本。如果存在，则返回失败。我们可以使用 `Fail` 关键字来实现这一点。\n</thought>\n\n<code_block>\n# 如果页面存在加载失败，则返回失败\n${exist}  IsAnyTextExisting | 加载失败\nIF  ${exist}\n    Fail  页面加载失败\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一行的操作列的 详情span，点击class包含arco-icon-edit右边的元素，点击我接受上述，最后我要校验${msg_content}的这个元素的文本不为空",
        "output": "<thought>\n1. 使用`ClickElemOfCell`点击第一行操作列中的详情span。\n2. 使用`ClickElemToTheDirectionOf`点击class包含arco-icon-edit右边的元素。\n3. 使用`Click`点击文本“我接受上述”。\n4. 使用`GetElemText`获取${msg_content}的元素文本。\n5. 使用`Should Not Be Empty`校验文本不为空。\n</thought>\n\n<code_block>\n# 点击第一行操作列中的详情span\nClickElemOfCell | 1 | 操作 | span:contains(详情)\n\n# 点击class包含arco-icon-edit右边的元素\nClickElemToTheDirectionOf | [class*=arco-icon-edit] | right\n\n# 点击文本“我接受上述”\nClick | 我接受上述\n\n# 获取${msg_content}的元素文本\n${text}  GetElemText | ${msg_content}\n\n# 校验${msg_content}的文本不为空\nShould Not Be Empty  ${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击创建按钮",
        "output": "<thought>\n 为了实现点击创建按钮的功能，可以直接使用Click关键字，假设按钮上显示的文本是\"创建\"。\n </thought>\n \n <code_block>\n # 点击创建按钮\n Click | 创建\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将鼠标移动到新打开的页面，其实就是切换到新窗口",
        "output": "<thought>\n这个问题中我们需要将鼠标移动到新打开的页面，其实就是切换到新窗口，要实现这个操作，我们需要使用“ToNewWindow”这个关键字，它可以帮助我们切换到新打开的浏览器窗口。\n</thought>\n\n<code_block>\n# 切换到新打开的窗口\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送这个请求：curl 'https://infinite-boe.bytedance.net/infinite/api/giraffe/v1/file/cooperation?id=5o926e403w8nwdo3rk17vnxl&psm=wzgq9o77kq9r&type=testcase' \\\n  -X 'POST' \\\n  -H 'Accept: */*' \\\n  -H 'Referer: https://infinite-boe.bytedance.net/giraffe/project/wzgq9o77kq9r/main/testcase?id=5o926e403w8nwdo3rk17vnxl'",
        "output": "<thought>\n根据给定的curl请求，我们需要使用UiSendRequest关键字来发送一个POST请求，同时设置请求头。请求地址为'https://xxx.yyy.zzz.com/infinite/api/giraffe/v1/file/cooperation?id=5o926e403w8nwdo3rk17vnxl&psm=wzgq9o77kq9r&type=testcase'，请求头包含'Accept': '*/*'和'Referer': 'https://xxx.yyy.zzz.com/giraffe/project/wzgq9o77kq9r/main/testcase?id=5o926e403w8nwdo3rk17vnxl'。\n</thought>\n\n<code_block>\n# 设置请求头\n${headers} =  Create Dictionary  Accept=*/*  Referer=https://xxx.yyy.zzz.com/giraffe/project/wzgq9o77kq9r/main/testcase?id=5o926e403w8nwdo3rk17vnxl\n\n# 发送POST请求并获取响应\n${resp_json}  UiSendRequest  POST  https://xxx.yyy.zzz.com/infinite/api/giraffe/v1/file/cooperation?id=5o926e403w8nwdo3rk17vnxl&psm=wzgq9o77kq9r&type=testcase  ${None}  ${headers}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 工单状态，断言其值为：删除中，然后等待页面删除成功文案消失，在操作人中输入：hlt",
        "output": "<thought>\n首先需要获取工单状态字段的值，然后使用RF的断言关键字来验证该值为“删除中”。验证完成后，需要等待页面上的“删除成功”文案消失。最后，在名为“操作人”的字段中输入“hlt”。可以使用以下关键字来解决这些问题：\n- `GetFieldVal`：获取工单状态字段的值。\n- `Should Be Equal As Strings`：断言工单状态值等于“删除中”。\n- `WaitTextDisappear`：等待“删除成功”文案消失。\n- `SetField`：在“操作人”字段中输入“hlt”。\n</thought>\n\n<code_block>\n# 获取工单状态字段的值\n${order_status}  GetFieldVal | 工单状态\n\n# 断言工单状态值为删除中\nShould Be Equal As Strings  ${order_status}  删除中\n\n# 等待页面删除成功文案消失\nWaitTextDisappear | 删除成功\n\n# 在操作人字段中输入 hlt\nSetField | 操作人 | hlt\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在单用户单品限购旁边找到“16”",
        "output": "<thought>\n需要找到文本为“单用户单品限购”的基准元素，然后在其附近查找文本为“16”的元素。可以使用`FindByText`关键字找到基准元素，然后使用`FindNearElem`关键字找到附近的目标元素。\n</thought>\n\n<code_block>\n# 查找文本为“单用户单品限购”的元素\n${base_elem}  FindByText | 单用户单品限购\n\n# 在“单用户单品限购”附近查找文本为“16”的元素\n${target_elem}  FindNearElem | ${base_elem} | :contains(16)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击演出时间右下方的请输入，然后输入 2024-11-11",
        "output": "<thought>\n对于给定场景，需要先在“演出时间”右下方找到“请输入”元素，然后输入日期“2024-11-11”。可以使用FindElemToTheDirectionOf关键字查找元素，再用FillArea关键字输入值。\n</thought>\n\n<code_block>\n# 查找“演出时间”右下方的“请输入”元素\n${input_elem}  FindElemToTheDirectionOf | 演出时间 | bottomRight | :contains(请输入)\n\n# 在找到的元素中输入日期“2024-11-11”\nFillArea | ${input_elem} | 2024-11-11\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘我创建的’ 为：开",
        "output": "<thought>\n为了设置字段‘我创建的’为‘开’，可以使用`SetField`关键字。因为这里没有提到特定的上下文，比如基准元素或者靠近哪个文本，我们只需直接设置字段即可。\n</thought>\n\n<code_block>\n# 设置‘我创建的’为‘开’\nSetField | 我创建的 | 开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在文字'指南'，则点击该文字",
        "output": "<thought>\n首先，使用`IsAnyTextExisting`来检查页面上是否存在“指南”文字。如果存在，则使用`Click`关键字点击该文字。\n</thought>\n\n<code_block>\n# 判断页面是否存在文字“指南”\n${exist}  IsAnyTextExisting | 指南\n\nIF  ${exist}\n    # 点击文字“指南”\n    Click  指南\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个变量account，值为Wjtest_yd，快速切换账号 设置为此值",
        "output": "<thought>\n为了实现切换账号为指定的值，可以使用`Set Variable`来创建一个变量来保存账号信息。为了切换账号，首先需要找到对应的账号输入字段，并设置该字段为新账号值。可以使用`SetField`进行字段值的设置。\n</thought>\n\n<code_block>\n# 创建变量account，值为Wjtest_yd\n${account}  Set Variable  Wjtest_yd\n\n# 假设页面上有一个名为账号的字段，切换账号为${account}\nSetField | 账号 | ${account}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向变量 ${line} 代表的页面元素中输入 应用ID  \\=  10000006",
        "output": "<thought>\n解决问题思路：首先利用给定的变量 ${line} 直接通过 FillArea 关键字将应用ID和等号与值输入到对应的元素中。\n</thought>\n\n<code_block>\n# 向 ${line} 代表的页面元素输入 \"应用ID = 10000006\"\nFillArea | ${line} | 应用ID | \\= | 10000006\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置归因方式”，接受type，args参数，主要作用是：\n1. 先去掉type中的“归因”字符串，然后将type映射成英文，映射关系为：首次：\"#icon-firstclick\", 末次: \"#icon-lastclick\", 线性: \"#icon-linear\", 时间衰减: \"#icon-timedecay\", 基于位置: \"#icon-positionbased\"\n2. 点击满足type的icon, 等待0.5秒\n3. 在div class=AttributionChartRow__row__2tAub 的元素中填写一个或多个 args",
        "output": "<thought>\n解决问题思路：\n1. 先处理type参数，去掉“归因”并映射为对应的icon名称。\n2. 点击映射到的icon。\n3. 等待0.5秒。\n4. 在指定的div中填写args参数。\n</thought>\n\n<code_block>\n设置归因方式\n    [Arguments]  ${type}  @{args}\n    \n    # 移除type中的“归因”\n    ${type}  Evaluate  ${type}.replace('归因','')\n    \n    # 创建映射字典\n    &{type_dict}  Create Dictionary  \n    ...  首次=#icon-firstclick  \n    ...  末次=#icon-lastclick  \n    ...  线性=#icon-linear  \n    ...  时间衰减=#icon-timedecay  \n    ...  基于位置=#icon-positionbased\n    \n    # 映射type到icon\n    ${icon_name}  Set Variable  ${type_dict}[${type}]\n    \n    # 点击对应的icon\n    ClickIcon  name=${icon_name}\n    \n    # 等待0.5秒\n    Sleep  0.5s\n    \n    # 填写args到指定元素\n    FillArea  div[class=AttributionChartRow__row__2tAub]  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ${text} 的值为标准型",
        "output": "<thought>\n为了验证变量${text}的值是否为\"标准型\"，我们可以使用RF的\"Should Be Equal As Strings\"关键字来进行字符串比较。如果${text}的值等于\"标准型\"，那么测试将通过，否则测试将失败。\n</thought>\n\n<code_block>\n# 校验 ${text} 的值为标准型\nShould Be Equal As Strings  ${text}  标准型\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击更多功能的小图标，点击续费，点击弹窗中的停用，在弹框中的停用原因中输入：欠费",
        "output": "thought>\n首先需要点击名称为“更多功能”的图标，可以使用ClickIcon关键字。随后，点击“续费”可以使用Click关键字。接着在弹窗中点击“停用”，可以使用Click关键字并指定base为POPUP。最后, 在弹窗中的停用原因输入“欠费”，使用SetPopupField关键字。\n</thought>\n\n<code_block>\n# 点击更多功能的icon\nClickIcon | more\n\n# 点击续费\nClick | 续费\n\n# 点击弹窗中的停用\nClick | 停用 | base=POPUP\n\n# 在弹窗中的停用原因中输入：欠费\nSetPopupField | 停用原因 | 欠费\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${line_no} 为 1，且 ${type} != 属性过滤, 则点击元素${elem1}后代中文本为${type}的span元素，0.5s后，点击元素 elem2 的class*=IconCloseUI的后代元素",
        "output": "<thought>\n首先需要判断 `${line_no}` 是否为1，并且 `${type}` 不等于 \"属性过滤\"。如果条件满足，先在`${elem1}`元素的后代中查找文本为`${type}`的span元素并点击，然后等待0.5秒，最后点击`${elem2}`元素后代中class包含\"IconCloseUI\"的元素。\n</thought>\n\n<code_block>\n# 如果条件满足，则执行一系列操作\nIF  \"${line_no}\" == \"1\" and \"${type}\" != \"属性过滤\"\n    # 点击${elem1}后代中的文本为${type}的span元素\n    ${target_elem}  FindElem  ${elem1} span:contains(${type})\n    ClickElem  ${target_elem}\n    \n    # 等待0.5秒\n    Sleep  0.5s\n    \n    # 点击${elem2}后代中class包含IconCloseUI的元素\n    ${close_elem}  FindElem  ${elem2} [class*=IconCloseUI]\n    ClickElem  ${close_elem}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 ${day} =32  realday= ${day}-1",
        "output": "<thought>\n在这个场景中，我们需要获取一个变量`${day}`的值，然后执行减法操作。由于Robot Framework的内置关键字支持基本的数学运算，我们可以使用`Set Variable`和`Evaluate`关键字来实现这个需求。首先，我们将`${day}`赋值为32，然后通过`Evaluate`进行减法运算得到`realday`。\n</thought>\n\n<code_block>\n# 设置变量${day}为32\n${day} =  Set Variable  32\n\n# 计算realday为${day}减去1\n${realday} =  Evaluate  ${day} - 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到右上角账号处（即用户头像那里），等待出现访问控制按钮，点击访问控制按钮",
        "output": "<thought>\n1. 首先需要定位到右上角的账号元素，可以使用`MoToElem`关键字移动到用户头像位置，选择器使用`[class*=avatar]`\n2. 然后需要等待访问控制按钮出现，可以使用`WaitText`关键字等待\"访问控制\"文本出现\n3. 最后点击访问控制按钮，可以使用`Click`关键字点击\"访问控制\"文本\n4. 整个过程需要考虑元素定位的准确性，使用class选择器定位头像，文本定位访问控制按钮\n</thought>\n\n<code_block>\n# 移动到右上角账号头像位置\nMoToElem | [class*=avatar]\n\n# 等待访问控制按钮出现\nWaitText | 访问控制\n\n# 点击访问控制按钮\nClick | 访问控制\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 第二个密钥对 右侧的元素",
        "output": "<thought>\n在这个场景中，我们需要点击\"第二个密钥对\"右侧的元素。这意味着首先需要定位到第二个包含文本\"密钥对\"的元素，然后在这个元素的右边寻找目标元素。我们可以使用`ClickElemToTheDirectionOf`关键字，该关键字允许我们在给定基准元素的某个方向上进行点击操作。\n\n为此，我们需要：\n1. 确定要点击的是第二个\"密钥对\"旁的元素。\n2. 使用`ClickElemToTheDirectionOf`，设置基准元素为第二个\"密钥对\"。\n3. 设置方向为\"right\"，即右侧。\n4. 由于选择的是第二个\"密钥对\"，在RF中需要使用`:eq(1)`来选择第二个元素（因为索引从0开始）。\n</thought>\n\n<code_block>\n# 点击第二个密钥对右侧的元素\nClickElemToTheDirectionOf | :contains(密钥对):eq(1) | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面上有新版本弹窗，则点击“暂不升级”",
        "output": "<thought>\n首先，需要判断页面上是否存在新版本弹窗。如果存在，则点击弹窗中的“暂不升级”按钮。可以使用IsAnyTextExisting关键字来判断“新版本”文本是否存在，然后使用Click关键字点击“暂不升级”按钮。\n</thought>\n\n<code_block>\n# 判断页面是否有新版本弹窗\n${exist}  IsAnyTextExisting | 新版本\n\n# 如果存在新版本弹窗，则点击“暂不升级”\nIF  $exist\n    Click  暂不升级 | base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 接入源标识 这个字段的值",
        "output": "<thought>\n我们需要获取“接入源标识”字段的值，这可以通过使用`GetFieldVal`关键字来实现。直接传入字段的名称即可得到其对应控件的值。\n</thought>\n\n<code_block>\n# 获取接入源标识字段的值\n${val}  GetFieldVal | 接入源标识\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含arco-draggable的最后一个元素",
        "output": "<thought>\n在这个场景中，我们需要点击一个元素，其类名包含\"arco-draggable\"。由于我们需要点击其中的最后一个元素，可以使用`ClickElem`关键字结合jQuery选择器`:eq(-1)`来实现这一操作。\n</thought>\n\n<code_block>\n# 点击class包含arco-draggable的最后一个元素\nClickElem | [class*=arco-draggable]:eq(-1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查看页面有几个 canvas 元素",
        "output": "<thought>\n为了解决查看页面中有几个 canvas 元素的问题，可以使用 GetElemCount 关键字。该关键字能够获取由选择器表示的元素数量。我们可以使用选择器 canvas 来查找所有canvas元素。\n</thought>\n\n<code_block>\n# 获取页面中canvas元素的数量\n${cnt}  GetElemCount | canvas\nLog  页面中有${cnt}个canvas元素\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面上存在 “无需比对”按钮 就点击它，之后出现弹窗点击“确定”按钮，重复此操作直到页面上没有 “开始比对”字样，或达到最大重复次数：5",
        "output": "<thought>\n对于这个任务，首先需要判断页面上是否存在“无需比对”按钮，如果存在就点击。接着，检测弹窗并点击“确定”按钮。重复这个操作，直到页面上不再有“开始比对”字样，或者重复次数达到5次。为了实现这个逻辑，需要用到循环和条件判断。我们将使用IsAnyTextExisting检查“无需比对”按钮是否存在，用Click关键字点击按钮，然后用CheckHasText判断“开始比对”是否在页面上，来决定是否继续循环。\n</thought>\n\n<code_block>\n${MAX_TIMES}    Set Variable    5\n\nFOR    ${i}    IN RANGE    ${MAX_TIMES}\n    # 检查是否存在“无需比对”按钮\n    ${exist}    IsAnyTextExisting    无需比对\n    IF    ${exist}\n        # 点击“无需比对”按钮\n        Click    无需比对\n        # 等待弹窗出现并点击“确定”\n        WaitText    确定\n        Click    确定    base=POPUP\n    ELSE\n        # 如果按钮不存在，退出循环\n        Exit For Loop\n    END\n    # 检查页面是否还有“开始比对”字样\n    ${exist}    IsAnyTextExisting    开始比对\n    IF    not ${exist}\n        # 如果没有“开始比对”字样，退出循环\n        Exit For Loop\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将libra_autotest_config_khyocnqtco粘贴到class包含arco-input-size-small的元素中",
        "output": "<thought>\n在这个任务中，我们需要将特定的文本粘贴到一个特定的HTML元素中。首先，我们需要定位到这个元素，我们可以通过FindElem关键字来完成这个任务，由于题目已经给出了元素的class，我们可以直接使用它作为选择器。然后我们使用Paste关键字将文本粘贴到这个元素中。\n</thought>\n\n<code_block>\n# 定位到指定的元素\n${elem}  FindElem | [class*=arco-input-size-small]\n\n# 将文本粘贴到该元素中\nPaste | ${elem} | libra_autotest_config_khyocnqtco\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "curl --location --request POST 'https://data-dev.bytedance.net/invoker_server/openapi/v1/query/getInfo' \\\n--header 'Content-Type: application/json' \\\n--header 'x-jwt-token: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZXJzaW9uIjowLCJhdXRob3JpdHkiOiJET0FTIiwiYXV0aG9yaXR5Q2hhaW4iOlsiZG9hcyJdLCJwcmltYXJ5QXV0aFR5cGUiOiJwc20iLCJwc20iOiJkcC5kYXRhX3NlcnZpY2UuYXBpIiwidXNlciI6ImNoZW54aWFucXVhbiIsImV4cGlyZVRpbWUiOjE2NzExODMxOTl9.WiUPWgLRWkcUcwAa0UUrZ_jgOB7nMcqdrk6KD8mYdmE38J_QS1wwArf_gRmmFK7xnPTNM90YdplN04C29A_ca4ev9SUWgoj4tGJw0Mk2qMXYOwxlYAyt-19lMxSF5Gc-bc5yPBettpsFIM0ZKxX0WPgmlYpj9HUvvMpY-MB1C402s-RHMSkpq3e2c7ADSkHCUGbYoIjtroHURKnq4rzdCWhKhDeUk8J1lM1TUGFK_Zb91afxvxIdIHtHcq4j2pDoMYBBFE3S6fG4dqKPWMvHMw7-tKenWxlRLiyY9qQueOpVswFjVwTHJynI08d1VCRf-9f286fAKusK4ATbHvO8vg' \\\n--data-raw '{\n    \"query_id\":\"7108706518425535501\",\n    \"version\": \"1\"\n}'",
        "output": "<thought>\n我们需要将curl请求转换为RobotFramework的自动化测试脚本。首先，我们需要使用`UiSendRequest`关键字来发送HTTP POST请求。我们将请求的URL、请求头和请求体作为参数传递给该关键字。URL是`https://xxx.yyy.zzz.com/invoker_server/openapi/v1/query/getInfo`，请求头包括`Content-Type`和`x-jwt-token`，请求体是一个包含`query_id`和`version`的JSON对象。\n</thought>\n\n<code_block>\n# 发送POST请求到指定的URL，包含请求头和请求体\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/invoker_server/openapi/v1/query/getInfo | {\"query_id\":\"7108706518425535501\",\"version\": \"1\"} | {\"Content-Type\": \"application/json\", \"x-jwt-token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZXJzaW9uIjowLCJhdXRob3JpdHkiOiJET0FTIiwiYXV0aG9yaXR5Q2hhaW4iOlsiZG9hcyJdLCJwcmltYXJ5QXV0aFR5cGUiOiJwc20iLCJwc20iOiJkcC5kYXRhX3NlcnZpY2UuYXBpIiwidXNlciI6ImNoZW54aWFucXVhbiIsImV4cGlyZVRpbWUiOjE2NzExODMxOTl9.WiUPWgLRWkcUcwAa0UUrZ_jgOB7nMcqdrk6KD8mYdmE38J_QS1wwArf_gRmmFK7xnPTNM90YdplN04C29A_ca4ev9SUWgoj4tGJw0Mk2qMXYOwxlYAyt-19lMxSF5Gc-bc5yPBettpsFIM0ZKxX0WPgmlYpj9HUvvMpY-MB1C402s-RHMSkpq3e2c7ADSkHCUGbYoIjtroHURKnq4rzdCWhKhDeUk8J1lM1TUGFK_Zb91afxvxIdIHtHcq4j2pDoMYBBFE3S6fG4dqKPWMvHMw7-tKenWxlRLiyY9qQueOpVswFjVwTHJynI08d1VCRf-9f286fAKusK4ATbHvO8vg\"}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开https://life.douyin.com/h5/seckill/list，点击创建秒杀，找到placeholder是商品名称的input，点击然后输入234",
        "output": "<thought>\n在这个场景中，我需要完成以下步骤：\n1. 打开指定的URL。\n2. 点击页面上的“创建秒杀”按钮。\n3. 找到placeholder为“商品名称”的输入框。\n4. 点击该输入框，然后输入“234”。\n\n首先使用`OpenUrl`关键字打开页面，然后使用`Click`关键字点击“创建秒杀”按钮。接着，使用`FindElem`关键字找到placeholder为“商品名称”的input栏，最后使用`FillArea`关键字完成输入操作。\n</thought>\n\n<code_block>\n# 打开指定的URL\nOpenUrl | https://life.douyin.com/h5/seckill/list\n\n# 点击“创建秒杀”按钮\nClick | 创建秒杀\n\n# 找到placeholder为“商品名称”的input并输入234\n${input_elem}  FindElem | input[placeholder='商品名称']\nFillArea | ${input_elem} | 234\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "让某个文本出现在视野中",
        "output": "<thought>\n将某个元素或文本移动到视野中，可以使用MoveIntoView关键字。这个关键字接受一个基于jQuery的选择器作为参数，将该元素移动到视野中。\n\n首先，我们需要确定要移动到视野中的具体元素，这里我们假设使用文本“操作日志”作为案例。可以通过jQuery选择器`:contains(操作日志)`来选择包含“操作日志”文本的元素。然后使用MoveIntoView关键字将它移动到视野中。\n\n需要注意的是，选择器应唯一且准确地指向目标元素，以避免移动其他不相关的元素。\n</thought>\n\n<code_block>\n# 将文本“操作日志”移动到视野中\nMoveIntoView | :contains(操作日志)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“取消” 右侧 25 像素的位置\n\n提示：先将鼠标移动到 取消 右边 25像素的位置，然后就地点击",
        "output": "<thought>\n为了实现点击“取消”右侧25像素的位置，我们可以分两步完成：首先使用MoTo关键字将鼠标移动到“取消”的右边25像素的位置，然后使用MClick关键字进行点击。\n</thought>\n\n<code_block>\n# 将鼠标移动到“取消”右边25像素的位置\nMoTo | 取消 | dx=25\n\n# 在当前位置点击鼠标\nMClick\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 第2个 Business mode 右边的筛选小图标",
        "output": "<thought>\n为了实现点击第2个“Business mode”右边的筛选icon的操作，我们需要使用ClickIconToTheDirectionOf关键字。首先，我们通过:contains(Business mode):eq(1)定位到第二个“Business mode”元素，然后指定方向为right，目标是icon，icon名称是 filter。\n</thought>\n\n<code_block>\n# 点击第2个“Business mode”右边的筛选icon\nClickIconToTheDirectionOf | :contains(Business mode):eq(1) | right | filter\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "身高表截图",
        "output": "<thought>\n这个场景要求对一个名为“身高”的表格进行截图。根据提供的关键字，应该使用`TableScreenshot`关键字，并指定表格名称为“身高”。\n</thought>\n\n<code_block>\n# 身高表截图\nTableScreenshot | tbl=身高\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新打开的窗口, 点击 yangyi 下面的 启动ComfyUI, 设置请选择标签为：batch",
        "output": "<thought>\n首先，使用`ToNewWindow`关键字来切换到新打开的窗口。接着，使用`ClickTextToTheDirectionOf`关键字来点击\"yangyi\"下面的\"启动ComfyUI\"。最后，使用`SetField`关键字设置\"请选择标签\"为\"batch\"。\n</thought>\n\n<code_block>\n# 切换到新窗口\nToNewWindow\n\n# 点击 yangyi 下面的 启动ComfyUI\nClickTextToTheDirectionOf | yangyi | bottom | 启动ComfyUI\n\n# 设置请选择标签为：batch\nSetField | 请选择标签 | batch\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "移开光标，将其移到空白处点击",
        "output": "<thought>\n为了实现将光标移到空白处并点击这一操作，我们可以使用提供的关键字。首先，我们需要将光标移动到一个特定的文本或元素上，然后使用`ClickWhiteArea`关键字在空白处点击。由于我们没有指定的文本或元素，所以我们假设光标当前在某个地方。我们直接使用`ClickWhiteArea`就能完成任务。\n</thought>\n\n<code_block>\n# 点击空白区域\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入密码 ${ADMIN_PASSWORD}，然后回车",
        "output": "<thought>\n任务是向页面中的字段输入密码并回车。根据描述，应该使用`SetField`关键字，因为它适用于向有名称的页面字段中填写值，并且可以利用`enter=True`参数来模拟回车操作。\n</thought>\n\n<code_block>\n# 输入'密码'并回车\nSetField | 密码 | ${ADMIN_PASSWORD} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "「全球(不含中国内地)」  右侧的下拉框选择：全部",
        "output": "<thought>\n根据题目描述，我们需要操作下拉框选择“全部”。\n使用SetField关键字，name输入“全球(不含中国内地)”，args输入“全部”。这样就可以模拟用户的操作，选择下拉框的全部选项。\n</thought>\n\n<code_block>\n# 选择全球(不含中国内地)右侧的下拉框为：全部\nSetField | 全球(不含中国内地) | 全部 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现 仅展示权限范围内的合同 ，点击弹窗中的 已签署合同 右边的查看详情，选择 Refund 并点击Ok",
        "output": "<thought>\n此场景需要通过等待文本出现，然后在弹窗中点击特定文本的“查看详情”按钮，以及选择一个选项并确认。一开始，需要等待页面出现“仅展示权限范围内的合同”。然后在弹窗中，需要找到“已签署合同”右侧的“查看详情”按钮进行点击，再选择Refund选项并点击Ok按钮，需要用到Click系列和SelectOption关键字。具体步骤如下：\n1. 使用`WaitText`关键字等待文本“仅展示权限范围内的合同”出现。\n2. 使用`ClickTextToTheDirectionOf`关键字，查找“已签署合同”右侧的“查看详情”并点击。\n3. 使用`SelectOption`关键字选择Refund。\n4. 使用`Click`关键字点击Ok。\n</thought>\n\n<code_block>\n# 等待出现文本“仅展示权限范围内的合同”\nWaitText | 仅展示权限范围内的合同\n\n# 点击弹窗中“已签署合同”右边的“查看详情”\nClickTextToTheDirectionOf | 已签署合同 | right | 查看详情 | base=POPUP\n\n# 选择Refund选项\nSelectOption | Refund\n\n# 点击Ok按钮\nClick | Ok\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击管理分类",
        "output": "<thought>\n在这个场景中，我们需要点击文本“管理分类”。使用Click关键字可以实现这一点。假设“管理分类”是一个唯一的文本，因此可以直接点击该文本。\n</thought>\n\n<code_block>\n# 点击管理分类\nClick | 管理分类\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取 ${elem} 的图片，命名为：图1，并和基准图对比",
        "output": "<thought>\n在这个场景中，我们需要截取一个元素的图片，使用ImageDiff关键字，并指定pic_name为“图1”，还要进行基准图对比。下面是针对这个任务的代码实现。\n</thought>\n\n<code_block>\n# 截取 ${elem} 的图片，命名为：图1，并和基准图对比\nImageDiff | ${elem} | pic_name=图1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹框中 ‘修改姓名’ 上方 20 像素的位置\n\n提示：先把鼠标移动到弹框中的给定偏移量的位置，然后就地点击",
        "output": "<thought>\n我们需要在弹框中定位到“修改姓名”这一文本，然后通过偏移量移动到该文本上方20个像素的位置，最后在移动的位置进行鼠标点击。可以使用`MoTo`关键字来移动鼠标，并通过`dy`参数进行垂直方向的偏移。接着使用`MClick`关键字在当前位置进行点击。\n</thought>\n\n<code_block>\n# 移动鼠标到弹窗中“修改姓名”上方20px处\nMoTo | 修改姓名 | dy=-20 | base=POPUP\n\n# 在当前位置进行鼠标点击\nMClick\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传最后一个图片 ${IMAGE_URL}，, 如果页面出现裁剪图片，就点击确定",
        "output": "<thought>\n我将使用以下关键字来完成这个任务：\n- `UploadFile`，上传图片 ${IMAGE_URL}，使用 idx=-1 来表示最后一个文件上传控件\n- `IsAnyTextExisting`，用来判断页面上是否存在文本“裁剪图片”\n- RF的内置IF/ELSE语法，如果页面上存在文本“裁剪图片”，就点击确定\n</thought>\n\n<code_block>\n# 上传图片\nUploadFile | ${IMAGE_URL} | idx=-1\n\n# 检查是否存在文本'裁剪图片'\n${exist}  IsAnyTextExisting | 裁剪图片\n\n# 如果存在'裁剪图片'，则点击'确定'\nIF  ${exist}\n    Click  确定\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选弹窗中的 PR2408040100-1 表格行，然后设置此行中的本次下单数量为：5",
        "output": "<thought>\n首先需要勾选弹窗中的指定表格行，可以用`ClickElemOfRow`关键字来实现。然后，需要在刚选中的行中设置单元格的值为5，这可以使用`FillCell`关键字。\n</thought>\n\n<code_block>\n# 勾选弹窗中的 PR2408040100-1 表格行\nClickElemOfRow | PR2408040100-1 | :checkbox | base=POPUP\n\n# 设置此行中的本次下单数量为：5\nFillCell | PR2408040100-1 | 本次下单数量 | 5 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${select_elem}页面元素中的表格有5行",
        "output": "<thought>\n要校验一个特定元素中的表格行数是否为5，可以使用CheckRowCount关键字。由于表格位于${select_elem}元素中，需要将其作为base参数传递。具体步骤：\n1. 使用CheckRowCount关键字\n2. 设置num参数为5\n3. 将${select_elem}作为base参数传递\n</thought>\n\n<code_block>\n# 校验${select_elem}元素中的表格有5行\nCheckRowCount | 5 | base=${select_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待3分钟",
        "output": "<thought>\n该场景要求等待3分钟，所以我们可以使用Sleep关键字来实现。Sleep关键字允许我们指定等待的时间长度。我们只需要传入3分钟的时间即可。\n\n</thought>\n\n<code_block>\n# 按照要求等待3分钟\nSleep  3min\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个八位长的随机字母字符串，全小写",
        "output": "<thought>\n为了生成一个八位长的随机字母字符串，且全为小写，我选择使用 GenerateRandom 关键字，并设置所需的长度为8，字符集为小写字母 [LOWER]。\n</thought>\n\n<code_block>\n# 生成长度为8的随机小写字母字符串\n${random_lowercase}  GenerateRandom  | 8 | [LOWER]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到新建上，并点击新建任务",
        "output": "<thought>\n此场景要求鼠标先移动到“新建”上，然后点击“新建任务”。可以使用“MoTo”关键字移动到“新建”文本上，再使用“Click”关键字点击“新建任务”。\n</thought>\n\n<code_block>\n# 移动到 新建 文本\nMoTo | 新建\n\n# 点击 新建任务\nClick | 新建任务\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置标签为：xx  yy  zz  ww",
        "output": "<thought>\n这个问题比较简单，只需要用SetField关键字进行设置即可，因为我们需要设置的是标签，所以name设为\"标签\"，将\"xx\",\"yy\",\"zz\"和\"ww\"作为参数进行传递。\n</thought>\n\n<code_block>\n# 设置标签为：xx  yy  zz  ww\nSetField | 标签 | xx | yy | zz | ww\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置分布区间”，接受 type 和 args 参数，主要逻辑是：\n1. 先点击分布区间按钮，然后判断 type 是否包含 ‘快捷’，如果包含就向组数中输入给定的参数 args, \n2. 否则就先点击自定义区间，然后根据args参数的个数count，点击count-1次加号，每次间隔0.5s, 然后对于args中的每个值，按顺序分别找到一个div class包含FilterDistributeRange__rightInput的元素进行输入\n3. 最后点击确定",
        "output": "设置分布区间\n    [Arguments]  ${type}  @{args}\n    Click  |  分布区间\n    ${is_quick}  Evaluate  '${type}'.find('快捷') >= 0\n    IF  ${is_quick}\n        SetField  |  组数  |  ${args[0]}\n    ELSE\n        Click  |  自定义区间\n        ${count}  Evaluate  len(${args}) - 1\n        FOR  ${i}  IN RANGE  ${count}\n            ClickIcon | plus\n            Sleep  |  0.5s\n        END\n        ${j}  Set Variable  ${0}\n        FOR   ${item}  IN  @{args}\n           FillArea  div[class*='FilterDistributeRange__rightInput']:eq(${j})  ${item}\n           ${j}  Set Variable  ${j + 1}\n        END\n    END\n    Click  |  确定"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在“结果统计”下方的“开始日期”中输入“${start_date} | ${end_date}”",
        "output": "<thought>\n1. 首先需要定位到\"结果统计\"下方的\"开始日期\"字段\n2. 可以使用`SetField`关键字，因为它专门用于操作页面字段\n3. 需要设置`near`参数为\"结果统计\"来定位字段位置\n4. 需要输入两个日期值，用\"|\"分隔，可以直接作为参数传递\n5. 不需要回车操作，所以`enter`参数保持默认False\n</thought>\n\n<code_block>\n# 在\"结果统计\"下方的\"开始日期\"中输入日期范围\nSetField | 开始日期 | ${start_date} | ${end_date} | near=结果统计\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ${approve_user} 变量值为 ${approve_user_1}",
        "output": "<thought>\n该场景需要将变量`${approve_user}`设置为已有变量`${approve_user_1}`的值。因此，可以使用`Set Variable`关键字来完成这一任务。\n</thought>\n\n<code_block>\n# 将变量${approve_user}设置为${approve_user_1}的值\n${approve_user}  Set Variable  ${approve_user_1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "从 file1.txt 文件读取内容写入变量 ${xx} 中",
        "output": "<thought>\n为了从文件中读取内容并将其存入变量，我们可以使用Robot Framework中的BuiltIn库和OperatingSystem库中的关键字。具体来说，我们可以使用OperatingSystem库中的\"Get File\"关键字来读取文件内容，然后将结果存入变量中。根据给出的代码示例，可以使用\"Set Variable\"关键字将读取的内容赋值给目标变量。\n</thought>\n\n<code_block>\n# 从文件file1.txt读取内容并赋值给变量${xx}\n${xx}  Get File  file1.txt\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置产品审批人  yinpengcheng.123@bytedance.com 回车，如果执行失败则进行一次重试",
        "output": "<thought>\n我们需要使用`SetField`来设置产品审批人，并输入回车。为了实现重试机制，可以利用`TRY/EXCEPT`结构。如果设置失败，就在`EXCEPT`中重试一次。\n</thought>\n\n<code_block>\n# 尝试设置产品审批人\nTRY\n    SetField | 产品审批人 | yinpengcheng.123@bytedance.com | enter=True\nEXCEPT\n    # 如果失败，重试一次\n    SetField | 产品审批人 | yinpengcheng.123@bytedance.com | enter=True\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选我接受",
        "output": "<thought>\n根据给定的关键字描述和示例代码，勾选复选框的操作可以通过使用`CheckBoxOn`关键字来完成。因为题目中提供的操作是\"勾选我接受\"，可以直接使用类似于示例中的方式来解决这个问题。\n</thought>\n\n<code_block>\n# 勾选 “我接受”\nCheckBoxOn | 我接受\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${login_user} 不为空，则调用 打开浏览器登录飞书 关键字，入参： feishu_url=${login_user}",
        "output": "<thought>\n首先需要判断变量`${login_user}`是否为空。根据条件，如果不为空，就使用给定参数运行关键字：`打开浏览器登录飞书`。\n</thought>\n\n<code_block>\n# 判断${login_user}是否为空\nIF  \"${login_user}\" != \"\"\n    # 调用关键字：打开浏览器登录飞书，参数为 feishu_url=${login_user}\n    打开浏览器登录飞书 | feishu_url=${login_user}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在一个或多个class为arco-icon-close的按钮，点击它，直到没有\n\n提示：不能使用 WHILE 循环，会造成死循环，使用 FOR 循环，假设上限为 20，此外点击时候要倒序点击，避免元素数量变化",
        "output": "<thought>\n解决问题思路：首先获取class为arco-icon-close的按钮数量，然后按照倒序依次点击这些按钮。定义一个上限为20的循环来避免死循环问题。通过获取元素的总数并倒序点击元素，可以防止由于页面变化导致的元素索引不准确。\n</thought>\n\n<code_block>\n# 获取class为arco-icon-close的按钮数量\n${count}  GetElemCount  [class=arco-icon-close]\n\n# 如果count大于0，开始循环，倒序点击按钮\nFOR  ${index}  IN RANGE  ${count-1}  -1  -1\n    # 获取并点击第index个元素\n    ClickElem  [class=arco-icon-close]:eq(${index})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "剔除 ${val} 中的所有非数字字符，将剩下的字符转换成 int，校验它 > 0",
        "output": "<thought>\n为了实现从`${val}`中剔除所有非数字字符，并将剩下的数字字符串转换成整数后进行校验，我们可以使用`Evaluate`执行Python代码。首先，利用`filter`函数结合`str.isdigit`方法来提取`${val}`中的数字字符，然后使用`int`函数将得到的字符串转换成整数。最后，用`Should Be True`关键字来校验转换后的整数是否大于0。\n</thought>\n\n<code_block>\n# 剔除`${val}`中的所有非数字字符并转换为整数\n${cleaned_val}  Evaluate  ''.join(filter(str.isdigit, '''${val}'''))\n\n# 将结果转换为整数\n${int_val}  Evaluate  int('''${cleaned_val}''')\n\n# 校验结果是否大于0\nShould Be True  ${int_val} > 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“设置自定义标签基本信息” 的关键字，接受 show_name、name、period、desc 四个参数，业务逻辑是：\n1. 设置 ‘展示名’ 为 show_name\n1. 设置 ‘标签名’ 为 name\n2. 如果 desc 不为空，就把 ‘标签描述’ 设置为 desc，否则就把 ‘标签描述’ 设置为 name + '的标签描述'\n3. 如果 period 不为空，就把 ‘计算周期’ 设置为 period",
        "output": "<thought>\n要根据描述编写一个包含逻辑判断的Robot Framework关键字，使用SetField来设置页面字段，使用IF/ELSE语句来处理条件逻辑。四个参数分别用于设置展示名、标签名、标签描述和计算周期。检查desc是否为空，设置相应的标签描述。如果period不为空，则设置计算周期。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置自定义标签基本信息\n    [Arguments]    ${show_name}    ${name}    ${period}    ${desc}\n    # 设置展示名\n    SetField    展示名    ${show_name}\n    # 设置标签名\n    SetField    标签名    ${name}\n    # 如果标签描述为空，设置为name的标签描述，否则设置为desc\n    IF    '${desc}' != ''\n        SetField    标签描述    ${desc}\n    ELSE\n        SetField    标签描述    ${name}的标签描述\n    END\n    # 如果计算周期不为空，设置为period\n    IF    '${period}' != ''\n        SetField    计算周期    ${period}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 向文件 xx 中追加内容：${content}",
        "output": "\n    \n<thought>\n 为了实现向文件中追加内容，可以使用`Evaluate`关键字来执行Python代码。Python提供了文件操作的功能，可以很方便地实现文件内容的追加。\n </thought>\n \n <code_block>\n # 向文件 xx 中追加内容：${content}\n Evaluate  | open('xx', 'a').write($content)\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在文本：‘以下权限无法申请’，就点击 ${申请的数据表} 所在表格行中的 删除 icon",
        "output": "<thought>\n首先需要判断页面是否存在“以下权限无法申请”这一文本。如果存在，则需要执行点击操作。对于点击操作，根据给定的描述，需要先找到 `${申请的数据表}` 所在的表格行，然后在该行中查找并点击“删除”图标。为此，可以使用 `IsAnyTextExisting` 关键字判断文本存在，并使用 `ClickIconOfRow` 关键字点击图标。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本：‘以下权限无法申请’\n${exist}  IsAnyTextExisting | 以下权限无法申请\nIF  $exist\n    # 点击 ${申请的数据表} 所在表格行中的 删除 icon\n    ClickIconOfRow | ${申请的数据表} | delete\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的空白位置",
        "output": "<thought>\n要点击弹窗中的空白位置，我们可以使用ClickWhiteArea关键字，但是我们需要指定基准元素为弹窗，所以我们需要使用base=POPUP参数。\n</thought>\n\n<code_block>\n# 点击弹窗中的空白位置\nClickWhiteArea | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在名称中输入：自定义列，然后点击 icon-more，接着点击 ‘查看线上’",
        "output": "<thought>\n首先要在名称字段中输入“自定义列”，可以使用 `SetField` 关键字。接着需要点击“icon-more”图标，可以使用 `ClickIcon` 关键字。最后是点击名为“查看线上”的文本，可以使用 `Click` 关键字。\n</thought>\n\n<code_block>\n# 在名称字段中输入“自定义列”\nSetField | 名称 | 自定义列\n\n# 点击 icon-more 图标\nClickIcon | more\n\n# 点击 “查看线上” 文本\nClick | 查看线上\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含：wf-as-room-entry-text的div中的svg",
        "output": "<thought>\n为了完成这个任务，我们需要点击class包含\"wf-as-room-entry-text\"的div中的svg。可以使用`ClickElem`关键字，并且通过jquery选择器来定位目标元素。我们将创建一个jquery选择器来选择目标元素。\n</thought>\n\n<code_block>\n# 点击class包含\"wf-as-room-entry-text\"的div中的svg\nClickElem | div[class*='wf-as-room-entry-text'] svg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面成功弹出了列表",
        "output": "<thought>\n要检查页面是否成功弹出了列表，根据关键字描述，可以使用`IsPopupExists`关键字来判断页面是否存在弹窗。这个关键字专门用于检测弹窗的存在性，符合当前场景的需求。不需要指定text参数，因为我们只需要确认弹窗存在即可，不需要验证弹窗内容。\n</thought>\n\n<code_block>\n# 检查页面是否存在弹窗\n${status}  IsPopupExists\nShould Be True  ${status}  # 验证弹窗存在\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到“近30日音浪收入”右边的“问号”按钮上",
        "output": "<thought>\n首先需要移动到“近30日音浪收入”右边的“问号”按钮上，可以使用MoToIconToTheDirectionOf关键字，基准元素为“近30日音浪收入”，方向为right，图标名称为question 或 help。\n</thought>\n\n<code_block>\n# 鼠标移动到“近30日音浪收入”右边的“问号”按钮上\nMoToIconToTheDirectionOf | 近30日音浪收入 | right | question\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“添加自定义产品”的关键字，接受参数keyword，业务逻辑为：如果 添加自定义产品 按钮没有置灰展示，就点击添加自定义产品，keyword中有一系列key和value ，将每一个value值输入key字段中，然后点击保存基本信息，检查名为类型的列名中包含 自定义、唯一键的列名中包含 CDP、产品名称-中文中包含 客户数据平台",
        "output": "<thought>\n要实现这个任务，我们需要创建一个关键字“添加自定义产品”，接受一个参数keyword。首先，我们需要判断“添加自定义产品”按钮是否置灰，如果没有置灰，则点击该按钮。接着，根据keyword中的key和value，将每个value输入到对应的key字段中。最后，点击保存基本信息，并检查表格中列名为“类型”的列是否包含文本“自定义”，列名为“唯一键”的列是否包含“CDP”，列名为“产品名称-中文”的列是否包含“客户数据平台”。为此，我们需要用到以下关键字：`IsAnyElemExisting`、`Click`、`SetField`、`CheckColHas`。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加自定义产品\n    [Arguments]  &{keyword}\n\n    # 判断 添加自定义产品 按钮是否未置灰\n    ${exist}  IsAnyElemExisting  button:contains(添加自定义产品):not([disabled])\n    IF  ${exist}\n        # 点击 添加自定义产品 按钮\n        Click  添加自定义产品\n\n        # 遍历keyword中的键值对，并填入对应字段\n        FOR  ${key}  ${value}  IN  &{keyword}\n            SetField  ${key}  ${value}\n        END\n\n        # 点击 保存基本信息\n        Click  保存基本信息\n\n        # 检查表格列中的文本\n        CheckColHas  类型  自定义\n        CheckColHas  唯一键  CDP\n        CheckColHas  产品名称-中文  客户数据平台\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 第一个 下载 小图标",
        "output": "<thought>\n为了点击弹窗中的第一个下载图标，可以使用 `ClickIcon` 关键字，并指定 `base=POPUP` 来定位到弹窗。由于我们需要点击第一个下载图标，可以使用 `idx=0`。因此，最直接的关键字就是 `ClickIcon | download | idx=0 | base=POPUP`。\n</thought>\n\n<code_block>\n# 点击弹窗中的第一个下载icon\nClickIcon | download | idx=0 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "去除变量item前后的空白字符",
        "output": "<thought>\n为了去除变量item前后的空白字符，可以使用内置关键字Strip String。\n</thought>\n\n<code_block>\n# 去除item前后的空白字符\n${trimmed_item}  Strip String  ${item}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验所有的表格数据，商机报备状态这一栏是不是都是审核中。提示：可以先获取表格列的值，然后校验每个值都包含‘审核中’",
        "output": "<thought>\n首先，使用 `GetColValues` 获取表格中商机报备状态这一列的所有值，然后使用 `Should Contain` 校验每个值都包含‘审核中’。\n</thought>\n\n<code_block>\n# 获取表格中商机报备状态这一列的所有值\n@{status_values}  GetColValues | 商机报备状态\n\n# 校验每个值都包含‘审核中’\nFOR  ${status}  IN  @{status_values}\n    Should Contain  ${status}  审核中\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 对cookie进行解密",
        "output": "<thought>\n 为了对cookie进行解密，我们可以使用提供的DecryptStr关键字。首先需要获取cookie的加密字符串，然后使用DecryptStr进行解密。\n </thought>\n \n <code_block>\n # 获取cookie加密字符串（假设已用变量${encrypted_cookie}存储）\n ${encrypted_cookie}  Get Cookie Value | your_cookie_name\n \n # 解密cookie\n ${decrypted_cookie}  DecryptStr | ${encrypted_cookie}\n \n # 打印解密后的cookie\n Log | ${decrypted_cookie}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击距离 fengyinjie 右边 35 像素的地方",
        "output": "<thought>\n在这个场景中，我们需要在页面上找到一个名为\"fengyinjie\"的基准元素，然后点击其右边35个像素的位置。这个操作可以通过`ClickDirection`关键字实现。`ClickDirection`关键字允许我们指定基准元素，以及从该元素偏移一定像素距离后的位置进行点击。在这里，the_base将是\"fengyinjie\"，direction是\"right\"，和delta是35像素。\n</thought>\n\n<code_block>\n# 点击距离 fengyinjie 右边 35 像素的地方\nClickDirection | fengyinjie | right | delta=35\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查提交按钮是可提交的",
        "output": "<thought>\n检查提交按钮是可提交的，可以使用CheckHasElem关键字来校验页面包含表示提交按钮的jquery选择器，并且可以通过CheckNotHasElem关键字来校验页面不包含-disabled属性的提交按钮选择器，表示按钮是禁用的。将选择器定义为变量以提升复用性。\n</thought>\n\n<code_block>\n# 定义提交按钮选择器变量\n${submit_btn_selector}   Set Variable  button:contains(提交)\n\n# 校验页面包含提交按钮\nCheckHasElem  ${submit_btn_selector}\n\n# 校验页面不包含禁用的提交按钮\nCheckNotHasElem  button:contains(提交)[disabled]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取第四个表格第3行中age值",
        "output": "<thought>\n要获取第四个表格第3行中age值，可以使用`GetCellValue`关键字。需要指定表格、行号和列名。行号为3，列名为age。\n</thought>\n\n<code_block>\n# 获取第四个表格第3行中age值\n${val}  GetCellValue | 3 | age | tbl=4\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将“入驻意愿”往上滚动到最顶层",
        "output": "<thought>\n要将“入驻意愿”文案滚动到最顶层，我们可以先定位到包含“入驻意愿”的元素。然后，我们使用 `ScrollUpDown` 关键字将包含该元素的区域向上滚动到最顶层。 首先使用 `FindByText` 定位到“入驻意愿”所在的元素，然后使用 `ScrollUpDown` 实现滚动。\n</thought>\n\n<code_block>\n# 查找文本为“入驻意愿”的元素\n${elem}  FindByText | 入驻意愿\n\n# 将该元素向上滚动到最顶层\nScrollUpDown | ${elem} | 0%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 向 ‘自定义字段配置’ 表格的第一行中输入多个值：key1, value1",
        "output": "<thought>\n 为了向表格的第一行输入多个值，可以使用`FillRow`关键字。首先确定表格的基准元素`base`是否需要设置，如果不需要，可以直接使用默认值。然后使用`FillRow`关键字，指定第一行，并输入`key1`和`value1`作为参数。\n </thought>\n \n <code_block>\n # 向‘自定义字段配置’表格的第一行输入key1和value1\n FillRow | 1 | key1 | value1 | tbl=自定义字段配置\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个关键字 ‘点击创建合同’，逻辑：点击创建合同，如果‘出现上传合同文件’，则结束该关键字，如果不出现‘上传合同文件’，则等待5s循环，最多12次循环",
        "output": "<thought>\n为了实现这个任务，需要创建一个自定义关键字“点击创建合同”。首先，我们将点击“创建合同”文本，然后检查“上传合同文件”文本是否存在。如果存在，关键字执行结束。如果不存在，则等待5秒钟，至多循环12次以检查文本是否出现。我们将使用Click、IsAnyTextExisting和Sleep等关键字来实现这个逻辑。\n</thought>\n\n<code_block>\n*** Keywords ***\n点击创建合同\n    [Documentation]  点击创建合同，如果出现上传合同文件，则结束该关键字，如果不出现上传合同文件，则等待5s循环，最多12次循环\n    Click  创建合同\n    FOR  ${index}  IN RANGE  12\n       ${exist}=  IsAnyTextExisting  上传合同文件\n       IF  ${exist}\n           Exit For Loop\n       ELSE\n           Sleep  5s\n       END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选中第一个单元格",
        "output": "<thought>\n根据提示，目标是选中第一个单元格。在给定的关键字中，选择单元格的关键字没有直接的实现方法。但是，我们可以使用SelectTableRow关键字选中第一行，然后假设通过这种方式间接实现选中第一个单元格的效果。这里不需要特别针对列进行操作，因为选中整行也能覆盖需求。\n</thought>\n\n<code_block>\n# 选择表格的第一行，这样能选中第一个单元格\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "元素${elem}向右滚动到80%处",
        "output": "<thought>\n我们需要将元素${elem}向右滚动到80%处，可以直接使用提供的关键字ScrollLeftRight，传递selector为${elem}和percent为80%。\n</thought>\n\n<code_block>\n# 将元素${elem}向右滚动到80%处\nScrollLeftRight | ${elem} | 80%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "请选择商机报备状态，选择创建失败",
        "output": "<thought>\n需要选择商机报备状态为“创建失败”，可以使用`SelectOptionForField`关键字，通过指定字段名称和选项值来完成选择。\n</thought>\n\n<code_block>\n# 选择商机报备状态为创建失败\nSelectOptionForField | 商机报备状态 | 创建失败\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向第一个class包含ff-feature-variant的元素中的那个 “特征值” 字段中输入：xx",
        "output": "<thought>\n对于这个问题，我们需要在第一个class包含“ff-feature-variant”元素中的“特征值”字段中输入“xx”。我们可以分解为以下步骤：\n\n1. 使用jQuery选择器定位到class包含“ff-feature-variant”的第一个元素。\n2. 使用SetField关键字在该元素中的“特征值”字段中输入“xx”。\n\n需要注意的是，选择器对应的第一个元素应表示为:eq(0)。\n</thought>\n\n<code_block>\n# 定位到class包含“ff-feature-variant”的第一个元素，并在其中的“特征值”字段中输入“xx”\nSetField | 特征值 | xx | base=[class*=ff-feature-variant]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面包含coral_auto_business，就点击coral_auto_business所在行的删除按钮，点击确定，检查页面包含删除成功",
        "output": "<thought>\n首先，使用关键字 `IsAnyTextExisting` 判断页面是否包含 `coral_auto_business`。如果存在，则需要在包含该文本的行中点击删除按钮，可以使用 `ClickElemOfRow` 关键字。然后点击确认，这可以通过 `Click` 关键字完成。最后，验证页面是否包含 \"删除成功\"，可以使用 `CheckHasText` 关键字。\n</thought>\n\n<code_block>\n# 判断页面是否存在 coral_auto_business 文本\n${exist}  IsAnyTextExisting  coral_auto_business\n\n# 如果存在，则进行删除操作\nIF  ${exist}\n    # 点击 coral_auto_business 所在行的删除按钮\n    ClickElemOfRow  coral_auto_business  button:contains(删除)\n    \n    # 点击确认\n    Click  确定\n    \n    # 检查页面是否包含 删除成功 文本\n    CheckHasText  删除成功\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 admin 行中的 编辑 icon",
        "output": "<thought>\n首先，需要在“admin”所在的表格行中找到“编辑”icon。根据需求，可使用`ClickIconOfRow`关键字，提供“admin”作为行标识符，\"编辑\"作为图标名称。\n</thought>\n\n<code_block>\n# 点击 admin 行中的 编辑 icon\nClickIconOfRow | admin | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击更多小图标，点击详情，等待1s，页面包含年月日格式的日期。提示：需要先获取页面文本，然后用正则表达式校验是否包含给定格式的日期",
        "output": "\n    \n<thought>\n 首先，我们需要点击“更多”图标，可以使用`ClickIcon`关键字。然后点击“详情”，可以使用`Click`关键字。随后，等待1秒钟，用`Sleep`关键字实现。最后，获取页面文本并用正则表达式检查文本中是否包含日期格式。可以通过`GetPageText`获取页面文本，并用`Should Match Regexp`校验日期格式。\n </thought>\n \n <code_block>\n # 点击更多icon\n ClickIcon | more\n \n # 点击详情\n Click | 详情\n \n # 等待1秒\n Sleep | 1s\n \n # 获取页面文本\n ${page_text} | GetPageText\n \n # 校验页面文本中是否包含年月日格式的日期\n Should Match Regexp | ${page_text} | \\\\d{4}-\\\\d{2}-\\\\d{2}\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击移动分组，点击元素class=\"arco-switch arco-switch-type-circle\"，等待2min，点击保存",
        "output": "<thought>\n根据给定的场景，我们需要执行以下步骤：\n1. 点击文本“移动分组”。\n2. 点击class为\"arco-switch arco-switch-type-circle\"的元素。\n3. 等待2分钟。\n4. 点击文本“保存”。\n\n我们将使用Click关键字来点击指定的文本，使用ClickElem关键字来点击指定class的元素，使用Sleep来等待指定时间。确保这些步骤按照顺序执行。\n</thought>\n\n<code_block>\n# 点击移动分组\nClick | 移动分组\n\n# 点击class为\"arco-switch arco-switch-type-circle\"的元素\nClickElem | [class=arco-switch arco-switch-type-circle]\n\n# 等待2分钟\nSleep | 2min\n\n# 点击保存\nClick | 保存\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送post请求给 https://e168-6-28finder.datarangers-onpremise.volces.com/datafinder/api/v1/projects/4/metrics，携带参数为content",
        "output": "<thought>\n根据要求，需要使用`UiSendRequest`关键字来发送一个POST请求到指定的URL，并携带请求体参数。首先，创建请求体的内容，然后使用关键字发送请求。\n</thought>\n\n<code_block>\n# 定义请求的URL\n${url}  Set Variable  https://e168-6-28finder.datarangers-onpremise.volces.com/datafinder/api/v1/projects/4/metrics\n\n# 定义请求体的内容\n${body}  Set Variable  {\"content\": \"your_content_here\"}\n\n# 发送POST请求\n${resp_json}  UiSendRequest | POST | ${url} | ${body}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“执行组合插件校验看板时间”的关键字，作用是先点击请输入流水线名称，然后输入刷新看板完成时间后点击回车，等待页面加载完成后点击执行，等待1秒后点击请选择日期，等待1秒后点击今天，最后点击执行按钮，等待3秒后校验执行状态列为成功",
        "output": "<thought>\n为了解决这个问题，我们需要按照给定的操作步骤依次调用对应的关键字。在执行过程中，我们需要：\n1. 点击文本“请输入流水线名称”\n2. 输入“刷新看板完成时间”并回车\n3. 等待页面加载完成\n4. 点击文本“执行”\n5. 等待1秒\n6. 点击文本“请选择日期”\n7. 等待1秒\n8. 点击文本“今天”\n9. 点击执行按钮\n10. 等待3秒\n11. 校验执行状态列为“成功”\n\n关键字选择：\n- Click：用于点击文本\n- SendText：用于在光标处输入文本并回车\n- WaitLoading：等待页面加载完成\n- Sleep：用于等待指定时间\n- CheckColHas：用于校验表格列包含指定文本\n</thought>\n\n<code_block>\n*** Keywords ***\n执行组合插件校验看板时间\n    # 点击“请输入流水线名称”\n    Click  请输入流水线名称\n    \n    # 输入“刷新看板完成时间”并回车\n    SendText  刷新看板完成时间  enter=True\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 点击“执行”\n    Click  执行\n    \n    # 等待1秒\n    Sleep  1s\n    \n    # 点击“请选择日期”\n    Click  请选择日期\n    \n    # 等待1秒\n    Sleep  1s\n    \n    # 点击“今天”\n    Click  今天\n    \n    # 点击“执行”按钮\n    Click  执行\n    \n    # 等待3秒\n    Sleep  3s\n    \n    # 校验执行状态列为“成功”\n    CheckColHas  执行状态  成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求，GET，url是https://www.baidu.com",
        "output": "<thought>\n这个问题需要我们发送一个GET请求到指定的URL，没有请求体和请求头，所以我们可以直接使用UiSendRequest关键字来实现。\n</thought>\n\n<code_block>\n# 向 https://www.baidu.com 发送 GET 请求\n${resp_json}  UiSendRequest | GET | https://www.baidu.com\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 获取“添加分群”的个数",
        "output": "<thought>\n我们需要找到“添加分群”这个文本出现的元素数量。可以使用`FindByText`关键字定位到文本为“添加分群”的元素，并结合`GetElemCount`关键字来获取元素的数量。\n</thought>\n\n<code_block>\n# 查找文本为“添加分群”的元素个数\n${cnt}  GetElemCount | :contains(添加分群)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对 [UI自动化用]Naas资产报废-无审批 所在行的开关按钮，进行点击",
        "output": "<thought>\n首先我们需要找到 \"[UI自动化用]Naas资产报废-无审批\" 所在的表格行，然后在该行中找到开关按钮，并执行点击操作。我们可以使用 \"ClickElemOfRow\" 关键字来完成这个任务。\n</thought>\n\n<code_block>\n# 找到 \"[UI自动化用]Naas资产报废-无审批\" 所在的表格行，并点击该行中的开关按钮\nClickElemOfRow | [UI自动化用]Naas资产报废-无审批 | [class*=switch]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 xx 表格行中的 关闭 小图标",
        "output": "<thought>\n此任务需要在特定表格行中点击关闭icon。可以使用`ClickIconOfRow`关键字，该关键字允许我们指定行和图标名称。在这里，我们需要提供行的标识以及图标名称“关闭”。\n</thought>\n\n<code_block>\n# 点击 xx 表格行中的 关闭 icon\nClickIconOfRow | xx | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“生成随机字符串”，接受 prefix 参数，默认为空，作用是：生成前缀为 prefix 的随机字符串并返回此值",
        "output": "<thought>\n我们需要创建一个关键字来生成随机字符串。可以使用`GenerateRandomWithPrefix`关键字，根据提供的`prefix`参数生成随机字符串并返回。默认情况下，prefix为空。\n</thought>\n\n<code_block>\n*** Keywords ***\n生成随机字符串\n    [Arguments]  ${prefix}\n    ${random_str}  GenerateRandomWithPrefix  ${prefix}  15  [LETTERS][NUMBERS]\n    [Return]  ${random_str}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将表格第一行的第三列 更新为八位随机字符串",
        "output": "<thought>\n在这个场景中，我们需要更新表格第一行的第三列为一个八位的随机字符串。首先，我们可以使用`GenerateRandom`关键字生成一个八位随机字符串。然后，使用`FillCell`关键字将生成的随机字符串填入指定的单元格中。\n</thought>\n\n<code_block>\n# 生成一个八位长度的随机字符串\n${rand_str}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n\n# 更新表格第一行的第三列为生成的随机字符串\nFillCell | 1 | 3 | ${rand_str}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择图表查询维度  动态维度",
        "output": "<thought>\n此问题需要选择图表查询维度为“动态维度”。可以使用`SelectOptionForField`关键字，指定字段名为图表查询维度，选项为动态维度。\n</thought>\n\n<code_block>\n# 选择图表查询维度为动态维度\nSelectOptionForField | 图表查询维度 | 动态维度\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${elem}里“查看全部”button处于disable不可点击状态",
        "output": "<thought>\n为了验证给定元素中名为“查看全部”的按钮是否处于禁用状态，我们可以使用CheckElemDisabled关键字。首先，我们需要定位到“查看全部”按钮。假设该按钮在预先定位的元素${elem}中，我们可以通过FindByText关键字在${elem}中查找“查看全部”按钮，然后使用CheckElemDisabled断言该按钮的禁用状态。\n</thought>\n\n<code_block>\n# 在已知元素${elem}中查找名为“查看全部”的按钮\n${view_all_button}  FindByText  查看全部  base=${elem}\n\n# 校验“查看全部”按钮处于禁用状态\nCheckElemDisabled  ${view_all_button}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击收款计划下面的添加",
        "output": "<thought>\n根据题目描述，我们需要点击“收款计划”下面的“添加”。我们可以使用“ClickTextToTheDirectionOf”关键字来实现这个步骤，基准元素是“收款计划”，方向是“bottom”，目标文本是“添加”。\n</thought>\n\n<code_block>\n# 点击收款计划下面的添加\nClickTextToTheDirectionOf | 收款计划 | bottom | 添加\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击表格行 ‘自动化测试专用’ 中的更多小图标，然后点击重启，等待1s后检查这一行的任务状态列包含runnning",
        "output": "\n    \n<thought>\n 首先，需要点击表格行 '自动化测试专用' 中的更多icon。接着，点击重启。然后，等待1秒以确保操作生效。最后，检查这一行的任务状态列是否包含文本 'running'。\n </thought>\n \n <code_block>\n # 点击表格行 '自动化测试专用' 中的更多icon\n ClickIconOfRow | 自动化测试专用 | more\n \n # 点击重启\n Click | 重启\n \n # 等待1秒\n Sleep | 1s\n \n # 校验这一行的任务状态列包含 'running'\n CheckCellHas | 自动化测试专用 | 任务状态 | running\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面截图中的文本，校验此文本中不包含 @{fail_keywords} 中的各个文本",
        "output": "<thought>\n1. 使用GetPageScreenshotText获取页面截图中的文本。\n2. 遍历@{fail_keywords}，使用Should Not Contain关键字校验截图文本不包含每一个关键词。\n</thought>\n\n<code_block>\n# 获取页面截图中的文本\n${page_text}  GetPageScreenshotText\n\n# 校验页面文本不包含fail_keywords中的各个文本\nFOR  ${keyword}  IN  @{fail_keywords}\n    Should Not Contain  ${page_text}  ${keyword}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标定位到 甲方不退回押金",
        "output": "<thought>\n为了实现鼠标定位到文本“甲方不退回押金”上，我们可以使用MoTo关键字。这个关键字允许我们通过文本定位光标，而不需要具体的jquery选择器。根据需求，只需要简单的使用MoTo关键字并传入文本即可。\n</thought>\n\n<code_block>\n# 鼠标移动到文本“甲方不退回押金”上\nMoTo | 甲方不退回押金\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“打开单元格中的显微镜” 的关键字，接受 row, col 参数， 作用是：\n1. 页面向下滚动\n2. 点击表格第 row 行，第 col 列的单元格中的，class包含Microscope__clickable 的元素",
        "output": "<thought>\n为了解决这一问题，首先需要向下滚动页面，然后定位并点击表格中某个单元格内的特定元素。可以使用`PageDown`来滚动页面，再利用`ClickElemOfCell`来点击特定单元格内的元素。使用参数化形式编写关键字，将`row`和`col`作为参数传入。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开单元格中的显微镜\n    [Arguments]  ${row}  ${col}\n    # 向下滚动页面一次\n    PageDown | 1\n    # 点击表格第${row}行第${col}列的class包含Microscope__clickable的元素\n    ClickElemOfCell | ${row} | ${col} | [class*=Microscope__clickable]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "CPU 架构选中  amd64，鼠标悬浮到按钮  linux,点击选中，设置规格族为 无序列表中的第一个选项",
        "output": "<thought>\n对于这个任务，首先需要使用`SelectOptionForField`关键字设置CPU架构为amd64。接着，使用`MoTo`关键字将鼠标移动到名为linux的按钮上，然后使用`Click`关键字点击选中。最后，使用`SelectOptionForField`选择‘规格族’为无序列表中的第一个选项，这需要特殊值`OPTIONS_1`。\n</thought>\n\n<code_block>\n# 选择CPU架构amd64\nSelectOptionForField | CPU 架构 | amd64\n\n# 鼠标悬浮到按钮linux\nMoTo | linux\n\n# 点击选中按钮linux\nClick | linux\n\n# 选择‘规格族’为无序列表中的第一个选项\nSelectOptionForField | 规格族 | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置连接方式为JDBC",
        "output": "<thought>\n根据问题描述，需要设置连接方式为JDBC。可以使用SetField关键字来填入“连接方式”这个字段对应的值为“JDBC”。\n</thought>\n\n<code_block>\n# 设置连接方式为JDBC\nSetField | 连接方式 | JDBC\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击重命名，向 value属性为 doubao-pro 的元素中输入 ‘自动化Agent测试’，然后回车",
        "output": "<thought>\n首先需要使用Click关键字点击文本“重命名”，然后通过FillArea关键字选择基于jQuery选择器表示的元素输入值“自动化Agent测试”，最后在输入后通过SendText 输入回车。\n</thought>\n\n<code_block>\n# 点击重命名\nClick | 重命名\n\n# 输入 '自动化Agent测试' 到属性为 value='doubao-pro' 的元素中，并回车\nFillArea | [value='doubao-pro'] | 自动化Agent测试\nSendText | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "名称输入 123，描述输入 456，然后校验 class包含ins-item-content 的元素数量大于 5 个",
        "output": "<thought>\n第一步，首先输入名称和描述，这里可以使用SetField关键字分别输入123和456，具体用法是：SetField | fieldName | value。\n第二步，然后要检查页面上特定class的元素个数是否大于5，可以通过GetElemCount关键字获取特定选择器的元素个数，再用RF的内建关键字Should Be True来判断获取的元素个数是否大于5。\n</thought>\n<code_block>\n# 输入名称123\nSetField | 名称 | 123\n\n# 输入描述456\nSetField | 描述 | 456\n\n# 获取class包含ins-item-content的元素个数\n${cnt}  GetElemCount | .ins-item-content\n\n# 判断获取的元素个数是否大于5\nShould Be True  ${cnt} > 5\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击确定",
        "output": "<thought>\n场景描述要求鼠标点击“确定”按钮。根据现有关键字，使用MClick关键字可以实现鼠标点击操作。由于没有复杂的选择器涉及，只需要直接点击“确定”文本即可。\n</thought>\n\n<code_block>\n# 鼠标点击“确定”按钮\nMClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 \"时间粒度\"右边第2个输入框 为 2024-09-01~2024-09-30",
        "output": "<thought>\n首先，我们需要找到“时间粒度”文本右边的第二个input/textarea元素。然后，我们需要向这个元素输入日期范围。可以使用FindElemToTheDirectionOf关键字来查找元素，并使用FillArea关键字来输入日期范围。\n</thought>\n\n<code_block>\n# 查找\"时间粒度\"右边的第二个input/textarea元素\n${elem}  FindElemToTheDirectionOf | 时间粒度 | right | input, textarea | idx=1\n\n# 设置\"时间粒度\"右边的第二个input/textarea为 2024-09-01~2024-09-30\nFillArea | ${elem} | 2024-09-01~2024-09-30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断第一行第四列的文本，如果不是成功，就刷新页面，每5秒循环一次，一共循环10次",
        "output": "<thought>\n我们需要使用IsCellContainsText来判断第一行第四列的文本是否为\"成功\"。如果不是，我们刷新页面，并等待5秒。循环10次，我们可以使用FOR循环和内置的IF/ELSE来实现。\n</thought>\n\n<code_block>\nFOR  ${i}  IN RANGE  10\n    # 判断第一行第四列的文本是否为成功\n    ${success}  IsCellContainsText  1  4  成功\n    IF  not ${success}\n        # 如果不是成功，刷新页面\n        RefreshPage\n        # 等待5秒\n        Sleep  5s\n    ELSE\n        # 如果是成功，跳出循环\n        Exit For Loop\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到type=radio，value=“选项 1”的元素，校验它包含“checked 属性",
        "output": "<thought>\n1. 首先需要找到type=radio且value=\"选项 1\"的元素，可以使用FindElem关键字配合jquery选择器\n2. 然后需要校验该元素是否包含checked属性，可以使用GetElemAttr获取属性值并验证\n3. 使用Should Be True进行布尔值校验\n4. 选择器构造：input[type=radio][value=\"选项 1\"]\n</thought>\n\n<code_block>\n# 定位radio元素\n${radio_elem}  FindElem  input[type=radio][value=\"选项 1\"]\n\n# 获取checked属性值\n${checked}  GetElemAttr  ${radio_elem}  checked\n\n# 校验checked属性存在\nShould Be True  ${checked} \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找div元素，class属性为arco-pagination-total-text",
        "output": "<thought>\n首先，我们需要定位到class属性为\"arco-pagination-total-text\"的div元素。我们可以使用\"FindElem\"关键字，它可以帮助我们使用jquery选择器来定位元素。选择器字符串应为\"div[class=arco-pagination-total-text]\"，这个字符串表示class属性为arco-pagination-total-text的div元素。\n</thought>\n\n<code_block>\n# 使用FindElem关键字查找class属性为arco-pagination-total-text的div元素\n${elem}  FindElem | div[class=arco-pagination-total-text]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数据权限，权限名称或标识输入渠道类型1，如果 页面包含“暂无数据”，点击新建角色按钮；如果页面包含${role_name}，进入事件分析页面",
        "output": "<thought>\n首先需要依次点击“数据权限”按钮。然后在“权限名称或标识”输入“渠道类型1”。接下来，判断页面是否包含“暂无数据”，如果是，点击“新建角色”按钮。否则，判断页面是否包含变量`${role_name}`，如果是，则进入“事件分析”页面。\n</thought>\n\n<code_block>\n# 点击数据权限\nClick | 数据权限\n\n# 在权限名称或标识中输入渠道类型1\nSetField | 权限名称或标识 | 渠道类型1\n\n# 判断页面是否包含“暂无数据”\n${exist}  IsAnyTextExisting | 暂无数据\nIF  $exist\n    # 如果包含“暂无数据”，点击新建角色按钮\n    Click | 新建角色\nELSE\n    # 否则判断页面是否包含${role_name}\n    ${exist}  IsAnyTextExisting | ${role_name}\n    IF  $exist\n        # 如果包含${role_name}，进入事件分析页面\n        ClickMenu | 事件分析\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将class为common-promotion-wrapper的页面区域，保存为基准图，命名为整体数据（汇总）页面校验，相似度为1",
        "output": "<thought>\n我们需要使用 ImageDiff 关键字来截取 class=common-promotion-wrapper 的元素图片，并和基准图对比。首先确定jquery选择器，然后设置 pic_name 和 sim 参数。\n</thought>\n\n<code_block>\n# 截取 class=common-promotion-wrapper 的元素图片，命名为整体数据（汇总）页面校验，相似度为1\nImageDiff | [class=common-promotion-wrapper] | pic_name=整体数据（汇总）页面校验 | sim=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "删除浏览器中的 cookies",
        "output": "<thought>\n为了清除Cookie，在Robot Framework中可以利用SeleniumLibrary中的Delete All Cookies关键字。SeleniumLibrary是Robot Framework的一个常用扩展库，提供了对Web浏览器的操作功能，其中包括管理浏览器Cookie的能力。使用Delete All Cookies关键字可以直接删除当前会话中的所有Cookie。\n</thought>\n\n<code_block>\n# 清除所有Cookie\nDelete All Cookies\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到 placeholder 为「请输入」的 input 元素，设置其 value 为「AUTOTSET」，点击提交，跳转到新窗口，点击操作栏第一个按钮",
        "output": "<thought>\n我们需要在页面中找到一个输入框，其placeholder属性为“请输入”，然后将其值设置为“AUTOTSET”。接着点击提交按钮。完成后，我们需要切换到新窗口，并点击表格中操作栏的第一个按钮。这个任务可以按如下步骤分解：\n\n1. 使用`FindElem`找到placeholder为“请输入”的输入框元素。\n2. 使用`FillArea`或`SetField`将找到的输入框设置为“AUTOTSET”。\n3. 使用`Click`或`ClickElem`点击提交按钮。\n4. 使用`ToNewWindow`切换到新窗口。\n5. 使用`ClickElemOfCell`点击操作栏中的第一个按钮。\n</thought>\n\n<code_block>\n# 找到placeholder为「请输入」的input框\n${input_elem}  FindElem | input[placeholder='请输入']\n\n# 填写input框的值为AUTOTSET\nFillArea | ${input_elem} | AUTOTSET\n\n# 点击提交按钮\nClick | 提交\n\n# 切换到新窗口\nToNewWindow\n\n# 点击表格操作栏中第一行的第一个按钮\nClickElemOfCell | 1 | 操作 | button:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验“请选择单个选项”这个表格，题目包含：“单选组”、“标注数量:2”",
        "output": "<thought>\n1. 首先需要明确要校验的是表格的表头行(HEAD)是否包含特定文本\n2. 根据关键字文档，可以使用CheckRowHas来校验表格行包含给定文本\n3. 表头行在关键字中表示为特殊值HEAD\n4. 需要校验的文本是\"单选组\"和\"标注数量:2\"\n5. 表格名称为\"请选择单个选项\"，根据规则要去掉\"表格\"二字，所以tbl参数应为\"请选择单个选项\"\n6. 不需要指定base参数，因为不是弹窗中的表格\n</thought>\n\n<code_block>\n# 校验表头行包含\"单选组\"和\"标注数量:2\"\nCheckRowHas  HEAD  单选组  标注数量:2  tbl=请选择单个选项\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class包含FilterExpressionsForm__container的元素中输入：注册时间、在今天和、过去、1、之内",
        "output": "<thought>\n首先要在指定的页面元素中输入多个值。由于涉及基于class的选择器，可以使用FillArea关键字来实现。确定选择器为`div[class*=FilterExpressionsForm__container]`。然后使用FillArea关键字依次输入指定的值。\n</thought>\n\n<code_block>\n# 在class包含FilterExpressionsForm__container的元素中依次输入注册时间、在今天和、过去、1、之内\nFillArea | div[class*=FilterExpressionsForm__container] | 注册时间 | 在今天和 | 过去 | 1 | 之内\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击主播详情，进入新打开的页面，检测是否主线直播数据字符，如果有则截图",
        "output": "<thought>\n为了解决这个问题，我们需要使用一系列的步骤来实现自动化脚本：\n1. 使用Click关键字点击“主播详情”。\n2. 使用ToNewWindow关键字切换到新窗口，因为浏览器会在一个新窗口中打开主播详情。\n3. 使用IsAnyTextExisting检查新窗口中是否存在“主线直播数据”这个文本。\n4. 如果文本存在，使用Screenshot关键字截图。\n这些步骤可以确保我们在点击“主播详情”后，能够切换到新窗口并检测特定文本的存在，然后根据文本的存在情况进行截图。\n</thought>\n\n<code_block>\n# 点击主播详情\nClick | 主播详情\n\n# 切换到新打开的窗口\nToNewWindow\n\n# 检测是否存在“主线直播数据”文本\n${exist}  IsAnyTextExisting | 主线直播数据\n\n# 如果存在则截图\nIF  ${exist}\n    Screenshot\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待文本为 ‘用户画像’ 且 class包含disabled的元素消失，然后点击表格中 ${name} 行中的 ‘用户画像’",
        "output": "<thought>\n首先需要等待文本为‘用户画像’且class包含disabled的元素消失，这可以通过WaitElemDisappear关键字实现。接着，在表格中点击`${name}`行中的‘用户画像’文本，可以使用ClickTextOfRow关键字实现。\n</thought>\n\n<code_block>\n# 等待文本为‘用户画像’且class包含disabled的元素消失\nWaitElemDisappear | :contains('用户画像')[class*=disabled]\n\n# 点击表格中${name}行中的‘用户画像’\nClickTextOfRow | ${name} | 用户画像\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹框里的确认按钮",
        "output": "<thought>\n此问题的关键在于理解和识别弹框以及确认按钮。在这个场景中，关键字 'Click' 可以用于实现点击按钮的操作。因为按钮在弹框内，所以我们需要通过设置 'base' 参数为 'POPUP' 来指定搜索的范围。\n</thought>\n\n<code_block>\n# 点击弹框里的确认按钮\nClick | 确认 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将小学拖入学历中",
        "output": "<thought>\n需要使用DAndD关键字将小学拖拽到学历。首先，我们需要确保能够唯一定位这两个元素。可以直接使用文本“小学”和“学历”作为选择器，然后使用DAndD关键字完成操作。\n</thought>\n\n<code_block>\n# 将小学拖拽到学历\nDAndD | 小学 | 学历\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击删除button",
        "output": "<thought>\n要点击一个名为“删除”的button，可以使用`ClickElem`关键字，因为我们要通过元素的标签及其文本内容来定位。\n</thought>\n\n<code_block>\n# 点击删除button\nClickElem | button:contains(删除)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "1. 打开谷歌浏览器，Local Storage注入变量SWITCH_ROLE_VERSION_STORAGE=100，并使用cookies=${ZZR_SSO_COOKIES}访问 ${APP_SIGNIN_PAGE}  2. 等待页面加载完成",
        "output": "<thought>\n首先，我们需要使用`OpenBrowser`关键字打开谷歌浏览器，并设置Local Storage中的`SWITCH_ROLE_VERSION_STORAGE`变量为100。然后使用cookies访问指定的登录页面`${APP_SIGNIN_PAGE}`。之后，我们需要等待页面加载完成，可以使用`WaitLoading`关键字来实现。\n</thought>\n\n<code_block>\n# 打开谷歌浏览器并访问登录页面，同时注入cookies\nOpenBrowser | ${APP_SIGNIN_PAGE} | cookies=${ZZR_SSO_COOKIES} | name=chrome\n\n# 设置Local Storage变量\nLocalStorageSetItem | SWITCH_ROLE_VERSION_STORAGE | 100\n\n# 等待页面加载完成\nWaitLoading | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将浏览器设置为默认大小",
        "output": "<thought>\n通过设置浏览器窗口的宽度和高度为常见的默认值（如1920x1080）来实现类似的效果。默认大小通常取决于设备和操作系统，但1920x1080是比较常见的桌面浏览器默认尺寸。\n</thought>\n\n<code_block>\n# 设置浏览器为默认大小 1920x1080\nSetWindowSize | 1920 | 1080\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开智能纠错右边的开关。提示: 操作或填写具体名称的页面字段时，一般都可使用 SetField 关键字，他们自动识别字段关联的控件类型，正确完成操作。打开开关一般就是设置对应字段的值为 ON。此外，如果操作的不是具体名称的页面字段时，开关一般都是指class包含switch的按钮",
        "output": "<thought>\n 首先，我们需要找到智能纠错右边的开关。然后，我们可以使用SetField关键字将其设置为ON。\n </thought>\n \n <code_block>\n # 打开智能纠错右边的开关\n SetField | 智能纠错 | ON\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择 ‘中医院’ 附近的 ‘麦当劳’",
        "output": "<thought>\n本任务要求我们点击“中医院”附近的“麦当劳”。根据提供的关键字文档，我们可以使用Click关键字结合near参数来实现这个需求。具体步骤如下：首先使用Click关键字，然后使用near参数指定“中医院”，并点击“麦当劳”。\n</thought>\n\n<code_block>\n# 点击'麦当劳'，它在'中医院'的附近\nClick | 麦当劳 | near=中医院\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将学生信息下方的性别设置为：woman",
        "output": "<thought>\n需要使用SetField关键字，通过near参数指定在\"学生信息\"下方的性别字段，然后将其设置为\"woman\"。\n</thought>\n\n<code_block>\n# 将学生信息下方的性别设置为：woman\nSetField | 性别 | woman | near=学生信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面包含张三或李四或王五",
        "output": "<thought>\n我们要检查页面是否包含“张三”或“李四”或“王五”中的任意一个。可以使用关键字`CheckHasAnyText`来完成此任务。\n</thought>\n\n<code_block>\n# 校验页面包含张三或李四或王五\nCheckHasAnyText  张三  李四  王五\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断表格第一行中是否存在: 'Edit'",
        "output": "<thought>\n根据问题描述，可以使用关键字 `IsRowContainsText` 来判断表格的第一行中是否存在文本 'Edit'。该关键字可以直接用于此问题，它接受行号和文本作为参数，并返回是否存在文本的布尔值。\n</thought>\n\n<code_block>\n# 判断表格第一行中是否存在文本 'Edit'\n${exist}  IsRowContainsText | 1 | Edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 向 ‘申请列表’ 这个表格的第一行中输入多个值：电脑、台式机",
        "output": "<thought>\n这个任务要求在‘申请列表’表格的第一行中输入多个值。可以使用FillRow关键字来完成这一操作。首先需要指定要操作的表格以及行号，然后依次输入值。\n</thought>\n\n<code_block>\n# 在‘申请列表’表格的第一行输入电脑、台式机\nFillRow | 1 | 电脑 | 台式机 | tbl=申请列表\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切出iframe",
        "output": "<thought>\n为了切出iframe，可以使用提供的关键字ExitFrame，这是一个直接的步骤，因为不需要传递任何参数或识别特定的元素。\n</thought>\n\n<code_block>\n# 切出iframe\nExitFrame\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验弹窗中存在文案为  隐藏折后价为0的账单",
        "output": "<thought>\n这个场景要求我们在弹窗中查找特定的文案，因此我们可以使用 `CheckHasText` 关键字，并指定 `base=POPUP` 来表示在弹窗中查找文本。\n</thought>\n\n<code_block>\n# 校验弹窗中存在文案 \"隐藏折后价为0的账单\"\nCheckHasText  隐藏折后价为0的账单  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 访问双向认证 的状态 设置为：开启",
        "output": "<thought>\n首先，我们需要判断如何找到“访问双向认证”的状态字段，然后使用适合的关键字来设置其值为“开启”。假设这是一个页面字段，我们可以使用`SetField`关键字来进行设置。如果字段在特定位置或者弹出层中，我们可能需要使用`base`或者`near`参数。\n</thought>\n\n<code_block>\n# 设置访问双向认证的状态为开启\nSetField | 访问双向认证 | 开启\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取class=list-YDMyCp区域的值",
        "output": "<thought>\n我们需要获取一个特定区域的值，该区域由class=list-YDMyCp定义。为了获取该值，可以通过使用FindElem关键字定位该区域，然后使用GetElemText或GetFieldVal关键字来获取该区域的文本或字段值。\n\n1. 首先，使用FindElem关键字定位具有class=list-YDMyCp的元素。\n2. 然后，使用GetElemText关键字获取该元素的文本值。\n3. 如果该区域是一个可输入字段，我们可能需要使用GetFieldVal关键字来获取值。\n\n考虑到没有指定是文本还是字段值，我们可以先尝试获取文本值。\n</thought>\n\n<code_block>\n# 查找class为list-YDMyCp的元素\n${elem}  FindElem | [class=list-YDMyCp]\n\n# 获取元素${elem}的文本\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面包含 “运行中”，最长120s",
        "output": "<thought>\n这个需求需要等待页面包含某个特定的文本，可以使用RF的关键字 \"WaitText\"，并将最长等待时间设置为120s。\n</thought>\n\n<code_block>\n# 等待页面显示“运行中”，最长等待时间为120s\nWaitText | 运行中 | timeout=120\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击project_id前面的勾选框",
        "output": "<thought>\n根据场景描述，我们需要点击一个名为project_id的复选框。可以使用CheckBoxOn关键字来实现此操作，确保复选框被勾选。\n</thought>\n\n<code_block>\n# 勾选名为project_id的复选框\nCheckBoxOn | project_id\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量 pk 中的空格用 “\\n”替换",
        "output": "<thought>\n在这个问题中，我们需要将变量 pk 中的空格替换为 \"\\n\"。Robot Framework 的内建库中没有直接完成这个任务的关键字，但是我们可以使用 Evaluate 关键字来执行 Python 代码来实现这个功能。Python 的 str.replace() 方法可以用来替换字符串中的字符或子字符串。\n</thought>\n\n<code_block>\n# 定义或设置变量 pk\n${pk}  Set Variable  This is a test\n\n# 使用 Evaluate 关键字执行 Python 代码，替换 pk 变量中的空格为 \"\\n\"\n${pk}  Evaluate  \"${pk}\".replace(\" \", \"\\n\")  \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 首次响应时长 字段下的值，是否包含 ${hms}",
        "output": "<thought>\n为了解决这个问题，我需要使用 `GetFieldVal` 关键字获取 `首次响应时长` 字段的值。然后使用 `Should Contain` 来校验该值是否包含 `${hms}`。首先，获取字段值，再进行包含校验。\n</thought>\n\n<code_block>\n# 获取首次响应时长字段的值\n${response_time}  GetFieldVal  首次响应时长\n\n# 校验字段值是否包含${hms}\nShould Contain  ${response_time}  ${hms}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "预约规则设置为 不需要预约，优惠规则设置为 可享用店内其他优惠，详询商家，等出现uitest_not_decouple，在弹框中的券码中输入：111",
        "output": "<thought>\n首先，需要设置预约规则为“不需要预约”，使用`SetField`关键字。然后，再设置优惠规则为“可享用店内其他优惠，详询商家”，也是使用`SetField`关键字。接着，我们需要等待页面上出现`uitest_not_decouple`，使用`WaitText`关键字。最后，在弹框中输入券码“111”到指定的字段中，使用`SetPopupField`关键字。整个过程需要按照顺序依次执行这几个步骤。\n</thought>\n\n<code_block>\n# 设置预约规则为“不需要预约”\nSetField | 预约规则 | 不需要预约\n\n# 设置优惠规则为“可享用店内其他优惠，详询商家”\nSetField | 优惠规则 | 可享用店内其他优惠，详询商家\n\n# 等待页面上出现“uitest_not_decouple”\nWaitText | uitest_not_decouple\n\n# 在弹框中设置券码为“111”\nSetPopupField | 券码 | 111\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击「China's ISPs」右边的元素，并勾选「China Telecom」",
        "output": "<thought>\n由于这个任务需要点击\"China's ISPs\"右边的元素，我们可以使用关键字\"ClickElemToTheDirectionOf\"实现。然后勾选\"China Telecom\"，我们可以用\"CheckBoxOn\"关键字实现。\n</thought>\n\n<code_block>\n# 点击「China's ISPs」右边的元素\nClickElemToTheDirectionOf | China's ISPs | right \n\n# 勾选「China Telecom」\nCheckBoxOn | China Telecom\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发送到/mweb/v1/get_history_by_ids的所有post请求，校验响应中的ret字段值等于0",
        "output": "<thought>\n这个场景需要我们执行以下几个步骤：\n1. 使用`Search Requests`关键字搜索发送到`/mweb/v1/get_history_by_ids`的所有POST请求。\n2. 使用`GetValuesFromJson`关键字从每个请求的响应中提取`ret`字段。\n3. 使用`Should Be Equal As Strings`关键字校验提取的`ret`字段值等于0。\n\n由于`Search Requests`关键字支持通过设置`mode`参数为`all`获取所有符合条件的请求，因此我们可以用它来获取所有请求，接下来逐个提取响应中`ret`字段值进行校验。\n</thought>\n\n<code_block>\n# 搜索请求url中包含/mweb/v1/get_history_by_ids, 且请求方式为POST的所有请求\n${responses}  Search Requests  /mweb/v1/get_history_by_ids  POST  all\n\n# 对每个响应执行以下步骤\nFOR  ${response}  IN  @{responses}\n    # 获取响应中的ret字段的值\n    ${ret_value}  GetValuesFromJson  ${response}  ret\n    \n    # 校验ret字段值等于0\n    Should Be Equal As Strings  ${ret_value}  0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算 第一行第4列的日期 和 第一行第6列的日期相差几天",
        "output": "<thought>\n首先，需要从表格第一行的第4列和第6列获取日期值。可以使用GetCellValue关键字来获取这两个单元格的值。然后，使用Subtract Date From Date关键字计算这两个日期之间的差异，以秒为单位。最后，使用Evaluate关键字将秒数转换为天数，并取绝对值。\n</thought>\n\n<code_block>\n# 获取第一行第4列的日期\n${date1}  GetCellValue | 1 | 4\n\n# 获取第一行第6列的日期\n${date2}  GetCellValue | 1 | 6\n\n# 计算日期差，结果为秒数\n${difference_in_seconds}  Subtract Date From Date | ${date1} | ${date2}\n\n# 将秒数转换为天数并取绝对值\n${difference_in_days}  Evaluate | abs(${difference_in_seconds} / 86400)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ui_jtgpe 后面 修改按钮",
        "output": "<thought>\n这个问题可以使用ClickTextToTheDirectionOf关键字来解决。根据题目描述，我们需要点击 \"ui_jtgpe\" 文本右边的 \"修改\" 按钮。所以，我们可以设置 \"ui_jtgpe\" 为基准元素，设置方向为 \"right\"，设置目标文本为 \"修改\"。\n</thought>\n\n<code_block>\n# 点击 \"ui_jtgpe\" 右边的 \"修改\" 按钮\nClickTextToTheDirectionOf | ui_jtgpe | right | 修改\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 检查页面无报错",
        "output": "<thought>\n 为了检查页面是否存在报错，可以使用关键字`CheckErrMsg`来校验页面是否有异常提示。如果页面存在异常提示，该关键字将抛出异常。因此，直接使用`CheckErrMsg`即可完成该任务。\n </thought>\n \n <code_block>\n # 检查页面是否有异常提示\n CheckErrMsg\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${target_status_code}内是否存在[10004]",
        "output": "<thought>\n在这个场景中，我们需要校验一个变量`${target_status_code}`中是否存在特定数字`10004`。对于这种字符串或列表中是否包含某个元素的校验，RF提供的`Should Contain`关键字非常合适。它能够直接校验一个变量是否包含指定的子字符串或元素，因此可以直接使用这个关键字进行校验。\n</thought>\n\n<code_block>\n# 校验变量${target_status_code}中是否包含字符串\"10004\"\nShould Contain  ${target_status_code}  10004\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 las_ijk_yytt 上，然后点击它右侧的元素",
        "output": "<thought>\n首先，我们需要移动鼠标到文本 \"las_ijk_yytt\" 上。然后，我们需点击该文本右侧的元素。所以我们需要用到 `MoTo` 关键字来移动鼠标，接着用 `ClickElemToTheDirectionOf` 关键字点击右侧的元素。\n</thought>\n\n<code_block>\n# 移动到 las_ijk_yytt 上\nMoTo | las_ijk_yytt\n\n# 点击它右侧的元素\nClickElemToTheDirectionOf | las_ijk_yytt | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义一个 string 参数为源站配置",
        "output": "<thought>\n要为Robot Framework中的源站配置创建一个字符串参数，我们需要定义一个字符串类型的变量。Robot Framework提供了一个内置关键字`Set Variable`来创建并设置变量。我们可以使用这个关键字来创建一个`string`类型的变量并赋值为\"源站配置\"。\n</thought>\n\n<code_block>\n# 创建一个 string 类型的变量并设置值为\"源站配置\"\n${source_config}  Set Variable  源站配置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击xx右边的移除",
        "output": "<thought>\n 为了实现点击\"xx\"右边的\"移除\"，可以使用`ClickTextToTheDirectionOf`关键字。这个关键字允许我们基于一个参考文本（即\"xx\"）的相对方向来点击目标文本（即\"移除\"）。具体来说，我们要在\"xx\"的右边点击\"移除\"。\n </thought>\n \n <code_block>\n # 点击xx右边的移除\n ClickTextToTheDirectionOf | xx | right | 移除\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击更多，点击删除，点击确定，等待1秒后表格中不包含【创建自动化测试专用】",
        "output": "\n    \n<thought>\n 首先使用`Click`关键字依次点击“更多”、“删除”和“确定”。接着使用`Sleep`等待1秒，然后使用`CheckTableNotHas`关键字检查表格中是否不包含“创建自动化测试专用”。\n </thought>\n \n <code_block>\n # 点击更多，删除，确定\n ClickTextOneByOne | 更多 | 删除 | 确定\n \n # 等待1秒\n Sleep | 1s\n \n # 校验表格不包含【创建自动化测试专用】\n CheckTableNotHas | 创建自动化测试专用\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置基础多选为：多选1，多选2",
        "output": "<thought>\n为了设置基础多选为“多选1，多选2”，可以使用`SetField`关键字来操作页面字段。需要注意的是，`SetField`关键字支持依次填入多个值到控件中，因此我们可以一次性传入多个值来实现多选的效果。\n</thought>\n\n<code_block>\n# 设置基础多选为：多选1，多选2\nSetField  基础多选  多选1  多选2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验发送到 /data/upload 的 POST 请求的 status_code 都是 201",
        "output": "<thought>\n首先，我需要使用`Search Requests`关键字来查找发送到`/data/upload`的POST请求。然后，我将检查这些请求的`status_code`字段是否等于201。由于我们要检查所有请求的状态码，我们将使用`all`模式来获取所有相关请求。最后，使用`Should Be Equal As Strings`关键字来验证`status_code`是否为201。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 /data/upload, 且请求方式为 POST 的所有请求\n${resp_json}  Search Requests  /data/upload  POST  all\n\n# 校验每个请求的status_code是否为201\nFOR  ${item}  IN  @{resp_json}\n    Should Be Equal As Strings  ${item['status_code']}  201\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传第三个文件 https://yyyy",
        "output": "<thought>\n需要使用UploadFile关键字来上传文件，并指定idx参数为2，以便选择第三个文件上传控件。\n</thought>\n\n<code_block>\n# 上传第三个文件 https://yyyy\nUploadFile | https://yyyy | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：输入查询 的关键字，接受 label、val 参数，val的默认值为空值，作用是找到input输入框 placeholder 含有 label 的输入内容，然后填入 val 值。如果 lable 含有时间类型组件，参数支持 开始时间 和 结束时间 两个参数， 然后点击查询，等待页面加载完成",
        "output": "<thought>\n为了实现这个功能，我们需要实现以下步骤：\n1. 查找页面上任何 placeholder 含有 `label` 的 input 或 textarea 元素。\n2. 如果 `label` 包含时间类型组件，我们需要处理传入的 `开始时间` 和 `结束时间` 参数，并将其输入到相应的字段中。\n3. 如果 `label` 不包含时间类型组件，则直接在找到的元素中输入 `val` 值。\n4. 点击查询按钮。\n5. 等待页面加载完成。\n\n我们将使用 `FindElem` 来定位元素，通过 `FillArea` 来输入值。根据 `label` 是否包含时间类型组件，决定输入的内容。最后，使用 `Click` 和 `WaitLoading` 来触发查询并等待页面加载完成。\n</thought>\n\n<code_block>\n*** Keywords ***\n输入查询\n    [Arguments]  ${label}  ${val}=${EMPTY}\n\n    # 如果 label 包含时间类型组件\n    IF  '时间' in '${label}'\n        # 输入开始时间和结束时间\n        ${start_input}  FindElem | input[placeholder*='${label}'][placeholder*='开始']\n        FillArea  ${start_input}  ${val}[0]\n\n        ${end_input}  FindElem | input[placeholder*='${label}'][placeholder*='结束']\n        FillArea  ${end_input}  ${val}[1]\n    ELSE\n        # 查找并输入值到普通输入框\n        ${input_elem}  FindElem | input[placeholder*='${label}'], textarea[placeholder*='${label}']\n        FillArea  ${input_elem}  ${val}\n    END\n\n    # 点击查询按钮\n    Click  查询\n\n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将挂起原因 输入 UI自动化挂起",
        "output": "<thought>\n 在这种情况下，我们应该使用SetField关键字来解决这个问题，因为它专门用于操作页面字段关联的控件区域并输入值。我们只需要将\"挂起原因\"作为name参数，并将\"UI自动化挂起\"作为要输入的值。我们不需要使用idx，enter，base和near参数，因为这些参数在这个场景中没有给出特定的要求。\n </thought>\n \n <code_block>\n # 将挂起原因设置为UI自动化挂起\n SetField | 挂起原因 | UI自动化挂起\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“关闭浏览器” 的关键字，作用是：校验页面无异常，然后关闭浏览器",
        "output": "<thought>\n首先使用CheckErrMsg关键字检查页面是否有异常提示。如果没有异常，再使用CloseBrowser关键字关闭浏览器。\n</thought>\n\n<code_block>\n*** Keywords ***\n关闭浏览器\n    # 校验页面无异常\n    CheckErrMsg\n\n    # 关闭浏览器\n    CloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面是否包含“暂无数据”，如果包含，点击“新建角色”按钮，否则点击“UI自动化脱敏角色验证”",
        "output": "<thought>\n首先需要检查页面是否包含“暂无数据”文本，根据检查结果执行不同的点击操作。如果“暂无数据”存在，则点击“新建角色”按钮；否则，点击“UI自动化脱敏角色验证”按钮。\n</thought>\n\n<code_block>\n# 检查页面是否包含“暂无数据”\n${exist}  IsAnyTextExisting  暂无数据\n\n# 如果页面包含“暂无数据”，点击“新建角色”，否则点击“UI自动化脱敏角色验证”\nIF  ${exist}\n    Click  新建角色\nELSE\n    Click  UI自动化脱敏角色验证\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击手机号登录附近的眼睛icon",
        "output": "<thought>\n要解决这个问题，我们需要点击\"手机号登录\"文本附近的\"眼睛\"图标。根据关键字描述，可以使用ClickIcon关键字，并设置near参数为\"手机号登录\"来定位图标。由于没有指定是第几个眼睛图标，默认使用第一个(idx=0)。\n\n分析步骤：\n1. 使用ClickIcon关键字\n2. 设置name参数为\"eye\"或\"眼睛\"(根据实际图标名称)\n3. 设置near参数为\"手机号登录\"来指定图标位置\n4. 不指定base参数，因为操作在主页面而非弹窗中\n</thought>\n\n<code_block>\n# 点击手机号登录附近的眼睛图标\nClickIcon    eye    near=手机号登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 “立即体验”，点击 “我知道了”",
        "output": "<thought>\n首先，我们需要检查页面是否存在文本“立即体验”。这可以通过使用IsAnyTextExisting关键字实现。然后，我们需要根据检查结果决定是否点击“我知道了”。这可以通过使用RobotFramework的if语句实现。如果页面存在“立即体验”，那么我们就点击“我知道了”。\n</thought>\n\n<code_block>\n# 检查页面是否存在“立即体验”\n${exist}  IsAnyTextExisting | 立即体验\n\n# 如果存在，点击“我知道了”\nIF  $exist\n    Click  我知道了\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "assert_list变量依次加入以下元素：收入类 CNY 基础信息",
        "output": "<thought>\n这个问题可以通过RobotFramework的关键字Set Variable或者Append To List来解决。应该先创建一个空的列表变量assert_list，然后依次将需要的元素添加到列表中。\n</thought>\n\n<code_block>\n# 创建空的列表变量assert_list\n@{assert_list}  Create List\n\n# 将元素收入类加入到列表中\nAppend To List  ${assert_list}  收入类\n\n# 将元素CNY加入到列表中\nAppend To List  ${assert_list}  CNY\n\n# 将元素基础信息加入到列表中\nAppend To List  ${assert_list}  基础信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "申请理由 填写 UI自动化申请",
        "output": "<thought>\n这是一个简单的文本字段填充任务，可以使用SetField关键字来完成。在输入框中键入“UI自动化申请”作为“申请理由”。\n</thought>\n\n<code_block>\n# 在\"申请理由\"字段中输入 \"UI自动化申请\"\nSetField | 申请理由 | UI自动化申请\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将clase为detail-content的页面区域，保存为基准图，命名为全域推广详情页数据tab页面校验，相似度为1",
        "output": "<thought>\n这个问题要求我们将一个特定类名为\"detail-content\"的页面区域保存为基准图，并指定了基准图的名称和相似度。这个任务可以通过关键字\"ImageDiff\"实现，我们需要在选择器(selector)参数中填入\"[class=detail-content]\"，在pic_name参数中填入\"全域推广详情页数据tab页面校验\"，在sim参数中输入1。\n</thought>\n\n<code_block>\n# 使用ImageDiff关键字，将类名为detail-content的元素截图并命名为全域推广详情页数据tab页面校验，相似度为1\nImageDiff | [class=detail-content] | pic_name=全域推广详情页数据tab页面校验 | sim=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取 __current_id=Module_8 的元素的图片",
        "output": "<thought>\n需要使用ElemScreenshot关键字来截取元素的图片。首先，通过选择器来定位__current_id为Module_8的元素。\n</thought>\n\n<code_block>\n# 截取__current_id=Module_8的元素的图片\nElemScreenshot| [__current_id=Module_8]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "class='view-lines monaco-mouse-cursor-text'的div，数据不应该为空",
        "output": "<thought>\n为了检查指定的div元素的文本内容不应该为空，我需要首先找到该div元素，接着获取其文本内容，并进行验证确认非空。可以使用`FindElem`关键字来根据jQuery选择器查找该元素，然后使用`Get Text`关键字获取该元素的文本内容，再使用`Should Not Be Empty`来验证文本不空。\n</thought>\n\n<code_block>\n# 查找指定的div元素\n${div_elem}  FindElem  div.view-lines.monaco-mouse-cursor-text\n\n# 获取元素的文本内容\n${div_text}  Get Text  ${div_elem}\n\n# 校验文本内容不为空\nShould Not Be Empty  ${div_text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在套餐图，则设置套餐图为 ${IMAGE_URL_fifth}，如果页面出现裁剪，就点击确定；否则，设置头图为${IMAGE_URL_fifth}，设置辅助图为${IMAGE_URL_fifth}，如果出现智能优化，点击确定上传",
        "output": "<thought>\n首先，我们需要判断页面上是否存在名为套餐图的元素，如果存在，则需要设置其值为 ${IMAGE_URL_fifth}。紧接着，我们要监测是否出现裁剪，如果出现就单击确认。\n\n如果套餐图不存在，则我们依次设置头图和辅助图的值为 ${IMAGE_URL_fifth}。随后，我们要监测页面是否出现智能优化，如果出现则点击确认上传。\n\n为了实现这些功能，我们需要使用IsAnyElemExisting、SetField、IsAnyTextExisting和Click关键字。\n</thought>\n\n<code_block>\n# 判断套餐图是否存在\n${exist}  IsAnyElemExisting | :contains(套餐图)\n\nIF  ${exist}\n    # 设置套餐图为 ${IMAGE_URL_fifth}\n    SetField | 套餐图 | ${IMAGE_URL_fifth}\n\n    # 判断裁剪是否出现\n    ${exist_crop}  IsAnyTextExisting | 裁剪\n    IF  ${exist_crop}\n        # 点击确定\n        Click | 确定\n    END\nELSE\n    # 设置头图为 ${IMAGE_URL_fifth}\n    SetField | 头图 | ${IMAGE_URL_fifth}\n    \n    # 设置辅助图为 ${IMAGE_URL_fifth}\n    SetField | 辅助图 | ${IMAGE_URL_fifth}\n    \n    # 判断智能优化是否出现\n    ${exist_optimize}  IsAnyTextExisting | 智能优化\n    IF  ${exist_optimize}\n        # 点击确认上传\n        Click | 确定\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格 第一行 操作 列的 接单",
        "output": "<thought>\n解决问题思路：\n这个场景要点击表格中第一行操作列的\"接单\"文本，可以使用关键字ClickTextOfCell来完成这个操作，输入参数分别为行名或者行号（在这个情况下是第一行，可以输入1），列名或者列号（在这个情况下是操作列，可以输入\"操作\"），需要点击的文本（在这个情况下是\"接单\"）,表格名（在这个情况下没有给出具体的表格名，可以用默认参数tbl=1）。\n</thought>\n\n<code_block>\n# 点击表格第一行操作列的接单\nClickTextOfCell | 1 | 操作 | 接单 | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 ‘分’ 左边元素值",
        "output": "<thought>\n首先，根据描述我们需要获取“分”左边的元素值。我们可以使用`FindElemToTheDirectionOf`关键字来查找“分”左边的元素，然后使用`GetElemText`或`GetElemAttr`来获取该元素的值。\n</thought>\n\n<code_block>\n# 查找“分”左边的元素\n${elem}  FindElemToTheDirectionOf | 分 | left\n\n# 获取该元素的文本值\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面非白屏",
        "output": "<thought>\n要检查页面非白屏，可以直接使用CheckWhiteScreen关键字，因为它会在检测到白屏时主动抛出异常。\n</thought>\n\n<code_block>\n# 检查页面非白屏\nCheckWhiteScreen\n</code_block>"
    }
]