[
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向页面中 div.logic-wrapper-item 元素下的最后一个 div.arco-formily-item-control 元素中填写 应用ID  =  10000006",
        "output": "<thought>\n此问题涉及到两个关键操作，即元素定位和元素值填写。首先，我们需要根据给定的selector来定位到具体的HTML元素。然后，我们需要向这个元素中填入特定的值。\n我们可以直接使用\"FindElem\"关键字来获取该元素。具体来说，我们需要将两个jquery选择器组合在一起，并通过:eq(-1)来选取最后一个div.arco-formily-item-control元素。\n在确定了具体的元素后，我们可以使用\"FillArea\"关键字来填写该元素。因为题目要求向元素中填写\"应用ID = 10000006\"，所以在使用FillArea时，我们需要依次输入这些值。\n</thought>\n\n<code_block>\n# 定位到具体的HTML元素\n${elem}  FindElem  | div.logic-wrapper-item div.arco-formily-item-control:eq(-1)\n\n# 向元素中填写指定的值\nFillArea  | ${elem}  |  应用ID  |  =  |  10000006\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择预算科目正下方单元格",
        "output": "<thought>\n当用户需要选择一个特定单元格时，我们可以假设这是一个类似“点击”的动作。由于问题陈述中提到了“选择预算科目正下方单元格”，这意味着我们需要找到“预算科目”所在列的特定行，然后在这一列的下一个单元格中执行点击动作。假定“预算科目”是某个列名，它需要用作列选择的依据。可以使用ClickElemOfCell或者ClickTextOfCell，假设我们要点击单元格中的某个文本。\n</thought>\n\n<code_block>\n# 假设要点击的是第1行, 预算科目所对应的列下的单元格\nClickTextOfCell | 1 | 预算科目\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面表格包含 xiongcui 的那一行的第一个单元格",
        "output": "<thought>\n要点击页面表格中包含“xiongcui”的那一行的第一个单元格，我们可以使用 `ClickTextOfCell` 关键字。首先需要选择包含“xiongcui”的行，然后点击第一个单元格。\n</thought>\n\n<code_block>\n# 点击包含 xiongcui 的行的第一个单元格\nClickTextOfCell | xiongcui | 1 | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“添加自定义指标”，接受参数 args, 主要逻辑是：先点击自定义指标按钮，等待0.5s, 然后向最后一个 div class包含FilterComputeEvent__container的元素中输入给定的一个或多个 args",
        "output": "<thought>\n在这个场景中为了实现添加自定义指标的功能，首先需要点击自定义指标按钮，等待0.5秒后，需要找到页面上最后一个class属性包含FilterComputeEvent__container的元素，然后输入一组参数。所以需要用到的关键字有“Click”，“Sleep”，“Set Variable”，“FillArea”等。\n</thought>\n\n<code_block>\n添加自定义指标\n    [Arguments]  @{args}\n    # 点击自定义指标按钮\n    Click | 自定义指标\n    # 等待0.5秒\n    Sleep  0.5s\n    # 定位到最后一个class含有特定内容的元素\n    ${selector}  Set Variable  div[class*=FilterComputeEvent__container]:eq(-1)\n    # 输入参数到指定的元素中\n    FillArea  ${selector}  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断“操作系统”的“脱敏方式”是否为“脱敏显示”，如果是，点击“脱敏显示”，下拉框选择“不可过滤和分组”",
        "output": "<thought>\n首先，需要判断“操作系统”的“脱敏方式”是否为“脱敏显示”。这可以通过检查页面中是否存在该文本。其次，如果确实为“脱敏显示”，则需要点击该选项。最后，在出现的下拉框中选择“不可过滤和分组”。\n</thought>\n\n<code_block>\n# 检查“操作系统”的“脱敏方式”是否为“脱敏显示”\n${exist}  IsAnyTextExisting | 操作系统  | 脱敏方式  | 脱敏显示\n\n# 如果“脱敏显示”存在\nIF  $exist\n    # 点击“脱敏显示”\n    Click  脱敏显示\n    \n    # 选择“不可过滤和分组”\n    SelectOption  不可过滤和分组\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取Custom Error Pages的表格第一列的数据",
        "output": "<thought>\n首先，我们需要获取名称为 \"Custom Error Pages\" 的表格的第一列数据。根据提供的关键字，使用 `GetColValues` 可以获取指定列的所有数据。为了实现这一点，我们需要知道该表格的标识符或选择器，以便正确引用该表格。假设我们知道这个表格的标识符是 `custom_error_pages`，根据提示和要求，我们只需获取这个表格的第一列的数据。\n</thought>\n\n<code_block>\n# 获取Custom Error Pages的表格第一列的数据\n@{first_col_values}  GetColValues | 1 | tbl=custom_error_pages\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断当前日期是否在 date 之前，如果是在 date 之前，就跳过当前用例的执行",
        "output": "<thought>\n首先需要获取当前日期和提供的日期，然后比较两者。如果当前日期在提供的日期之前，就跳过用例。可以使用RF标准库中的`Get Current Date`和`Convert Date`来处理日期，并使用`Evaluate`执行Python代码进行比较。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date\n\n# 判断当前日期是否在目标日期之前\n${is_before}  Evaluate  \"${current_date}\" < \"${date}\"\n\n# 如果是就跳过当前用例\nIF  ${is_before}\n    Pass Execution  此用例已跳过\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "使用 python, 分别获取当前的日期 和 11 个月前的日期，年-月 格式",
        "output": "<thought>\n首先，我们需要获取当前的日期和11个月前的日期。这可以通过 `Evaluate` 执行Python代码来实现。可以使用Python的 `datetime` 模块来获取当前日期，然后使用 `relativedelta` 函数来得到11个月前的日期。最后，将这两个日期格式化为 \"年-月\" 格式。\n</thought>\n\n<code_block>\n# 获取当前的日期\n${current_date}  Evaluate  datetime.datetime.now().strftime('%Y-%m')  modules=datetime\n\n# 获取11个月前的日期\n${past_date}  Evaluate  (datetime.datetime.now() - dateutil.relativedelta.relativedelta(months=11)).strftime('%Y-%m')  modules=datetime, dateutil\n\n# 输出当前日期和11个月前的日期\nLog  ${current_date}\nLog  ${past_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个“选择分支”的关键字，接受branch_name参数，点击选择分支，判断是否存在 ${branch_name} ,存在则点击，不存在则点击 master",
        "output": "<thought>\n首先，我们需要写出名为 \"选择分支\" 的关键字，这个关键字接受branch_name参数。\n我们将使用Click关键字点击选择分支，然后使用IsAnyTextExisting关键字检查是否存在${branch_name}。\n如果存在${branch_name}，我们将再次使用Click关键字点击${branch_name}。\n如果不存在${branch_name}，我们将使用Click关键字点击master。\n这里将会使用RF的IF/ELSE结构来实现。\n</thought>\n\n<code_block>\n选择分支\n    [Arguments]  ${branch_name}\n    # 点击选择分支\n    Click  选择分支\n    # 判断是否存在 ${branch_name}\n    ${exist}  IsAnyTextExisting  ${branch_name}\n    # 存在则点击 ${branch_name}\n    IF  $exist\n        Click  ${branch_name}\n    ELSE\n    # 不存在则点击 master\n        Click  master\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选表格第一行",
        "output": "<thought>\n要勾选表格第一行，可以使用`CheckBoxOn`关键字或`ClickElemOfRow`关键字来勾选复选框。首先需要确认复选框的位置和如何定位。假设每行都有一个复选框，第一个复选框可以通过`ClickElemOfRow`，选择`:checkbox`进行操作。\n</thought>\n\n<code_block>\n# 勾选表格第一行的复选框\nClickElemOfRow | 1 | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取剪切板内容",
        "output": "<thought>\n获取剪切板内容是一个直接任务，可直接使用RobotFramework提供的关键字GetCopied来获取当前剪切板内容。\n</thought>\n\n<code_block>\n# 获取剪切板内容\n${val}  GetCopied\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class 为 InlineFirstItem__outer-container__TQuRy 的第 ${line_no} 减 1 个 div 中输入 @{config}",
        "output": "<thought>\n本测试场景需要向指定class的div元素中输入一系列数据。这里可以使用关键字FillArea， 因为它可以处理jquery选择器所指示的控件区域并按顺序填充一个或多个值。首先，我们需要生成正确的jquery选择器，然后将其作为FillArea关键字的参数，以便在正确的地方输入所需的配置。\n</thought>\n\n<code_block>\n# 生成正确的jquery选择器\n${selector} =  Set Variable  div[class=InlineFirstItem__outer-container__TQuRy]:eq(${line_no}-1)\n# 使用生成的选择器切换到正确的div元素，并输入配置\nFillArea  |  ${selector}  |  @{config}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“编辑业务对象属性” 的关键字，接受 name, prop_name，kwargs 参数，逻辑是：\n1. 在 ‘输入对象名’ 中输入 name, 然后点击包含 name 的表格行中的 '编辑'\n2. 然后，点击 ‘属性名’ 表格中，包含 prop_name 的表格行中的 ‘编辑’，并等待 0.5s\n3. 然后对于 kwargs 中的每一个 key, value 值，将他们分别填写到 ‘属性名’ 表格中，prop_name 行，名称为 key 的单元格中\n4. 最后点击 ‘保存’，然后点击 ‘确定’，并校验页面包含 ‘成功’",
        "output": "<thought>\n要完成这个任务，我们需要逐步使用RobotFramework中的各种关键字：\n\n1. 首先在字段中输入 `name`，然后点击表格行中的 `编辑`。\n2. 接着在 `属性名` 表格中找到包含 `prop_name` 的行并点击 `编辑`，并等待0.5秒。\n3. 对于 `kwargs` 中的每个键值对，将值填写到对应的单元格中。\n4. 最后依次点击 `保存` 和 `确定`，并校验页面上是否包含 `成功`。\n\n我们可以通过以下关键字来实现：\n- `SetField` 用于输入对象名。\n- `ClickTextOfRow` 用于点击表格行中的文本。\n- `FillCell` 用于填写单元格。\n- `Sleep` 用于等待。\n- `Click` 用于点击按钮。\n- `CheckHasText` 用于校验成功消息。\n\n</thought>\n\n<code_block>\n*** Keywords ***\n编辑业务对象属性\n    [Arguments]  ${name}  ${prop_name}  &{kwargs}\n    \n    # 输入对象名，并点击对应行的编辑\n    SetField  输入对象名  ${name}\n    ClickTextOfRow  ${name}  编辑\n    \n    # 点击属性名中对应行的编辑并等待0.5秒\n    ClickTextOfRow  ${prop_name}  编辑  tbl=属性名\n    Sleep  0.5s\n    \n    # 填写属性名表格中对应行的值\n    FOR  ${key}  ${value}  IN  &{kwargs}\n        FillCell  ${prop_name}  ${key}  ${value}  tbl=属性名\n    END\n    \n    # 点击保存并确定\n    Click  保存\n    Click  确定\n    \n    # 校验页面是否成功\n    CheckHasText  成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 查看 左侧存在 已下架",
        "output": "<thought>\n需要校验“查看”左侧是否存在“已下架”文本。可以使用CheckHasTextToTheDirectionOf关键字，基准元素是“查看”，方向是left，目标文本是“已下架”。\n</thought>\n\n<code_block>\n# 校验 查看 左侧存在 已下架\nCheckHasTextToTheDirectionOf | 查看 | left | 已下架\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class=\"mobile-input-phone\"输入变量中 PHONE_ONLINE 输入完成后，点击data-test=\"login-phone-next-btn\"的按钮",
        "output": "<thought>\n首先需要点击class为\"mobile-input-phone\"的输入框，然后使用SendText关键字输入变量PHONE_ONLINE的值。输入完成后，点击data-test属性为\"login-phone-next-btn\"的按钮。可以使用ClickElem来选择这个按钮。\n</thought>\n\n<code_block>\n# 点击class为mobile-input-phone的输入框\nClickElem | [class=mobile-input-phone]\n\n# 输入变量PHONE_ONLINE\nSendText | ${PHONE_ONLINE}\n\n# 点击data-test属性为login-phone-next-btn的按钮\nClickElem | [data-test='login-phone-next-btn']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到表格中值为\"line_id\"所在的行，并修改第二列下拉框的值为int。提示，这其实是给定了行和列信息，是要填写单元格",
        "output": "<thought>\n首先，我们需要找到表格中具有“line_id”值的行。然后，我们定位到该行的第二列，使用`FillCell`关键字来设置其值为“int”。\n</thought>\n\n<code_block>\n# 找到值为\"line_id\"的行号\n${row}  GetRowValues | line_id\n\n# 修改该行的第二列为\"int\"\nFillCell | ${row} | 2 | int\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个关键字 “合同组盖章点击无需比对”，逻辑为：如果 ${approve_type} 为 盖章，获取页面有多少个“开始比对”按钮，存在几个就点击几次“无需比对”按钮和之后出现弹窗点击“确定”按钮",
        "output": "<thought>\n在这个任务中，需要创建一个关键字 \"合同组盖章点击无需比对\"。首先，需要检查变量 `${approve_type}` 是否为 \"盖章\"。如果是盖章，接着获取页面上有多少个 \"开始比对\" 按钮。然后根据获得的数量，依次点击相同数量的 \"无需比对\" 按钮。最后，每次点击 \"无需比对\" 按钮后出现的弹窗中点击 \"确定\" 按钮。整个流程需要使用 Robot Framework 的 IF 语法分支，结合点击和元素计数等操作关键词。\n</thought>\n\n<code_block>\n*** Keywords ***\n合同组盖章点击无需比对\n    [Arguments]  ${approve_type}\n    # 如果 ${approve_type} 为 盖章\n    IF  \"${approve_type}\" == \"盖章\"\n        # 获取页面上 \"开始比对\" 按钮的数量\n        ${cnt}  GetElemCount  button:contains(开始比对)\n        # 循环点击 \"无需比对\" 和 \"确定\"\n        FOR  ${index}  IN RANGE  ${cnt}\n            Click  无需比对\n            Click  确定  base=POPUP\n        END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 4:3 文案上，页面停留2秒，点击团队经营排行Top3下面的“查看全部团队”，检查页面存在“批量主播拉新”或“规模素人孵化”",
        "output": "<thought>\n根据给定的场景，首先需要将鼠标移动到 \"4:3\" 文案上，这可以通过 `MoTo` 关键字完成。在完成鼠标移动后，需要页面停留2秒，可以使用 `Sleep` 关键字。接下来，点击 \"团队经营排行Top3\" 下面的 \"查看全部团队\"，这可以通过 `ClickTextToTheDirectionOf` 关键字结合查找方向进行实现。之后，需要检查页面是否存在 \"批量主播拉新\" 或 \"规模素人孵化\"，可以使用 `CheckHasAnyText` 关键字实现。\n</thought>\n\n<code_block>\n# 移动鼠标到 \"4:3\" 文案上\nMoTo | 4:3\n\n# 页面停留2秒\nSleep  2s\n\n# 点击 \"团队经营排行Top3\" 下方的 \"查看全部团队\"\nClickTextToTheDirectionOf | 团队经营排行Top3 | bottom | 查看全部团队\n\n# 校验页面出现 “批量主播拉新” 或 “规模素人孵化”\nCheckHasAnyText | 批量主播拉新 | 规模素人孵化\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新窗口，点击 Select Payer，选择 “Billing cycle” 选项，点击 Month of  allocation，点击 Cost bills，校验 存在 “Total: 117313”",
        "output": "<thought>\n首先，需要切换到新窗口；然后，点击“Select Payer”文本；接下来，选择“Billing cycle”选项；然后点击“Month of allocation”文本；紧接着，点击“Cost bills”；最后，校验页面上是否存在文本“Total: 117313”。根据这些操作步骤，依次使用ToNewWindow、Click、SelectOption、CheckHasText等关键字。\n</thought>\n\n<code_block>\n# 切换到新窗口\nToNewWindow\n\n# 点击 Select Payer\nClick | Select Payer\n\n# 选择“Billing cycle”选项\nSelectOption | Billing cycle\n\n# 点击 Month of allocation\nClick | Month of allocation\n\n# 点击 Cost bills\nClick | Cost bills\n\n# 校验页面存在“Total: 117313”\nCheckHasText | Total: 117313\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面应该包含 xxx",
        "output": "<thought>\n对于所述场景，我们需要验证页面中包含特定文本 \"xxx\"。可以使用`CheckHasText`关键字来完成，该关键字检测页面中是否包含指定的文本。\n</thought>\n\n<code_block>\n# 验证页面包含文本 xxx\nCheckHasText | xxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择图表查询维度  动态维度",
        "output": "<thought>\n此问题需要选择图表查询维度为“动态维度”。可以使用`SelectOptionForField`关键字，指定字段名为图表查询维度，选项为动态维度。\n</thought>\n\n<code_block>\n# 选择图表查询维度为动态维度\nSelectOptionForField | 图表查询维度 | 动态维度\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第5行第1列的单元格，然后在此单元格中输入：收入证明",
        "output": "<thought>\n为了完成这个场景，我们需要依次进行以下操作：首先，使用`ClickElemOfCell`关键字来点击表格中的一个特定单元格，这个单元格位于第5行的第1列。然后，使用`FillCell`关键字在这个单元格中输入文本\"收入证明\"。\n</thought>\n\n<code_block>\n# 点击第5行第1列的单元格\nClickElemOfCell | 5 | 1\n\n# 在点击后的单元格中输入\"收入证明\"\nFillCell | 5 | 1 | 收入证明\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入名称：${任务名称}，输入路径：UI自动化文件夹，然后点击确定，等待确定按钮消失后，检查页面包含刚输入的任务名称",
        "output": "<thought>\n对于这个任务，我们可以使用BatchSetFields来批量输入“名称”和“路径”。然后点击“确定”按钮，并使用WaitElemDisappear等待按钮消失。最后，使用CheckHasText来验证页面是否包含输入的任务名称。\n</thought>\n\n<code_block>\n# 批量设置名称和路径\nBatchSetFields  名称=${任务名称}  路径=UI自动化文件夹\n\n# 点击确定按钮\nClick | 确定\n\n# 等待确定按钮消失\nWaitElemDisappear | button:contains(确定)\n\n# 校验页面包含输入的任务名称\nCheckHasText | ${任务名称}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个直播内容左边的小图标，检测页面是否出现 '游戏 语音 颜值 聊天 才艺 其他' 这所有的文案 ,如果有则截图",
        "output": "<thought>\n首先，我们需要点击第一个\"直播内容\"左边的icon，因此我们可以使用`ClickIconToTheDirectionOf`关键字来实现这个步骤。此关键字可以指定基准元素和点击目标的方向。在这个场景中，“直播内容”是基准文本，icon是目标元素，并且位于直播内容的左边。\n\n接下来，我们需要检测页面上是否出现 '游戏 语音 颜值 聊天 才艺 其他' 这所有的文案。为此，可以使用`IsAllTextExisting`关键字，它可以判断多个文本是否同时存在。\n\n如果这些文本都存在，我们就需要进行截图操作。可以使用`Screenshot`关键字来截取整个页面的截图。\n\n根据上述分析，以下是实现代码：\n</thought>\n\n<code_block>\n# 点击第一个直播内容左边的icon\nClickIconToTheDirectionOf | 直播内容 | left \n\n# 判断页面是否同时出现 '游戏 语音 颜值 聊天 才艺 其他'\n${exist}  IsAllTextExisting | 游戏 | 语音 | 颜值 | 聊天 | 才艺 | 其他\n\n# 如果这些文本都存在，则截图\nIF  ${exist}\n    Screenshot\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查看 div.demo 元素的数量",
        "output": "<thought>\n在这个任务中，我们需要查找一个特定元素的数量。在RobotFramework中，我们可以使用\"GetElemCount\"关键字来获取特定元素的数量。接着我们把\"div.demo\"作为参数传入到这个关键字，意思是我们要查找的是class为demo的div元素。\n</thought>\n\n<code_block>\n# 获取 div.demo 元素的数量\n${cnt}  GetElemCount | div.demo\n\n# 打印 div.demo 元素的数量\nLog  ${cnt}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把列表 array 中的 '生效中' 改为 '已过期'，修改array",
        "output": "<thought>\n这个任务要求我们遍历一个数组并替换特定元素的值。我们可以使用RF的FOR循环与ENUMERATE来实现对数组的遍历，结合IF/ELSE结构判断数组元素的值。在找到目标值后，用'Set List Value'关键字修改数组中的值。首先，我们需要判断数组中的每个元素，如果是“生效中”，就将其值改为“已过期”。\n</thought>\n\n<code_block>\n# 遍历数组并使用ENUMERATE获取索引和值\nFOR    ${index}    ${value}    IN ENUMERATE    @{array}\n    # 判断元素是否为\"生效中\"或\"待生效\"\n    IF    '${value}' == '生效中'\n        # 将数组中的相应元素修改为\"已结束\"\n        Set List Value    ${array}    ${index}    已结束\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“跳转文档页面字段验证”的关键字，接受参数为string，逻辑如下：\n1、跳转到新的页面\n2、验证页面中存在string\n3、切换到之前的窗口",
        "output": "<thought>\n对于这个场景，需要编写一个名为“跳转文档页面字段验证”的关键字，并接受一个参数string。逻辑分为三个步骤：\n1. 使用ToNewWindow关键字跳转到新的页面。\n2. 使用CheckHasText来验证页面中存在传入的参数string。\n3. 最后切换回之前的窗口，使用ToPrevWindow关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n跳转文档页面字段验证\n    [Arguments]    ${string}\n    # 跳转到新的页面\n    ToNewWindow\n    # 验证页面中存在传入的参数string\n    CheckHasText    ${string}\n    # 切换到之前的窗口\n    ToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 合同名称 下方存在 ${FILE_DOCX_NAME} 文字",
        "output": "<thought>\n为了判断合同名称下方是否存在某个文本，我们可以使用 CheckHasTextToTheDirectionOf 关键字。首先定位\"合同名称\"，然后向下查找指定的文本 ${FILE_DOCX_NAME}。\n</thought>\n\n<code_block>\n# 校验合同名称下方存在 ${FILE_DOCX_NAME} 文字\nCheckHasTextToTheDirectionOf | 合同名称 | bottom | ${FILE_DOCX_NAME}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 iframe 元素",
        "output": "<thought>\n直接使用关键字 FindElem 和 jquery选择器 \"iframe\" 即可找到 iframe元素。\n</thought>\n\n<code_block>\n# 使用 FindElem 关键字查找 iframe 元素\n${iframe}  FindElem | iframe\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器，打开地址：https://p-vconsole.bytedance.net/home/partnerInfo",
        "output": "<thought>\n对于这个场景，我们需要使用OpenBrowser关键字打开浏览器，并指定要打开的URL为https://p-vconsole.bytedance.net/home/partnerInfo。由于没有指定使用哪个浏览器，可以假设使用默认浏览器。使用OpenUrl关键字也可以达到相同的效果，但是更为简洁的方法是直接在OpenBrowser中传入URL参数。\n</thought>\n\n<code_block>\n# 打开浏览器并访问指定URL\nOpenBrowser | https://p-vconsole.bytedance.net/home/partnerInfo\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“新建角色”的关键字，定义一个${角色名称}为6 位包含大小写的随机参数，点击新建角色并等待页面加载，然后点击请输入名称后输入${角色名称}，最后点击创建",
        "output": "<thought>\n首先生成一个包含大小写字母的6位随机角色名称。接下来需要点击“新建角色”按钮并等待页面加载。然后在“请输入名称”字段输入生成的角色名称，最后点击“创建”按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建角色\n    # 生成6位随机角色名称\n    ${角色名称}  GenerateRandom  | 6 | [UPPER][LOWER]\n    \n    # 点击新建角色\n    Click  新建角色\n    \n    # 等待页面加载\n    WaitLoading\n    \n    # 点击请输入名称并输入角色名称\n    Click  请输入名称\n    SendText  ${角色名称}\n    \n    # 点击创建\n    Click  创建\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "清除Cookie",
        "output": "<thought>\n为了清除Cookie，在Robot Framework中可以利用SeleniumLibrary中的Delete All Cookies关键字。SeleniumLibrary是Robot Framework的一个常用扩展库，提供了对Web浏览器的操作功能，其中包括管理浏览器Cookie的能力。使用Delete All Cookies关键字可以直接删除当前会话中的所有Cookie。\n</thought>\n\n<code_block>\n# 清除所有Cookie\nDelete All Cookies\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第一行，“字典”列中的上传按钮",
        "output": "<thought>\n目标是点击表格第一行“字典”列中的上传按钮。我们需要使用`ClickElemOfCell`关键字来实现这个操作。`row_name_or_id=1`表示第一行，`col_name_or_id=字典`指定了列，我们将选择上传按钮，因此需要相应的选择器。\n</thought>\n\n<code_block>\n# 点击表格第一行“字典”列中的上传按钮\nClickElemOfCell | 1 | 字典 | button:contains(上传)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面第一个表格的行数",
        "output": "<thought>\n为了获取页面第一个表格的行数，可以使用关键字 `GetRowCount`，并指定 `tbl=1` 来表示第一个表格。这个关键字会返回表格的行数，可以将其存储在一个变量中。\n</thought>\n\n<code_block>\n# 获取第一个表格的行数\n${row_count}  GetRowCount | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“虚拟属性可用范围”，接受参数 可用范围，业务逻辑是：\n1.当可用范围为仅自己时，点击 class包含ant-radio-input的第三个元素\n2.当可用范围为所有人时，点击 class包含ant-radio-input的第四个元素",
        "output": "<thought>\n1. 需要创建一个关键字 \"虚拟属性可用范围\"。\n2. 检查参数 \"可用范围\" 的值。\n3. 如果 \"可用范围\" 是 \"仅自己\"，选择第三个元素。\n4. 如果 \"可用范围\" 是 \"所有人\"，选择第四个元素。\n5. 使用 `ClickElem` 关键字和 `:eq()` 来选择正确的元素。\n</thought>\n\n<code_block>\n虚拟属性可用范围\n    [Arguments]  ${可用范围}\n    ${selector} =  Set Variable  [class*=ant-radio-input]\n    IF  \"${可用范围}\" == \"仅自己\"\n        ClickElem  ${selector}:eq(2)\n    ELSE IF  \"${可用范围}\" == \"所有人\"\n        ClickElem  ${selector}:eq(3)\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 “账单口径”为“成本账单”，设置 “费用类型”为“本期已分摊-原价”，打印出${kpitype_value}的数据类型",
        "output": "<thought>\n要解决此任务，我需要使用SetField关键字来设置“账单口径”和“费用类型”字段的值。对于打印变量的数据类型，我将使用RF的BuiltIn库中的Log关键字，并利用Python的内置函数type()。具体的步骤包括：\n1. 设置“账单口径”字段为“成本账单”。\n2. 设置“费用类型”字段为“本期已分摊-原价”。\n3. 使用Evaluate关键字和内置type()函数获取${kpitype_value}的数据类型，并使用Log关键字打印出来。\n</thought>\n\n<code_block>\n# 设置“账单口径”为“成本账单”\nSetField | 账单口径 | 成本账单\n\n# 设置“费用类型”为“本期已分摊-原价”\nSetField | 费用类型 | 本期已分摊-原价\n\n# 打印出${kpitype_value}的数据类型\n${kpitype_type}=  Evaluate  str(type(${kpitype_value}))\nLog  ${kpitype_type}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面字段包含待发布",
        "output": "<thought>\n题目要求校验页面字段包含“待发布”文案，但并未给出具体字段名，因此可以直接校验页面上存在该文案即可。使用关键字CheckHasText可以实现这一点。这个关键字会检查整个页面是否包含特定的文本。\n</thought>\n\n<code_block>\n# 校验页面包含“待发布”\nCheckHasText | 待发布\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待 url 中不再包含 ‘/login’，就点击 ‘购买’",
        "output": "<thought>\n这是一个简单的测试操作，我们需要首先确保url中不再包含'/login'，然后执行点击操作。我们可以使用 WaitURLNotContains 和 Click 这两个关键字来实现操作。\n</thought>\n\n<code_block>\n# 等待页面url不再包含'/login'\nWaitURLNotContains | /login\n\n# 点击购买\nClick | 购买\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "看不到登录2字算登录成功，而且登录之后页面检查页面是否有hlx999",
        "output": "<thought>\n1. 首先需要判断\"登录\"文本是否不存在，这可以使用CheckNotHasText关键字\n2. 然后需要检查页面是否包含\"hlx999\"文本，这可以使用CheckHasText关键字\n3. 这两个检查应该按顺序执行，先确认登录成功(看不到登录)，再确认页面内容\n4. 不需要使用方向相关的关键字，因为只是简单的文本存在性检查\n</thought>\n\n<code_block>\n# 检查登录文本不存在\nCheckNotHasText | 登录\n\n# 检查页面包含hlx999文本\nCheckHasText | hlx999\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "提取元素class=\"arco-input arco-input-size-default NjiUN\"的文本，校验其中存在 “Total:3”，点击出售按钮，输入售价：100，然后提交",
        "output": "<thought>\n为了实现这个场景，我需要分为几个步骤来编写测试代码。\n\n1. 获取文本：使用`GetElemText`关键字获取对应class的元素文本。\n2. 校验文本内容：使用`Should Contain`关键字检查文本中包含“Total:3”。\n3. 点击出售按钮：使用`Click`关键字找到并点击出售按钮。\n4. 输入售价：使用`SetField`关键字设置售价字段为100。\n5. 提交操作：使用`Click`关键字找到并点击提交按钮。\n\n我会根据说明使用提供的关键字完成这些操作。\n</thought>\n\n<code_block>\n# 获取元素class=\"arco-input arco-input-size-default NjiUN\"的文本\n${text}  GetElemText  [class=\"arco-input arco-input-size-default NjiUN\"]\n\n# 校验文本中包含“Total:3”\nShould Contain  ${text}  Total:3\n\n# 点击出售按钮\nClick  出售\n\n# 输入售价：100\nSetField  售价  100\n\n# 点击提交按钮\nClick  提交\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送如下请求, 请求头 Header1: value1\ncurl 'https://infinite-boe.bytedance.net/infinite/api/giraffe/v1/file/tree?psm=n6m2en47dmrd'",
        "output": "<thought>\n为了完成这个任务，需要发送一个GET请求到指定的URL。根据提供的信息，请求头中需要包含\"Header1: value1\"。我们将使用UiSendRequest关键字来发送请求，并传递必要的URL和请求头信息。\n</thought>\n\n<code_block>\n# 使用UiSendRequest发送GET请求\n${resp_json}  UiSendRequest | GET | https://xxx.yyy.zzz.com/infinite/api/giraffe/v1/file/tree?psm=n6m2en47dmrd | ${None} | {\"Header1\": \"value1\"}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验class=panel-card元素下存在class=arco-empty-description元素",
        "output": "<thought>\n我们需要检查一个页面元素的层级关系。在这种情况下，我们寻找class为panel-card元素下有无class为arco-empty-description的元素。我们可以使用CheckHasElem关键字和FindElem关键字。首先，构建一个选择器以定位目标元素。\n</thought>\n\n<code_block>\n# 定义选择器以查找panel-card元素下的arco-empty-description元素\nCheckHasElem | [class=panel-card] [class=arco-empty-description]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第1天附近的编辑",
        "output": "<thought>\n需要使用Click关键字，并指定near参数来实现点击“第1天”附近的“编辑”按钮。\n</thought>\n\n<code_block>\n# 点击第1天附近的编辑\nClick | 编辑 | near=第1天\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘数据源’ 为 'ByteHouse CDW'；设置 ‘请选择数据库’ 为 ${BH_CDW数据库}；设置 ‘请选择数据表’ 为 ${BH_CDW_TABLE1}",
        "output": "<thought>\n这是一个需要通过设置选项来配置数据源和相应数据库及数据表的任务。可以使用 `SetField` 关键字来完成这些设置。\n</thought>\n\n<code_block>\n# 设置数据源为 'ByteHouse CDW'\nSetField | 数据源 | ByteHouse CDW\n\n# 设置数据库\nSetField | 请选择数据库 | ${BH_CDW数据库}\n\n# 设置数据表\nSetField | 请选择数据表 | ${BH_CDW_TABLE1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 ‘搜索合同类型’ 中输入：高全字段，等待页面包含 ‘高一级’，随后依次点击：高全字段、进入协商",
        "output": "<thought>\n首先需要在“搜索合同类型”中输入“高全字段”，适合使用`SetField`关键字。然后等待页面出现“高一级”，使用`WaitText`。最后，依次点击“高全字段”和“进入协商”，可以用`ClickTextOneByOne`。\n</thought>\n\n<code_block>\n# 在搜索合同类型中输入：高全字段\nSetField | 搜索合同类型 | 高全字段\n\n# 等待页面包含‘高一级’\nWaitText | 高一级\n\n# 依次点击：高全字段、进入协商\nClickTextOneByOne | 高全字段 | 进入协商\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印${elem}的all_elements属性",
        "output": "<thought>\n要获取元素${elem}的all_elements属性，直接使用GetElemAttr关键字，将selector设为${elem}，attrName设为all_elements。\n</thought>\n\n<code_block>\n# 获取${elem}的all_elements属性\n${val}  GetElemAttr | ${elem} | all_elements\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查第四个表格，处理方式 列 第一个为确认已领取，第二个为通知领取",
        "output": "<thought>\n首先，我们将根据描述中提到的表格、列和行进行定位。在本例中，需要检查第四个表格、处理方式列，以及第一和第二个格子。然后，我们将使用CheckCellHas关键字来验证单元格是否包含给定的文本。关键字CheckCellHas的参数包括行号，列名和文本，以及表格的序号。\n因此，检查第四个表格处理方式列第一个单元格为\"已确认领取\"的步骤如下所述。首先，行号是1，列名是处理方式，文本是\"已确认领取\"，表格序号是4。同理，可以检查第四个表格处理方式列第二个单元格为\"通知领取\"。\n</thought>\n\n<code_block>\n# 检查第四个表格处理方式列第一个单元格为\"确认已领取\"\nCheckCellHas  |  1  |  处理方式  |  确认已领取  |  tbl=4\n\n# 检查第四个表格处理方式列第二个单元格为\"通知领取\"\nCheckCellHas  |  2  |  处理方式  |  通知领取  |  tbl=4\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开'IPv6' 右下方的 Switch开关。提示：假设 switch 开关是 class包含switch的元素，打开开关可认为是设置开关为ON\n\n提示：可先找到此方位的元素，然后通过 FillArea 设置其为ON",
        "output": "<thought>\n我们需要先找到'IPv6'右下方的开关元素，然后填充为ON。根据题目提示，开关元素的class包含switch，可以使用FindElemToTheDirectionOf关键字找到该元素。然后用FillArea将其设置为ON。\n</thought>\n\n<code_block>\n# 找到'IPv6'右下方的class包含switch的元素\n${switch_elem}  FindElemToTheDirectionOf  | IPv6  | bottomRight  | [class*=switch]\n\n# 将开关设置为ON\nFillArea  | ${switch_elem}  | ON\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将弹窗中 名称右侧的可输入设置为 ui自动化+八位随机字符串_tesst",
        "output": "<thought>\n首先需要生成一个八位的随机字符串，然后将其组合成所需的值\"ui自动化+随机字符串_tesst\"。接着，使用SetPopupField关键字将弹窗中\"名称\"右侧的输入框设置为这个值。\n</thought>\n\n<code_block>\n# 生成八位随机字符串\n${random_str}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n\n# 拼接最终字符串\n${final_value}  Set Variable  | ui自动化${random_str}_tesst\n\n# 设置弹窗中名称右侧的输入框为拼接后的字符串\nSetPopupField  | 名称  | ${final_value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “GMP白屏检查” 的关键字，接受参数 menus 代表一系列菜单，关键字的作用是：\n1. 点击增长营销平台\n2. 切换到新打开的窗口，点击一个或多个菜单 menus\n3. 等页面加载好后，校验页面无报错（排除‘异常’这个文案），也无白屏",
        "output": "<thought>\n这个任务主要分为三部分：点击增长营销平台，切换窗口并点击菜单，等待并检查错误和白屏。我选择以下的关键字主要基于这些任务。点击增长营销平台和菜单可以使用'Click'和'ClickMenu'关键字，窗口切换可使用'ToNewWindow'关键字，等待页面加载完毕可使用'WaitLoading'关键字，校验页面无报错和无白屏可以使用'CheckErrExclude'和'CheckWhiteScreen'关键字。ClickMenu 可以一次性接受多个菜单，按顺序点击。\n</thought>\n\n<code_block>\nGMP白屏检查\n    [Arguments]  @{menus}   # 接受多个参数，作为菜单列表\n    # 点击增长营销平台\n    Click  增长营销平台\n\n    # 切换到新打开的窗口\n    ToNewWindow\n\n    # 点击一系列菜单，ClickMenu 可以一次性接受多个菜单，按顺序点击\n    ClickMenu  @{menus}\n\n    # 等待页面加载好\n    WaitLoading\n\n    # 校验页面无报错，同时排除对“异常”这个文案的检查\n    CheckErrExclude  异常\n\n    # 校验无白屏\n    CheckWhiteScreen\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为“打开${name}看板的更多操作”的关键字，逻辑为：\n# 1. 鼠标移动到 class包含arco-tree-node-is-leaf 且 文本为 name 的元素 elem 上\n# 2. 点击 elem 的右侧的元素 svg class包含arco-icon-more",
        "output": "<thought>\n首先，我们需要找到 class 包含 `arco-tree-node-is-leaf` 且文本为 `${name}` 的元素。然后，移动鼠标到该元素上。接着，我们需要点击该元素右侧 class 包含 `arco-icon-more` 的 `svg` 元素。可以使用 `MoveToElem` 和 `ClickElemToTheDirectionOf` 关键字来实现。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开${name}看板的更多操作\n    # 找到目标元素并移动鼠标到其上\n    ${elem} =  FindElem | [class*=arco-tree-node-is-leaf]:contains(${name})\n    MoToElem | ${elem}\n    \n    # 点击目标元素右侧的指定图标\n    ClickElemToTheDirectionOf | ${elem} | right | svg[class*=arco-icon-more]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 生活服务-服务商 选项处于禁用状态",
        "output": "<thought>\n要校验\"生活服务-服务商\"选项处于禁用状态，我们需要：\n1. 首先需要定位到这个选项元素\n2. 然后验证它是否处于禁用状态\n3. 可以使用CheckElemDisabled关键字直接断言禁用状态\n4. 或者使用IsElementDisabled获取状态后再进行判断\n\n由于题目明确要求校验禁用状态，使用CheckElemDisabled更直接简洁，不需要额外的判断逻辑。\n</thought>\n\n<code_block>\n# 校验\"生活服务-服务商\"选项处于禁用状态\nCheckElemDisabled    生活服务-服务商\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量name 等于 ui文件夹ETst",
        "output": "<thought>\n需要使用`Set Variable`关键字创建变量`name`并赋值为`ui文件夹ETst`。\n</thought>\n\n<code_block>\n# 创建变量name并赋值为ui文件夹ETst\n${name}  Set Variable  ui文件夹ETst\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“csv转Excel”的关键字，业务逻辑为：将名为 calendar.csv的文件格式转换成名为 import_calendar.xlsx的文件",
        "output": "<thought>\n为了解决将CSV文件转换为Excel文件的问题，我将使用Python的pandas库。首先，我需要读取CSV文件，接着将其转换并保存为Excel文件。通过Evaluate关键字来执行Python代码，并引用pandas库完成任务。\n</thought>\n\n<code_block>\n*** Keywords ***\ncsv转Excel\n    # 设置CSV和Excel文件名称\n    ${csv_file}  Set Variable  calendar.csv\n    ${xlsx_file}  Set Variable  import_calendar.xlsx\n\n    # 读取CSV数据\n    ${csv_data}  Evaluate  pd.read_csv(${csv_file})  modules=pd\n\n    # 将CSV数据保存为Excel格式\n    Evaluate  ${csv_data}.to_excel(${xlsx_file}, index=None, header=True)  modules=pd\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向弹窗中的表格第一行中依次输入多个值：行1、2、2024/09/15、2024/09/14～2024/09/21，OPTIONS_1",
        "output": "<thought>\n要实现向弹窗中的表格第一行输入多个值，可以使用 `FillRow` 关键字。具体步骤如下：\n1. 使用 `FillRow` 关键字并指定基准元素为 `POPUP`，表示操作的是弹窗中的表格。\n2. 依次填入所需的值。\n\n考虑到每个值需要填写到不同的单元格中，可以一行代码实现所有值的填写。\n</thought>\n\n<code_block>\n# 向弹窗中的表格第一行输入多个值\nFillRow | 1 | 行1 | 2 | 2024/09/15 | 2024/09/14～2024/09/21 | OPTIONS_1 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面上应该有这些文案：规格  全端口模式  加速器费用",
        "output": "<thought>\n根据场景描述，我们需要在页面上检查是否同时包含多个文本内容：“规格”、“全端口模式”和“加速器费用”。可以使用关键字 `CheckHasText` 来实现这一功能，因为它支持在页面中查找多个文本内容。\n</thought>\n\n<code_block>\n# 校验页面同时包含文本 \"规格\"、\"全端口模式\" 和 \"加速器费用\"\nCheckHasText | 规格 | 全端口模式 | 加速器费用\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面弹框中没有：协议 端口，即检查页面不包含这些给定文案",
        "output": "<thought>\n我们需要验证弹框中不包含文本“协议”和“端口”。可以使用CheckNotHasText关键字来实现此功能，设置base参数为POPUP以限定范围为弹框。\n</thought>\n\n<code_block>\n# 校验弹框中没有出现文本“协议”和“端口”\nCheckNotHasText | 协议 | 端口 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：发送邮件，接受 ${emailAddress}, ${subject}, ${body} 参数，分别表示电子邮箱地址，主题和正文，关键字会输入邮箱地址、主题和正文，并点击发送",
        "output": "<thought>\n首先，我们需要分别给\"电子邮件地址\"，\"主题\"和\"正文\"字段设置为对应的参数值。我选择使用BatchSetFields关键字，这个关键字可以接收多个字段值进行设置，使代码更简洁。然后我们点击发送按钮来完成发送。这里我们使用Click关键字，因为\"发送\"可能是文本值。\n</thought>\n\n<code_block>\n发送邮件\n    [Arguments]  ${emailAddress}  ${subject}  ${body}\n    # 设置邮箱地址，邮件主题和正文\n    BatchSetFields | 邮箱地址=${emailAddress} | 主题=${subject} | 正文=${body}\n    # 点击发送按钮\n    Click | 发送\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向表格第一行中一次输入：${EMPTY}, 今天的日期：年/月/日格式, 1000.01",
        "output": "<thought>\n这个场景需要输入信息到表格的第一行，可以使用关键字`FillRow`来实现。因为需要输入今天的日期，可以使用Robot Framework的内置关键字`Get Current Date`来获取当前日期。然后将这三个值一起输入到表格的第一行中。\n</thought>\n\n<code_block>\n# 获取当前日期\n${date}   Get Current Date  result_format=%Y/%m/%d\n\n# 向表格第一行中一次输入：${EMPTY}, 今天的日期：年/月/日格式, 1000.01\nFillRow  |  1  |  ${EMPTY}  |  ${date}  |  1000.01\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击整体数据分析左侧的广告数据分析文字\n ",
        "output": "<thought>\n 首先，确定\"整体数据分析\"和\"广告数据分析\"都是文本，而且需要点击的目标是\"整体数据分析\"文本左侧的\"广告数据分析\"文本。因此，我们可以使用“ClickTextToTheDirectionOf”关键字，其中基准元素是\"整体数据分析\"，方向是左侧，目标文本是\"广告数据分析\"。\n </thought>\n \n <code_block>\n # 点击整体数据分析左侧的广告数据分析\n ClickTextToTheDirectionOf | 整体数据分析 | left | 广告数据分析\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到 模糊搜索class为 style__UISubTitle，且内容为 【禁用】自动化-非托管-基础 的element",
        "output": "<thought>\n为了解决这个问题，我们需要找到class为style__UISubTitle的元素，并且其内容包含【禁用】自动化-非托管-基础。可以使用FindElem关键字结合jquery选择器来实现。首先，可以通过一个选择器找到包含class为style__UISubTitle的元素，之后再通过:contains()选择器来匹配包含特定文本的元素。\n</thought>\n\n<code_block>\n# 查找class包含style__UISubTitle，且内容为【禁用】自动化-非托管-基础的元素\n${elem}  FindElem | [class*=style__UISubTitle]:contains(【禁用】自动化-非托管-基础)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字，名为 新增消息接收人，逻辑为：\n# 1.接收七个参数 姓名 邮箱 区号 手机号 基本接收管理 消息类型，都是必填参数;\n# 2.点击 新增消息接收人\n# 3.输入 姓名为 姓名，邮箱为 邮箱，手机号为 区号 加 手机号，选中 基本接收管理 左边的复选框，选中 消息类型 左边的复选框；\n# 4.点击 确定；\n# 5.校验弹框中存在文本 '接收人添加成功'，点击 确定；\n# 6.点击 姓名 最右侧的 删除；\n# 7.点击 确定；\n# 8.校验 接收人 中不包含 姓名；",
        "output": "<thought>\n首先需要编写一个关键字函数，并接收七个参数：姓名、邮箱、区号、手机号、基本接收管理、消息类型。然后，按照任务要求的步骤进行操作。使用RobotFramework 提供的关键字来实现步骤 2至 8。需要注意的是，手机号由区号加上手机号组成。对于复选框的操作可以使用 `CheckBoxOn`，而校验文本可以使用 `CheckHasText`。对于删除操作，需找准删除按钮的位置。校验最后的结果时，可以使用`CheckNotHasText`。\n</thought>\n\n<code_block>\n*** Keywords ***\n新增消息接收人\n    [Arguments]  ${姓名}  ${邮箱}  ${区号}  ${手机号}  ${基本接收管理}  ${消息类型}\n\n    # 点击新增消息接收人\n    Click | 新增消息接收人\n\n    # 输入姓名\n    SetField | 姓名 | ${姓名}\n\n    # 输入邮箱\n    SetField | 邮箱 | ${邮箱}\n\n    # 输入手机号\n    SetField | 手机号 | ${区号}${手机号}\n\n    # 勾选基本接收管理\n    CheckBoxOn | ${基本接收管理}\n\n    # 勾选消息类型\n    CheckBoxOn | ${消息类型}\n\n    # 点击确定\n    Click | 确定\n\n    # 校验接收人添加成功\n    CheckHasText | 接收人添加成功 | base=POPUP\n\n    # 点击弹窗中的确定\n    Click | 确定 | base=POPUP\n\n    # 点击姓名最右侧的删除\n    ClickIconToTheDirectionOf | ${姓名} | right | delete\n\n    # 点击确定\n    Click | 确定\n\n    # 校验接收人中不包含姓名\n    CheckNotHasText | ${姓名}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 class包含 ps 元素下的class为type的元素为：LAS",
        "output": "<thought>\n首先，我们需要找到一个class包含`ps`的元素，然后在其下找到class为`type`的子元素。可以使用`FillArea`关键字来设置目标子元素的值为`LAS`。需要构建一个合适的jquery选择器来表示这个关系。\n</thought>\n\n<code_block>\n# 设置class包含ps的元素下的class为type的元素为LAS\nFillArea | [class*=ps] [class*=type] | LAS\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "关闭页面右边出现的弹框",
        "output": "<thought>\n在这个场景中，我们需要关闭页面右边出现的弹框。因此，我们可以使用CloseNotifications关键字，该关键字用于关闭页面上的各种弹框、通知等。这是一个自定义关键字，专门用于处理此类场景。\n</thought>\n\n<code_block>\n# 关闭页面右边出现的弹框\nCloseNotifications\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选中页面class=arco-select-view的组件，并选择文本为全部接入来源的选项",
        "output": "<thought>\n需要选择class为arco-select-view的组件，并选择文本为“全部接入来源”的选项。可以使用FillArea关键字来操作该组件。\n</thought>\n\n<code_block>\n# 选择文本为“全部接入来源”的选项\nFillArea | div[class*=arco-select-view] | 全部接入来源\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 TOP 10 右边的关闭图标",
        "output": "<thought>\n首先需要点击“TOP 10”右边的“关闭”icon。根据提供的关键字，适合使用`ClickIconToTheDirectionOf`，因为可以指定基准元素和方向。具体来说，以“TOP 10”为基准，方向为右。\n</thought>\n\n<code_block>\n# 点击 TOP 10 右边的关闭 icon\nClickIconToTheDirectionOf | TOP 10 | right | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${today_day}，间隔5s点击${today_day}右侧的元素",
        "output": "<thought>\n首先，我们需要点击变量`${today_day}`所表示的元素，可以使用`Click`关键字。接下来，需要等待5秒，然后点击`${today_day}`右侧的元素。可以使用`ClickElemToTheDirectionOf`关键字来完成。为了实现时间间隔，我们可以使用`Sleep`关键字。\n</thought>\n\n<code_block>\n# 点击${today_day}元素\nClick | ${today_day}\n\n# 等待5秒\nSleep | 5s\n\n# 点击${today_day}右侧的元素\nClickElemToTheDirectionOf | ${today_day} | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 '埋点入库校验' 右侧的开关按钮",
        "output": "<thought>\n此任务要求点击 '埋点入库校验' 右侧的开关按钮。我们可以使用 `ClickElemToTheDirectionOf` 关键字来实现这一操作，其中 `base` 为文本 '埋点入库校验'，`direction` 为 `right`，`selector` 使用开关按钮的jQuery选择器。\n假设开关按钮可以通过一个通用的类名选择，比如 `[class*=switch]`，我们将其用作选择器\n</thought>\n\n<code_block>\n# 点击 '埋点入库校验' 右侧的开关按钮\nClickElemToTheDirectionOf | 埋点入库校验 | right | [class*=switch]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开智能纠错右边的开关。提示: 操作或填写具体名称的页面字段时，一般都可使用 SetField 关键字，他们自动识别字段关联的控件类型，正确完成操作。打开开关一般就是设置对应字段的值为 ON。此外，如果操作的不是具体名称的页面字段时，开关一般都是指class包含switch的按钮",
        "output": "<thought>\n 首先，我们需要找到智能纠错右边的开关。然后，我们可以使用SetField关键字将其设置为ON。\n </thought>\n \n <code_block>\n # 打开智能纠错右边的开关\n SetField | 智能纠错 | ON\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "占位符为 \"请输入名称、品牌、型号等搜索\" 的输入框输入 123321 ，点击回车",
        "output": "<thought>\n首先需要在搜索框中输入“123321”，再点击回车进行搜索。对应的关键字有`SetField`。\n</thought>\n\n<code_block>\n# 在搜索框中输入“123321” 并回车\nSetField | 请输入名称、品牌、型号等搜索 | 123321 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "清空当前鼠标定位的元素的内容，设置 操作类型 为 添加，将 满足以下 下面的 role 为 combobox 的元素 设置为：全部，点击确定，校验${first_col_values}中不包含‘1-3’",
        "output": "<thought>\n为了解决这个问题，我们需要逐步执行以下步骤：\n1. 清空当前鼠标定位的元素的内容。\n2. 设置“操作类型”为“添加”。\n3. 找到“满足以下”下面的role为combobox的元素，并将其设置为“全部”。\n4. 点击“确定”按钮。\n5. 校验变量${first_col_values}中不包含‘1-3’。\n\n对于步骤1，我们可以使用`GetActiveElem`来获取当前激活的元素，然后使用`SetField`清空其内容。步骤2可以直接使用`SetField`设置操作类型。步骤3需要先找到元素，可以使用`FindElemToTheDirectionOf`来定位，然后使用`FillArea`设置值。步骤4通过`Click`关键字完成。最后，步骤5使用`Should Not Contain`关键字进行校验。\n</thought>\n\n<code_block>\n# 获取当前激活的元素并清空内容\n${active_elem}  GetActiveElem\nFillArea | ${active_elem} | ${KEY_BACKSPACE}\n\n# 设置操作类型为添加\nSetField | 操作类型 | 添加\n\n# 找到满足以下之下的role为combobox的元素并设置为全部\n${combobox_elem}  FindElemToTheDirectionOf | 满足以下 | bottom | [role=combobox]\nFillArea | ${combobox_elem} | 全部\n\n# 点击确定\nClick | 确定\n\n# 校验${first_col_values}中不包含‘1-3’\nShould Not Contain  ${first_col_values}  1-3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "刷新页面, 点击语音聊天室, 点击主播总榜, 将团购库存数量800份移动到视野内, 并点击添加",
        "output": "<thought>\n首先，需要刷新页面后，点击文本“语音聊天室”。接下来，点击“主播总榜”文本，根据描述任务，需要确保“团购库存数量800份”在视野内，然后点击“添加”按钮。\n</thought>\n\n<code_block>\n# 刷新页面\nRefreshPage\n\n# 点击语音聊天室\nClick | 语音聊天室\n\n# 点击主播总榜\nClick | 主播总榜\n\n# 将团购库存数量800份移动到视野内\nMoveIntoView | :contains(团购库存数量800份)\n\n# 点击添加\nClick | 添加\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class=arco-checkbox-text包含删除的文本",
        "output": "<thought>\n要点击class为arco-checkbox-text且包含删除的文本，可以使用ClickElem关键字，并结合jquery选择器来实现。通过选择器来精确定位需要操作的元素。\n</thought>\n\n<code_block>\n# 点击class为arco-checkbox-text且包含删除的文本\nClickElem | [class=arco-checkbox-text]:contains(删除)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置字段类型为数值、设置字段值为test、设置判断符为!=、设置字段类型为数值列表。提示，这是批量设置多个字段，可用BatchSetFields",
        "output": "\n    \n<thought>\n 这个场景需要批量设置多个字段的值。可以使用`BatchSetFields`关键字。根据需求，需要设置字段类型为数值、字段值为test、判断符为!=、字段类型为数值列表。\n </thought>\n \n <code_block>\n # 批量设置字段类型、字段值和判断符\n BatchSetFields  字段类型=数值  字段值=test  判断符=!\\=  字段类型=数值列表\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面空白处让弹窗消失",
        "output": "<thought>\n为了让弹窗消失，我们可以通过点击页面的空白处来实现。在这个场景中，我们使用\"ClickWhiteArea\"关键字来点击空白区域。\n</thought>\n\n<code_block>\n# 点击页面空白处\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 '添加加速区域' button 处于 disable 不可点击状态",
        "output": "<thought>\n解决问题思路：根据要求需要校验一个按钮的状态，首先需要找到该按钮的jquery选择器，然后使用CheckElemDisabled关键字进行校验。\n</thought>\n\n<code_block>\n# 校验 '添加加速区域' button 处于 disable 不可点击状态\nCheckElemDisabled  button:contains('添加加速区域')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘课程列表’ 下方第一个单元格",
        "output": "<thought>\n在这个场景中，我们需要点击位于“课程列表”文本下方的第一个单元格。可以使用`ClickElemToTheDirectionOf`关键字来实现此功能。根据需求分析，应该选择“课程列表”作为基准元素，方向为下方（bottom），选择器可以为单元格的通用选择器`td`，并指定第一个单元格（即索引为0）。\n</thought>\n\n<code_block>\n# 点击‘课程列表’下方的第一个单元格\nClickElemToTheDirectionOf | 课程列表 | bottom | td:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 添加单品，等待2s，点击下一步，当页面出现编辑免审信息，点击 编辑更多信息，等待页面渲染完成，点击 售卖延期 左侧的 查看",
        "output": "<thought>\n首先，使用 `Click` 关键字点击“添加单品”，然后使用 `Sleep` 等待2秒。接下来，再次使用 `Click` 点击“下一步”。为了等待页面出现“编辑免审信息”，可以使用 `WaitText`。当文本出现后，点击“编辑更多信息”。最后，等待页面渲染完成后，使用 `ClickTextToTheDirectionOf` 点击“售卖延期”左侧的“查看”。\n</thought>\n\n<code_block>\n# 点击“添加单品”\nClick | 添加单品\n\n# 等待2秒\nSleep | 2s\n\n# 点击“下一步”\nClick | 下一步\n\n# 等待页面出现“编辑免审信息”\nWaitText | 编辑免审信息\n\n# 点击“编辑更多信息”\nClick | 编辑更多信息\n\n# 等待页面渲染完成\nWaitLoading\n\n# 点击“售卖延期”左侧的“查看”\nClickTextToTheDirectionOf | 售卖延期 | left | 查看\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成后，判断如果页面存在 class为tree-node-name 且文本包含 ${task_name} 的元素，就把鼠标移动到满足此条件的最后一个元素上",
        "output": "<thought>\n首先，使用`WaitLoading`等待页面加载完成。然后，使用`FindElem`结合jQuery选择器查找所有class为`tree-node-name`且文本包含`${task_name}`的元素。接着，使用`IsAnyElemExisting`来判断是否存在这样的元素。如果存在，则移动鼠标到满足条件的最后一个元素上。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 查询所有符合条件的元素\n${elem}  FindElem | [class=tree-node-name]:contains(${task_name})\n\n# 判断是否存在符合条件的元素\n${exist}  IsAnyElemExisting | [class=tree-node-name]:contains(${task_name})\n\n# 如果存在，移动到最后一个符合条件的元素上\nIF  ${exist}\n    MoToElem  [class=tree-node-name]:contains(${task_name}):eq(-1)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 检查页面无报错",
        "output": "<thought>\n 为了检查页面是否存在报错，可以使用关键字`CheckErrMsg`来校验页面是否有异常提示。如果页面存在异常提示，该关键字将抛出异常。因此，直接使用`CheckErrMsg`即可完成该任务。\n </thought>\n \n <code_block>\n # 检查页面是否有异常提示\n CheckErrMsg\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果class有包含arco-dropdown-menu-item的元素且包含开启，点击开启",
        "output": "<thought>\n首先需要判断是否存在class包含`arco-dropdown-menu-item`且文本包含`开启`的元素。如果存在，则点击该元素。\n</thought>\n\n<code_block>\n# 查找class包含arco-dropdown-menu-item且文本包含开启的元素\n${exist}  IsAnyElemExisting | [class*=arco-dropdown-menu-item]:contains(开启)\n\n# 如果元素存在，点击它\nIF  ${exist}\n    ClickElem  [class*=arco-dropdown-menu-item]:contains(开启)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "关闭弹窗",
        "output": "<thought>\n关闭弹窗可以直接使用CloseNotifications关键字来实现，因为它可以关闭页面上的各种弹窗/通知/问卷/新手引导等提示。\n</thought>\n\n<code_block>\n# 关闭页面上的弹窗/通知\nCloseNotifications\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入版本类型 实验组",
        "output": "<thought>\n这个任务可以通过使用SetField关键字来完成。在这种情况下，我们只需要在特定的字段（在本例中为\"版本类型\"）中键入所需的文本（在本例中为\"实验组\"）。\n</thought>\n\n<code_block>\n# 输入实验组到版本类型字段\nSetField | 版本类型 | 实验组\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置表格中第一行第6列的值 为2024/12/05",
        "output": "<thought>\n要设置表格中第一行第6列的值，可以使用 `FillCell` 关键字。具体参数为：`row_name_or_id=1` 表示第一行，`col_name_or_id=6` 表示第6列，`val=2024/12/05` 表示要设置的值。\n</thought>\n\n<code_block>\n# 设置表格中第一行第6列的值为2024/12/05\nFillCell | 1 | 6 | 2024/12/05\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 服务工单 的 span，设置OCSP 装订 开关为 关闭，设置 顾客不可消费日期为多个值：节假日不可用、圣诞节，获取 ‘团购库存数量’ 字段的值，校验他为 0 ",
        "output": "<thought>\n首先，点击“服务工单”的span元素。然后，设置“OCSP装订”开关为“关闭”，可以使用SetField关键字。接下来，为“顾客不可消费日期”字段设置多个值。最后，获取“团购库存数量”字段的值，并验证其值为0。\n</thought>\n\n<code_block>\n# 点击 服务工单 的 span\nClickElem | span:contains(服务工单)\n\n# 设置 OCSP 装订 开关为 关闭\nSetField | OCSP 装订 | 关闭\n\n# 设置 顾客不可消费日期为多个值：节假日不可用、圣诞节\nSetField | 顾客不可消费日期 | 节假日不可用 | 圣诞节\n\n# 获取 ‘团购库存数量’ 字段的值\n${stock_quantity}  GetFieldVal | 团购库存数量\n\n# 校验 团购库存数量 为 0\nShould Be Equal As Strings  ${stock_quantity}  0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证表格中有10条数据",
        "output": "<thought>\n首先，考虑到需要验证表格中的数据行数，应该使用`CheckRowCount`关键字。这个关键字能够校验表格的行数是否为指定值。在这个场景中，我们需要检查表格是否有10条数据，因此应该将参数设置为10。\n</thought>\n\n<code_block>\n# 验证表格中有10条数据\nCheckRowCount | 10\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "id 为 a 的 button 的后代元素 a 是否存在",
        "output": "<thought>\n为了检查id为a的button的后代元素a是否存在，我们可以使用IsAnyElemExisting关键字。其中的jQuery选择器\"button[id='a'] a\"，代表选取id为a的button元素的后代元素a。\n</thought>\n\n<code_block>\n# 判断id为a的button的后代元素a是否存在\n${exist}  IsAnyElemExisting | button[id='a'] a\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "若果表格中包含 ‘张三’ 就点击 ‘建联’",
        "output": "<thought>\n要解决这个问题，首先需要判断表格中是否包含文本'张三'。可以使用关键字`IsAnyTextExisting`或`IsRowContainsText`来确认'张三'是否存在于表格中。假设这是一个单表格，我们可以直接用`IsRowContainsText`来判断。如果存在，就使用`Click`关键字来点击'建联'按钮。\n</thought>\n\n<code_block>\n# 判断表格中是否有“张三”这一行\n${exist}  IsRowContainsText | 张三\n\n# 如果存在张三，则点击“建联”\nIF  ${exist}\n    Click  建联\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 团购库存数量 右侧未填入数值。提示：获取团购库存数量字段的值进行校验",
        "output": "<thought>\n需要获取“团购库存数量”字段的值，并检查该值是否为空或未输入，使用 `GetFieldVal` 获取字段值，然后通过内建的 `Should Be Equal As Strings` 检查值。\n</thought>\n\n<code_block>\n# 获取团购库存数量字段的值\n${val}  GetFieldVal  团购库存数量\n\n# 校验值是否为空\nShould Be Equal As Strings  ${val}  \"\"\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“校验url”的关键词，接受url参数，作用是：先获取当前页面的url再和接受的url进行对比，如果不同则抛出异常",
        "output": "<thought>\n解决问题思路：\n1. 使用关键字GetCurrentUrl来获取当前页面的URL\n2. 使用关键字Should Be Equal来比较当前URL和参数URL是否相同，如果不相同，就抛出\"URL不匹配\"的异常提示\n</thought>\n\n<code_block>\n校验url\n    [Arguments]  ${url}\n    ${current_url}=  GetCurrentUrl\n    Should Be Equal  ${current_url}  ${url}  errMsg=URL不匹配\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 删除 经办人 数据",
        "output": "<thought>\n 在这个场景中，我们的任务是删除\"经办人\"数据。我们可以通过使用“SetField”关键字来达到这个目标，该关键字可以用于操作页面字段并将其值设置为我们想要的值。在这种情况下，我们想要将\"经办人\"字段的值清空，所以我们可以使用特殊值\"${KEY_BACKSPACE}\"来达到这个目标。这将模拟键盘上的\"Backspace\"键的按下，从而清空\"经办人\"字段的值。\n </thought>\n \n <code_block>\n # 删除\"经办人\"数据\n SetField | 经办人 | ${KEY_BACKSPACE}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击前5个 class包含preview-pic的元素",
        "output": "<thought>\n对于这个任务，我们需要点击前5个class包含preview-pic的元素。可以使用ClickElem关键字，并结合FOR循环来遍历和点击这些元素。jQuery选择器将使用:eq(index)来定位。\n</thought>\n\n<code_block>\n# 循环遍历前5个包含特定class的元素\nFOR  ${index}  IN RANGE  0  5\n    # 点击第${index+1}个class包含preview-pic的元素\n    ClickElem  [class*=preview-pic]:eq(${index})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成15min前的时间，格式为：2024-11-11 10:12:09，可以使用 Subtract Time From Date 实现",
        "output": "<thought>\n生成15min前的时间，可以使用 Subtract Time From Date 关键字，这个关键字可以从一个日期/时间字符串中减去指定的时间。需要注意的是，Subtract Time From Date 的时间单位是秒，所以计算15分钟需要转换成900秒。\n<thought>\n\n<code_block>\n# 获取当前时间\n${current_time}   Get Current Date  result_format=%Y-%m-%d %H:%M:%S\n\n# 计算15min前的时间\n${before_time}   Subtract Time From Date  ${current_time}  900 \n# 输出15min前的时间\nLog  ${before_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "模块 选择 OpenSearch FluenBit",
        "output": "<thought>\n要解决这个问题，我们需要将“模块”字段选择为“OpenSearch FluenBit”这个选项。可以使用`SelectOptionForField`关键字，因为它允许我们为指定字段选择一个文本选项。在此场景中，字段名为“模块”，选项为“OpenSearch FluenBit”。\n</thought>\n\n<code_block>\n# 将‘模块’字段选择为‘OpenSearch FluenBit’\nSelectOptionForField | 模块 | OpenSearch FluenBit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘主播列表’，点击表格第一行‘主播详情’，在主播详情弹框中将‘主播’设为：‘运营经纪人’，如果存在‘开始上麦’，就点击它",
        "output": "<thought>\n首先，使用Click关键字点击‘主播列表’。然后，使用ClickTextOfRow关键字点击表格第一行的‘主播详情’。在弹出的主播详情弹框中，使用SetField将‘主播’字段设为‘运营经纪人’。最后，使用IsAnyTextExisting检查弹框中是否存在‘开始上麦’，如果存在就点击它。\n</thought>\n\n<code_block>\n# 点击‘主播列表’\nClick  主播列表\n\n# 点击表格第一行的‘主播详情’\nClickTextOfRow  1  主播详情\n\n# 在弹窗中将‘主播’设为‘运营经纪人’\nSetField  主播  '运营经纪人'  base=POPUP\n\n# 检查是否存在‘开始上麦’，如果存在则点击\n${exist}  IsAnyTextExisting  开始上麦  base=POPUP\nIF  ${exist}\n    Click  开始上麦  base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面滚动到最下方，支持Spot  选中否，设置支持ESI  选中否，设置专有宿主机  选中否",
        "output": "<thought>\n首先需要进行页面滚动操作以确保可以批量设置这些选项。然后使用批量设置关键字BatchSetFields批量设置“支持Spot”、“支持ESI”和“专有宿主机”为“否”。选择“否”通常是一个选项操作，可以通过参数传递来实现。\n</thought>\n\n<code_block>\n# 页面向下滚动到最下方\nPageDown | 5\n\n# 批量设置支持Spot、支持ESI、专有宿主机为否\nBatchSetFields  支持Spot=否  支持ESI=否  专有宿主机=否\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“用户绑定飞书通过UserID匹配”的关键字，作用是先点击class 为arco-link 的元素，然后点击用户绑定，等待 1 秒后点击第 1 个手动绑定，然后点击手机号后点击User Id，检查页面包含placeholder 为请输入完整User Id进行搜索的元素，最后点击确定按钮",
        "output": "<thought>\n为了解决这个问题，我们需要依次执行以下步骤：\n1. 点击class为arco-link的元素。\n2. 点击“用户绑定”。\n3. 等待1秒。\n4. 点击第一个“手动绑定”。\n5. 点击“手机号”。\n6. 点击“User Id”。\n7. 检查页面中是否存在占位符为“请输入完整User Id进行搜索”的元素。\n8. 点击“确定”按钮。\n\n我们可以使用如下关键字：\n- `ClickElem`用于点击元素。\n- `Sleep`用于等待。\n- `CheckHasElem`用于检查页面元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n用户绑定飞书通过UserID匹配\n    # 点击 class 为 arco-link 的元素\n    ClickElem  [class=arco-link]\n    \n    # 点击 用户绑定\n    Click  用户绑定\n    \n    # 等待 1 秒\n    Sleep  1s\n    \n    # 点击第一个 手动绑定\n    Click  手动绑定  idx=0\n    \n    # 点击 手机号\n    Click  手机号\n    \n    # 点击 User Id\n    Click  User Id\n    \n    # 检查页面包含 placeholder 为\"请输入完整User Id进行搜索\"的元素\n    CheckHasElem  input[placeholder=\"请输入完整User Id进行搜索\"]\n    \n    # 点击 确定 按钮\n    Click  确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class=\"arco-input-tag-inner\"控件，并选择名字为${name1}的选项",
        "output": "<thought>\n首先，应点击class为\"arco-input-tag-inner\"的控件，然后使用`SelectOption`关键字选择名字为`${name1}`的选项。由于选择器是基于class的，我们可以使用`ClickElem`来点击元素。\n</thought>\n\n<code_block>\n# 点击class为\"arco-input-tag-inner\"的控件\nClickElem | [class=arco-input-tag-inner]\n\n# 选择名字为${name1}的选项\nSelectOption | ${name1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Click | 查看详情 | near=my活动",
        "output": "<thought>\n我们需要在\"活动\"文本附近点击\"查看详情\"，这可以使用关键字Click并结合near参数来实现。首先，我们需要确保定位到\"活动\"这个文本，然后在其附近查找\"查看详情\"文本并进行点击操作。\n</thought>\n\n<code_block>\n# 点击\"活动\"附近的\"查看详情\"\nClick | 查看详情 | near=活动\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面应该不包含 x",
        "output": "<thought>\n需要校验页面不包含给定文本\"x\"，可以使用CheckNotHasText关键字。\n</thought>\n\n<code_block>\n# 校验页面不包含文本x\nCheckNotHasText | x\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测页面无异常",
        "output": "<thought>\n为检测页面无异常，可以使用CheckErrMsg和CheckWhiteScreen关键字。CheckErrMsg用于校验页面是否有异常提示，而CheckWhiteScreen用于检测页面是否白屏。\n</thought>\n\n<code_block>\n# 检查页面是否有异常提示\nCheckErrMsg\n\n# 检查页面是否有白屏\nCheckWhiteScreen\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间戳和Case名字",
        "output": "<thought>\n为了获取当前时间戳，可以使用RF内置的获取当前时间的关键字。根据提示，我们可以从RF的内置变量中获取用例名字。此外，可以考虑使用 `Evaluate` 执行Python代码来获取时间戳。\n</thought>\n\n<code_block>\n# 获取当前时间戳\n${timestamp}  Evaluate  time.time()  modules=time\n\n# 获取当前用例名字\n${test_name}  Set Variable  ${TEST NAME}\n\n# 打印时间戳和用例名字\nLog  当前时间戳: ${timestamp}, Case名字: ${test_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“点击任一文本”，接受 args 参数，作用是尝试点击给定的一个或多个 args",
        "output": "<thought>\n这个任务需要根据传入的参数逐一点击文本。可以使用“ClickAny”关键字来实现该功能，因为它能够处理多个文本参数并尝试点击其中任意一个。\n</thought>\n\n<code_block>\n*** Keywords ***\n点击任一文本\n    [Arguments]  @{args}\n    # 尝试依次点击传入的多个文本\n    ClickAny  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向请输入英文名称输入：w，设置序号为2的字段类型为：Decimal，向序号为2的字段描述输入：test",
        "output": "<thought>\n根据描述的场景，我们需要首先在请输入英文名称的输入框中输入w，接着设置序号为2的字段类型为Decimal，最后向序号为2的字段描述输入test。这里我们可以使用SetField关键字来实现输入操作，并分别设置idx参数为对应的序号。\n</thought>\n\n<code_block>\n# 向请输入英文名称输入框中输入w\nSetField | 请输入英文名称 | w\n\n# 设置序号为2的字段类型为：Decimal\nSetField | 字段类型 | Decimal | idx=1\n\n# 向序号为2的字段描述输入：test\nSetField | 字段描述 | test | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开地址为TEST_URL的页面，其中TEST_URL被赋值为baidu.com",
        "output": "<thought>\n在这个任务中，我需要打开指定的URL，然后考虑如何在Robot Framework中使用OpenUrl关键字完成这项任务。我知道TEST_URL被赋值为baidu.com，因此我需要确保在OpenUrl命令中使用这个URL。这里不需要使用任何复杂的选择器或者脚本语言的执行，只需要一个简单的OpenUrl调用。\n</thought>\n\n<code_block>\n# 打开指定的URL页面\nOpenUrl | baidu.com\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击项目控制台，点击复查配置",
        "output": "<thought>\n需要依次点击两个文本，按照顺序，先点击“项目控制台”，再点击“复查配置”。适合使用`ClickTextOneByOne`关键字。\n</thought>\n\n<code_block>\n# 依次点击项目控制台和复查配置\nClickTextOneByOne | 项目控制台 | 复查配置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面出现小弹窗包含文字原密码错误",
        "output": "<thought>\n为了解决此问题，需要校验页面上出现的一个弹窗是否包含文本“原密码错误”。可以使用关键字`CheckHasText`，并将`base`参数设置为`POPUP`来实现此功能。\n</thought>\n\n<code_block>\n# 校验弹窗中出现文字“原密码错误”\nCheckHasText | 原密码错误 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 拦截方式后面的 自动限速",
        "output": "<thought>\n需要点击“拦截方式”后面的“自动限速”文本。可以使用`ClickTextToTheDirectionOf`关键字，通过定位“拦截方式”文本，然后选择它右边的“自动限速”。\n</thought>\n\n<code_block>\n# 点击拦截方式右边的自动限速\nClickTextToTheDirectionOf | 拦截方式 | right | 自动限速\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将title=\"表格\"的元素拖至id为aeolian-editor-container的元素上",
        "output": "<thought>\n我的解决思路是：将指定的两个元素分别使用jquery选择器确定，然后调用\"Drag And Drop\"关键字将需要拖动的元素拖到目标元素上。拖动元素的选择器通过 `title=\"表格\"` 可以确定，目标元素的选择器通过 `id=\"aeolian-editor-container\"` 可以确定。\n</thought>\n\n<code_block>\n# 定义需要拖动的元素和目标元素的jquery选择器\n${srcElem} =    Set Variable    [title=\"表格\"]\n${targetElem} =    Set Variable    [id=aeolian-editor-container]\n\n# 使用DAndD关键字将指定元素拖动至目标元素上\nDAndD | ${srcElem} | ${targetElem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为'配置证书'的关键字，接受参数：证书来源，证书类型，配置模式，选择证书，域名名称，参数默认值均为EMPTY，逻辑如下：\n    # 1. 设置 证书来源为：证书来源\n    # 2. 设置 证书类型为：证书类型\n    # 3. 设置 配置模式为：配置模式\n    # 4. 设置 选择证书为：选择证书\n    # 5. 如果 配置模式为：单证书，则 点击弹窗中 table的第一行的radio\n    # 6. 如果 配置模式为：双证书，则 点击弹窗中 第一个添加到已选，第二个添加到已选\n    # 7. 点击 弹框中的 下一步\n    # 8. 设置 可选域名下方 请输入域名名称 输入框 为：可选域名名称\n    # 9. 点击勾选 域名名称\n    # 10. 点击 弹框中的 下一步\n    # 11. 点击 弹框中的 确定",
        "output": "<thought>\n为了解决这个问题，我将创建一个关键字“配置证书”，并使用提供的关键字来实现各个步骤。首先，我将设置证书来源、证书类型、配置模式和选择证书的字段值。在根据配置模式的不同进行步骤分支：如果是单证书，则点击弹窗中表格的第一行的radio；如果是双证书，则点击第一个和第二个“添加到已选”按钮。之后，依次点击弹窗中的“下一步”，设置域名名称，勾选域名名称，最后再次点击“下一步”和“确定”。\n</thought>\n\n<code_block>\n*** Keywords ***\n配置证书\n    [Arguments]  ${证书来源}=EMPTY  ${证书类型}=EMPTY  ${配置模式}=EMPTY  ${选择证书}=EMPTY  ${域名名称}=EMPTY\n    # 设置证书来源\n    SetField  证书来源  ${证书来源}\n    # 设置证书类型\n    SetField  证书类型  ${证书类型}\n    # 设置配置模式\n    SetField  配置模式  ${配置模式}\n    # 设置选择证书\n    SetField  选择证书  ${选择证书}\n\n    # 根据配置模式进行分支处理\n    IF  '${配置模式}' == '单证书'\n        # 点击弹窗中表格第一行的radio\n        ClickElemOfRow  1  :radio  base=POPUP\n    ELSE IF  '${配置模式}' == '双证书'\n        # 点击第一个添加到已选\n        Click  添加到已选  base=POPUP\n        # 点击第二个添加到已选\n        Click  添加到已选  idx=1  base=POPUP\n    END\n\n    # 点击弹框中的下一步\n    Click  下一步  base=POPUP\n\n    # 设置可选域名下方的域名名称\n    SetField  请输入域名名称  ${域名名称}  near=可选域名\n\n    # 勾选域名名称\n    CheckBoxOn  ${域名名称}\n\n    # 点击弹框中的下一步\n    Click  下一步  base=POPUP\n\n    # 点击弹框中的确定\n    Click  确定  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“修改${name}的单位为”的关键字，接口参数 text，作用是：\n1. 输入name 到 “请输入属性名”中，查询\n2. 点击编辑，校验页面包含“编辑统计口径”内容\n3. 在class包含ant-modal-body的 第2个后代元素中输入 text\n4. 点击确定，等待页面出现成功",
        "output": "<thought>\n首先，我们需要在“请输入属性名”中输入name，然后执行查询操作。接下来，点击编辑按钮，并校验页面是否包含“编辑统计口径”。在找到的第二个后代元素中输入`text`。最后，点击确定按钮，等到页面显示“成功”为止。\n</thought>\n\n<code_block>\n*** Keywords ***\n修改${name}的单位为\n    [Arguments]  ${text}\n    # 输入 name 到“请输入属性名”中进行查询\n    SetField | 请输入属性名 | ${name} | enter=True\n    \n    # 点击编辑按钮\n    Click | 编辑\n    \n    # 校验页面包含“编辑统计口径”\n    CheckHasText | 编辑统计口径\n    \n    # 在 class 包含 ant-modal-body 的第2个后代元素中输入 ${text}\n    ${modal_body}  FindElem | [class*=ant-modal-body] *:eq(1)\n    FillArea | ${modal_body} | ${text}\n    \n    # 点击确定按钮\n    Click | 确定\n    \n    # 等待页面出现“成功”\n    WaitText | 成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 \"全选\"",
        "output": "<thought>\n要点击弹窗中的 \"全选\"，可以使用Click关键字，设置base=POPUP，表示在弹窗中查找。\n</thought>\n\n<code_block>\n# 点击弹窗中的 \"全选\"\nClick | 全选 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "parse string to json",
        "output": "<thought>\n解决问题思路: 应该使用RF的内置关键字来解析字符串为JSON对象。如果没有直接的关键字，可以考虑使用Evaluate执行Python的json.loads方法。\n</thought>\n\n<code_block>\n# 解析字符串为JSON对象\n${json_obj}  Evaluate  json.loads($json_str)  modules=json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量 date 应该满足这个模式：2023-11-12 03:02",
        "output": "<thought>\n此问题主要在于校验变量date是否满足特定格式。Robot Framework 的 Should Match Regexp 关键字可以用于检测字符串是否满足特定的正则表达式。在这里，表达式 '\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}' 可以匹配日期格式 '2023-11-12 03:02'，其中 \\\\d{4} 表示四位数字（年份），\\\\d{2} 表示两位数字（月份、日期、小时、分钟）。\n</thought>\n\n<code_block>\n# 使用 Should Match Regexp 关键字校验 date 是否满足格式\nShould Match Regexp  ${date}  \\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 远程连接 右侧的元素",
        "output": "<thought>\n解决问题思路：\n1. 根据需求，需要点击 \"远程连接\" 右侧的元素。\n2. 使用 `ClickElemToTheDirectionOf` 关键字，其中基准元素选取 \"远程连接\"，方向选取 \"right\"，选择器为 \"*\"\n3. 生成对应的代码。\n</thought>\n\n<code_block>\n# 点击 \"远程连接\" 右侧的元素\nClickElemToTheDirectionOf | 远程连接 | right | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前年份的1月1号，格式为y-m-d",
        "output": "<thought>\n要获取当前年份的1月1号的日期，可以使用Robot Framework内置的时间处理关键字。首先，我们需要获取当前年份，然后构造1月1号的日期。`Get Current Date`关键字可以用来获取当前的完整日期。之后，我们可以使用`Convert Date`或其他时间处理方法来修改日期为1月1号。\n</thought>\n\n<code_block>\n# 获取当前年份\n${current_year}  Get Current Date  result_format=%Y\n\n# 构造1月1号的日期\n${first_day_of_year}  Set Variable  ${current_year}-01-01\n\n# 打印结果，格式为 年-月-日\nLog  ${first_day_of_year}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 备注输入 已解决完成\n \n ",
        "output": "<thought>\n 根据任务要求，使用SetField来填写备注信息。由于没有提供具体位置或上下文，因此假设直接操作相关字段即可。\n </thought>\n \n <code_block>\n # 输入备注已解决完成\n SetField | 备注 | 已解决完成\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断是否存在class=\"byted-Table-Body\"的tbody下的class=\"byted-Table-Row\"的tr标签，如果存在，则点击'商品详情'",
        "output": "<thought>\n需要判断目标元素tr是否存在，可以用IsAnyElemExisting关键字。然后根据判断结果，决定是否点击文本'商品详情'。\n</thought>\n\n<code_block>\n# 判断是否存在目标tr元素\n${exist}  IsAnyElemExisting | tbody[class='byted-Table-Body'] tr[class='byted-Table-Row']\n\n# 如果存在，则点击'商品详情'\nIF  ${exist}\n    Click  商品详情\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等页面包含姓名或年龄",
        "output": "<thought>\n我们需要在页面上等待文本“姓名”或“年龄”的出现。可以使用`WaitText`关键字，因为它能接受多个参数并等待任何一个文本出现。\n</thought>\n\n<code_block>\n# 等待页面包含姓名或年龄\nWaitText | 姓名 | 年龄\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问 www.126.com",
        "output": "<thought>\n为了访问`www.126.com`，我们可以使用`OpenUrl`关键字，直接打开指定的URL。这个操作不涉及复杂的元素选择或操作，仅仅是简单的页面访问。\n</thought>\n\n<code_block>\n# 打开126邮箱主页\nOpenUrl | https://www.126.com\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘标签名称’ 为：${result}",
        "output": "<thought>\n使用SetField关键字可以设置指定字段的值。这里需要将“标签名称”字段设置为变量${result}的值，直接使用SetField即可完成。\n</thought>\n\n<code_block>\n# 设置标签名称为变量${result}的值\nSetField | 标签名称 | ${result}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用关键字 校验任务中心单据 并校验返回值为 存在",
        "output": "<thought>\n为了完成这个任务，我们需要调用一个名为`校验任务中心单据`的关键字，并校验其返回值为“存在”。在Robot Framework中，我们可以通过直接调用关键字并获取其返回值，然后使用`Should Be Equal As Strings`关键字来比较返回值和期望的字符串“存在”。这是一个典型的关键字调用和返回值校验的任务。\n</thought>\n\n<code_block>\n# 调用关键字 校验任务中心单据，并将返回值存储在变量 ${result} 中\n${result}  校验任务中心单据\n\n# 校验返回值为 \"存在\"\nShould Be Equal As Strings  ${result}  存在\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到div.arco-col:eq(1)并向其中填写多个值：hello, 1, ok",
        "output": "<thought>\n在这个任务中，我会使用RF的关键字FillArea去找到指定的div并向其填写多个值。我选择FillArea因为它可以方便地找到jquery选择器所表示的元素，并且可以填入一到多个值。\n</thought>\n\n<code_block>\n# 查找并填写div.arco-col:eq(1)\nFillArea | div.arco-col:eq(1) | hello | 1 | ok\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击展开更多，点击去退还，点击第一个<label>元素，等加载，在“请输入模糊匹配的信息”文本框内填写A",
        "output": "<thought>\n首先，使用`ClickTextOneByOne`依次点击“展开更多”和“去退还”。接下来，用`ClickElem`点击第一个`<label>`元素。然后，使用`WaitLoading`等待页面加载完成。最后，使用`SetField`在“请输入模糊匹配的信息”字段中输入\"A\"。\n</thought>\n\n<code_block>\n# 依次点击展开更多和去退还\nClickTextOneByOne | 展开更多 | 去退还\n\n# 点击第一个<label>元素\nClickElem | label:eq(0)\n\n# 等待加载完成\nWaitLoading\n\n# 在“请输入模糊匹配的信息”字段中输入A\nSetField | 请输入模糊匹配的信息 | A\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击条件1下的请选择",
        "output": "<thought>\n 通过描述，可以使用`ClickTextToTheDirectionOf`关键字来实现。首先找到\"条件1\"文本，然后在其下方点击\"请选择\"。\n </thought>\n \n <code_block>\n # 点击条件1下方的请选择\n ClickTextToTheDirectionOf | 条件1 | bottom | 请选择\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${wait} 为真，就等待页面出现 ${wait}",
        "output": "<thought>\n首先，我需要确认 `${wait}` 是否为真。如果为真，就等待文本 `${wait}` 的出现。因此，我可以使用 `IF` 语句判断 `${wait}`。如果为真，使用 `WaitText` 关键字等待 `${wait}` 出现。\n</thought>\n\n<code_block>\n# 判断${wait}是否为真\nIF  ${wait}\n    # 等待文本${wait}出现\n    WaitText  ${wait}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果  ${report_id} 为空，就抛出异常",
        "output": "<thought>\n要检查`${report_id}`是否为空，可以使用Robot Framework的条件判断语法IF。通过检查其值是否为None或空字符串来实现。如果为空，则抛出异常。\n</thought>\n\n<code_block>\n# 如果 ${report_id} 为空, 抛出异常\nIF  '${report_id}' == '' or $report_id is None\n    Fail  Report ID is empty\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面是否存在弹窗",
        "output": "<thought>\n要判断页面是否存在弹窗，我们可以使用关键字 `IsPopupExists`。这个关键字会返回一个布尔值，表示页面上是否存在弹窗。因此，代码逻辑会包括调用此关键字并根据返回值执行相应的操作，例如记录日志。\n</thought>\n\n<code_block>\n# 判断页面是否存在任何弹窗\n${status}  IsPopupExists\n\n# 如果弹窗存在，记录日志\nIF  ${status}\n    Log  \"页面存在弹窗\"\nELSE\n    Log  \"页面不存在弹窗\"\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送以下请求，从其响应的 json 中取出 Value 字段，请求如下：curl 'https://xxx.yyy.zzz.com/api/top/CDN/2021-03-01/DescribeEdgeNrtDataSummary' \\\n-H 'accept: application/json, text/plain, */*' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n--data-raw '{\"StartTime\":1717516800,\"EndTime\":1718105688,\"Project\":\"\",\"Metric\":\"flux\",\"BillingRegion\":\"\"}'",
        "output": "<thought>\n首先是使用 UiSendRequest 发送 POST 请求，然后用另一个自定义关键字 GetValuesFromJson 从收到的响应中抽取 \"Value\" 字段的值。\n</thought>\n\n<code_block>\n# 与 curl 命令对应的 RF 脚本\n# 将请求头和请求体格式化为 RF 脚本中的 JSON 对象\n# 使用 UiSendRequest 发送 POST 请求\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/api/top/CDN/2021-03-01/DescribeEdgeNrtDataSummary | {\"StartTime\":1717516800,\"EndTime\":1718105688,\"Project\":\"\",\"Metric\":\"flux\",\"BillingRegion\":\"\"} | {\"accept\": \"application/json, text/plain, */*\", \"content-type\": \"application/json;charset=UTF-8\"}\n\n# 使用 GetValuesFromJson 提取返回的 JSON 中名为 \"Value\" 的字段的值\n${value}  GetValuesFromJson | ${resp_json} | Value\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待3分钟",
        "output": "<thought>\n该场景要求等待3分钟，所以我们可以使用Sleep关键字来实现。Sleep关键字允许我们指定等待的时间长度。我们只需要传入3分钟的时间即可。\n\n</thought>\n\n<code_block>\n# 按照要求等待3分钟\nSleep  3min\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击加速器监控，选择 “实例名称”选项，等待 完成协商 按钮可点击",
        "output": "<thought>\n首先需要找到并点击“加速器监控”按钮，这是通过文本点击操作。接着选择“实例名称”选项，这是通过选择选项关键字操作。最后需要等待一个按钮“完成协商”变得可点击，这是通过等待元素出现功能来实现的。\n</thought>\n\n<code_block>\n# 点击加速器监控\nClick | 加速器监控\n\n# 选择实例名称选项\nSelectOption | 实例名称\n\n# 等待完成协商按钮可点击\nWaitElem | button:contains(完成协商)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 数据源为:业管主数据成本中心, 维护方式为：外部数据源, 字段类型为：字符串。最后校验页面有 操作成功 toast提示",
        "output": "<thought>\n使用BatchSetFields关键字可以一次性设置多个字段的值。我们可以将“数据源”、“维护方式”和“字段类型”作为字段名称，然后依次设置它们的值。最后，使用CheckHasAnyText关键字来校验页面是否显示“操作成功”的toast提示。\n</thought>\n\n<code_block>\n# 批量设置数据源、维护方式和字段类型\nBatchSetFields  数据源=业管主数据成本中心  维护方式=外部数据源  字段类型=字符串\n\n# 校验页面有操作成功toast提示\nCheckHasAnyText | 操作成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开URL https://business-boe.oceanengine.com/site/index?oew_src=login&is_new_connect=0&is_new_user=0，切换到手机登录，输入手机号12342625292，验证码9531",
        "output": "<thought>\n首先打开指定的URL。然后需要点击页面上的“手机登录”来切换登录方式。接着，使用SetField关键字输入手机号和验证码。最后，需要将手机号和验证码输入到页面的相应字段中。\n</thought>\n\n<code_block>\n# 打开指定的URL\nOpenUrl | https://business-boe.oceanengine.com/site/index?oew_src=login&is_new_connect=0&is_new_user=0\n\n# 点击切换到手机登录\nClick | 手机登录\n\n# 输入手机号\nSetField | 手机号 | 12342625292\n\n# 输入验证码\nSetField | 验证码 | 9531\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面是否包含“属性名已存在”，如果不存在则等待“确定”按钮消失，如果存在则刷新页面",
        "output": "<thought>\n首先，使用IsAnyTextExisting判断页面是否包含\"属性名已存在\"，然后使用Robot Framework的内置IF/ELSE语法，如果页面包含\"属性名已存在\"，就刷新页面，如果不存在，就等待\"确定\"按钮消失。\n</thought>\n\n<code_block>\n# 判断页面是否包含“属性名已存在”\n${exist}  IsAnyTextExisting | 属性名已存在\n\n# 如果页面包含“属性名已存在”，就刷新页面，否则等待“确定”按钮消失\nIF  ${exist}\n    RefreshPage\nELSE\n    WaitElemDisappear | button:contains(确定)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传 ${FILE_DOCX} 文件",
        "output": "<thought>\n问题需要上传一个文件，适合使用`UploadFile`关键字，该关键字允许通过指定文件路径或URL来上传文件。这里需要上传变量`${FILE_DOCX}`，所以可以直接使用`UploadFile | ${FILE_DOCX}`。\n</thought>\n\n<code_block>\n# 上传指定的DOCX文件\nUploadFile | ${FILE_DOCX}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置${type}事件”，接受 args 参数，作用是：向字段 “设置终止/起始事件” 中输入 ${type}事件 和变长参数 args",
        "output": "<thought>\n通过使用`SetField`关键字来实现所需功能。我们可以通过将`${type}`事件和变长参数`args`依次传入`SetField`中，以便将这些值输入到字段“设置终止/起始事件”中。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置${type}事件\n    [Arguments]  ${type}  @{args}\n    # 设置终止/起始事件字段\n    SetField  设置终止/起始事件  ${type}事件  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在弹窗中表格第一行输入：1.1.1.2 开启 test",
        "output": "<thought>\n为了在弹窗中的表格第一行输入内容，可以使用`FillRow`关键字。由于操作是在弹窗中，需要设置`base=POPUP`。首先选择弹窗中的表格行，然后使用`FillRow`将数据写入。\n</thought>\n\n<code_block>\n# 在弹窗中设置表格第一行的值为：1.1.1.2 开启 test\nFillRow | 1 | 1.1.1.2 | 开启 | test | tbl=1 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 start_time，end_time 这两个格式为 2024/06/01 10:00的日期转换为对应时间戳:${start_timestamp}、${end_timestamp}",
        "output": "<thought>\n为了将日期字符串转换为时间戳，我们可以使用 Robot Framework 的内置关键字 Evaluate。Evaluate 允许我们在测试代码中运行 Python 代码。我们将使用 Python 的 datetime 模块将日期字符串转换成 datetime 对象，然后将其转换成时间戳。\n</thought>\n\n<code_block>\n# 将日期字符串转换为时间戳\n${start_timestamp}    Evaluate    int(time.mktime(datetime.datetime.strptime('${start_time}', '%Y/%m/%d %H:%M').timetuple()))    modules=datetime, time\n${end_timestamp}    Evaluate    int(time.mktime(datetime.datetime.strptime('${end_time}', '%Y/%m/%d %H:%M').timetuple()))    modules=datetime, time\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断更新人是否包含uiat_factor_test如果包含则点击删除如果不包含uiat_factor_test则跳过，其实就是获取更新人字段的值并判断",
        "output": "<thought>\n解决此问题需要以下步骤：\n1. 获取“更新人”字段的值，这可以通过“GetFieldVal”关键字实现。\n2. 判断获取到的值是否包含“uiat_factor_test”，这可以通过RF的IF语句实现。\n3. 如果包含“uiat_factor_test”，我们需要点击“删除”，这可以通过“Click”关键字实现。\n4. 如果不包含，我们不需要执行任何操作，直接跳过即可。\n</thought>\n\n<code_block>\n# 获取\"更新人\"字段的值\n${val}  GetFieldVal | 更新人\n\n# 判断获取到的值是否包含“uiat_factor_test”\nIF  'uiat_factor_test' in '${val}'\n    # 如果包含“uiat_factor_test”，点击“删除”\n    Click  删除\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 已选中 右边的编辑",
        "output": "<thought>\n在这个场景中，需要实现点击文本“已选中”右边的“编辑”。可以使用`ClickTextToTheDirectionOf`关键字，指定方向为“right”，并选择目标文本“编辑”。这个关键字能够根据基准文本“已选中”去定位其右边的文本“编辑”，并执行点击操作。\n</thought>\n\n<code_block>\n# 点击“已选中”右边的“编辑”\nClickTextToTheDirectionOf | 已选中 | right | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击菜单 边缘服务，进行白屏检测，将 Period 改为 By day，2s后验证表格‘开启日期’列的内容依次为：'2024-09-10', '2024-09-11', '2024-09-12'",
        "output": "<thought>\n1. 使用ClickMenu关键字点击菜单'边缘服务'。\n2. 使用CheckWhiteScreen关键字进行白屏检测。\n3. 使用SetField关键字将'Period'字段设置为'By day'。\n4. 使用RF标准库中的'Sleep'关键字等待2秒，以确保页面数据加载完成。\n5. 使用一个循环和GetCellValue关键字获取表格中'开启日期'列的值。\n6. 校验获取到的列值与预期值'2024-09-10', '2024-09-11', '2024-09-12'是否一致。\n</thought>\n\n<code_block>\n# 点击边缘服务菜单\nClickMenu | 边缘服务\n\n# 检测白屏\nCheckWhiteScreen\n\n# 设置Period为By day\nSetField | Period | By day\n\n# 等待2秒以确保页面加载完成\nSleep | 2s\n\n# 预期的开启日期列表\n@{expected_dates}  Create List  2024-09-10  2024-09-11  2024-09-12\n\n# 循环校验表格中'开启日期'列的内容\nFOR  ${index}  IN RANGE  0  3\n   # 获取当前行的开启日期\n   ${actual_date}  GetCellValue | ${index+1} | 开启日期\n\n   # 校验当前行的开启日期是否与预期值一致\n   Should Be Equal As Strings  ${actual_date}  ${expected_dates}[${index}]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "提取${text}中成功和条中间的数字，保存至${success}",
        "output": "<thought>\n解决问题思路：使用RobotFramework的内置关键字Evaluate执行Python代码提取数字，将结果保存至变量success。\n</thought>\n\n<code_block>\n# 提取${text}中成功和条中间的数字并保存至${success}\n${success}    Evaluate    int(re.search(r'成功(\\\\d+)条', $text).group(1))    modules=re\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一行的操作列的 详情span，点击class包含arco-icon-edit右边的元素，点击我接受上述，最后我要校验${msg_content}的这个元素的文本不为空",
        "output": "<thought>\n1. 使用`ClickElemOfCell`点击第一行操作列中的详情span。\n2. 使用`ClickElemToTheDirectionOf`点击class包含arco-icon-edit右边的元素。\n3. 使用`Click`点击文本“我接受上述”。\n4. 使用`GetElemText`获取${msg_content}的元素文本。\n5. 使用`Should Not Be Empty`校验文本不为空。\n</thought>\n\n<code_block>\n# 点击第一行操作列中的详情span\nClickElemOfCell | 1 | 操作 | span:contains(详情)\n\n# 点击class包含arco-icon-edit右边的元素\nClickElemToTheDirectionOf | [class*=arco-icon-edit] | right\n\n# 点击文本“我接受上述”\nClick | 我接受上述\n\n# 获取${msg_content}的元素文本\n${text}  GetElemText | ${msg_content}\n\n# 校验${msg_content}的文本不为空\nShould Not Be Empty  ${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 try catch 语句示例",
        "output": "<thought>\nRobotFramework 从 4.0 版本开始原生支持 TRY/EXCEPT 异常处理结构，这比传统的使用 `Run Keyword And Ignore Error` 或 `Run Keyword And Expect Error` 更加直观和易读。我们需要展示如何使用这种新语法来处理可能失败的测试步骤，包括捕获特定异常和最终清理操作。\n</thought>\n\n<code_block>\n# TRY/EXCEPT 基本用法示例\nTRY\n    Click Element    id:non-existent-button\nEXCEPT    Error message contains 'not found'\n    Log    Expected error occurred: Element not found\nELSE\n    Log    This will execute if no exception occurs\nFINALLY\n    Log    This cleanup step always executes\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 修改描述 为 解决主任务\n \n ",
        "output": "<thought>\n 首先，我们需要使用SetField关键字来找到“描述”字段并修改其内容。因为没有其他信息说明“描述”字段的具体位置或特征，假设它是页面上唯一的“描述”字段。\n </thought>\n \n <code_block>\n # 修改描述 为 解决主任务\n SetField | 描述 | 解决主任务\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到表格行 ‘可视化建模_autotest’ 中的 svg class包含arco-icon-more的元素上，然后点击删除",
        "output": "<thought>\n首先需要移动鼠标到指定表格行中的目标元素上，然后执行点击删除操作。可以使用`MoveToElemOfRow`来定位并移动到目标元素上，再使用`Click`完成点击操作。\n</thought>\n\n<code_block>\n# 移动到 '可视化建模_autotest' 行中的指定元素上\nMoveToElemOfRow | 可视化建模_autotest | [class*=arco-icon-more]\n\n# 点击删除\nClick | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 生成一个以 ‘auto规则-’ 开头的字符串，填写到规则名称中",
        "output": "<thought>\n 首先，使用GenerateRandomWithPrefix生成一个以‘auto规则-’开头的随机字符串。然后，使用SetField关键字将生成的字符串填写到“规则名称”字段中。\n </thought>\n \n <code_block>\n # 生成以‘auto规则-’开头的随机字符串\n ${rule_name}  GenerateRandomWithPrefix | auto规则- | 15 | [LETTERS][NUMBERS]\n \n # 填写到规则名称中\n SetField | 规则名称 | ${rule_name}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面加载完成，超时60s，点击 包括 ‘变更’ 的按钮，base：class包括 ‘detail_info’，然后填写 ‘播放时段’ 为0000-00-15 ~ 0000-00-21",
        "output": "<thought>\n首先，使用WaitLoading关键字等待页面加载完成，最多等待60秒。接下来，使用Click关键字点击包含‘变更’的按钮，基准元素是class包括‘detail_info’。最后，使用SetField关键字填写‘播放时段’字段为‘0000-00-15 ~ 0000-00-21’。\n</thought>\n\n<code_block>\n# 等待页面加载完成，最多60秒\nWaitLoading | timeout=60\n\n# 点击class包含'detail_info'的基准元素中的‘变更’按钮\nClick | 变更 | base=[class*=detail_info]\n\n# 设置‘播放时段’为‘0000-00-15 ~ 0000-00-21’\nSetField | 播放时段 | 0000-00-15 ~ 0000-00-21\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击当前列表第一行的不感兴趣,检测是否有确认不感兴趣字符,有的话截图后点击取消。如果没有则不执行",
        "output": "<thought>\n首先，我们需要定位当前列表第一行中的\"不感兴趣\"按钮。可以使用`ClickTextOfRow`关键字来实现。接下来，我们需要检查页面中是否包含\"确认不感兴趣\"文本，可以使用`CheckHasAnyText`关键字。如果文本存在，则进行截图，并点击\"取消\"按钮，这可以使用`Click`关键字。如果文本不存在，则不进行任何操作。\n</thought>\n\n<code_block>\n# 点击当前列表第一行的不感兴趣\nClickTextOfRow | 1 | 不感兴趣\n\n# 判断页面是否有“确认不感兴趣”文本\n${exist}  IsAnyTextExisting | 确认不感兴趣\n\n# 如果存在“确认不感兴趣”\nIF  ${exist}\n    # 截图\n    Screenshot\n    # 点击取消\n    Click | 取消\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查弹窗是否存在文本为“是”的元素",
        "output": "<thought>\n为了检查弹窗中是否存在文本为“是”的元素，可以使用关键字 `CheckHasText`，并将 `base` 参数设置为 `POPUP`。这样可以限定在弹窗内进行文本检查。\n</thought>\n\n<code_block>\n# 检查弹窗中是否存在文本为“是”的元素\nCheckHasText | 是 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击xx右边的移除",
        "output": "<thought>\n 为了实现点击\"xx\"右边的\"移除\"，可以使用`ClickTextToTheDirectionOf`关键字。这个关键字允许我们基于一个参考文本（即\"xx\"）的相对方向来点击目标文本（即\"移除\"）。具体来说，我们要在\"xx\"的右边点击\"移除\"。\n </thought>\n \n <code_block>\n # 点击xx右边的移除\n ClickTextToTheDirectionOf | xx | right | 移除\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在任务ID/名称中输入：emr_modify",
        "output": "<thought>\n任务是向名为“任务ID/名称”的字段中输入“emr_modify”，这里适合使用SetField关键字。\n</thought>\n\n<code_block>\n# 在任务ID/名称字段中输入emr_modify\nSetField | 任务ID/名称 | emr_modify\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成后，设置请输入关键字为【自动化测试专用】",
        "output": "<thought>\n首先，我们需要等待页面加载完成，可以使用`WaitLoading`关键字。然后，通过`SetField`关键字设置“请输入关键字”字段为“自动化测试专用”。假设字段的名称是“关键字”。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 设置请输入关键字为“自动化测试专用”\nSetField | 请输入关键字 | 自动化测试专用\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 如果${condition_count}>0且页面不存在添加过滤条件，则xx",
        "output": "<thought>\n要解决这个问题，需要使用RF的条件判断和元素存在性检查。首先，判断变量`${condition_count}`是否大于0，然后检查页面是否不存在\"添加过滤条件\"文本。如果这两个条件都满足，则执行特定操作。\n</thought>\n\n<code_block>\n# 判断变量${condition_count}是否大于0\nIF  ${condition_count} > 0\n    # 检查页面是否不存在\"添加过滤条件\"\n    ${exist}  IsAnyTextExisting | 添加过滤条件\n    IF  not ${exist}\n        # 执行xx操作\n        Log  xx\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取元素 ${elem} 的图片并保存基准图, 命名为: 图片1",
        "output": "<thought>\n为了截取元素 ${elem} 的图片并保存为基准图，命名为“图片1”，可以使用`ElemScreenshot`关键字进行截图，然后保存为基准图。由于没有提供直接保存为基准图的关键字，可以使用`ImageDiff`进行截图并保存。\n</thought>\n\n<code_block>\n# 截取元素 ${elem} 的图片, 命名为：图片1，并保存为基准图\nImageDiff | ${elem} | pic_name=图片1 | sim=1.0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发送的 /xxx/yyy 的最后一个 delete 请求，响应的 json 中 request:body 中应该包含 hello",
        "output": "<thought>\n首先，我们需要使用 `Search Requests` 关键字来搜索发送的 `/xxx/yyy` 的最后一个 DELETE 请求。接下来，使用 `GetValuesFromJson` 关键字从响应的 JSON 中提取 `request:body` 的内容，然后使用 `Should Contain` 关键字来验证 `request:body` 中是否包含 `hello`。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 /xxx/yyy，且请求方式为 DELETE 的最后一个请求\n${resp_json}  Search Requests  /xxx/yyy  DELETE  last\n\n# 从响应的 JSON 中获取 request:body 的值\n${request_body}  GetValuesFromJson  ${resp_json}  request:body\n\n# 校验 request:body 包含 hello\nShould Contain  ${request_body}  hello\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置标签为多个值：tag1, tag2, tag3, tag4",
        "output": "<thought>\n考虑到“设置标签”这个操作对应于关键字“SetField”，而且需要设置多个值，所以将其各个值以参数形式列出即可。标签字段的名称已经确定为“标签”。\n</thought>\n\n<code_block>\n# 设置标签为多个值：tag1, tag2, tag3, tag4\nSetField | 标签 | tag1 | tag2 | tag3 | tag4\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 刷新页面",
        "output": "<thought>\n 刷新页面是一个简单的操作，可以直接使用提供的关键字 `RefreshPage` 来实现。因此，我们不需要使用其他复杂的操作或者条件分支。\n </thought>\n \n <code_block>\n # 刷新当前页面\n RefreshPage\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成明天的日期，格式为：2022-01-03，然后填入计划结束时间中",
        "output": "<thought>\n根据题目描述，我们需要完成两个步骤。首先，生成明天的日期，这个我们可以使用RF内建的日期库来完成。然后我们需要将这个日期输入到计划结束时间的控件中，我们可以使用SetField关键字来完成这个任务。\n</thought>\n\n<code_block>\n# 使用RF内建的日期库来生成明天的日期，格式为: 2022-01-03\n${tomorrow}    Get Current Date    result_format=%Y-%m-%d    increment=1 days\n\n# 将生成的日期输入计划结束时间的控件中\nSetField    计划结束时间    ${tomorrow}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 第一个 “Mac 笔记本 高配” 旁边的 class为semi-badge的对象",
        "output": "<thought>\n首先，我们需要定位到第一个“Mac 笔记本 高配”对象，然后找到它旁边的class为semi-badge的对象。考虑到这个情况，我们可以使用ClickElem关键字，首先使用JQuery选择器定位到第一个含有“Mac 笔记本 高配”文本的元素，然后在选择器中添加+sibling选择器，定位到class为semi-badge的相邻元素。\n</thought>\n\n<code_block>\n# 点击第一个 “Mac 笔记本 高配” 旁边的 class为semi-badge的对象\nClickElem | :contains('Mac 笔记本 高配'):eq(0) + [class=semi-badge]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击参数设置，设置任务描述为：今天的日期加上“test”，点击确定。点击 输入参数配置 下面的 添加参数 按钮，向输入参数配置的表格的第一行输入多个值：test、test、字符串、开、test。",
        "output": "<thought>\n首先，点击“参数设置”按钮，然后使用“SetField”关键字设置“任务描述”为“今天的日期加上‘test’”。使用“Get Current Date”获取当前日期。之后，点击“确定”按钮。接下来，点击“输入参数配置”下的“添加参数”按钮，最后使用“FillRow”在“输入参数配置”表格的第一行输入多个值。\n</thought>\n\n<code_block>\n# 点击参数设置\nClick | 参数设置\n\n# 获取当前日期并设置任务描述\n${current_date}  Get Current Date\nSetField | 任务描述 | ${current_date}test\n\n# 点击确定\nClick | 确定\n\n# 点击输入参数配置下的添加参数\nClickTextToTheDirectionOf | 输入参数配置 | bottom | 添加参数\n\n# 在输入参数配置表格的第一行输入多个值\nFillRow | 1 | test | test | 字符串 | 开 | test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测页面是否有class为c-lib-guide-button inbl的页面元素，有就点击，无则跳过",
        "output": "<thought>\n首先，使用IsAnyElemExisting关键字判断是否存在class为c-lib-guide-button inbl的元素。如果存在，则使用ClickElem关键字进行点击操作。\n</thought>\n\n<code_block>\n# 判断是否存在class为c-lib-guide-button inbl的元素\n${exist}  IsAnyElemExisting  [class=c-lib-guide-button.inbl]\n\n# 如果存在，则点击该元素\nIF  ${exist}\n    ClickElem  [class=c-lib-guide-button.inbl]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 +",
        "output": "<thought>\n在这个场景中，只需点击包含 \"+\" 文本的元素。可以直接使用 `Click` 关键字来实现该操作。\n</thought>\n\n<code_block>\n# 点击包含 \"+\" 的元素\nClick | +\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置三级目录名称为：third_test1_edit，然后点击第一个删除icon，最后点击表格第一行的+icon，勾选：我同意，点击保存，校验弹出保存成功",
        "output": "<thought>\n根据任务描述，需要完成以下步骤：\n1. 设置三级目录的名称。\n2. 点击第一个删除icon。\n3. 点击表格第一行的+icon。\n4. 勾选“我同意”。\n5. 点击保存。\n6. 校验弹出“保存成功”。\n\n使用的关键字：\n- `SetField`：设置三级目录名称。\n- `ClickIcon`：点击删除icon和保存按钮。\n- `ClickIconOfRow`：点击表格第一行的+icon。\n- `CheckBoxOn`：勾选“我同意”。\n- `CheckHasText`：校验保存成功信息。\n</thought>\n\n<code_block>\n# 设置三级目录名称为：third_test1_edit\nSetField | 三级目录 | third_test1_edit\n\n# 点击第一个删除icon\nClickIcon | delete | idx=0\n\n# 点击表格第一行的+icon\nClickIconOfRow | 1 | plus\n\n# 勾选：我同意\nCheckBoxOn | 我同意\n\n# 点击保存\nClick | 保存\n\n# 校验弹出保存成功\nCheckHasText | 保存成功 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查列表第一行 事件名称为ac_event",
        "output": "<thought>\n因为是需要校验表格中具体某个单元格的值，可以使用给定的关键字\"CheckCellHas\"，第一个参数是行，第二个参数是列（这里是事件名称），第三个参数是需要校验的文本，这里是 ac_event。所以只需要一行代码即可完成这个校验。\n</thought>\n\n<code_block>\n# 校验列表第一行 事件名称列的值为 ac_event\nCheckCellHas | 1 | 事件名称 | ac_event\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击我在想想边上的结束售卖",
        "output": "<thought>\n这个场景需要使用ClickTextToTheDirectionOf关键字来实现，因为需要点击“我在想想”这个文本附近的“结束售卖”。我们需要确定“结束售卖”的位置相对于“我在想想”的方向。假设“结束售卖”在“我在想想”的右侧。\n</thought>\n\n<code_block>\n# 点击“我在想想”右边的“结束售卖”\nClickTextToTheDirectionOf | 我在想想 | right | 结束售卖\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置带宽峰值右边输入框的值为100",
        "output": "<thought>\n为了完成这个任务，我们需要在“带宽峰值”右边找到一个input或者textarea元素，并将其值设置为100。首先，我们需要使用FindElemToTheDirectionOf关键字来定位“带宽峰值”右边的input或textarea。然后，我们可以使用FillArea关键字将值100填入到找到的元素中。\n</thought>\n\n<code_block>\n# 查找带宽峰值右边的input或textarea元素\n${elem}  FindElemToTheDirectionOf | 带宽峰值 | right | input,textarea\n\n# 向找到的元素中输入100\nFillArea | ${elem} | 100\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘压测工作流’ 这个表格行中的编辑",
        "output": "<thought>\n1. 首先需要定位到包含\"压测工作流\"的表格行\n2. 然后在该行中找到\"编辑\"文本并点击\n3. 根据提供的关键字，最适合的是ClickTextOfRow，因为它可以直接在指定行中点击文本\n4. 不需要指定表格名(tbl参数)因为题目中没有提到其他表格\n5. 不需要指定base参数因为没有提到弹窗\n</thought>\n\n<code_block>\n# 点击'压测工作流'行中的'编辑'\nClickTextOfRow    压测工作流    编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找包含 确定 或 下一步 的button元素, 用 contains 语法写",
        "output": "<thought>\n关键字 \"FindElem\" 可以利用jquery选择器来定位元素，我们的目标是找到包含某些文本的button元素。jquery的 contains 选择器可以用来选取包含指定文本的元素。因此，我们可以创建一个选择器，该选择器用于选取文本为 \"确定\" 或 \"下一步\" 的按钮。这样，我们就可以使用 \"FindElem\" 关键字和生成的选择器来查找元素。\n</thought>\n\n<code_block>\n# 创建一个选择器，该选择器用于选取包含 \"确定\" 或 \"下一步\" 文本的button元素\n${selector}  Set Variable  button:contains(确定),button:contains(下一步)\n\n# 使用 \"FindElem\" 关键字和生成的选择器来查找元素\n${elem}  FindElem | ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击当前页面上添加商品按钮，在弹出的模态框中输入商品ID，点击查询，然后勾选单选框，点击确认",
        "output": "<thought>\n首先，我们需要点击“添加商品”按钮。然后在弹出的模态框中输入商品ID并点击“查询”按钮。接下来，勾选单选框，最后点击“确认”按钮。可以使用Click、SetPopupField、CheckBoxOn等关键字来完成这些操作。\n</thought>\n\n<code_block>\n# 点击添加商品按钮\nClick | 添加商品\n\n# 在模态框中输入商品ID\nSetPopupField | 商品ID | example_id\n\n# 点击查询按钮\nClick | 查询 | base=POPUP\n\n# 勾选单选框，假设选框名为 example_name\nCheckBoxOn | example_name | base=POPUP\n\n# 点击确认按钮\nClick | 确认 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待元素item出现，45秒超时",
        "output": "<thought>\n我们可以使用`WaitElem`关键字等待指定的元素出现。需要传递选择器和超时时间。题目中只提到等待`item`元素，因此我们可以假定选择器为`item`，并设置超时为45秒。\n</thought>\n\n<code_block>\n# 等待元素item出现，超时45秒\nWaitElem | ${item} | timeout=45\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘任务名称/ID’这个表格的表头行中‘任务类型’单元格中的过滤器小图标",
        "output": "<thought>\n为了实现点击'任务名称/ID'表格的表头行中'任务类型'单元格中的过滤器icon，首先我们需要定位到'任务名称/ID'表格的表头行。然后在表头行中找到'任务类型'这一单元格，最后在该单元格内找到过滤器图标并进行点击操作。使用`ClickIconOfCell`关键字可以精确地在指定行和列的单元格中点击图标。需要注意的是，表头行可以通过特殊值HEAD进行标识。\n</thought>\n\n<code_block>\n# 点击'任务名称/ID'表格的表头行中'任务类型'单元格中的过滤器icon\nClickIconOfCell | HEAD | 任务类型 | filter | tbl=任务名称/ID\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “景区boe来客登录” 的关键字，具体为了景区服务商创建后，商家账号登录查看数据OK，具体操作为：\n# 1. 打开浏览器，访问主页 BOE_MAIN_PAGE\n# 2. 使用UI_COOKIES_jingqu登录",
        "output": "<thought>\n首先需要使用OpenBrowser关键字打开浏览器并访问主页，然后设置cookies以完成登录操作。最后，验证登录是否成功。具体步骤如下：\n1. 使用OpenBrowser关键字打开浏览器并访问主页BOE_MAIN_PAGE。\n2. 使用cookies进行登录，cookies参数为UI_COOKIES_jingqu。\n</thought>\n\n<code_block>\n*** Keywords ***\n景区boe来客登录\n    # 打开浏览器，访问主页BOE_MAIN_PAGE，并注入cookies UI_COOKIES_jingqu\n    OpenBrowser    ${BOE_MAIN_PAGE}    cookies=${UI_COOKIES_jingqu}    name=chrome\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现 插入：${add_text} 和 删除:甲方(出租方)",
        "output": "<thought>\n要实现等待页面上出现特定的文本，我们可以使用`WaitText`关键字，它可以接受多个参数，并等待页面上出现其中任一文本。这次我们要等待的文本是\"插入：\"后面跟随变量`${add_text}`的内容，以及\"删除:甲方(出租方)\"。因此，我们需要将这两个文本作为参数传递给`WaitText`关键字。\n</thought>\n\n<code_block>\n# 等待页面出现文本\"插入：${add_text}\"或\"删除:甲方(出租方)\"\nWaitText | 插入：${add_text} | 删除:甲方(出租方)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在弹窗中 文本：新建合同模板 上方的输入框中输入${temple_name}",
        "output": "<thought>\n需要在弹窗中找到文本“新建合同模板”上方的input/textarea元素，然后在该元素中输入${temple_name}。可以使用FindElemToTheDirectionOf找到该元素，再使用FillArea输入值。\n</thought>\n\n<code_block>\n# 查找弹窗中“新建合同模板”上方的input/textarea元素\n${elem}  FindElemToTheDirectionOf | 新建合同模板 | top | input,textarea | base=POPUP\n\n# 在查找到的元素中输入${temple_name}\nFillArea | ${elem} | ${temple_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器，输入百度地址，点击 “统计周期”右边的“明细”",
        "output": "<thought>\n首先使用OpenBrowser关键字打开浏览器并导航到百度页面。然后使用ClickTextToTheDirectionOf关键字点击“统计周期”右边的“明细”。\n</thought>\n\n<code_block>\n# 打开百度网址\nOpenBrowser | https://www.baidu.com\n\n# 点击“统计周期”右边的“明细”\nClickTextToTheDirectionOf | 统计周期 | right | 明细\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击显著性、相对差、绝对差、置信区间、P值、兑换LT、风险提示",
        "output": "<thought>\n为了依次点击这些元素，可以使用`ClickTextOneByOne`关键字。根据任务描述中的要求，所有的文本都会按顺序点击，因此可以直接将这些文本作为参数传递给`ClickTextOneByOne`。\n</thought>\n\n<code_block>\n# 依次点击显著性、相对差、绝对差、置信区间、P值、兑换LT、风险提示\nClickTextOneByOne | 显著性 | 相对差 | 绝对差 | 置信区间 | P值 | 兑换LT | 风险提示\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置表格第一行的状态列为  是否健康",
        "output": "<thought>\n首先，需要找到第一行的状态列，然后使用`FillCell`关键字将其设置为“是否健康”。\n</thought>\n\n<code_block>\n# 将第一行的状态列设置为“是否健康”\nFillCell | 1 | 状态 | 是否健康\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含RealtimeBehaviorIdForm__text--AAyvw，且title=zhangli.mail的元素",
        "output": "<thought>\n要点击class包含`RealtimeBehaviorIdForm__text--AAyvw`且title=`zhangli.mail`的元素，首先需要使用`ClickElem`关键字。我们将构建一个jQuery选择器来定位该元素。选择器将是`[class*='RealtimeBehaviorIdForm__text--AAyvw'][title='zhangli.mail']`。\n</thought>\n\n<code_block>\n# 点击class包含RealtimeBehaviorIdForm__text--AAyvw，且title=zhangli.mail的元素\nClickElem | [class*='RealtimeBehaviorIdForm__text--AAyvw'][title='zhangli.mail']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 响应时间过长文字，则刷新页面",
        "output": "<thought>\n首先，使用`IsAnyTextExisting`关键字检查页面是否存在“响应时间过长”文字。如果存在，则使用`RefreshPage`关键字刷新页面。RF内置的IF语法可以用于条件判断。\n</thought>\n\n<code_block>\n# 检查页面是否存在\"响应时间过长\"\n${exist}  IsAnyTextExisting  响应时间过长\n\n# 如果存在\"响应时间过长\"，则刷新页面\nIF  ${exist}\n    RefreshPage\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 请输入邮箱前缀或邮箱地址 并填写 yangjinqin.68 后再点击下一步，点击【加速器ID】右侧的全部加速器，在加速结束日期中输入 12 天后的日期：年/月/日 形式",
        "output": "<thought>\n首先，我们需要点击 \"请输入邮箱前缀或邮箱地址\" 文本，然后使用 SetField 或 SendText 来填写邮箱前缀 \"yangjinqin.68\"。接下来，点击 \"下一步\" 文本。之后需要点击 \"[加速器ID]右侧的全部加速器\"，这可以通过 ClickTextToTheDirectionOf 来实现，在字段 \"加速结束日期\" 中输入 12 天后的日期，我们可以使用 RF 标准库中的 Add Time To Date 得到未来的日期，并格式化为 \"年/月/日\" 的形式，最后使用 SetField 填入日期。\n</thought>\n\n<code_block>\n# 点击 \"请输入邮箱前缀或邮箱地址\"，输入邮箱前缀 \"yangjinqin.68\"\nClick | 请输入邮箱前缀或邮箱地址\nSendText | yangjinqin.68\n\n# 点击 \"下一步\"\nClick | 下一步\n\n# 点击 \"[加速器ID]右侧的全部加速器\"\nClickTextToTheDirectionOf | 加速器ID | right | 全部加速器\n\n# 计算 12 天后的日期并格式化为 \"年/月/日\"\n${current_date}    Get Current Date    result_format=%Y/%m/%d\n${future_date}     Add Time To Date    ${current_date}    12d    result_format=%Y/%m/%d\n\n# 在 \"加速结束日期\" 中输入计算得到的日期\nSetField | 加速结束日期 | ${future_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击最后一个弹框中的请输入",
        "output": "<thought>\n任务是点击最后一个弹框中的“请输入”按钮，在RF中我们可以使用提供的关键字来解决这个问题。考虑到有多个弹框，我们需要确定是最后一个弹窗中的元素，所以可以使用`Click`关键字配合`base=POPUP`和`popup_index=-1`来指示目标是最后一个弹窗。同时根据提供的关键字，我们可以直接点击文本“请输入”。\n</thought>\n\n<code_block>\n# 点击最后一个弹框中的“请输入”\nClick | 请输入 | base=POPUP | popup_index=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在第2个 请输入模糊匹配的信息 文本框输入A",
        "output": "<thought>\n首先要找到页面上所有名为\"请输入模糊匹配的信息\"的控件，然后选择第二个控件进行操作。由于该控件可能是input或textarea类型，我们可以使用jquery选择器来精确选择。使用SetField关键字可以实现输入操作。\n</thought>\n\n<code_block>\n# 在第2个 请输入模糊匹配的信息 input/textarea输入A\nSetField | 请输入模糊匹配的信息 | A | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择页面搜索结果的第一个",
        "output": "<thought>\n在这个场景中，我们需要选择搜索结果的第一个。假设这些结果展示在一个表格中，我们可以通过选择表格的第一行来实现这一操作。根据可用关键字，我们可以使用 `SelectTableRow` 来选择表格的行。通过指定 `row_name_or_id=1`，可以选择表格的第一行。\n</thought>\n\n<code_block>\n# 选择搜索结果的第一行\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向新增接入左侧的input输入sayid自动化测试专用2025Q4",
        "output": "<thought>\n解决这个问题我们需要定位到\"新增接入\"左侧的input元素，然后将文本\"siyid自动化测试专用2025Q4\"输入进去。可以使用`FindElemToTheDirectionOf`关键字来找到这个位置的input元素，然后使用`FillArea`关键字输入文本。\n</thought>\n\n<code_block>\n# 查找新增接入左侧的input元素\n${input_elem}  FindElemToTheDirectionOf | 新增接入 | left | input\n\n# 向找到的input元素中输入文本\nFillArea | ${input_elem} | sayid自动化测试专用2025Q4\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 “合同名称”的值，并复制给${contract_names}",
        "output": "<thought>\n首先需要获取“合同名称”字段的值，所以使用GetFieldVal关键字。然后将获取的值复制到${contract_names}变量。\n</thought>\n\n<code_block>\n# 获取“合同名称”的值\n${contract_name}  GetFieldVal | 合同名称\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "除法计算： 7.01 / 0.01",
        "output": "<thought>\n我们需要将除法计算 7.01 / 0.01 作为测试步骤的一部分。由于没有现成的关键字直接支持这种数学运算，我们可以使用 Evaluate 关键字来执行 Python 代码进行计算。\n</thought>\n\n<code_block>\n# 执行除法计算 7.01 / 0.01\n${result}    Evaluate    7.01 / 0.01\n\n# 输出结果以便检查\nLog    ${result}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将模板名称设置为：证书AI自动化企业模板Update，联系人姓名设置为：三，之后输入按tab键之后输入金，联系人邮箱设置为：update@bytedance.com,联系人手机为：8613453716398，企业名称设置为修改证书测试中心，国家/地区设置为：中华人民共和国，省份设置为：北京市，城市设置为：北京市，地址设置为：海淀区",
        "output": "<thought>\n为了完成这个任务，我需要使用多个SetField关键字来填写不同的字段值。另外，由于其中包括了按键操作，我将使用Press Keys关键字来模拟按tab键。具体字段和操作顺序如下：\n\n1. 设置模板名称\n2. 设置联系人姓名\n3. 按tab键并输入联系人姓“金”\n4. 设置联系人邮箱\n5. 设置联系人手机\n6. 设置企业名称\n7. 设置国家/地区\n8. 设置省份\n9. 设置城市\n10. 设置地址\n\n每一步都将使用SetField关键字来完成。\n</thought>\n\n<code_block>\n# 设置模板名称\nSetField | 模板名称 | 证书AI自动化企业模板Update\n\n# 设置联系人姓名\nSetField | 联系人姓名 | 三\n\n# 按tab键并输入联系人姓“金”\nPress Keys | None | TAB\nSendText | 金\n\n# 设置联系人邮箱\nSetField | 联系人邮箱 | update@bytedance.com\n\n# 设置联系人手机\nSetField | 联系人手机 | 8613453716398\n\n# 设置企业名称\nSetField | 企业名称 | 修改证书测试中心\n\n# 设置国家/地区\nSetField | 国家/地区 | 中华人民共和国\n\n# 设置省份\nSetField | 省份 | 北京市\n\n# 设置城市\nSetField | 城市 | 北京市\n\n# 设置地址\nSetField | 地址 | 海淀区\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " for 循环 7 次，每次等待 3 s，判断 ${cnt1} 大于0或者 ${cnt2}小于0 就结束循环",
        "output": "<thought>\n此任务需要构建一个循环，迭代7次。在每次迭代中，需要等待3秒，然后检查两个条件：如果变量${cnt1}大于0或者${cnt2}小于0，则结束循环。Robot Framework提供了内置的FOR循环支持，可以用于实现重复执行的逻辑。在循环中可以使用内置的IF/ELSE结构来决定是否需要中断循环。\n</thought>\n\n<code_block>\nFOR    ${index}    IN RANGE    7\n    # 每次循环中暂停3秒\n    Sleep    3s\n    \n    # 检查条件，并在满足条件时跳出循环\n    IF    ${cnt1} > 0 or ${cnt2} < 0\n        # 结束循环\n        Exit For Loop\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成毫秒级时间戳",
        "output": "<thought>\n为了生成毫秒级时间戳，我们可以利用Python的time模块。通过time.time()可以获得当前时间的秒级时间戳，将其乘以1000就能得到毫秒级时间戳。Robot Framework支持使用Evaluate关键字来执行Python代码，因此该方法可以直接用于生成所需的时间戳。\n</thought>\n\n<code_block>\n# 生成毫秒级时间戳\n${timestamp}  Evaluate  int(time.time() * 1000)  modules=time\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ‘确认’ 按钮不可点击",
        "output": "<thought>\n为了校验一个按钮是否可点击，我们可以使用CheckElemDisabled关键字。关键在于找到确认按钮的正确选择器。推测选择器应该是包含文本\"确认\"的按钮元素，即\"button:contains(确认)\"。\n</thought>\n\n<code_block>\n# 校验确认按钮不可点击\nCheckElemDisabled    button:contains(确认)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标悬停审批，设置‘请选择’为：OPTIONS_1 ，获取“费用趋势表”截图 包含 “Doooo”、“WtestRZA”",
        "output": "<thought>\n首先需要将鼠标移动到“审批”元素上，使用MoTo关键字。然后使用SelectOptionForField关键字将‘请选择’选项设置为OPTIONS_1。最后，通过TableScreenshot关键字获取“费用趋势表”的截图，并使用GetTableScreenshotText获取截图中的文本，验证其中是否包含“Doooo”和“WtestRZA”。\n</thought>\n\n<code_block>\n# 鼠标悬停到\"审批\"上\nMoTo | 审批\n\n# 设置“请选择”为OPTIONS_1\nSelectOptionForField | 请选择 | OPTIONS_1\n\n# 获取费用趋势表截图\nTableScreenshot | tbl=费用趋势表\n\n# 获取费用趋势表截图中的文本\n${txt}  GetTableScreenshotText | tbl=费用趋势表\n\n# 校验截图中包含“Doooo”\nShould Contain  ${txt}  Doooo\n\n# 校验截图中包含“WtestRZA”\nShould Contain  ${txt}  WtestRZA\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 yangyi 下面的 启动ComfyUI",
        "output": "<thought>\n对于这个场景，需要先找到文本 \"yangyi\"，然后点击其下方的 \"启动ComfyUI\"。可以使用 `ClickTextToTheDirectionOf` 关键字来实现这个操作。\n</thought>\n\n<code_block>\n# 点击 yangyi 下方的 启动ComfyUI\nClickTextToTheDirectionOf | yangyi | bottom | 启动ComfyUI\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在文字'指南'，则点击该文字",
        "output": "<thought>\n首先，使用`IsAnyTextExisting`来检查页面上是否存在“指南”文字。如果存在，则使用`Click`关键字点击该文字。\n</thought>\n\n<code_block>\n# 判断页面是否存在文字“指南”\n${exist}  IsAnyTextExisting | 指南\n\nIF  ${exist}\n    # 点击文字“指南”\n    Click  指南\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "识别新弹出的页面，点击新页面中的{验证码授权}按钮",
        "output": "<thought>\n识别新弹出的页面可以通过使用基准元素POPUP来实现。然后在新弹出的页面中点击{验证码授权}按钮，可以使用Click关键字并设置base为POPUP。\n</thought>\n\n<code_block>\n# 点击新弹出页面中的{验证码授权}按钮\nClick | 验证码授权 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间加一天，格式为'%Y-%m-%d %H:%M:%S'，并输出",
        "output": "<thought>\n为了获取当前时间并添加一天，我可以使用RF的标准库关键字Get Current Date和Add Time To Date。首先，使用Get Current Date获取当前的日期和时间。然后，使用Add Time To Date添加一天。最后，使用Log关键字将结果输出。所有这些操作都需要指定日期和时间的格式为'%Y-%m-%d %H:%M:%S'。\n</thought>\n\n<code_block>\n# 获取当前时间，格式为 '%Y-%m-%d %H:%M:%S'\n${current_time}  Get Current Date  result_format=%Y-%m-%d %H:%M:%S\n\n# 在当前时间基础上加一天\n${next_day}  Add Time To Date  ${current_time}  1 day  result_format=%Y-%m-%d %H:%M:%S\n\n# 输出结果\nLog  ${next_day}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将  ${endDate} 设置为明年 1月 16 号",
        "output": "<thought>\n我们需要获取当前日期，并将其转换为明年1月16日的日期格式。Robot Framework的DateTime库提供了获取当前日期的关键字`Get Current Date`，以及在日期上添加时间的关键字`Add Time To Date`。通过设置`result_format`为“%Y-01-16”，我们可以将日期格式化为明年1月16日。\n</thought>\n\n<code_block>\n# 获取当前日期\n${currentDate}    Get Current Date\n\n# 将日期设置为明年1月16日\n${endDate}    Add Time To Date    ${currentDate}    1 year    result_format=%Y-01-16\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把p_date那一行的字段类型改成date, 其实就是要操作（p_date, 字段类型）单元格",
        "output": "<thought>\n首先，我要定位到目标单元格，我会选择FillCell关键字，因为这个关键字让我能够直接通过行和列确定一个具体的单元格，并输入指定的值。在这里，“p_date”就是行名，而“字段类型”就是列名，对应的值就是“date”。\n</thought>\n\n<code_block>\n# 设置p_date行的字段类型为date\nFillCell | p_date | 字段类型 | date\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 验证审批中文案出现",
        "output": "<thought>\n 为了验证审批中文案出现，我们可以使用CheckHasText关键字来检查页面上是否包含“审批”文本。\n </thought>\n \n <code_block>\n # 校验页面包含文本\"审批\"\n CheckHasText | 审批\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 验证 已完成 文案",
        "output": "<thought>\n 这个场景非常简单，我们只需要使用CheckHasText关键字就可以校验页面是否包含\"已完成\"文案。\n </thought>\n \n <code_block>\n # 校验页面包含文本 \"已完成\"\n CheckHasText | 已完成\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹出下拉列表中的第一个选项",
        "output": "<thought>\n要在弹出的下拉列表中点击第一个选项，我们可以使用SelectOption关键字，选择OPTIONS_1来选择第一个选项，这是因为下拉列表的选项通常都是以列表形式呈现的。\n</thought>\n\n<code_block>\n# 选择弹出下拉列表中的第一个选项\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "#如果 ${COOKIES}不为空，则跳过，否则使用 GetMiniBaseCookies  ${USERNAME}获取${COOKIES}",
        "output": "<thought>\n解决问题思路：首先判断变量${COOKIES}是否为空，如果不为空则跳过任何操作；否则，调用GetMiniBaseCookies关键字并传入${USERNAME}参数获取${COOKIES}。使用RF的IF/ELSE语法来实现这个逻辑。\n</thought>\n\n<code_block>\n# 判断${COOKIES}是否为空\nIF  '${COOKIES}' == ''\n    # ${COOKIES}为空，调用GetMiniBaseCookies获取${COOKIES}\n    ${COOKIES}  GetMiniBaseCookies  ${USERNAME}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面第一个aotoAPIxx行中的’更多‘icon, 然后点击弹窗中的删除",
        "output": "<thought>\n首先，通过「ClickIconOfRow」关键字点击页面第一个aotoAPIxx行中的 \"更多\" icon。然后，通过使用基础元素POPUP，通过「Click」关键字点击弹窗中的删除。关键字「ClickIconOfRow」的作用是点击指定行中的特定小图标，这里的aotoAPIxx是行标识，\"更多\"是icon名称。关键字「Click」则用来点击文本，这里用于点击弹窗中的删除文本。\n</thought>\n\n<code_block>\n# 点击页面第一个aotoAPIxx行中的\"更多\"icon\nClickIconOfRow | aotoAPIxx | more\n\n# 点击弹窗中的删除\nClick | 删除 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "办公地点 选择 赫基大厦",
        "output": "<thought>\n解决问题思路\n\n在这个任务中，我会首先使用SetField关键字来定位并填入“办公地点”字段中的“赫基大厦”。SetField关键字可以操作页面字段name关联的控件区域，填入一个或多个值到控件中。\n</thought>\n\n<code_block>\n# 首先在\"办公地点\"中填入\"赫基大厦\"\nSetField | 办公地点 | 赫基大厦\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 配置CNAME 下面的 了解详情",
        "output": "<thought>\n 这个任务的目标是点击 \"配置CNAME\" 下面的 \"了解详情\"。要实现这个目标，我们需要使用 \"ClickTextToTheDirectionOf\" 关键字，它可以点击指定文本下方的目标文本。在这个例子中， \"配置CNAME\" 是基准文本，下方的目标文本是 \"了解详情\"。\n </thought>\n \n <code_block>\n # 点击 \"配置CNAME\" 下方的 \"了解详情\"\n ClickTextToTheDirectionOf | 配置CNAME | bottom | 了解详情\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将class名为text-gray-11 flex-auto的页面区域保存为基准图，命名未推广管理列表，相似度为0.95",
        "output": "<thought>\n 我们需要使用ImageDiff关键字来截取页面中一个特定区域的截图，并与基准图进行比较。目标元素通过class选择器定位。为了定位第一个元素，应该使用:eq(0)。我们还需要为截图指定一个名称，并设置相似度为0.95。\n </thought>\n \n <code_block>\n # 定义选择器变量\n ${selector} = Set Variable [class='text-gray-11 flex-auto']:eq(0)\n \n # 进行截图对比，并保存名称为“未推广管理列表”，相似度设置为0.95\n ImageDiff ${selector} pic_name=未推广管理列表 sim=0.95\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成 autotest 开头的长度为20的随机字符串",
        "output": "<thought>\n需要生成一个以\"autotest\"开头并总长度为20的随机字符串。可以使用自定义关键字`GenerateRandomWithPrefix`，设置前缀为\"autotest\"，总长度为20，字符集为字母和数字。\n</thought>\n\n<code_block>\n# 生成以 autotest 开头的20位随机字符串\n${rand_str}  GenerateRandomWithPrefix | autotest | 20 | [LETTERS][NUMBERS]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘请输入成本归属部门’，然后选择 ‘抖音-运营-影视综’",
        "output": "<thought>\n在这个场景中，我们需要先点击一个文本‘请输入成本归属部门’，然后从下拉选项中选择‘抖音-运营-影视综’。我们可以使用`Click`关键字来点击文本，然后使用`SelectOption`关键字来选择特定的选项。具体操作步骤如下：\n1. 使用`Click`关键字点击‘请输入成本归属部门’。\n2. 使用`SelectOption`关键字选择‘抖音-运营-影视综’。\n</thought>\n\n<code_block>\n# 点击 '请输入成本归属部门'\nClick | 请输入成本归属部门\n\n# 选择 '抖音-运营-影视综' 选项\nSelectOption | 抖音-运营-影视综\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 设置一个变量testName为：“自动化测试专用”加上此刻时间戳",
        "output": "<thought>\n为了完成这个任务，我需要将当前时间戳与字符串“自动化测试专用”组合成一个变量。首先，我会使用RF的时间关键字获取当前时间戳，然后使用内置关键字来连接字符串和时间戳。\n</thought>\n\n<code_block>\n# 获取当前时间戳\n${timestamp} Get Current Date result_format=epoch\n\n# 将“自动化测试专用”与时间戳组合成变量testName\n${testName} Set Variable 自动化测试专用${timestamp}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一行状态列中的disable  #Note: 行和列确定了一个具体的单元格",
        "output": "<thought>\n为了实现这个场景，需要使用`ClickTextOfCell`关键字来点击具体单元格中的文本。这里的行是第一行，列是状态列，文本是“disable”。\n</thought>\n\n<code_block>\n# 点击第一行状态列中的disable\nClickTextOfCell | 1 | 状态 | disable\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 包含催办的按钮 位置",
        "output": "<thought>\n要移动鼠标到包含“催办”按钮的位置，可以使用MoToElem关键字，结合具体的元素识别方式。这里，使用jquery选择器来定位button元素，选择器为button:contains(催办)\n\n选择器可以通过MoveIntoView来确保元素在视野内，以便鼠标可以移动到该元素上。\n</thought>\n\n<code_block>\n# 将包含“催办”的button移动到视野内以确保元素可见\nMoveIntoView | button:contains(催办)\n\n# 鼠标移动到包含“催办”的button\nMoToElem | button:contains(催办)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面文本中至少有1个${rule_name}的数据",
        "output": "<thought>\n要检查页面文本中是否至少包含一个`${rule_name}`的数据，可以使用`CheckHasAnyText`关键字。这个关键字允许我们检查页面中是否存在特定的文本。\n</thought>\n\n<code_block>\n# 校验页面文本中至少包含一个${rule_name}\nCheckHasAnyText | ${rule_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在coral公有云自动化测试-勿动，鼠标悬停该文本",
        "output": "<thought>\n首先，我们需要判断页面上是否存在文本“coral公有云自动化测试-勿动”，可以使用`IsAnyTextExisting`关键字。如果文本存在，我们就使用`MoTo`关键字将鼠标移动到该文本上。\n</thought>\n\n<code_block>\n# 判断文本是否存在\n${exist}  IsAnyTextExisting  coral公有云自动化测试-勿动\n\n# 如果存在则移动鼠标到该文本上\nIF  ${exist}\n    MoTo  coral公有云自动化测试-勿动\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找第 3 个表格中的 大提琴 这一行中的加入购物车",
        "output": "<thought>\n为了完成这个任务，我们需要查找第三个表格中的“大提琴”这一行，并点击该行的“加入购物车”文本。根据可用的关键字，我们可以使用ClickTextOfRow来实现这一操作。row_name_or_id应该选择“大提琴”作为识别行的依据，而text则是“加入购物车”。tbl参数指定第三个表格，所以我们应该设置tbl=3。\n</thought>\n\n<code_block>\n# 点击第三个表格中“大提琴”所在行的“加入购物车”\nClickTextOfRow | 大提琴 | 加入购物车 | tbl=3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面存在多少个开始比对,就循环执行以下逻辑:如果页面中存在开始比对,则点击“无需比对”按钮，随后点击“确定”按钮",
        "output": "<thought>\n首先，我将使用`GetElemCount`来获取页面中“开始比对”元素的数量。然后，我将使用`FOR`循环遍历这个数量。在循环中，我会使用`IsAnyTextExisting`查看页面中是否存在“开始比对”文本，如果存在，则依次点击“无需比对”和“确定”按钮。\n</thought>\n\n<code_block>\n# 获取页面中“开始比对”元素的数量\n${count}  GetElemCount  :contains(开始比对)\n\n# 循环执行逻辑\nFOR  ${index}  IN RANGE  ${count}\n    # 检查页面中是否存在“开始比对”\n    ${exist}  IsAnyTextExisting  开始比对\n    IF  ${exist}\n        # 点击“无需比对”按钮\n        Click  无需比对\n        \n        # 点击“确定”按钮\n        Click  确定\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将鼠标移动到\"拨测次数趋势\"右下方一点",
        "output": "<thought>\n这个任务需要将鼠标移动到某个基准文本的特定方向和位置。我们可以使用提供的关键字`MoTo`来实现这个功能。首先，我们需要找到文本\"拨测次数趋势\"，然后使用`MoTo`关键字将鼠标移动到其右下方。由于没有直接的关键字可以精确地移动到某个方向的一点，我们可以通过调整`dx`和`dy`参数来完成。假设需要移动20px到右和20px到下。\n</thought>\n\n<code_block>\n# 移动鼠标到\"拨测次数趋势\"右下方一点\nMoTo | 拨测次数趋势 | dx=20 | dy=20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取7天后的日期，格式为：年/月/日 时:分:秒",
        "output": "<thought>\n需要计算当前日期基础上增加7天的日期。可以使用RF的`Get Current Date`关键字，通过设置`increment`参数为`7 days`来获取7天后的日期，并且格式化为`年/月/日 时:分:秒`。\n</thought>\n\n<code_block>\n# 获取当前日期并增加7天\n${7_days_later}=  Get Current Date  increment=7 days  result_format=%Y/%m/%d %H:%M:%S\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class为“cardTop--wGaVS”模块中的“昨天”",
        "output": "<thought>\n在这个场景中，我们需要点击一个特定模块中的文本“昨天”。这个模块是通过类名“cardTop--wGaVS”来标识的。我们可以使用Click关键字，并通过base参数指定模块的选择器，来确保在正确的模块中点击“昨天”。\n</thought>\n\n<code_block>\n# 点击 class 为“cardTop--wGaVS”模块中的“昨天”\nClick | 昨天 | base=[class=cardTop--wGaVS]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 '跳过文字能力弹窗' 的关键字, 其作用是读取文件 etta.json 中的内容，把其中的每个 key,value 都写入 localstorage 中",
        "output": "<thought>\n1. 首先需要读取 etta.json 文件内容，可以使用 Evaluate 执行 Python 代码来读取文件\n2. 然后将 JSON 内容解析为字典对象，同样可以使用 Evaluate\n3. 遍历字典中的每个键值对，使用 LocalStorageSetItem 关键字将它们写入 localStorage\n4. 整个过程需要封装成一个可重用的关键字 '跳过文字能力弹窗'\n</thought>\n\n<code_block>\n*** Keywords ***\n跳过文字能力弹窗\n    # 读取 JSON 文件内容\n    ${json_content}  Evaluate  open('etta.json', 'r', encoding='utf-8').read()\n    # 解析 JSON 为字典\n    ${json_dict}  Evaluate  json.loads($json_content)  json\n    # 遍历字典并写入 localStorage\n    FOR  ${key}  ${value}  IN  &{json_dict}\n        LocalStorageSetItem  ${key}  ${value}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第三个关闭小图标",
        "output": "<thought>\n根据需求，需要点击第三个关闭icon。使用ClickIcon关键字可以实现点击小图标的功能。根据idx参数设置为2，即可点击第三个。\n</thought>\n\n<code_block>\n# 点击第三个“关闭”小图标\nClickIcon | close | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击正文下方第一个输入框，并输入“穿越到古代后我的医术震惊全皇宫，御医们都崩溃了，他们束手无策的疑难杂症，我一个女流之辈竟次次药到病除，王爷高烧不退呻吟不止，我反手掏出一盒头孢，王妃月经不调腰膝酸软，我随手就是几个乌鸡白凤丸。”",
        "output": "<thought>\n首先，我们需要定位正文下方的第一个input或textarea元素。可以使用`FindElemToTheDirectionOf`关键字获取该元素，然后使用`FillArea`关键字在该元素中输入指定的文本。\n</thought>\n\n<code_block>\n# 查找正文下方的第一个input或textarea元素\n${elem}  FindElemToTheDirectionOf | 正文 | bottom | input,textarea:eq(0)\n\n# 在找到的元素中输入指定文本\nFillArea | ${elem} | 穿越到古代后我的医术震惊全皇宫，御医们都崩溃了，他们束手无策的疑难杂症，我一个女流之辈竟次次药到病除，王爷高烧不退呻吟不止，我反手掏出一盒头孢，王妃月经不调腰膝酸软，我随手就是几个乌鸡白凤丸。\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格的表头行中的+号",
        "output": "<thought>\n要点击表格的表头行中的+号，我们可以使用提供的关键字之一：`ClickIconOfRow`。因为表头行是特殊的，我们应该使用`row_name_or_id=HEAD`来指定表头行。另外，我们要点击的是一个图标，假设图标的名字是`plus`（`+`号的常见类名），我们需要使用`icon='plus'`来指定要点击的图标。如果没有明确的表格标识，可以使用默认的`tbl=1`。\n</thought>\n\n<code_block>\n# 点击表头行中的+号图标\nClickIconOfRow | HEAD | plus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加，设置 ‘计算列名称’ 为 task_date，字段类型为 date，编辑表达式 为 {TASK_DATE}，然后点击确定",
        "output": "<thought>\n这一步骤包含点击操作和批量设置字段的操作。首先点击“添加”，然后使用`BatchSetFields`设置“计算列名称”、“字段类型”和“编辑表达式”三个字段的值，最后点击“确定”。\n</thought>\n\n<code_block>\n# 点击添加\nClick | 添加\n\n# 批量设置计算列名称、字段类型和编辑表达式\nBatchSetFields 计算列名称=task_date 字段类型=date 编辑表达式={TASK_DATE}\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击底部的编辑按钮",
        "output": "<thought>\n在这个场景中，我们需要点击位于屏幕底部的“编辑”按钮。使用`ClickElemToTheDirectionOf`关键字，可以通过指定基准元素和方向来点击目标元素。由于我们要点击“编辑”按钮，而未明确指出基准元素，我们可以假设基准元素为屏幕中心，这样可以确保在任何页面布局下都能正确定位到底部的“编辑”按钮。在此基础上，确定方向为“bottom”，并寻找名为“编辑”的文本。\n</thought>\n\n<code_block>\n# 点击屏幕底部的“编辑”按钮\nClickTextToTheDirectionOf | SCREEN_CENTER | bottom | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验超链接 立即购买，校验跳转新开窗口的地址是否为 \"https://v-vconsole.bytedance.net/certificate-center/ssl/certificate/buy\"",
        "output": "<thought>\n首先使用 `CheckHasText` 关键字来校验页面是否包含超链接文本 \"立即购买\"。其次，点击这个超链接并切换到新窗口，最后使用 `IsURLContains` 关键字校验新窗口的URL是否包含预期地址。\n</thought>\n\n<code_block>\n# 校验页面包含“立即购买”文本\nCheckHasText  立即购买\n\n# 点击超链接并切换到新窗口\nClick  立即购买\nToNewWindow\n\n# 校验新窗口的URL是否包含预期地址\n${status}  IsURLContains  https://v-vconsole.bytedance.net/certificate-center/ssl/certificate/buy\nShould Be True  ${status}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对class中包含 oc-row-select 的所有元素，进行截图对比，相似度为0.99，截图命名为唯一的名称，如demo1、demo2等",
        "output": "<thought>\n为了解决这个问题，我们需要先找到所有class包含\"oc-row-select\"的元素。我们可以使用FindElem关键字来定位这些元素。由于需要对这些元素分别进行截图对比，并且命名为唯一的名称，我们可以使用循环来遍历这些元素，并在每次迭代中生成唯一的截图名称，然后使用ImageDiff关键字进行截图对比。\n</thought>\n\n<code_block>\n# 查找所有class中包含oc-row-select的元素\n@{elements}  FindElem  [class*=oc-row-select]\n\n# 初始化计数器\n${index}  Set Variable  1\n\n# 对每个元素进行操作\nFOR  ${elem}  IN  @{elements}\n    # 生成唯一的截图名称\n    ${pic_name}  Evaluate  \"demo\" + str(${index})\n\n    # 截图对比，相似度为0.99\n    ImageDiff  selector=${elem}  pic_name=${pic_name}  sim=0.99\n\n    # 增加计数器\n    ${index}  Set Variable  ${index} + 1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在暂停，直接结束函数",
        "output": "<thought>\n首先，需要判断页面上是否存在文本“暂停”。如果存在，则直接结束函数。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本“暂停”\n${exist}  IsAnyTextExisting | 暂停\n\n# 如果存在“暂停”，则结束函数\nIF  $exist\n    Fail  Function ended due to presence of \"暂停\"\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "先找到 cert_gYN0U72kKB 右侧的停用，然后再点击停用右侧的小图标     \n在弹出的 menu中点击删除 ",
        "output": "<thought>\n首先，需要找到文本\"cert_gYN0U72kKB\"的元素，然后在它右侧查找\"停用\"按钮。在找到\"停用\"按钮后，再在其右侧查找icon图标并点击。最后在弹出的菜单中点击\"删除\"选项。在整个过程中，应用“FindTextToTheDirectionOf”和“ClickIconToTheDirectionOf”来依次查找和点击目标控件。\n</thought>\n\n<code_block>\n# 查找\"cert_gYN0U72kKB\"右侧的\"停用\"\n${deactivate_button}  FindTextToTheDirectionOf | cert_gYN0U72kKB | right | 停用\n\n# 点击\"停用\"右侧的icon\nClickIconToTheDirectionOf | ${deactivate_button} | right \n\n# 点击菜单中的\"删除\"\nClick | 删除 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成不包含大写字母的随机字符串，点击 ‘取消’ 上方的区域，然后输入刚生成的字符串，最后关闭弹窗",
        "output": "<thought>\n任务分为生成随机字符串、点击特定区域、输入字符串、最后关闭弹窗四个步骤。\n首先，使用 `GenerateRandom` 生成不含大写字母的随机字符串。\n其次，找到并点击“取消”上方的区域，我们可以使用 `ClickElemToTheDirectionOf` 关键字。\n接着，使用 `SendText` 输入生成的字符串。\n最后，关闭弹窗没有直接的关键字，因此使用 `CloseNotifications` 尝试关闭弹窗。\n</thought>\n\n<code_block>\n# 生成长度为15的随机小写字符串\n${rand_str}  GenerateRandom  | 15 | [LOWER]\n\n# 点击“取消”上方的区域\nClickElemToTheDirectionOf | 取消 | top \n\n# 输入生成的随机字符串\nSendText | ${rand_str}\n\n# 关闭弹窗\nCloseNotifications\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“过滤操作人是否为空“的关键字，作用是接受参数choice，先点击 span class为arco-select-view-value-mirror并且文本为默认全部的元素，然后点击选择choice，等待1秒后检查页面包含参数choice，最后点击搜索按钮",
        "output": "<thought>\n要解决这个问题，我们将按顺序执行以下操作：\n1. 使用`ClickElem`点击选择器`span.arco-select-view-value-mirror:contains(默认全部)`。\n2. 使用`SelectOption`选择给定的参数`choice`。\n3. 使用`Sleep`等待1秒。\n4. 使用`CheckHasText`验证页面是否包含参数`choice`。\n5. 使用`ClickElem`点击选择器对应的搜索按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n过滤操作人是否为空\n    [Arguments]  ${choice}\n\n    # 点击 span class为arco-select-view-value-mirror 并且文本为默认全部的元素\n    ClickElem  span[class=arco-select-view-value-mirror]:contains(默认全部)\n\n    # 选择参数 choice 的选项\n    SelectOption  ${choice}\n\n    # 等待 1 秒\n    Sleep  1s\n\n    # 检查页面是否包含参数 choice\n    CheckHasText  ${choice}\n\n    # 点击搜索按钮\n    ClickElem  button:contains(搜索)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 购买方式 移动到视野内，购买方式选择：在线支持，等待5s，校验团购库存数量右侧存在0，校验 顾客实际需支付的右侧存在数字239",
        "output": "<thought>\n首先需要将\"购买方式\"移动到视野内，然后选择\"在线支持\"。接着等待5秒，最后检查两个条件：团购库存数量右侧存在数字0，以及顾客实际需支付的右侧存在数字239。\n</thought>\n\n<code_block>\n# 将购买方式移动到视野内\nMoveIntoView | :contains(购买方式)\n\n# 选择购买方式为在线支持\nSelectOptionForField | 购买方式 | 在线支持\n\n# 等待5秒\nSleep | 5s\n\n# 校验团购库存数量右侧存在0\nCheckHasElemToTheDirectionOf | 团购库存数量 | right | :contains(0)\n\n# 校验顾客实际需支付的右侧存在数字239\nCheckHasElemToTheDirectionOf | 顾客实际需支付 | right | :contains(239)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将鼠标移动至 蜡笔小x 右下方的第一张图片上",
        "output": "<thought>\n我们需要将鼠标移动到蜡笔小x右下方的第一张图片上。为此，我们将使用`MoveToElemToTheDirectionOf`关键字。首先，我们需要使用`FindElemToTheDirectionOf`查找到蜡笔小x右下方的图片，因为它能够返回目标元素供后续使用。然后使用`MoToElem`将鼠标移动到找到的图片元素上。\n</thought>\n\n<code_block>\n# 查找蜡笔小x右下方的第一张图片\n${img_elem}  FindElemToTheDirectionOf | 蜡笔小x | bottomRight | img\n\n# 将鼠标移动到找到的图片元素上\nMoToElem | ${img_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "每10s执行一次刷新页面命令，如果页面包含 ‘已完成’ 则退出循环，最长时间3分钟",
        "output": "<thought>\n为了实现每10秒刷新一次页面，并在页面包含‘已完成’时退出循环，我们可以使用循环结构。在循环中，使用`RefreshPage`关键字刷新页面，然后使用`IsAnyTextExisting`关键字检查页面文本是否已包含‘已完成’。如果文本存在，则使用IF语句退出循环。为了确保在最长3分钟内结束，我们可以使用计数器来限制循环次数为18次（因为每次等待10秒，总时间为3分钟）。在每次循环中，我们可以使用`Sleep`关键字暂停10秒。\n</thought>\n\n<code_block>\nFOR  ${index}  IN RANGE  18\n    # 刷新页面\n    RefreshPage\n    # 暂停10秒\n    Sleep  10\n    # 检查页面是否包含文本‘已完成’\n    ${exist}  IsAnyTextExisting | 已完成\n    IF  ${exist}\n        # 如果存在则推出循环\n        Exit For Loop\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对请求 url 包含 feishu.cn/path/download 且请求方式为 POST 请求关闭 mock",
        "output": "<thought>\n在这个场景中，我们需要对请求url中包含 \"feishu.cn/path/download\" 且请求方式为 POST 的请求关闭 mock。根据给定的关键字列表，我们可以使用 `Stop Mock` 关键字，该关键字允许我们指定路径和请求方法，以及一个可选的请求体正则表达式（在这个问题中不需要）来停止 mock。这个关键字直接满足了本场景的需求。\n</thought>\n\n<code_block>\n# 停止对url包含feishu.cn/path/download的POST请求的mock\nStop Mock  feishu.cn/path/download  POST\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class为ovui-custom-input__content的div元素输入2024-05-01～2024-05-31",
        "output": "<thought>\n在这个场景中，我们需要向一个特定的页面元素输入一段文本。根据给出的关键字列表，`FillArea` 可以用来操作页面上由 jQuery 选择器表示的控件区域并输入文本。`FindElem` 可以用来查找 jQuery 选择器的元素，但在此场景中并不需要，因为我们直接操作已知选择器的元素。我们需要构造一个 jQuery 选择器来找到 class 为 `ovui-custom-input__content` 的 div 元素，然后使用 `FillArea` 输入 \"2024-05-01～2024-05-31\"。\n</thought>\n\n<code_block>\n# 向class为ovui-custom-input__content的div元素输入2024-05-01～2024-05-31\nFillArea | div[class=ovui-custom-input__content] | 2024-05-01～2024-05-31\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击操作",
        "output": "<thought>\n根据要求，需要点击“操作”文本。可以使用Click关键字直接点击该文本。\n</thought>\n\n<code_block>\n# 点击操作文本\nClick | 操作\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "30秒内，顶部 class 包含 insight-box-header 的 div 中，出现文字 \"Copilot 找到了用户软件的详细信息，帮助你尽快处理问题\"",
        "output": "<thought>\n首先，这个场景需要验证在指定时间内，页面的特定元素中是否出现特定的文本。可以使用 `WaitText` 关键字等待特定文本出现。为了指定特定的元素，可以使用 jQuery 选择器来定位此元素。根据描述，我们需要在 class 包含 `insight-box-header` 的 div 中查找文本。因此可以组合使用 `WaitText` 和 jQuery 选择器。\n</thought>\n\n<code_block>\n# 等待 class 包含 insight-box-header 的 div 中 出现指定文本\nWaitText | Copilot 找到了用户软件的详细信息，帮助你尽快处理问题 | timeout=30 | base=div[class*=insight-box-header]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "给关联时间设置 2024-11-01 11:11:11~2024-12-12 11:11:11。点击 下一步 或者 完成协商，点击弹窗中的确定按钮",
        "output": "<thought>\n首先，设置关联时间段，可以使用`SetField`关键字进行设置。设定的时间范围为“2024-11-01 11:11:11~2024-12-12 11:11:11”，需要在指定字段中填写该时间段。接下来，需要点击“下一步”或“完成协商”中的任意一个。对于这种情况，可以使用`ClickAny`关键字来实现。最后，点击弹窗中的“确定”按钮，可以使用`Click`关键字并指定弹窗基准。\n</thought>\n\n<code_block>\n# 设置关联时间\nSetField | 关联时间 | 2024-11-01 11:11:11~2024-12-12 11:11:11\n\n# 点击“下一步”或“完成协商”\nClickAny | 下一步 | 完成协商\n\n# 点击弹窗中的“确定”按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "先进入什么页面然后点击什么东西向某一个字段里面输入啥然后我就描述一下这个业务逻辑",
        "output": "<thought>\n首先，需要进入一个页面，这里假设页面地址为`${页面地址}`。然后点击一些文本，接着向一个字段输入内容。最后描述业务逻辑。将使用`OpenUrl`打开页面，`ClickTextOneByOne`点击文本，`SetField`输入字段内容。\n</thought>\n\n<code_block>\n# 访问页面\nOpenUrl | ${页面地址}\n\n# 依次点击文本\nClickTextOneByOne | txt1 | txt2 | txt3\n\n# 输入字段\nSetField | 字段名 | 内容\n\n# 业务逻辑描述\n# 先进入${页面地址}页面，然后点击文本txt1，点击txt2，再点击txt3，最后向字段名输入内容\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格第一行的入库数量等于x和y的和",
        "output": "<thought>\n第一步，我将首先获取第一行的入库数量，并将其存储在变量中。然后，计算变量x和y的和，最后将这两个值进行比较，确认他们是否相等。\n</thought>\n\n<code_block>\n# 获取第一行的入库数量\n${inventory}  GetCellValue | 1 | 入库数量 \n\n# 计算x和y的和\n${sum}  Evaluate  ${x} + ${y}\n\n# 检查入库数量是否等于x和y的和\nShould Be Equal As Strings  ${inventory}  ${sum}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新页面，页面加载完成，再点击 “盖章” 按钮 弹窗中出现“审批意见”的话就点击弹窗中的“盖章”按钮，\n然后获取元素 <span class=\"arco-input-tag-tag-content\">ERROR</span> 的text属性，确认其中包含：无权限",
        "output": "<thought>\n解决问题的思路: 需要先切换到新页面，使用`ToNewWindow`。然后等待页面加载完成，使用`WaitLoading`。接着，点击“盖章”按钮，可以通过`Click`关键字实现。如果弹窗中出现“审批意见”，这可以通过`IsAnyTextExisting`关键字来判断，则点击弹窗中的“盖章”按钮，使用`Click`结合`base=POPUP`来实现。最后获取元素`<span class=\"arco-input-tag-tag-content\">ERROR</span>`的text属性，并通过`Should Contain`关键字确认其中包含“无权限”。\n</thought>\n\n<code_block>\n# 切换到新页面\nToNewWindow\n\n# 等待页面加载完成\nWaitLoading\n\n# 点击“盖章”按钮\nClick | 盖章\n\n# 判断弹窗中是否出现“审批意见”\n${exist}  IsAnyTextExisting | 审批意见 | base=POPUP\n\n# 如果出现“审批意见”，则点击弹窗中的“盖章”按钮\nIF  ${exist}\n    Click | 盖章 | base=POPUP\nEND\n\n# 获取元素 <span class=\"arco-input-tag-tag-content\">ERROR</span> 的text属性\n${text}  GetElemText | span.arco-input-tag-tag-content:contains(ERROR)\n\n# 确认text属性包含“无权限”\nShould Contain  ${text}  无权限\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击回收标准右侧的元素[aria-checked\\='false']",
        "output": "<thought>\n首先，我们需要点击一个位于“回收标准”右侧的特定元素，该元素的属性为`aria-checked='false'`。为了实现这一点，可以使用`ClickElemToTheDirectionOf`关键字。这个关键字允许我们指定一个基准元素和一个方向，然后点击在该方向上的目标元素。在这种情况下，“回收标准”是基准元素，目标元素位于其右侧，选择器为`[aria-checked='false']`。\n</thought>\n\n<code_block>\n# 点击回收标准右侧的aria-checked='false'的元素\nClickElemToTheDirectionOf | 回收标准 | right | [aria-checked='false']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 请选择项目 20s超时",
        "output": "<thought>\n要点击文本为“请选择项目”的元素，并设置超时时间为20秒，可以直接使用`Click`关键字，并通过`timeout`参数设置时间。 \n</thought>\n\n<code_block>\n# 点击 请选择项目，设置超时时间为20秒\nClick | 请选择项目 | timeout=20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在旧密码输入框输入 \"mypassword\"，新密码输入框输入 \"newpassword\"",
        "output": "<thought>\n既然要在旧密码和新密码字段中输入内容，我们可以使用SetField关键字来完成。它可以针对特定的输入字段输入文本内容。此处我们需要填入的内容是\"mypassword\"和\"newpassword\"。\n</thought>\n\n<code_block>\n# 在输入框中输入旧密码\"mypassword\"\nSetField | 旧密码 | mypassword\n\n# 在输入框中输入新密码\"newpassword\"\nSetField | 新密码 | newpassword\n<code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 id=cc，class包含xx的元素拖拽到 ‘回收站’",
        "output": "<thought>\n首先，需要定位源元素（id=cc，class包含xx的元素）。这可以通过FindElem关键字来完成。\n\n接着，需要定位目标元素（'回收站'）。这里，因为回收站的元素可能只是显示的文本，所以需要使用FindByText关键字来定位它。\n\n最后，使用DAndD关键字，将源元素拖拽到目标元素上。\n</thought>\n\n<code_block>\n# 定位源元素\n${srcElem}  FindElem | [id=\"cc\"][class*=\"xx\"]\n\n# 定位目标元素\n${targetElem}  FindByText | 回收站\n\n# 将源元素拖拽到目标元素上\nDAndD | ${srcElem} | ${targetElem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“鼠标移动到搜索到的指标”，接受参数name，逻辑是：\n# 1.鼠标移动到class包含AnalysisDropdown__options的元素中，文本为参数name的class包含AnalysisOption__option的子元素上",
        "output": "<thought>\n首先需要创建自定义关键字\"鼠标移动到搜索到的指标\"。\n然后在关键字中需要使用MoToElem关键字，传入适当的定位器。\n定位器需要定位到class包含AnalysisDropdown__options的元素中，文本为参数name的\nclass包含AnalysisOption__option的后代元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n鼠标移动到搜索到的指标\n    [Arguments]  ${name}\n    MoToElem | [class*=AnalysisDropdown__options] [class*=AnalysisOption__option]:contains('${name}')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面包含placeholder为请输入Tag的元素",
        "output": "<thought>\n要检查页面中是否存在具有特定占位符的元素，可以使用`CheckHasElem`关键字。首先需要根据占位符属性构建jquery选择器。对于placeholder为“请输入Tag”的元素，选择器可以是`[placeholder='请输入Tag']`。\n</thought>\n\n<code_block>\n# 校验页面中是否存在placeholder为“请输入Tag”的元素\nCheckHasElem | [placeholder='请输入Tag']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击包含撤回 的 按钮，等待弹窗中出现 撤回原因",
        "output": "<thought>\n首先需要使用Click关键字点击页面上包含“撤回”的按钮，接着需要等待弹窗中出现文本“撤回原因”，可以使用WaitText关键字，并指定base为POPUP以表示在弹窗中查找。\n</thought>\n\n<code_block>\n# 点击包含撤回的按钮\nClick | 撤回\n\n# 等待弹窗中出现撤回原因\nWaitText | 撤回原因 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在弹窗中 搜索模版名称 中输入 ${temple_name}并按回车",
        "output": "<thought>\n在弹窗中的字段输入操作，可以使用`SetPopupField`关键字。因为我们需要在字段中输入模板名称并按回车，所以需要设置`enter=True`。\n</thought>\n\n<code_block>\n# 在弹窗中设置搜索模版名称为 ${temple_name} 并按回车\nSetPopupField | 搜索模版名称 | ${temple_name} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击更多小图标，点击分享，设置分享租户：sysvnet，点击agents分享，点击确认，页面包含“分享成功”",
        "output": "\n    \n<thought>\n 任务是模拟一系列点击和设置操作。首先点击“更多”图标，然后依次点击“分享”和设置分享租户为“sysvnet”。接下来，点击“agents”分享按钮，再点击确认，最后验证页面包含“分享成功”。可以使用ClickIcon、Click、SetField和CheckHasText关键字来完成这些操作。\n </thought>\n \n <code_block>\n # 点击更多图标\n ClickIcon | more\n \n # 点击分享\n Click | 分享\n \n # 设置分享租户为sysvnet\n SetField | 分享租户 | sysvnet\n \n # 点击agents分享\n Click | agents分享\n \n # 点击确认\n Click | 确认\n \n # 校验页面包含分享成功\n CheckHasText | 分享成功\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "循环遍历list1,list2,list3，判断数据都不为空",
        "output": "<thought>\n我们需要遍历三个列表list1, list2, list3，并检查这些列表中的元素是否都不为空。在Robot Framework中，我们可以使用FOR循环来遍历列表，并结合IF/ELSE结构来判断元素是否为空。如果为空，则输出一个错误消息，或者在非空时继续执行后续操作。\n</thought>\n\n<code_block>\n# 遍历每个列表\n    FOR    ${element1}    IN    @{list1}\n        FOR    ${element2}    IN    @{list2}\n            FOR    ${element3}    IN    @{list3}\n                # 检查是否为空\n                IF    '${element1}' == '' or '${element2}' == '' or '${element3}' == ''\n                    FAIL    One or more elements are empty: ${element1}, ${element2}, ${element3}\n                ELSE\n                    Log    All elements are not empty: ${element1}, ${element2}, ${element3}\n                END\n            END\n        END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到左上角的菜单小图标上",
        "output": "<thought>\n首先，我们需要将鼠标移动到左上角的元素。根据给定的关键字，可以使用`MoveToIconToTheDirectionOf`来实现。基准元素选择屏幕中心，方向为左上角，目标为菜单icon。\n</thought>\n\n<code_block>\n# 移动到左上角的菜单icon\nMoveToIconToTheDirectionOf | SCREEN_CENTER | topLeft | menu\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“邮箱登录” 的关键字，接受 email, password参数，其作用是：\n1. 打开浏览器，访问 LOGIN_PAGE\n2. 在 ‘邮箱’ 和 ‘密码’ 中分别输入 email 和 password\n3. 然后点击 ‘我已阅读’ 左边的元素\n4. 最后点击 ‘登录’\n5. 等到URL中不在包含 login 即可",
        "output": "<thought>\n为了实现这个\"邮箱登录\"关键字，我们需要分别执行以下步骤：\n1. 使用 OpenBrowser 关键字打开浏览器并访问LOGIN_PAGE网址。\n2. 使用 SetField 关键字输入邮箱和密码。\n3. 点击\"我已阅读\"左侧元素，首先定位\"我已阅读\"文本元素，然后使用 ClickElemToTheDirectionOf 关键字点击其左侧元素。\n4. 使用 Click 关键字点击\"登录\"按钮。\n5. 使用 WaitURLNotContains 关键字等待URL中不再包含\"login\"。\n</thought>\n\n<code_block>\n邮箱登录\n    [Arguments]  ${email}  ${password}\n    OpenBrowser  ${LOGIN_PAGE}\n    SetField  邮箱  ${email}\n    SetField  密码  ${password}\n    ${我已阅读_elem}  FindByText  我已阅读\n    ClickElemToTheDirectionOf  ${我已阅读_elem}  left\n    Click  登录\n    WaitURLNotContains  login\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "class='view-lines monaco-mouse-cursor-text'的div，数据不应该为空",
        "output": "<thought>\n为了检查指定的div元素的文本内容不应该为空，我需要首先找到该div元素，接着获取其文本内容，并进行验证确认非空。可以使用`FindElem`关键字来根据jQuery选择器查找该元素，然后使用`Get Text`关键字获取该元素的文本内容，再使用`Should Not Be Empty`来验证文本不空。\n</thought>\n\n<code_block>\n# 查找指定的div元素\n${div_elem}  FindElem  div.view-lines.monaco-mouse-cursor-text\n\n# 获取元素的文本内容\n${div_text}  Get Text  ${div_elem}\n\n# 校验文本内容不为空\nShould Not Be Empty  ${div_text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击「TOP UA」 左侧的「设置」",
        "output": "<thought>\n为了实现这个需求，我们首先需要选择`ClickTextToTheDirectionOf`这个关键词。因为这个关键词允许我们基于一个基准元素（这里是\"TOP UA\"文本）来点击其左侧的目标文本（这里是\"设置\"文本）。这正好符合我们的需求。\n</thought>\n\n<code_block>\n# 点击「TOP UA」 左侧的「设置」\nClickTextToTheDirectionOf | TOP UA | left | 设置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击火山引擎左侧的元素",
        "output": "<thought>\n我们需要点击\"火山引擎\"左侧的元素。首先，我们查找文本为\"火山引擎\"的元素，然后使用ClickElemToTheDirectionOf关键字点击其左侧的元素。\n</thought>\n\n<code_block>\n# 查找文本为火山引擎的元素\n${engine_elem}  FindByText | 火山引擎\n\n# 点击火山引擎左侧的元素\nClickElemToTheDirectionOf | ${engine_elem} | left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果系统中存在变量 ${x} 就点击 确定",
        "output": "<thought>\n首先需要检查变量${x}是否存在，使用IsVarExisting关键字，然后根据判断结果决定是否点击确定。\n</thought>\n\n<code_block>\n# 检查变量 ${x} 是否存在\n${exist}  IsVarExisting | x\n\n# 如果变量 ${x} 存在，则点击确定\nIF  ${exist}\n    Click  确定\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选弹窗中的 PR2408040100-1 表格行，然后设置此行中的本次下单数量为：5",
        "output": "<thought>\n首先需要勾选弹窗中的指定表格行，可以用`ClickElemOfRow`关键字来实现。然后，需要在刚选中的行中设置单元格的值为5，这可以使用`FillCell`关键字。\n</thought>\n\n<code_block>\n# 勾选弹窗中的 PR2408040100-1 表格行\nClickElemOfRow | PR2408040100-1 | :checkbox | base=POPUP\n\n# 设置此行中的本次下单数量为：5\nFillCell | PR2408040100-1 | 本次下单数量 | 5 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击菜单：标准型加速器，将 id 为xx 的元素向右滚动，页面应该存在 ${modelName}",
        "output": "<thought>\n为了实现该场景，首先需要点击菜单“标准型加速器”。假设这是一个在页面上的显式菜单项，可以直接使用 `ClickMenu` 关键字。接下来，我们需要将 id 为 xx 的元素向右滚动，可以使用 `ScrollLeftRight` 关键字。最后，我们需要校验页面中是否存在 ${modelName} 这个文本。这可以通过 `CheckHasText` 关键字来实现。\n</thought>\n\n<code_block>\n# 点击标准型加速器菜单\nClickMenu | 标准型加速器\n\n# 将 id 为 xx 的元素向右滚动到80%处\nScrollLeftRight | [id=xx] | 80%\n\n# 校验页面中存在 ${modelName}\nCheckHasText | ${modelName}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "遍历${status_code_list}列表内是否存在3",
        "output": "<thought>\n要遍历列表并检查是否存在特定的元素，我们可以利用RF的条件语句及列表处理功能。在这里，我们需要检查列表`${status_code_list}`中是否存在元素`3`。RF中可以通过`${list}`来简化条件判断，使代码更具可读性。我们可以利用`FOR`循环遍历列表中的元素，并在循环中使用`Should Be Equal As Strings`来判断当前元素是否等于`3`，如果发现匹配项，在循环中记录一个标志变量即可。使用内置的`IF`语句来检查并输出匹配结果。\n</thought>\n\n<code_block>\n# 遍历${status_code_list}列表内是否存在3\n${exist} =  Set Variable  False\nFOR  ${code}  IN  @{status_code_list}\n    IF  '${code}' == '3'\n        ${exist}   Set Variable  True\n        Exit For Loop\n    END\nEND\n\n# 输出结果\nIF  ${exist}\n    Log  \"Found 3 in the list.\"\nELSE\n    Log  \"3 does not exist in the list.\"\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的转办按钮，输入姓名搜索指定人员中输入  杨爽，点击 第二个 class=\"arco-icon arco-icon-caret-down\"",
        "output": "<thought>\n为了解决这个任务，我需要执行以下操作：首先，点击弹窗中的“转办”按钮；然后，在“姓名搜索指定人员”输入框中输入名字“杨爽”；最后，点击第二个具有class为“arco-icon arco-icon-caret-down”的图标。这里需要用到三个不同的关键字：一个是`Click`用来点击“转办”按钮，另一个是`SetPopupField`来输入“杨爽”，最后是`ClickElem`用来点击指定的图标。\n</thought>\n\n<code_block>\n# 点击弹窗中的转办按钮\nClick | 转办 | base=POPUP\n\n# 在姓名搜索指定人员输入框中输入杨爽\nSetPopupField | 姓名搜索指定人员 | 杨爽\n\n# 点击第二个具有指定class的图标\nClickElem | [class=\"arco-icon arco-icon-caret-down\"]:eq(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击设备DID 右侧文本，随后点击aid右上方的icon",
        "output": "<thought>\n对于这个场景，我们需要依次执行两个操作：\n1. 点击 \"设备DID\" 右侧的文本。\n2. 点击 \"aid\" 右上方的 icon。\n\n根据问题描述，我们可以使用 `ClickTextToTheDirectionOf` 和 `ClickIconToTheDirectionOf` 这两个关键字来实现这两个步骤。因为我们要点击 \"设备DID\" 右侧的文本，所以需要用 `ClickTextToTheDirectionOf`，并确保 text 参数为*。而对于 \"aid\" 右上方的 icon，我们可以使用 `ClickIconToTheDirectionOf`，指明方向为 topRight。\n</thought>\n\n<code_block>\n# 点击设备DID右侧的文本\nClickTextToTheDirectionOf | 设备DID | right | *\n\n# 点击aid右上方的icon\nClickIconToTheDirectionOf | aid | topRight\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 placeholder*=请输入指标id/指标名称/指标英文缩写 的元素中输入：‘sssssss’",
        "output": "<thought>\n需要在具有特定placeholder属性的元素中输入文本。可以使用`FillArea`关键字，使用jquery选择器根据placeholder属性选择目标元素。\n</thought>\n\n<code_block>\n# 向placeholder包含'请输入指标id/指标名称/指标英文缩写'的输入框中输入'sssssss'\nFillArea | input[placeholder*='请输入指标id/指标名称/指标英文缩写'] | sssssss\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 日历小图标，随后点击 弹窗中的 近3月",
        "output": "<thought>\n首先需要点击弹窗中的日历icon，然后再点击弹窗中的“近3月”文本。分别使用ClickIcon和Click关键字来实现这些操作，并基于弹窗上下文使用base=POPUP。\n</thought>\n\n<code_block>\n# 点击弹窗中的日历icon\nClickIcon | calendar | base=POPUP\n\n# 点击弹窗中的“近3月”\nClick | 近3月 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取工单编号的值并存储到变量${task}",
        "output": "<thought>\n 获取工单编号的值，我们可以使用\"GetFieldVal\"关键字，然后将获取到的值存储到变量${task}中。\"GetFieldVal\"关键字用于获取字段name关联的页面控件的值。\n </thought>\n \n <code_block>\n # 获取工单编号的值\n ${task} GetFieldVal 工单编号\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送 GET 请求到 ${search_api}, 得到的响应 resp 是个 JSON，要校验 resp 中的 data 字段不为空，且 status 为 success",
        "output": "<thought>\n首先，使用 `UiSendRequest` 关键字发送 GET 请求获取 JSON 响应。然后使用 `GetValuesFromJson` 提取 `data` 和 `status` 字段的值。接下来，检查 `data` 字段不为空并且 `status` 为 `\"success\"`。\n</thought>\n\n<code_block>\n# 发送 GET 请求到 ${search_api}\n${resp_json}  UiSendRequest | GET | ${search_api} | ${None} | ${None}\n\n# 从响应中获取 data 字段的值\n${data_value}  GetValuesFromJson | ${resp_json} | data\n\n# 从响应中获取 status 字段的值\n${status_value}  GetValuesFromJson | ${resp_json} | status\n\n# 校验 data 字段不为空\nShould Not Be Empty  ${data_value}\n\n# 校验 status 为 success\nShould Be Equal As Strings  ${status_value}  success\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面包含 Finder全量，并且有2 个",
        "output": "<thought>\n为了验证页面中包含两个“Finder全量”文本，我们可以使用以下思路：\n1. 使用`GetElemCount`关键字来获取页面中包含文本“Finder全量”的元素个数。\n2. 校验获取的元素数量是否等于2。\n</thought>\n\n<code_block>\n# 获取包含文本“Finder全量”的元素个数\n${count}  GetElemCount  :contains('Finder全量')\n\n# 校验该元素个数是否为2\nShould Be Equal As Numbers  ${count}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验ITxxxx的表格行中包含：闲置、已入库",
        "output": "<thought>\n需要在表格中查找ITxxxx所在的行，然后校验该行是否包含“闲置”和“已入库”这两个文本。可以使用关键字CheckRowHas来实现。\n</thought>\n\n<code_block>\n# 校验ITxxxx所在的行中包含“闲置”和“已入库”\nCheckRowHas | ITxxxx | 闲置 | 已入库\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字 接收${records}作为参数 对${records}里每一条记录，点击添加记录值 将记录值设置为records.value",
        "output": "<thought>\n我们需要为每一条记录执行两个操作：点击“添加”按钮，然后设置记录的值。可以使用`Click`关键字来点击“添加”，使用`SetField`关键字来设置记录的值。通过循环遍历${records}，并在每次迭代中执行这两个操作。\n</thought>\n\n<code_block>\n*** Keywords ***\n处理记录\n    [Arguments]  ${records}\n    FOR  ${record}  IN  @{records}\n        # 点击添加记录值按钮\n        Click  添加记录值\n        # 设置记录值为record.value\n        SetField  记录值  ${record.value}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在浏览器弹窗中的同行人数中输入：3",
        "output": "<thought>\n这个任务中的关键词是“浏览器弹窗中的同行人数”，这表明我们需要在浏览器弹窗的某个字段中输入信息。可以使用`SetField`关键字，并将`base`参数设置为`POPUP`以表示操作的是弹窗中的字段。输入同行人数为“3”。\n</thought>\n\n<code_block>\n# 在弹窗中的同行人数字段中输入数字3\nSetField | 同行人数 | 3 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面包含 “运行中”，最长120s",
        "output": "<thought>\n这个需求需要等待页面包含某个特定的文本，可以使用RF的关键字 \"WaitText\"，并将最长等待时间设置为120s。\n</thought>\n\n<code_block>\n# 等待页面显示“运行中”，最长等待时间为120s\nWaitText | 运行中 | timeout=120\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在‘团购售价’则将 团购售价 移动到屏幕中间",
        "output": "<thought>\n我们需要判断页面是否存在文本“团购售价”，并将其移动到屏幕中间。首先，通过`IsAnyTextExisting`关键字判断“团购售价”是否存在。然后，如果存在，我们通过`MoTo`关键字将“团购售价”移动到屏幕中央。`MoveIntoView`关键字可以确保元素在视野内。我们可以选择一个合理的关键字，用于移动操作。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本“团购售价”\n${exist}  IsAnyTextExisting | 团购售价\n\n# 如果“团购售价”存在，将其移到屏幕中间\nIF  $exist\n    MoveIntoView | :contains('团购售价')\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "删除浏览器中的 cookies",
        "output": "<thought>\n为了清除Cookie，在Robot Framework中可以利用SeleniumLibrary中的Delete All Cookies关键字。SeleniumLibrary是Robot Framework的一个常用扩展库，提供了对Web浏览器的操作功能，其中包括管理浏览器Cookie的能力。使用Delete All Cookies关键字可以直接删除当前会话中的所有Cookie。\n</thought>\n\n<code_block>\n# 清除所有Cookie\nDelete All Cookies\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取元素 ${p} 的 class",
        "output": "<thought>\n获取元素 ${p} 的 class 属性，可以使用GetElemAttr关键字。具体步骤是先定位到 ${p} 元素，然后使用GetElemAttr获取该元素的class属性。\n</thought>\n\n<code_block>\n# 获取元素 ${p} 的 class 属性\n${class_attr}  GetElemAttr  |  ${p}  |  class\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在'时间周期'中的两个日期选择器中都选择两天前的日期，年-月-日 格式\n\n提示：这是一个时间范围输入，将它们输入一个字段中时，两个日期要用 ‘~’ 连接",
        "output": "<thought>\n我们需要在时间周期中选择两个日期，分别是两天前的日期。首先，我们可以使用RF的标准时间处理关键字Get Current Date，配合 increment参数来计算两天前的日期。然后，我们利用SetField关键字将日期填入时间周期字段中，并用‘~’连接两个日期。需要注意的是，由于这是一个日期范围输入字段，因此我们需要确保两个日期一起输入到相应的字段中。\n</thought>\n\n<code_block>\n# 获取两天前的日期\n${two_days_ago}  Get Current Date  result_format=%Y-%m-%d  increment=-2 days\n\n# 将两天前的日期两次输入到时间周期字段中，用~连接\nSetField  时间周期  ${two_days_ago}~${two_days_ago}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格${AUTO_UI_DB}行的设置按钮",
        "output": "<thought>\n首先需要确定如何在表格中找到行，这里未提供具体的行标识，因此假设是通过某种文本标识的行。然后使用`ClickElemOfRow`关键字来点击该行中的设置按钮。需要设定行标识和元素选择器。\n</thought>\n\n<code_block>\n# 点击表格${AUTO_UI_DB}中指定行的设置按钮\nClickElemOfRow | ${AUTO_UI_DB} | button:contains(设置)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置请输入消息为：你好，你是什么模型？，等待页面中出现重新生成后，校验class=ai-msg-content-md内是否有内容。提示：校验是否有内容，就是要获取这个元素的文本，校验不为空",
        "output": "<thought>\n首先使用SetField关键字将“你好，你是什么模型？”输入到“请输入消息”的字段中。然后使用WaitText关键字等待页面中出现“重新生成”。接下来，使用GetElemText关键字获取class=ai-msg-content-md元素的文本内容，并使用Should Not Be Empty来校验该文本是否不为空。\n</thought>\n\n<code_block>\n# 设置“请输入消息”为：“你好，你是什么模型？”\nSetField | 请输入消息 | 你好，你是什么模型？\n\n# 等待页面中出现“重新生成”\nWaitText | 重新生成\n\n# 获取class=ai-msg-content-md元素的文本\n${text}  GetElemText | [class=ai-msg-content-md]\n\n# 校验文本不为空\nShould Not Be Empty  ${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面滚动到 多选模式",
        "output": "<thought>\n页面滚动到 多选模式，就是要将“多选模式”滚动到视野中，我们可以使用MoveIntoView关键字。此关键字能够将指定的元素滚动到视野中。我们需要首先确定“多选模式”在页面中的选择器，然后使用MoveIntoView关键字将其移动到视野。\n</thought>\n\n<code_block>\n# 将“多选模式”文本元素滚动到视野中\nMoveIntoView | :contains(\"多选模式\")\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置特征列映射 为 avg",
        "output": "<thought>\n需要将“特征列映射”设置为“avg”。根据任务需求，可以使用`SetField`关键字，指定字段名为“特征列映射”，值为“avg”。\n</thought>\n\n<code_block>\n# 设置特征列映射为 avg\nSetField | 特征列映射 | avg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将元素 ele 设置为 张三",
        "output": "<thought>\n要将元素ele设置为张三，可以使用FillArea关键字。通常情况下，使用jquery选择器来定位页面上的元素。这里给出的提示是元素适合用FillArea，因此可以直接使用该关键字进行设置。\n</thought>\n\n<code_block>\n# 将元素ele设置为张三\nFillArea | ${ele} | 张三\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 class*=TemplateCard且 文本为 休闲游戏基础分析 的 h4 元素上，然后点击 ‘介绍’",
        "output": "<thought>\n我们需要先移动到特定的`h4`元素。可以使用`MoToElem`关键字，带上合适的选择器。然后在这个元素上点击文本“介绍”，可以使用`Click`关键字并基于该元素的选择器确定操作。\n</thought>\n\n<code_block>\n# 鼠标移动到class包含TemplateCard且文本为休闲游戏基础分析的h4上\nMoToElem | h4[class*=\"TemplateCard\"]:contains(\"休闲游戏基础分析\")\n\n# 点击文本为介绍的元素\nClick | 介绍\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取7分钟35秒前的时间，格式为：年-月-日 时:分:秒",
        "output": "<thought>\n首先，我们可以使用 `Get Current Date` 关键字来获取当前时间，然后利用 `increment` 参数设置时间倒退7分钟35秒。\n</thought>\n\n<code_block>\n# 获取7分钟35秒前的时间\n${target_time}  Get Current Date  result_format=%Y-%m-%d %H:%M:%S  increment=-7m35s\n\n# 打印获取的时间\nLog  ${target_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第3个表格中，表头字段‘服务主体’右边的筛选器。提示：这是要操作表头单元格中的 filter icon",
        "output": "<thought>\n首先，我们要找到第3个表格。然后，在表头中找到字段“服务主体”。由于这个字段右边有一个筛选器图标，我们需要找到并点击它。这可以通过关键字“ClickIconOfCell”实现，行名称或id设置为HEAD（特殊值HEAD表示表头行），列表名称或id设置为服务主体。我们需要提供具体的icon名字，假设名字为filter。\n</thought>\n\n<code_block>\n# 点击第3个表格中，表头字段‘服务主体’右边的筛选器\nClickIconOfCell | HEAD | 服务主体 | filter | tbl=3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完，然后点击单元格（${row}，操作）中的删除",
        "output": "<thought>\n首先，需要等待页面加载完成，可以使用`WaitLoading`关键字。接下来，需要定位表格中指定行和“操作”列的“删除”文本并点击，可以使用`ClickTextOfCell`关键字。`row`变量已经给出，`操作`是列名。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 点击指定行和“操作”列的“删除”文本\nClickTextOfCell | ${row} | 操作 | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“选择菜单” 的关键字，接受 name 参数，作用是：\n1. 等页面加载完成\n2. 点击文本 name， 超时为 30s",
        "output": "<thought>\n要实现“选择菜单”关键字，需要完成两个步骤：首先等待页面加载完成，然后点击指定的文本。可以使用`WaitLoading`来等待加载完成，之后使用`Click`关键字点击文本，文本由参数`name`传入。设置超时时间为30秒。\n</thought>\n\n<code_block>\n*** Keywords ***\n选择菜单\n    [Arguments]  ${name}\n    # 等待页面加载完成\n    WaitLoading\n    # 点击指定文本，超时时间为30秒\n    Click  ${name}  timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面截图中不包含${TASK_NAME}",
        "output": "<thought>\n首先，我们需要从页面截图中获取文本，并将其与变量`${TASK_NAME}`进行比较，以验证该文本不在截图中。我们可以使用`GetPageScreenshotText`来获取截图中的文本，然后使用`Should Not Contain`来检查文本中是否包含`${TASK_NAME}`。\n</thought>\n\n<code_block>\n# 获取页面截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验截图中不包含${TASK_NAME}\nShould Not Contain  ${txt}  ${TASK_NAME}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击请选择送审队列，选择第一个",
        "output": "<thought>\n首先，我们需要点击\"请选择送审队列\"，这步可以通过使用Click关键字实现，然后我们需要选择第一个选项，可以通过SelectOption关键字实现，并使用OPTIONS_1作为参数。\n</thought>\n\n<code_block>\n# 点击\"请选择送审队列\"\nClick | 请选择送审队列 \n\n# 选择第一个选项\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向xxx属性包含y的元素中输入：tag1  value1  tag2  value2",
        "output": "<thought>\n要向属性包含y的元素中输入值，我们可以使用FillArea关键字，因为这个关键字可以在jquery选择器选择的元素中输入值。这里使用了[x*=y]这种jQuery选择器，*表示属性值包含y，x是选取的属性。然后按照顺序输入tag1、value1、tag2、value2。\n</thought>\n\n<code_block>\n# 在xxx属性包含y的元素中输入：tag1  value1  tag2  value2\nFillArea | [xxx*=y] | tag1 | value1 | tag2 | value2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击classname为arco-picker-date的元素中的11",
        "output": "<thought>\n目标是点击classname为arco-picker-date的元素中的文本“11”。\n可以使用“Click”关键字来完成这个任务，首先需要找到classname为arco-picker-date的元素，然后在这个元素中找到文本为“11”的元素并点击。\n</thought>\n\n<code_block>\n# 点击classname为arco-picker-date的元素中的文本“11”\nClick | 11 | base=[class=arco-picker-date]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二行第六列",
        "output": "<thought>\n根据场景需求，目标是点击表格中的某个单元格。由于任务是点击第二行第六列的内容，关键字`ClickTextOfCell`或`ClickElemOfCell`可以满足需求。假设没有指定具体内容或选择器，使用默认值即可。\n</thought>\n\n<code_block>\n# 点击第二行第六列的任意元素\nClickElemOfCell | 2 | 6 | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到页面第二个包含Follow Count的元素",
        "output": "<thought>\n在这个场景中，我们需要找到页面上第二个包含文本“Follow Count”的元素。根据提供的关键字和示例，我们可以使用`FindByText`关键字来定位包含该文本的元素。由于我们需要获取第二个匹配的元素，应该利用`:eq(num-1)`来准确获取第二个元素的索引。因此，我们会设置idx参数为1（因为idx是0开始的）。最终解法是使用`FindByText`来获取所需的元素。\n</thought>\n\n<code_block>\n# 查找页面第二个包含Follow Count的元素\n${elem}  FindByText | Follow Count | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个的 TRY 异常处理语句的示例",
        "output": "<thought>\n在RobotFramework中处理异常通常使用TRY/EXCEPT语法结构，这类似于其他编程语言中的try-catch机制。我们需要考虑以下几点：\n1. TRY块包含可能抛出异常的代码\n2. EXCEPT块用于捕获和处理特定异常\n3. 可以使用ELSE块处理无异常情况\n4. 可以使用FINALLY块执行无论是否发生异常都需要执行的代码\n5. 可以捕获特定异常类型或使用通配符捕获所有异常\n\nRobotFramework内置支持TRY/EXCEPT语法，比使用\"Run Keyword And Ignore Error\"或\"Run Keyword And Expect Error\"更清晰直观\n</thought>\n\n<code_block>\n# 基本TRY/EXCEPT结构示例\nTRY\n    Click   可能失败的元素\nEXCEPT    Error message contains *not found*    type=GLOB\n    Log    元素未找到，继续执行\nEXCEPT    AS    ${err}\n    Log    其他错误发生: ${err}\nELSE\n    Log    点击成功\nFINALLY\n    Log    无论如何都会执行的清理操作\nEND\n\n\n# 捕获所有异常示例\nTRY\n    ClickTextOneByOne    下一步    提交\nEXCEPT    AS    ${err}\n    Log    流程执行失败: ${err}\n    Fail    测试用例因异常终止\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "浏览器访问  https://p-vconsole.bytedance.net/auth/login/，校验弹窗包含文本：暂无告警",
        "output": "<thought>\n在此场景中，我们需要使用OpenUrl关键字访问指定的URL，然后使用CheckHasAnyText关键字来校验页面是否包含指定文本\"暂无告警\"。因为\"暂无告警\"是在弹窗中显示，我们可以通过指定关键字中的base为POPUP来限定校验范围。\n</thought>\n\n<code_block>\n# 访问登录页面\nOpenUrl | https://p-vconsole.bytedance.net/auth/login/\n\n# 校验弹窗包含文本：暂无告警\nCheckHasAnyText | 暂无告警 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找td class包含list__roleName的元素下的a元素的文本",
        "output": "<thought>\n首先，我们需要找到class包含list__roleName的td元素，然后找到该td元素下的a元素，最后获取a元素的文本。\n</thought>\n\n<code_block>\n# 查找class包含list__roleName的td元素\n${td_elem}  FindElem | td[class*=list__roleName]\n\n# 查找td元素下的a元素\n${a_elem}  FindElem | ${td_elem} a\n\n# 获取a元素的文本\n${a_text}  Get Text | ${a_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${text} 为空就跳出循环",
        "output": "<thought>\n判断变量 `${text}` 是否为空，并在为空时使用 Robot Framework 的内置控制结构跳出循环。\n</thought>\n\n<code_block>\n# 使用 WHILE 循环检查 ${text} 是否为空\nWHILE  True\n    # 如果 ${text} 为空，就跳出循环\n    IF  \"${text}\" == \"\"\n        BREAK\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 第三个 \"下载\"小图标",
        "output": "<thought>\n此场景中，我们需要点击弹窗中的第三个 \"下载\" icon。可以使用 `ClickIcon` 关键字并配置 `base=POPUP`，并设置 `idx` 为2（因为索引从0开始）。\n</thought>\n\n<code_block>\n# 点击弹窗中的第三个 \"下载\" icon\nClickIcon | download | idx=2 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 表格 \"Instance ID/ name\"列都包含“bwp-14w7cru21dfr43tvs806fzv3e”\n\n提示：可以先获取表格行数量，然后检测表格每一行的\"Instance ID/ name\"列的单元格中都包含给定文案",
        "output": "<thought>\n为了解决这个问题，我们需要获取表格的行数，然后遍历每一行的\"Instance ID/ name\"列的值，检查该列是否包含指定的文本“bwp-14w7cru21dfr43tvs806fzv3e”。需要使用`GetRowCount`获取行数，`CheckCellHas`检查特定列是否包含给定文本。\n</thought>\n\n<code_block>\n# 获取表格的行数\n${row_count}  GetRowCount\n\n# 遍历每一行，并校验 'Instance ID/ name' 列包含指定文本\nFOR  ${i}  IN RANGE  1  ${row_count} + 1 \n    CheckCellHas  ${i}  Instance ID/ name  bwp-14w7cru21dfr43tvs806fzv3e\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用关键字 判断数据集文件夹是否存在 如果返回false，执行关键字 创建数据集文件夹",
        "output": "<thought>\n首先，使用关键字判断数据集文件夹是否存在，如果返回结果为False，则执行创建数据集文件夹的关键字。利用RF内置的IF结构来实现逻辑判断。\n</thought>\n\n<code_block>\n# 判断数据集文件夹是否存在\n${exist}  判断数据集文件夹是否存在\n\n# 如果不存在，则创建数据集文件夹\nIF  '${exist}' == 'False'\n    创建数据集文件夹\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击包含 飞书 的元素，然后在App ID中输入cli_a3ee609d383b9013",
        "output": "<thought>\n首先需要找到包含文本“飞书”的元素，然后点击该元素。接下来需要在名为“App ID”的输入字段中输入“cli_a3ee609d383b9013”。我们可以使用`Click`关键字来点击包含“飞书”的元素，并使用`SetField`关键字在“App ID”字段中输入内容。\n</thought>\n\n<code_block>\n# 点击包含\"飞书\"的第一个元素\nClick | 飞书\n\n# 在 \"App ID\" 字段中输入指定的值\nSetField | App ID | cli_a3ee609d383b9013\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在class为arco-menu-inner的最后一个div内，输入 ${cluster}",
        "output": "<thought>\n首先，我们知道需要在一个特定的div中输入值，即class为arco-menu-inner的最后一个div。这可以通过使用FillArea关键字完成。此关键字的前两个参数分别为该元素的jquery选择器和需要输入的值。这里，我们需要取class为arco-menu-inner的最后一个div，所以我们将这个选择器设置为\"div[class=arco-menu-inner]:eq(-1)\"。\n</thought>\n\n<code_block>\n# 在class为arco-menu-inner的最后一个div中输入 `${cluster}`\nFillArea | div[class=arco-menu-inner]:eq(-1) | ${cluster}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${day}附近的${tomorrow_day}",
        "output": "<thought>\n在这个场景中，我们需要点击靠近某个文本(${day})的另一个文本(${tomorrow_day})。这要求我们使用`Click`关键字，并利用`near`参数来指定文本的相对位置。我们需要确保`${day}`和`${tomorrow_day}`这两个变量的正确使用。\n</thought>\n\n<code_block>\n# 点击靠近${day}的${tomorrow_day}\nClick | ${tomorrow_day} | near=${day}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择下拉框里的第一个",
        "output": "<thought>\n这个任务相对比较简单，只需要使用明确定义的关键字 SelectOption 并使用特殊值OPTIONS_1即可。\n</thought>\n\n<code_block>\n# 选择下拉框中的第一个选项\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待欢迎",
        "output": "<thought>\n这个任务要求我们等待页面上出现“欢迎”这个文本。我们可以使用`WaitText`关键字，并传入“欢迎”作为参数，因为`WaitText`可以等待页面上出现特定的文本。\n</thought>\n\n<code_block>\n# 等待页面上出现“欢迎”文本\nWaitText | 欢迎\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选 ‘无运营’，页面包含活动玩法和受众",
        "output": "<thought>\n首先，需要勾选名为‘无运营’的复选框，可以使用`CheckBoxOn`关键字。接下来，需要验证页面是否包含特定文本‘活动玩法’和‘受众’，可以使用`CheckHasText`关键字。\n</thought>\n\n<code_block>\n# 勾选 ‘无运营’\nCheckBoxOn | 无运营\n\n# 校验页面包含文本 '活动玩法' 和 '受众'\nCheckHasText | 活动玩法 | 受众\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击成长笔记，点击调整收益比例，若页面有“近7天数据概况”文字，则打印成功",
        "output": "<thought>\n为了完成该任务，可以先使用ClickTextOneByOne关键字依次点击“成长笔记”和“调整收益比例”文本。然后使用IsAnyTextExisting关键字判断页面是否存在“近7天数据概况”文本，如果存在则打印“成功”。\n</thought>\n\n<code_block>\n# 依次点击成长笔记和调整收益比例\nClickTextOneByOne | 成长笔记 | 调整收益比例\n\n# 判断页面是否存在“近7天数据概况”文本\n${exist}  IsAnyTextExisting | 近7天数据概况\n\n# 如果存在，则打印成功\nIF  $exist\n    Log  成功\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面中第一个class以masonry-item结尾的元素",
        "output": "<thought>\n要点击页面中第一个class以\"masonry-item\"结尾的元素，可以使用jQuery的属性选择器来匹配class属性。jQuery提供了\"$=\"操作符来匹配属性值结尾的字符串。由于要点击第一个匹配的元素，可以使用:eq(0)选择器。因此，完整的jQuery选择器应该是`[class$=\"masonry-item\"]:eq(0)`。我们可以使用ClickElem关键字来执行点击操作。\n</thought>\n\n<code_block>\n# 点击第一个class以masonry-item结尾的元素\nClickElem | [class$=\"masonry-item\"]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在当前位置粘贴文本 text",
        "output": "<thought>\n任务要求是在当前位置粘贴文本 \"text\"。可以直接使用Paste关键字，其中selector参数为空表示粘贴到当前光标激活位置，文本参数直接传入\"text\"即可。\n</thought>\n\n<code_block>\n# 在当前位置粘贴文本 text\nPaste | ${EMPTY} | text\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果包含查询的 button 元素存在, 就点击",
        "output": "<thought>\n首先，使用`IsAnyElemExisting`关键字判断页面上是否存在包含文本“查询”的button元素。如果存在，则使用`ClickElem`关键字点击该元素。\n</thought>\n\n<code_block>\n# 判断包含查询的button元素是否存在\n${exist}  IsAnyElemExisting | button:contains(查询)\n\n# 如果存在，则点击\nIF  ${exist}\n    ClickElem | button:contains(查询)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击手机号登录附近的眼睛icon",
        "output": "<thought>\n要解决这个问题，我们需要点击\"手机号登录\"文本附近的\"眼睛\"图标。根据关键字描述，可以使用ClickIcon关键字，并设置near参数为\"手机号登录\"来定位图标。由于没有指定是第几个眼睛图标，默认使用第一个(idx=0)。\n\n分析步骤：\n1. 使用ClickIcon关键字\n2. 设置name参数为\"eye\"或\"眼睛\"(根据实际图标名称)\n3. 设置near参数为\"手机号登录\"来指定图标位置\n4. 不指定base参数，因为操作在主页面而非弹窗中\n</thought>\n\n<code_block>\n# 点击手机号登录附近的眼睛图标\nClickIcon    eye    near=手机号登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问 https://www.feishu.cn/admin/contacts/corehr",
        "output": "<thought>\n为了访问指定的URL，我们可以直接使用RobotFramework中的自定义关键字OpenUrl来打开目标页面。\n</thought>\n\n<code_block>\n# 访问飞书管理后台的核心人力资源页面\nOpenUrl | https://www.feishu.cn/admin/contacts/corehr\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击学号左上角的修改，向张三右边的input中输入 17，点击保存，校验张三右下角有已修改字样",
        "output": "<thought>\n首先需要找到“学号”元素，并点击其左上角的“修改”。然后，需要找到“张三”元素，并向其右下角的input元素中输入“17”。接着，点击“保存”按钮。最后，校验“张三”右下角有“已修改”字样。可以利用`ClickTextToTheDirectionOf`和`FindElemToTheDirectionOf`等关键字实现这些操作。\n</thought>\n\n<code_block>\n# 点击学号左上角的修改\nClickTextToTheDirectionOf | 学号 | topLeft | 修改\n\n# 找到张三右下角的input元素并输入17\n${input_elem}  FindElemToTheDirectionOf | 张三 | bottomRight | input\nFillArea | ${input_elem} | 17\n\n# 点击保存\nClick | 保存\n\n# 校验张三右下角有已修改字样\nCheckHasTextToTheDirectionOf | 张三 | bottomRight | 已修改\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 访问页面：https://fin-pre.bytedance.net/revenue/#/linglong/autoRevenue",
        "output": "<thought>\n 为了访问指定的页面，可以使用`OpenUrl`关键字。给定的URL需要作为参数传递给`OpenUrl`。由于没有其他操作要求，只需要简单地打开URL即可。\n </thought>\n \n <code_block>\n # 访问灵龙自动收入页面\n OpenUrl | https://fin-pre.bytedance.net/revenue/#/linglong/autoRevenue\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "断言存在全部 我的收藏 草稿箱 回收站",
        "output": "<thought>\n思路上我计划采用自定义关键字CheckHasText，因为它可以检查网页是否包含特定的文本。在这个场景中，我需要确定\"全部\"，\"我的收藏\"，\"草稿箱\"和\"回收站\"这些文本是否同时出现在页面上。\n</thought>\n\n<code_block>\n# 使用关键字检查页面是否包含特定文本\nCheckHasText | 全部 | 我的收藏 | 草稿箱 | 回收站\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等表格变成 1 行",
        "output": "<thought>\n为了使表格行数变成1，可以使用`WaitRowCount`关键字，该关键字会等待表格行数达到指定值。\n</thought>\n\n<code_block>\n# 等待表格行数变为1\nWaitRowCount | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击 开始实施",
        "output": "<thought>\n 这个问题很直接，只需要点击一个按钮或者链接。我们可以使用Click关键字来实现这个操作。对于这个关键字，我们需要提供文本参数\"开始实施\"，这个参数将会匹配到页面上的文本并点击它。\n </thought>\n \n <code_block>\n # 点击 \"开始实施\"\n Click | 开始实施\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 飞书登录，使用此 ${LARK_SESSION} ",
        "output": "<thought>\n 需要使用RobotFramework提供的自定义关键字`LoginFeiShu`，并传递`${LARK_SESSION}`作为参数来完成飞书登录。\n </thought>\n \n <code_block>\n # 使用给定的会话登录飞书\n LoginFeiShu | ${LARK_SESSION}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “用户登录” 的关键字，接受 cookies 参数，默认值为变量 COOKIES，作用是，打开浏览器访问主页 MAIN_PAGE，并用 cookies 登录",
        "output": "<thought>\n首先，我需要创建一个名为“用户登录”的关键字，它接受一个名为cookies的参数，默认值为变量COOKIES。然后使用OpenBrowser关键字打开浏览器，并传递url和cookies参数。在这里，我将url设置为变量MAIN_PAGE。\n</thought>\n\n<code_block>\n用户登录\n    [Arguments]  ${cookies}=${COOKIES}\n    OpenBrowser  ${MAIN_PAGE}  cookies=${cookies}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击目标域名，点击下拉框中的 共享缓存域名",
        "output": "<thought>\n首先点击‘目标域名’，然后选择下拉框中的‘共享缓存域名’。这个需求可以使用两个关键字分别处理，首先是Click用于点击文本，然后是SelectOption用于选择下拉框中的选项。\n</thought>\n\n<code_block>\n# 点击目标域名\nClick | 目标域名\n\n# 选择下拉框中的共享缓存域名\nSelectOption | 共享缓存域名\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格第一行应该包含 name",
        "output": "<thought>\n需要验证表格第一行是否包含文本“name”。可以使用CheckRowHas关键字，指定行号和文本进行检查。\n</thought>\n\n<code_block>\n# 校验第一行是否包含“name”\nCheckRowHas | 1 | name\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘没有’ 右边的 ‘注册’",
        "output": "<thought>\n要实现点击‘没有’右边的‘注册’，可以使用ClickTextToTheDirectionOf关键字。基准元素设为‘没有’，方向设为right，目标文本为‘注册’。\n</thought>\n\n<code_block>\n# 点击‘没有’右边的‘注册’\nClickTextToTheDirectionOf | 没有 | right | 注册\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "表格里存在门店 评分 昨日新增 好评率 中差评回复率 操作 门店详情",
        "output": "<thought>\n1. 首先需要确认表格中存在指定的列标题：门店、评分、昨日新增、好评率、中差评回复率、操作、门店详情\n2. 可以使用CheckTableHas关键字来验证表格中是否包含这些文本\n3. 由于是检查表头，可以用CheckRowHas，使用row_name_or_id=HEAD来指定检查表头行\n4. 需要为每个列标题单独检查，确保所有列都存在\n</thought>\n\n<code_block>\n# 检查表格表头行包含所有指定列标题\nCheckRowHas | HEAD | 门店 | 评分 | 昨日新增 | 好评率 | 中差评回复率 | 操作 | 门店详情\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到第一行的 退还申请单号，并将文本赋值为 ${reqOrder}",
        "output": "<thought>\n首先，需要获取第一行的\"退还申请单号\"的值，使用GetCellValue关键字可以实现。然后，将获取的值赋值给${reqOrder}变量，以便后续操作可以使用这个值。\n</thought>\n\n<code_block>\n# 获取第一行的\"退还申请单号\"的值\n${reqOrder}   GetCellValue | 1 | 退还申请单号\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 输入邮箱 cpabusinessn@iubridge.com，密码 Aa123456",
        "output": "<thought>\n 根据场景要求，我们需要在邮箱和密码字段中输入特定的值。可以使用 `SetField` 关键字来填写这些字段。\n </thought>\n \n <code_block>\n # 输入邮箱\n SetField | 邮箱 | cpabusinessn@iubridge.com\n \n # 输入密码\n SetField | 密码 | Aa123456\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到class含有disabled的所有元素，输出他们的tag",
        "output": "<thought>\n首先，我们需要找到class包含disabled的所有元素，然后输出他们的tag。这个过程可以通过FindElem关键字来实现，然后使用Evaluate关键字来执行Python代码来获取元素的tag。\n</thought>\n\n<code_block>\n# 查找class包含disabled的所有元素\n${elems}  FindElem | [class*=disabled]\n\n# 输出他们的tag\nFOR  ${elem}  IN  @{elems}\n    ${tag}  Evaluate  ${elem}.tag_name\n    Log  ${tag}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面最后上角的人物头像图标，获取当前页面截图 包含 2个“Doooo”、2个“WtestRZA”",
        "output": "<thought>\n首先，需要点击页面右上角的人物icon，这可以通过使用 ClickIconToTheDirectionOf 关键字并设置基准元素为 SCREEN_CENTER，选择 topRight 方向并指定 class 为 avatar 来实现。接着，获取当前页面的截图文本，并计算\"Do000\"和\"WtestRZA\"分别出现的次数，最后验证这些文本是否各自出现2次。\n</thought>\n\n<code_block>\n# 点击页面右上角的人物 icon\nClickIconToTheDirectionOf | SCREEN_CENTER | topRight | avatar\n\n# 获取当前页面截图中的文本\n${txt}  GetPageScreenshotText\n\n# 计算“Doooo”出现的次数\n${doooo_count}  Get Count  ${txt}  Doooo\n\n# 计算“WtestRZA”出现的次数\n${wtestrza_count}  Get Count  ${txt}  WtestRZA\n\n# 验证“Doooo”出现2次\nShould Be Equal As Numbers  ${doooo_count}  2\n\n# 验证“WtestRZA”出现2次\nShould Be Equal As Numbers  ${wtestrza_count}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class=\"sc-ddjGPC\" 的 资源包管理 ，点击 Export CSV 左边的图标，点击弹框中的确定",
        "output": "<thought>\n我们需要完成以下几个步骤：\n1. 查找 class 为 \"sc-ddjGPC\" 且文案为 \"资源包管理\" 的元素，并进行点击。\n2. 然后需要点击 \"Export CSV\" 左边的 icon。\n3. 最后，在弹出的弹框中点击 \"确定\"。\n\n为此，我们可以使用以下关键字：\n- 对于第一步，我们可以使用 `FindByText` 来找到包含文本\"资源包管理\"且 class 为\"sc-ddjGPC\"的元素，然后 `ClickElem` 进行点击。\n- 第二步，可以使用 `ClickIconToTheDirectionOf`，指定基准元素为 \"Export CSV\"，方向为 \"left\"。\n- 第三步，直接用 `Click` 在弹窗中点击 \"确定\"，基准元素为 `POPUP`。\n</thought>\n\n<code_block>\n# 找到 class=\"sc-ddjGPC\" 且文案为 \"资源包管理\" 的元素并点击\nClickElem | [class='sc-ddjGPC']:contains(资源包管理)\n\n# 点击 \"Export CSV\" 左边的 icon\nClickIconToTheDirectionOf | Export CSV | left\n\n# 点击弹窗中的 \"确定\"\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成4位16进制数",
        "output": "<thought>\n使用RobotFramework的GenerateRandom关键字来生成4位16进制数，可以通过指定字符集为0-9和a-f来实现。\n</thought>\n\n<code_block>\n# 生成4位16进制数\n${hex}  GenerateRandom | 4 | [NUMBERS]abcdef\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择学生信息表中包含李四的表格行",
        "output": "<thought>\n解决问题思路：\n首先在学生信息表中找到包含李四的表格行，然后选择这个表格行\n</thought>\n\n<code_block>\n# 选择学生信息表中包含李四的表格行\nSelectTableRow | 李四 | tbl=学生信息表\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面中心点，可以以body元素为基准，鼠标偏移到页面中心后点击",
        "output": "<thought>\n解决问题思路：\n首先使用MoveToElem关键字让鼠标移到页面的中心位置。我们可以通过JavaScript的window.innerWidth和window.innerHeight来获取页面的高度和宽度，然后除以2得到中心位置的坐标。最后使用MClick关键字在当前位置点击。\n</thought>\n\n<code_block>\n# 获取页面的宽度和高度\n${width}    Execute Javascript    return window.innerWidth;\n${height}   Execute Javascript    return window.innerHeight;\n# 计算中心位置的坐标\n${cx}    Evaluate    ${width} / 2\n${cy}    Evaluate    ${height} / 2\n# 移动到页面的中心位置\nMoveToElem | body | dx=${cx} | dy=${cy}\n# 在当前位置点击\nMClick\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在弹窗中 左上 的输入框中输入${temple_name}",
        "output": "<thought>\n根据提供的信息，我需要在弹窗的左上方找到一个input或textarea元素，然后向其中输入变量`${temple_name}`。使用`FillArea`可以将数据送入到指定元素中，但首先我们需要定位到该元素。因为需要在弹窗中操作，可以通过`FindElemToTheDirectionOf`关键字在左上方定位目标元素，然后使用`FillArea`对其输入内容。\n</thought>\n\n<code_block>\n# 查找弹窗中左上方的input或textarea元素\n${elem}  FindElemToTheDirectionOf | POPUP | topLeft | input, textarea\n\n# 向找到的元素中输入变量`${temple_name}`\nFillArea | ${elem} | ${temple_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验详细数据表格中第一行包含 应用启动  总次数",
        "output": "<thought>\n首先，要校验表格的某一行包含某些文本，可以使用CheckRowHas关键字。在这种情况下，我们需要检查名为\"详细数据\"的表格的第一行是否包含文本\"应用启动\"和\"总次数\"。\n</thought>\n\n<code_block>\n# 校验详细数据表格的第一行包含\"应用启动\"和\"总次数\"\nCheckRowHas | 1 | 应用启动 | 总次数 | tbl=详细数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "给 placeholder=请输入想要问 AI 的问题 ，输入 mac上不了网，怎么办{当前时间戳}",
        "output": "<thought>\n首先，需要在页面中找到占位符为\"请输入想要问 AI 的问题\"的输入框，然后在其中输入文本“mac上不了网，怎么办”并附加上当前的时间戳。这里可以使用 SetField 关键字，如果没有字段名称，可以使用 FillArea 结合合适的 jQuery selector 来实现输入动作。并且因为需要获取当前的时间戳，可以使用 Get Current Date 来获取时间，并结合字符串构建最终的输入文本。\n</thought>\n\n<code_block>\n# 获取当前时间戳\n${current_time}  Get Current Date  result_format=timestamp\n\n# 在placeholder=请输入想要问 AI 的问题的输入框中输入具体问题和时间戳\nFillArea  [placeholder=\"请输入想要问 AI 的问题\"]  mac上不了网，怎么办${current_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "退出 iframe",
        "output": "<thought>\n要退出当前iframe，我们可以使用`ExitFrame`关键字。这个关键字用于从嵌套的iframe中返回到主文档。\n</thought>\n\n<code_block>\n# 从当前iframe切回到主文档\nExitFrame\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到“近30日音浪收入”右边的第一个class包含“help”上",
        "output": "<thought>\n在这个场景中，我们需要将鼠标移动到“近30日音浪收入”右边的第一个class包含“help”的元素上。可以使用MoveToElemToTheDirectionOf关键字，它可以帮助我们根据基准元素和方向找到具体的目标元素，然后移动到该元素上。因此，我们选择使用该关键字，以“近30日音浪收入”为基准，从其右边找第一个class包含“help”的元素。\n</thought>\n\n<code_block>\n# 移动鼠标到“近30日音浪收入”右边的第一个class包含“help”的元素\nMoveToElemToTheDirectionOf | 近30日音浪收入 | right | [class*=help] | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待'操作'按钮出现",
        "output": "<thought>\n解决这个问题的思路是使用WaitElem关键字来等待指定按钮出现。我们需要提供一个jquery选择器来定位这个按钮。假设按钮的文本是“操作”，我们可以使用`:contains('操作')`来匹配包含这个文本的按钮。\n</thought>\n\n<code_block>\n# 等待页面上出现文本为“操作”的按钮\nWaitElem | button:contains('操作') | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找表格第一行中的：用户画像",
        "output": "<thought>\n通过题目描述，我们需要在表格的第一行中查找包含特定文本“用户画像”的元素。这里可以使用`FindTextOfRow`关键字，其允许我们通过行号和指定的文本查找目标元素。由于是查找表格中的文本，不涉及点击或者选择的操作，所以不涉及其他的关键字。\n</thought>\n\n<code_block>\n# 查找表格第一行中的文本 '用户画像'\n${elem}  FindTextOfRow | 1 | 用户画像 | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "读取 data/cert_file.crt 中的内容，然后填写到：私钥 中",
        "output": "<thought>\n思路是先用操作系统关键字“Get File”获取cert_file.crt的内容，然后用“SetField”关键字将获取的内容填写到私钥字段中。\n</thought>\n\n<code_block>\n# 读取cert_file.crt文件内容\n${cert_content}=    Get File    data/cert_file.crt\n# 填写私钥字段\nSetField    私钥    ${cert_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击最后一个文本为确定的button",
        "output": "<thought>\n需要点击最后一个文本为“确定”的button。可以使用Click关键字，通过选择器选择最后一个包含“确定”的button元素。\n</thought>\n\n<code_block>\n# 点击最后一个文本为“确定”的button\nClickElem | button:contains(确定):eq(-1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格 (${task_name}, 操作) 中的 icon",
        "output": "<thought>\n该场景需要点击表格中某个单元格内的图标。我们可以使用 `ClickIconOfCell` 关键字来实现这一操作。我们首先需要确定单元格的位置，即行名或行号（`row_name_or_id`）和列名或列号（`col_name_or_id`）。在该场景中，行由 `${task_name}` 标识，列为 操作。为了点击单元格中的图标，我们需要知道图标名称，如果没有具体提供，可以默认选择第一个图标（`idx=0`）。因此选择关键字 `ClickIconOfCell` 来完成这项任务。\n</thought>\n\n<code_block>\n# 点击单元格 (${task_name}, 操作) 中的第一个图标\nClickIconOfCell | ${task_name} | 操作 | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 会议室名称 设置为 Guangzhou-Heji(赫基大厦) > F23-01，点击 操作 下方更多图标，点击 下拉 弹窗中的 下线",
        "output": "<thought>\n首先，我需要使用 `SetField` 关键字来设置会议室名称为 \"Guangzhou-Heji(赫基大厦) > F23-01\"。接着，我使用 `ClickIconToTheDirectionOf` 关键字来点击 \"操作\" 下方的更多 icon。最后，我需要在弹窗中点击 \"下线\"，可以使用 `Click` 关键字并设置 base 为 POPUP来实现。\n</thought>\n\n<code_block>\n# 设置会议室名称为 \"Guangzhou-Heji(赫基大厦) > F23-01\"\nSetField | 会议室名称 | Guangzhou-Heji(赫基大厦) > F23-01\n\n# 点击 \"操作\" 下方的更多 icon\nClickIconToTheDirectionOf | 操作 | bottom | more\n\n# 在弹窗中点击 \"下线\"\nClick | 下线 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 检查页面显示操作触发成功",
        "output": "<thought>\n 在这个场景中，我们需要检查页面是否存在\"操作触发成功\"的文字。我们可以使用\"CheckHasText\"关键字来实现这个检查。\n </thought>\n \n <code_block>\n # 检查页面存在\"操作触发成功\"\n CheckHasText | 操作触发成功\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格中最后一行第一列的元素",
        "output": "<thought>\n在这个问题中，我们需要点击最后一行的第一列元素。通过使用`ClickElemOfCell`关键字，我们可以实现这个需求。`row_name_or_id=-1`用于标识最后一行，而`col_name_or_id=1`表示第一列。由于没有提供具体的元素，所以选择器可以设置为`*`，表示任何元素。\n</thought>\n\n<code_block>\n# 点击表格中的最后一行第一列的元素\nClickElemOfCell | -1 | 1 | selector=*\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选中 ‘任务类型/ID’ 表格第一行",
        "output": "<thought>\n为了解决这个问题，我们需要选择一个表格中的行。给定的场景是选中 '任务类型/ID' 表格的第一行。在Robot Framework中，可以使用SelectTableRow关键字来选择表格行。这个关键字支持根据行号或行中的文本内容来选取行。此处使用行号会更为简单直接，因为要求选择的是第一行。根据关键字定义，我们可以通过提供row_name_or_id=1来指定第一行。由于这里指定了表格名，所以设置 tbl=任务类型/ID。\n</thought>\n\n<code_block>\n# 选中‘任务类型/ID’表格的第一行\nSelectTableRow | 1 | tbl=任务类型/ID\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "${elem}设置为180",
        "output": "<thought>\n在给定的场景中，我们需要在${elem}元素中输入180。应该使用FillArea关键字来向一个给定的元素中输入。此关键字用于根据jquery选择器来操作页面上的控件区域，并输入指定的值，也可以向一个定位好的页面元素中输入。在这里，我们假设${elem}是一个定位好的页面元素，因此可以将其直接用于FillArea关键字。\n</thought>\n\n<code_block>\n# 在元素中输入180\nFillArea | ${elem} | 180\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面上有存量商家关键字，点击后校验页面table里有记录",
        "output": "<thought>\n首先，我们需要验证页面上是否包含“存量商家”这个关键词，可以使用`CheckHasText`方法。接着，我们点击这个关键词，可以使用`Click`关键字。最后，我们需要确认页面中的表格有记录，这可以通过`CheckRowCount`关键字来实现，假设至少有一条记录，所以我们校验行数大于0。\n</thought>\n\n<code_block>\n# 校验页面上存在“存量商家”关键字\nCheckHasText | 存量商家\n\n# 点击“存量商家”关键词\nClick | 存量商家\n\n# 校验表格中至少有一条记录\nCheckRowCount | 1 | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "先点击商品名称 选择${Commodity_Name}",
        "output": "<thought>\n在这个场景中，我们需要首先点击商品名称，然后选择一个商品。我们可以使用关键字`Click`来点击商品名称，然后使用`SelectOption`选择商品。\n</thought>\n\n<code_block>\n# 点击商品名称\nClick | 商品名称\n\n# 选择商品名称为 Commodity_Name\nSelectOption | ${Commodity_Name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 检验 已解决 文案出现",
        "output": "<thought>\n 这是一个相对简单的场景，我们可以使用CheckHasText关键字来检验“已解决”文案是否出现在页面上。这个关键字可以检验页面上是否存在指定的文本。\n </thought>\n \n <code_block>\n # 检验\"已解决\"文案出现\n CheckHasText | 已解决\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现 质量保障配置更新成功 文案，页面中不存在wps",
        "output": "<thought>\n为了实现当前场景，首先需要使用 WaitText 关键字等待页面中出现“质量保障配置更新成功”文案。接下来，使用 CheckNotHasText 关键字验证页面中不存在“wps”文本。\n</thought>\n\n<code_block>\n# 等待页面出现“质量保障配置更新成功”文案\nWaitText | 质量保障配置更新成功\n\n# 确保页面中不存在“wps”\nCheckNotHasText | wps\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "清空姓名字段",
        "output": "<thought>\n对于清空姓名字段，我们可以使用SetField关键字，设置其值为${KEY_BACKSPACE}，以达到清空的效果。\n</thought>\n\n<code_block>\n# 清空姓名字段\nSetField | 姓名 | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面包含“指标类型“ ”风险策略“ ”展示字段“",
        "output": "<thought>\n首先需要检查页面是否包含文本“指标类型”、“风险策略”和“展示字段”。可以使用CheckHasText关键字实现。\n</thought>\n\n<code_block>\n# 检查页面包含文本“指标类型“ ”风险策略“ ”展示字段“\nCheckHasText | 指标类型 | 风险策略 | 展示字段\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认流程记录表格中，只有一行内容，且处理方式为 提交报废",
        "output": "<thought>\n为了解决这个问题，我们需要先检查表格的行数是否等于1，然后检查这一行的处理方式列的值是否等于\"提交报废\"。\n</thought>\n\n<code_block>\n# 获取流程记录表格的行数\n${rowCount}  GetRowCount  tbl=流程记录\n\n# 检查行数是否为1\nShould Be Equal As Strings  ${rowCount}  1\n\n# 获取处理方式列的值\n${procMode}  GetCellValue  1  处理方式  tbl=流程记录\n\n# 检查处理方式是否为\"提交报废\"\nShould Be Equal As Strings  ${procMode}  提交报废\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${strategy_name}不为None，则创建空列表，然后滚动页面到顶部，获取姓名、学号两个字段的值，存入此列表中 ",
        "output": "<thought>\n首先需要判断变量${strategy_name}是否为None。如果不为None，则创建一个空列表来存储姓名和学号。接下来，滚动页面到顶部以确保可见性，然后获取姓名和学号字段的值，并将它们添加到刚创建的列表中。我们可以使用GetFieldVal关键字来获取字段的值。\n</thought>\n\n<code_block>\n# 如果${strategy_name}不为None，则创建一个空列表，滚动页面到顶部，获取姓名、学号字段的值存入列表\n# 判断${strategy_name}是否不为None\nIF  ${strategy_name} is not None\n    # 创建空列表\n    @{values}  Create List \n    # 滚动页面到顶部\n    PageUp | times=3\n    # 获取姓名、学号字段的值\n    ${name}  GetFieldVal | 姓名\n    ${stu_id}  GetFieldVal | 学号\n    # 将姓名、学号的值添加到列表\n    Append To List  | ${values}  | ${name} \n    Append To List  | ${values}  | ${stu_id}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击上传证书下方的火山引擎证书中心，在\"请输入模块名称进行搜索\"里输入Base，点击配置证书左边的icon",
        "output": "<thought>\n考虑到需要点击“上传证书”下方的“火山引擎证书中心”，可以使用`ClickTextToTheDirectionOf`关键字，指定方向为`bottom`。然后，在“请输入模块名称进行搜索”输入框中输入\"Base\"，可以使用`SetField`关键字，并指定该输入框的名称为\"请输入模块名称进行搜索\"。最后，点击“配置证书”左边的icon，可以使用`ClickIconToTheDirectionOf`关键字完成。\n</thought>\n\n<code_block>\n# 点击“上传证书”下方的“火山引擎证书中心”\nClickTextToTheDirectionOf | 上传证书 | bottom | 火山引擎证书中心\n\n# 在“请输入模块名称进行搜索”里输入\"Base\"\nSetField | 请输入模块名称进行搜索 | Base\n\n# 点击“配置证书”左边的icon\nClickIconToTheDirectionOf | 配置证书 | left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个打开浏览器关键字，接受 ${url} 参数，默认值为 ${MAIN_PAGE}, 主要完成打开浏览器操作，并访问给定的URL，然后等待页面加载完成",
        "output": "<thought>\n为了实现打开浏览器并访问指定网址的关键字，我先是创建了一个名为 \"打开浏览器\" 的关键字，并指定了一个参数 ${url} ，默认值为 ${MAIN_PAGE}。然后，我使用了 \"OpenBrowser\" 关键字来打开浏览器。再然后，我使用了 \"OpenUrl\" 关键字来访问 ${url} 指定的网址，并设置了超时时间为80秒。最后，我使用了 \"WaitLoading\" 关键字来等待页面加载完成，设置了超时时间为30秒。\n</thought>\n\n<code_block>\n打开浏览器\n    [Arguments]  ${url}=${MAIN_PAGE}\n    # 打开浏览器\n    OpenBrowser\n    # 访问给定的 URL\n    OpenUrl  |  ${url}  |  timeout=80\n    # 等待页面加载完成\n    WaitLoading  |  timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取文案为「总请求数分布」的元素，点击此元素右侧的标签为 svg的元素",
        "output": "<thought>\n为了解决这个问题，我们首先需要找到文案为「总请求数分布」的元素，然后找到这个元素右侧的标签为svg的元素并点击。我们可以使用FindByText关键字来查找目标元素，然后使用ClickElemToTheDirectionOf关键字来点击右侧的svg元素。\n</thought>\n\n<code_block>\n# 查找文案为「总请求数分布」的元素\n${elem}  FindByText | 总请求数分布\n\n# 查找「总请求数分布」元素右侧的标签为svg的元素并点击\nClickElemToTheDirectionOf | ${elem} | right | svg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到span内容是商品名称/ID的元素，然后找到其中placeholder是请输入的input, 然后设置值",
        "output": "<thought>\n首先，我们需要查找具有文本\"商品名称/ID\"的span元素，然后在此span元素下找到一个后代input元素，其中placeholder属性为\"请输入\"。找到该input元素后，我们需要设置它的值。为了实现这一点，我们可以使用FindByText关键字来定位span元素，随后使用jQuery选择器定位input元素。选择器可以通过组合使用\"[placeholder='请输入']\"来定位到特定的input元素。\n</thought>\n\n<code_block>\n# 查找文本为商品名称/ID的span元素\n${span_elem}  FindByText | 商品名称/ID | tag=span\n\n# 在找到的span元素下找到placeholder为请输入的input元素\n${input_elem}  FindElem | input[placeholder='请输入'] | base=${span_elem} \n\n# 为找到的input元素设置值\nFillArea | ${input_elem} | 所需值\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选 ${domain}，点击 Bills on changing period，将第2个class为table-header页面区域保存为基准图",
        "output": "<thought>\n首先，我们需要勾选名为`${domain}`的复选框，可以使用`CheckBoxOn`关键字来实现。接下来，点击文本`Bills on changing period`，可以使用`Click`关键字。最后，需要将第二个class为`table-header`的页面区域保存为基准图，这可以通过使用`ImageDiff`关键字并提供适当的选择器来实现。选择器可以通过使用`:eq(1)`来选择第二个`table-header`元素。\n</thought>\n\n<code_block>\n# 勾选 ${domain} 复选框\nCheckBoxOn | ${domain}\n\n# 点击 'Bills on changing period'\nClick | Bills on changing period\n\n# 截取第二个class为table-header的区域并保存为基准图\nImageDiff | [class=table-header]:eq(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检验当前截图包含 “应付金额=折后价-代金券抵扣=现金支付+信控额度退款抵扣+欠费金额；注：账务账期202303及之前的后付费非结算账单，应付金额=0；”",
        "output": "<thought>\n首先，我们需要获取页面截图中的文本，然后使用RF的校验关键字来判断截图文本是否包含目标文本。\n</thought>\n\n<code_block>\n# 获取页面截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验截图文本中包含目标文本\nShould Contain  ${txt}  应付金额=折后价-代金券抵扣=现金支付+信控额度退款抵扣+欠费金额；注：账务账期202303及之前的后付费非结算账单，应付金额=0；\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "屏幕滚动到Content-Stratified consumption-long videos",
        "output": "<thought>\n我们的目标是让屏幕滚动到名为\"Content-Stratified consumption-long videos\"的内容，使其可见。可以使用`MoveIntoView`关键字，因为它将元素移动到视野内。需要为此元素创建jQuery选择器。\n</thought>\n\n<code_block>\n# 将名为\"Content-Stratified consumption-long videos\"的内容移动到视野内\nMoveIntoView | :contains('Content-Stratified consumption-long videos')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 如果页面包含实验报告字段，执行代码体1，如果不包含实验报告字段，执行代码体2",
        "output": "<thought>\n 首先需要判断页面是否包含“实验报告”字段，可以使用`IsAnyTextExisting`关键字。如果存在，执行代码体1，否则执行代码体2。使用RF的IF/ELSE结构来控制逻辑分支。\n </thought>\n \n <code_block>\n # 检查页面是否存在“实验报告”字段\n ${exist}  IsAnyTextExisting | 实验报告\n \n # 根据存在性执行不同的代码体\n IF  $exist\n  # 代码体1\n  Log  执行代码体1\n ELSE\n  # 代码体2\n  Log  执行代码体2\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取${elem} 元素中所有标签为 svg 的元素，遍历点击svg元素",
        "output": "<thought>\n首先,我会使用FindElem获取${elem}中的所有svg元素，并把返回的元素列表存储在${svg_elements}中。然后使用内置的FOR循环关键字遍历${svg_elements}。在每一次迭代中，I 使用ClickElem关键字来点击每一个svg元素。这里使用了FindElem是因为我们需要找到${elem}元素下的所有svg子元素，而内置的FOR与ClickElem则用于遍历并点击所有的svg元素。\n</thought>\n\n<code_block>\n#获取${elem}中的所有svg元素\n${svg_elements}  FindElem  ${elem} svg\n\n#遍历svg元素\nFOR  ${svg}  IN  @{svg_elements}\n  #点击svg元素\n  ClickElem  ${svg}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${cert} 中的 \"\\n\" 替换为 \"\\\\n\"",
        "output": "<thought>\n这个问题不需要使用关键字，可以直接使用RobotFramework自带的Replace String关键字完成对字符串的替换。\n</thought>\n\n<code_block>\n# 使用Replace String关键字替换字符串中的\"\\n\"为\"\\\\n\"\n${cert}    Replace String    ${cert}    \\n    \\\\n\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在文本'失败'，则返回失败",
        "output": "<thought>\n首先，我们需要使用`IsAnyTextExisting`关键字来判断页面是否存在文本'失败'。如果存在，我们将使用`Should Be True`来检查结果，并返回失败。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本'失败'\n${exist}  IsAnyTextExisting | 失败\n\n# 如果存在'失败'文本，就返回失败\nIF  ${exist}\n    Fail  测试失败：页面存在文本'失败'\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含arco-dropdown-menu-inner的元素中的移交",
        "output": "<thought>\n我们需要找到一个元素，其class属性包含特定的字符串，然后在该元素中找到文本为“移交”的元素进行点击。可以使用`Click`关键字指定基准元素来达到目的。\n</thought>\n\n<code_block>\n# 定义选择器变量，用于定位class包含特定字符串的元素\n${base_elem}  FindElem | div[class*='arco-dropdown-menu-inner']\n\n# 在基准元素中点击文本为“移交”的元素\nClick | 移交 | base=${base_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class 包含 arco-select-view-value-mirror 并且文案为Singapore的元素",
        "output": "<thought>\n首先，我们需要根据给定的条件查找元素：class包含`arco-select-view-value-mirror`且文案为`Singapore`。使用`FindElem`关键字可以通过jQuery选择器来实现这个查找。因为我们需要查找包含特定文本的元素，所以可以使用`:contains()`选择器来匹配文本。然后使用`ClickElem`关键字来点击找到的元素。\n</thought>\n\n<code_block>\n# 查找class包含arco-select-view-value-mirror 并且文案为Singapore的元素，并点击\nClickElem | [class*=arco-select-view-value-mirror]:contains(Singapore)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取 ${elem} 的图片，命名为：图1，并和基准图对比",
        "output": "<thought>\n在这个场景中，我们需要截取一个元素的图片，使用ImageDiff关键字，并指定pic_name为“图1”，还要进行基准图对比。下面是针对这个任务的代码实现。\n</thought>\n\n<code_block>\n# 截取 ${elem} 的图片，命名为：图1，并和基准图对比\nImageDiff | ${elem} | pic_name=图1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成，设置 搜索Agent关键词 为：【自动化测试专用】请勿操作，点击Agent编排，等待2s后校验页面包含class=sysd_chat_ops元素",
        "output": "\n    \n<thought>\n 首先等待页面加载完成，然后设置搜索关键字，再点击“Agent编排”。接着等待2秒，最后校验页面包含指定元素。使用的关键字有：`WaitLoading`、`SetField`、`Click`、`Sleep`、`CheckHasElem`。\n </thought>\n \n <code_block>\n # 等待页面加载完成\n WaitLoading\n \n # 设置搜索Agent关键词\n SetField | 搜索Agent关键词 | 【自动化测试专用】请勿操作\n \n # 点击Agent编排\n Click | Agent编排\n \n # 等待2秒\n Sleep | 2s\n \n # 校验页面包含class=sysd_chat_ops元素\n CheckHasElem | [class=sysd_chat_ops]\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测页面是否白屏, 如果页面上文案数量少于给定阈值80就会被判断为白屏",
        "output": "<thought>\n我们需要检查页面是否是白屏状态。首先，我们可以通过获取页面上的所有文本来计算文本的长度。如果文本数量少于给定的阈值80，则判定为白屏。我们可以使用GetPageText关键字来获取页面上的所有文本，然后检查文本的长度是否满足条件。\n</thought>\n\n<code_block>\n# 获取页面上的所有文本\n${page_text}  GetPageText\n\n# 判断页面文案数量是否少于80\n${length}  Evaluate  len('${page_text}')\nIF  ${length} < 80\n    # 页面被判断为白屏\n    Fail  页面被判断为白屏\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "assert_list变量依次加入以下元素：收入类 CNY 基础信息",
        "output": "<thought>\n这个问题可以通过RobotFramework的关键字Set Variable或者Append To List来解决。应该先创建一个空的列表变量assert_list，然后依次将需要的元素添加到列表中。\n</thought>\n\n<code_block>\n# 创建空的列表变量assert_list\n@{assert_list}  Create List\n\n# 将元素收入类加入到列表中\nAppend To List  ${assert_list}  收入类\n\n# 将元素CNY加入到列表中\nAppend To List  ${assert_list}  CNY\n\n# 将元素基础信息加入到列表中\nAppend To List  ${assert_list}  基础信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "关闭弹框",
        "output": "<thought>\n关闭弹框的要求是关闭页面上的弹窗/通知/问卷/新手引导等提示，可以直接使用CloseNotifications关键字来实现。\n</thought>\n\n<code_block>\n# 关闭页面上的弹窗/通知/问卷/新手引导等提示\nCloseNotifications\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择表格中名字为\"李四\"的那行",
        "output": "<thought>\n使用SelectTableRow关键字选择表格中名字为\"李四\"的行。\n</thought>\n\n<code_block>\n# 选择名字为\"李四\"的表格行\nSelectTableRow | 李四\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将‘消费规则’滚动到页面中间，清空 Order/Bill no，点击 第1个 div title=\"10  / Page\"，设置 弹窗中 Export 为 Current filter results，校验 存在 Total: 1",
        "output": "<thought>\n首先，我们需要将‘消费规则’移动到视野内，可以使用MoveIntoView关键字。接下来，清空字段Order/Bill no，可以使用SetField关键字，并通过传递特殊值${KEY_BACKSPACE}来实现清空。然后，需要点击第一个div元素，其title属性为\"10 / Page\"，可以通过ClickElem关键字和jquery选择器来实现。接着，要在弹窗中设置Export字段为\"Current filter results\"，可以使用SetPopupField关键字。最后，校验页面上存在文本\"Total: 1\"，可以使用CheckHasText关键字。\n</thought>\n\n<code_block>\n# 将‘消费规则’移动到视野内\nMoveIntoView | :contains('消费规则')\n\n# 清空Order/Bill no字段\nSetField | Order/Bill no | ${KEY_BACKSPACE}\n\n# 点击第一个title为\"10  / Page\"的div\nClickElem | div[title='10  / Page']:eq(0)\n\n# 设置弹窗中的Export为Current filter results\nSetPopupField | Export | Current filter results\n\n# 校验页面存在文本\"Total: 1\"\nCheckHasText | Total: 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果'${params_pwd}'!='${None}'，点击编辑",
        "output": "<thought>\n在这个场景中，我们需要判断'${params_pwd}'是否不等于'${None}'，如果不等于，就点击编辑。为了实现这个任务，我们可以使用Robot Framework的内置IF/ELSE关键字。在IF关键字中，我们可以使用表达式'${params_pwd}'!='${None}'，如果此表达式为真（意味着'${params_pwd}'确实不等于'${None}'），那么我们就执行'Click'关键字来点击编辑。否则，不执行任何操作。\n</thought>\n\n<code_block>\n# 使用Robot Framework的内置IF/ELSE关键字判断'${params_pwd}'是否不等于'${None}'\nIF  '${params_pwd}'!='${None}'\n    # 如果'${params_pwd}'不等于'${None}'，点击编辑\n    Click  编辑\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 经办组 选择第一个选项",
        "output": "<thought>\n 我们需要为选择“经办组”的第一个选项编写脚本。可以使用SelectOptionForField关键字，选中OPTIONS_1作为第一个选项。\n </thought>\n \n <code_block>\n # 选择经办组的第一个选项\n SelectOptionForField | 经办组 | OPTIONS_1\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "弹框中不存在投放日文字",
        "output": "<thought>\n给定的场景要求我们验证弹窗中不存在特定文本“投放日”。我们可以使用`CheckNotHasText`关键字来检查“投放日”在弹窗中是否不存在。为了确定这是一个弹窗中的操作，我们需要设置`base`参数为特殊值`POPUP`。\n</thought>\n\n<code_block>\n# 校验弹窗中不存在'投放日'\nCheckNotHasText | 投放日 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 联系人姓名 设置为：杨 鑫，联系人邮箱为yangxin.0917@bytedance.com,联系人手机为134531716398",
        "output": "<thought>\n我们需要设置多个字段，因此可以使用`BatchSetFields`关键字来同时设置联系人姓名、联系人邮箱和联系人手机的值。\n</thought>\n\n<code_block>\n# 设置联系人信息\nBatchSetFields  联系人姓名=杨 鑫  联系人邮箱=yangxin.0917@bytedance.com  联系人手机=134531716398\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 如果存在请选择领取地点，点击 请选择领取地址，输入广州赫基大厦 ，点击广州赫基大厦",
        "output": "<thought>\n首先，判断文本“请选择领取地点”是否存在。如果存在，则点击“请选择领取地址”。接着输入“广州赫基大厦”，最后点击“广州赫基大厦”。\n</thought>\n\n<code_block>\n# 判断“请选择领取地点”是否存在\n${exist}  IsAnyTextExisting | 请选择领取地点\n\n# 如果存在，执行以下步骤\nIF  $exist\n # 点击“请选择领取地址”\n Click | 请选择领取地址\n \n # 输入“广州赫基大厦”\n SendText | 广州赫基大厦\n \n # 点击“广州赫基大厦”\n Click | 广州赫基大厦\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 ‘我已知晓’ 附近的复选框",
        "output": "<thought>\n为了查找“我已知晓”附近的复选框，我们可以使用`FindByText`关键字来定位包含文本“我已知晓”的元素，然后使用`FindNearElem`关键字来查找其附近的复选框元素。根据上下文，复选框通常是一个`input`元素，带有`type=\"checkbox\"`属性 或 用 :checkbox 来表示。\n</thought>\n\n<code_block>\n# 找到文本为“我已知晓”的元素\n${elem}  FindByText | 我已知晓\n\n# 查找“我已知晓”附近的复选框\n${checkbox}  FindNearElem | ${elem} | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面标题为：湖仓一体分析服务 LAS",
        "output": "<thought>\n编写自动化脚本过程如下：\n1. 使用GetTitle关键字获取页面标题，并将其值赋给一个变量，例如：${title}。\n2. 使用Should Be Equal As Strings关键字比较${title}和预期的页面标题\"湖仓一体分析服务 LAS\"是否相等。\n</thought>\n\n<code_block>\n# 获取页面标题\n${title}=  GetTitle\n# 校验页面标题\nShould Be Equal As Strings  ${title}  湖仓一体分析服务 LAS\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传文件 https://tosv.byted.org/obj/giraffe-longtime-tos/2024_09_14_19_22_49_LFud_IMG_1845.JPG",
        "output": "<thought>\n解决问题思路：使用关键字 UploadFile 上传文件\n</thought>\n\n<code_block>\n# 上传文件 https://tosv.byted.org/obj/giraffe-longtime-tos/2024_09_14_19_22_49_LFud_IMG_1845.JPG\nUploadFile | https://tosv.byted.org/obj/giraffe-longtime-tos/2024_09_14_19_22_49_LFud_IMG_1845.JPG\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 admin 行中的 编辑 icon",
        "output": "<thought>\n首先，需要在“admin”所在的表格行中找到“编辑”icon。根据需求，可使用`ClickIconOfRow`关键字，提供“admin”作为行标识符，\"编辑\"作为图标名称。\n</thought>\n\n<code_block>\n# 点击 admin 行中的 编辑 icon\nClickIconOfRow | admin | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 id=xxx 且class 包含 abc 的元素里的 id=777的元素",
        "output": "<thought>\n首先需要点击id为xxx且class包含abc的元素中的id为777的元素。可以使用ClickElem关键字来实现。通过jquery选择器来定位这些元素。\n</thought>\n\n<code_block>\n# 点击 id=xxx 且class包含abc 的元素里的 id=777的元素\nClickElem | [id=xxx][class*=abc] [id=777]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "新建关键字：SSO登录\n入参：{url} {user} {password}\n功能：进入{url},输入账号为{user},密码为{password}，点击登录",
        "output": "<thought>\n这个任务需要打开提供的URL，然后在页面上输入用户名和密码，并点击登录按钮。我们将使用`OpenUrl`关键字打开页面，使用`BatchSetFields`关键字在相应字段中输入用户名和密码，最后使用`Click`来点击登录按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\nSSO登录\n    [Arguments]  ${url}  ${user}  ${password}\n    \n    # 打开提供的URL\n    OpenUrl  ${url}\n    \n    # 在相关输入框中输入用户名和密码\n    BatchSetFields  用户名=${user}  密码=${password}\n    \n    # 点击登录按钮\n    Click  登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ${login_user} 变量值为 ${USER_LFF_CLM1_PRE}\n设置 ${env} 变量值为 ${ENV} \n设置 ${search_value} 变量值为 自动化测试自动化测试自动化测试测试2024-0105",
        "output": "<thought>\n解决问题思路：需要用到 RF 的 Set Variable 关键字，将变量值设置为相应的值。\n</thought>\n\n<code_block>\n# 设置 ${login_user} 变量值为 ${USER_LFF_CLM1_PRE}\n${login_user}  Set Variable  ${USER_LFF_CLM1_PRE}\n\n# 设置 ${env} 变量值为 ${ENV}\n${env}  Set Variable  ${ENV}\n\n# 设置 ${search_value} 变量值为 自动化测试自动化测试自动化测试测试2024-0105\n${search_value}  Set Variable  自动化测试自动化测试自动化测试测试2024-0105\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹窗中 PR2408040100-1 表格行中的本次下单数量为：5",
        "output": "<thought>\n需要在弹窗中定位到PR2408040100-1这一行，然后使用`FillCell`关键字为对应列的单元格设置值。假设“本次下单数量”对应的列名为`数量`。\n</thought>\n\n<code_block>\n# 设置弹窗中PR2408040100-1行的本次下单数量为5\nFillCell | PR2408040100-1 | 数量 | 5 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 合同电子版1 基准元素：包括editor-container的class",
        "output": "<thought>\n要解决此问题，我们需要点击文本“合同电子版1”，并且指定一个基准元素，该基准元素是class包含“editor-container”的元素。可以使用关键字Click，并在base参数中使用FindElem来获取具有特定class的基准元素。\n</thought>\n\n<code_block>\n# 查找包含class 'editor-container' 的元素并点击文本 '合同电子版1'\n${base_elem}  FindElem | [class*=editor-container]\nClick | 合同电子版1 | base=${base_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向${elem}代表的元素 中输入 @{config}",
        "output": "<thought>\n为了向${elem}代表的元素中输入@{config}，我们需要使用FillArea关键字，因为它可以将多个值输入到页面的控件区域中。我们可以使用$[elem]作为选择器，@{config}作为需要输入的值。\n</thought>\n\n<code_block>\n# 向${elem}代表的元素中输入@{config}\nFillArea | ${elem} | @{config}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 使用张数限制 为 不限制使用张数",
        "output": "<thought>\n为了校验“使用张数限制”字段的值为“不限制使用张数”，我们需要先找到该字段。然后使用`CheckFieldContains`关键字来确定该字段的值是否为“不限制使用张数”。\n</thought>\n\n<code_block>\n# 校验“使用张数限制”字段的值为“不限制使用张数”\nCheckFieldContains | 使用张数限制 | 不限制使用张数\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成，获取 页面中任务中心的个数，如果为0则打印aaaaa",
        "output": "\n<thought>\n首先，需要等待页面加载完成，可以使用WaitLoading关键字。然后，获取页面中任务中心的个数，可以使用GetElemCount关键字。最后，根据获取的个数使用RF的IF语句判断，如果个数为0，则打印aaaaa。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading | timeout=30\n\n# 获取页面中任务中心的个数\n${count}  GetElemCount | :contains(任务中心)\n\n# 如果任务中心个数为0则打印aaaaa\nIF  \"${count}\" == \"0\"\n    Log  aaaaa\nEND\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 我方信息 为 ${supplier_name}，等待页面中出现${supplier_name}\n设置 签约形式 为 “纸质签约”，等待页面中出现 “纸质签约”\n设置 先盖章方 为 “我方” ",
        "output": "<thought>\n首先，我们需要使用SetField关键字填写“我方信息”、“签约形式”和“先盖章方”的值。接下来，我们使用WaitText关键字等待页面上出现相应的文本。\n</thought>\n\n<code_block>\n# 设置我方信息为 ${supplier_name}\nSetField | 我方信息 | ${supplier_name}\n\n# 等待页面中出现 ${supplier_name}\nWaitText | ${supplier_name}\n\n# 设置签约形式为 “纸质签约”\nSetField | 签约形式 | 纸质签约\n\n# 等待页面中出现 “纸质签约”\nWaitText | 纸质签约\n\n# 设置先盖章方为 “我方”\nSetField | 先盖章方 | 我方\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第7行中的checkbox",
        "output": "<thought>\n根据需求，我们需要点击表格的第7行中的checkbox。首先，我们需要获取到表格的第7行，然后在该行中找到checkbox元素并点击。我们可以使用关键字\"ClickElemOfRow\"来完成这个任务，参数row_name_or_id设置为7（代表第7行），selector设置为\":checkbox\"（代表checkbox元素）。\n</thought>\n\n<code_block>\n# 点击表格第7行中的checkbox\nClickElemOfRow | 7 | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格第一行第一列内容，向商品描述中输入此内容",
        "output": "<thought>\n为了实现获取表格第一行第一列的内容，并将其输入到商品描述中，我将执行以下步骤：\n1. 使用`GetCellValue`关键字获取表格第一行第一列的内容。\n2. 使用`SetField`关键字将获取到的内容输入到商品描述字段中。\n</thought>\n\n<code_block>\n# 获取表格第一行第一列的内容\n${cell_value}  GetCellValue | 1 | 1\n\n# 将获取的内容输入到商品描述中\nSetField | 商品描述 | ${cell_value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击第一个编辑右边的...",
        "output": "<thought>\n 首先，我们需要定位到第一个\"编辑\"文本，然后识别其右侧的目标元素。根据提供的关键字，\"ClickIconToTheDirectionOf\"是最适合的，因为它允许我们指定基准元素和方向。在这个场景中，基准元素是第一个\"编辑\"文本，方向是\"right\"，目标是一个图标。假设目标图标名称是\"more\"。\n </thought>\n \n <code_block>\n # 点击第一个编辑右边的更多icon\n ClickIconToTheDirectionOf | :contains(编辑):eq(0) | right | more\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "按照以下步骤创建 关键字，关键字命名为 创建TEA指标组，返回参数${tea_metric_name} ：\n1.点击 创建指标组 按钮\n2.填写 TEA产品 Libra\n3.点击确定按钮\n4.等待新页面加载 并 转换的新窗口\n5.点击 保存指标组 按钮\n6.生成八位的全小写随机字符串，存在变量 ${tea_metric_name} 里\n7.将 ${tea_metric_name} 开头加上 Libra_autotest_ 并存回 ${tea_metric_name}\n8.填写 名称 ${tea_metric_name}\n9.填写 描述 ${tea_metric_name}\n10.点击 确定 按钮创建TEA指标组",
        "output": "<thought>\n为了解决问题，我们需要依次实现以下步骤：  \n1. 点击“创建指标组”按钮使用 `Click` 关键字。  \n2. 使用 `SetField` 填入“TEA产品 Libra”。  \n3. 点击“确定”按钮使用 `Click`。  \n4. 使用 `WaitLoading` 和 `ToNewWindow`，等待新页面加载并切换窗口。  \n5. 点击“保存指标组”按钮使用 `Click`。  \n6. 生成8位随机小写字符串并赋值给 `${tea_metric_name}`。  \n7. 在 `${tea_metric_name}` 前添加前缀并重设变量。  \n8. 使用 `SetField` 填写名称和描述。  \n9. 点击“确定”按钮使用 `Click`。\n</thought>\n\n<code_block>\n*** Keywords ***\n创建TEA指标组\n    [Return]  ${tea_metric_name}\n\n    # 点击创建指标组按钮\n    Click  创建指标组\n\n    # 填写TEA产品 Libra\n    SetField  TEA产品  Libra\n\n    # 点击确定按钮\n    Click  确定\n\n    # 等待新页面加载 并 转换的新窗口\n    WaitLoading\n    ToNewWindow\n\n    # 点击保存指标组按钮\n    Click  保存指标组\n\n    # 生成八位的全小写随机字符串\n    ${tea_metric_name}  GenerateRandom  8  [LOWER]\n\n    # 将 ${tea_metric_name} 加上前缀并重设变量\n    ${tea_metric_name}  Set Variable  Libra_autotest_${tea_metric_name}\n\n    # 填写名称和描述\n    SetField  名称  ${tea_metric_name}\n    SetField  描述  ${tea_metric_name}\n\n    # 点击确定按钮创建TEA指标组\n    Click  确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“填写事件信息”，参数为：name, show_name, type, desc, 默认值都为空，逻辑是：\n0. 参数 name, show_name, type, desc 对应的中文分别为：属性名称、展示名、属性类型、描述\n1. 点击“添加属性”\n2. 查找 div class包含formContainer的元素ele\n3. 对于关键字中的每一个参数，如果它不为空，就把 ele 中此参数对应的中文名称字段设置为该参数值",
        "output": "<thought>\n要解决这个问题，我们需要创建一个关键字“填写事件信息”，并处理参数。首先，我们点击“添加属性”按钮。然后，我们查找特定的元素来作为基准元素。对于每一个参数，如果它有值，我们将使用`SetField`关键字在基准元素中设置相应的字段。\n</thought>\n\n<code_block>\n*** Keywords ***\n填写事件信息\n    [Arguments]  ${name}=${EMPTY}  ${show_name}=${EMPTY}  ${type}=${EMPTY}  ${desc}=${EMPTY}\n    # 点击添加属性\n    Click  添加属性\n\n    # 查找目标元素并存储\n    ${ele}  FindElem  div[class*=formContainer]\n\n    # 设置属性名称\n    IF  '${name}' != ''\n        SetField  属性名称  ${name}  base=${ele}\n    END\n\n    # 设置展示名\n    IF  '${show_name}' != ''\n        SetField  展示名  ${show_name}  base=${ele}\n    END\n\n    # 设置属性类型\n    IF  '${type}' != ''\n        SetField  属性类型  ${type}  base=${ele}\n    END\n\n    # 设置描述\n    IF  '${desc}' != ''\n        SetField  描述  ${desc}  base=${ele}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘10 条/页’，然后接着点击 ‘30 条/页’",
        "output": "<thought>\n首先，我们需要依次点击两个文本元素：'10 条/页'和'30 条/页'。这可以通过使用`ClickTextOneByOne`关键字来实现。\n</thought>\n\n<code_block>\n# 依次点击 '10 条/页' 和 '30 条/页'\nClickTextOneByOne | 10 条/页 | 30 条/页\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 获取工单编号下的值，并去掉 前缀'IT-'",
        "output": "<thought>\n 首先需要找到工单编号的字段，获取其值，然后去掉前缀'IT-'。可以使用`GetFieldVal`获取字段值，再使用Python的字符串操作去掉前缀。\n </thought>\n \n <code_block>\n # 获取字段工单编号的值\n ${value} GetFieldVal | 工单编号\n \n # 去掉前缀'IT-'并输出结果\n ${order_number} Evaluate ${value}.replace('IT-', '') \n \n # 打印最终的工单编号\n Log ${order_number}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "给机构名称这行的搜索框输入 苏江传媒，点击 去合成视频，点击 class=semi2-select-selection-text的第二个span标签",
        "output": "<thought>\n首先，使用 `SetField` 关键字在“机构名称”行的搜索框中输入“苏江传媒”。接着，使用 `Click` 关键字点击“去合成视频”。最后，使用 `ClickElem` 关键字选择 `class=semi2-select-selection-text` 的第二个 `span` 标签。\n</thought>\n\n<code_block>\n# 在“机构名称”行的搜索框中输入“苏江传媒”\nSetField | 机构名称 | 苏江传媒\n\n# 点击“去合成视频”\nClick | 去合成视频\n\n# 点击 class 为 semi2-select-selection-text 的第二个 span 标签\nClickElem | span[class=semi2-select-selection-text]:eq(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在查询 button 就点击",
        "output": "<thought>\n首先，我们需要检查查询按钮元素是否存在。我们可以通过IsAnyElemExisting关键字实现这个功能，然后将其结果存储在一个变量中。然后，我们使用Robot Framework的IF语法，如果变量为真（即元素存在），则点击查询按钮元素。\n</thought>\n\n<code_block>\n# 检查查询button元素是否存在\n${exist}  IsAnyElemExisting | button:contains(查询)\n\n# 如果存在查询button元素，就点击\nIF  $exist\n    ClickElem | button:contains(查询)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在最后一个弹窗中输入：Start",
        "output": "<thought>\n在此场景中，我们需要在最后一个弹窗中输入文本“Start”。通过提供的关键字列表，我可以使用`FillPopup`来向弹窗中输入内容。为了确保我们是在最后一个弹窗中输入数据，我们需要将`popup_index`设置为-1，以指定最后一个弹窗。\n</thought>\n\n<code_block>\n# 在最后一个弹窗中输入Start\nFillPopup | Start | popup_index=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置全局变量 REMOTE_URL 为：http://10.86.87.185:9515",
        "output": "<thought>\n我们需要通过设置变量来完成任务。RobotFramework提供内置关键字`Set Global Variable`用于设置全局变量。\n</thought>\n\n<code_block>\n# 设置全局变量 REMOTE_URL 为指定的URL\nSet Global Variable  ${REMOTE_URL}  http://10.86.87.185:9515\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查询页面所有类型为 td 元素, class 的值为 \"art-table-cell lock-left cell\" 中第一个 div 元素所包含的字符串",
        "output": "<thought>\n要查询页面中符合条件的第一个 div 元素的字符串内容，首先需要找到符合 class 为 \"art-table-cell lock-left cell\" 的 td 元素，然后获取其包含的第一个 div 元素的内容。我们可以使用 FindElem 查找元素，再通过 Get Text 获取字符串。\n</thought>\n\n<code_block>\n# 查找 class 为 \"art-table-cell lock-left cell\" 的第一个 td 元素中的第一个 div\n${div_elem}  FindElem | td[class=\"art-table-cell lock-left cell\"] div:eq(0)\n\n# 获取第一个 div 元素的文本内容\n${text}  Get Text | ${div_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置前和名中间的输入框为3",
        "output": "<thought>\n首先，我们需要找到“前”和“名”之间的元素，这可以通过使用FindElemToTheDirectionOf关键字来实现。通过查找“前”右边的元素，并验证它是否为input或textarea。如果这个元素被正确找到，我们可以使用FillArea关键字将值3输入到这个元素中。\n</thought>\n\n<code_block>\n# 查找“前”右边的input/textarea元素\n${element}  FindElemToTheDirectionOf | 前 | right | input, textarea\n\n# 将找到的输入区域设置为3\nFillArea | ${element} | 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向第二个表格第一行输入 ${EMPTY} jpg 1",
        "output": "<thought>\n首先，我会先分析题目要求，题目要求是向第二个表格的第一行输入 ${EMPTY} jpg 1。因此我首先会想到使用FillRow关键字，这个关键字可以用来填充表格中的数据。然后在使用FillRow关键字时，我会设置参数 row_name_or_id=1, 表示填充的数据是在第一个表格行，然后通过 @args 参数传入我要填充的数据 ${EMPTY} jpg 1。最后，因为是要填充第二个表格，所以我会设置 tbl=2。\n</thought>\n\n<code_block>\n# 向第二个表格第一行输入 ${EMPTY} jpg 1\nFillRow | 1 | ${EMPTY} | jpg | 1 | tbl=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "REDIS_IPS 用，分割，取第一",
        "output": "<thought>\n这个任务需要处理一个包含多个Redis IP地址的字符串，用逗号分隔，然后取第一个IP地址。我们可以使用RobotFramework的内置关键字来处理字符串分割和获取列表中的第一个元素。\n\n1. 首先需要使用`Split String`关键字将字符串按逗号分割成列表\n2. 然后使用`Get From List`关键字获取列表中的第一个元素(索引为0)\n3. 可以将结果存储在一个变量中供后续使用\n</thought>\n\n<code_block>\n# 将REDIS_IPS字符串按逗号分割成列表\n@{redis_ip_list}    Split String    ${REDIS_IPS}    ,\n\n# 获取列表中的第一个IP地址\n${first_redis_ip}    Get From List    ${redis_ip_list}    0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在编辑器中输入：记得少放辣椒啊收快递放假啊",
        "output": "<thought>\n这个任务是向页面的一个编辑器中输入文本。根据描述，需要使用关键字`FillEditor`，并设置为第一个编辑器（默认）。直接传入文本内容即可完成任务。\n</thought>\n\n<code_block>\n# 在第一个编辑器中输入文本\"记得少放辣椒啊收快递放假啊\"\nFillEditor | 记得少放辣椒啊收快递放假啊\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 并点击 class 为arco-select-view-value的span，然后点击飞书",
        "output": "<thought>\n首先需要查找class为arco-select-view-value的span元素，然后点击它。接着，点击文本“飞书”。\n</thought>\n\n<code_block>\n# 查找class为arco-select-view-value的span元素并点击\nClickElem | span[class='arco-select-view-value']\n\n# 点击文本“飞书”\nClick | 飞书\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在秒杀价右侧找input，并填入1",
        "output": "<thought>\n首先需要找到\"秒杀价\"元素，然后在其右侧找到input元素，并向其中输入1。使用`FindElemToTheDirectionOf`查找元素，再用`FillArea`填写内容。\n</thought>\n\n<code_block>\n# 查找秒杀价右侧的input元素\n${input_elem}  FindElemToTheDirectionOf  | 秒杀价 | right | input\n\n# 向找到的input元素中输入1\nFillArea  | ${input_elem}  | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 \"时间粒度\"右边且class是“arco-input arco-input-size-default” 为 2024-09-01~2024-09-30",
        "output": "<thought>\n需要找到“时间粒度”右边的class为“arco-input arco-input-size-default”的元素，并设置其值为2024-09-01~2024-09-30。可以使用FindElemToTheDirectionOf查找该元素，然后使用FillArea填入值。\n</thought>\n\n<code_block>\n# 查找“时间粒度”右边且class是“arco-input arco-input-size-default”的元素\n${elem}  FindElemToTheDirectionOf | 时间粒度 | right | [class='arco-input arco-input-size-default']\n\n# 设置元素的值为2024-09-01~2024-09-30\nFillArea | ${elem} | 2024-09-01~2024-09-30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面是否存在暂无数据字样，如果存在就点击添加，否则就点击取消按钮",
        "output": "<thought>\n首先，我将使用IsAnyTextExisting关键字来判断页面是否存在“暂无数据”这个文本。然后，我将使用Robot Framework的内置IF/ELSE语法。如果存在“暂无数据”，我将使用Click关键字来点击“添加”按钮。否则，我将使用ClickElem关键字来点击“取消”按钮。\n</thought>\n\n<code_block>\n# 判断页面是否存在“暂无数据”这个文本\n${exist}  IsAnyTextExisting | 暂无数据\n\n# 如果存在“暂无数据”，点击“添加”，否则点击“取消”按钮\nIF  ${exist}\n    Click  添加\nELSE\n    ClickElem | button:contains(取消)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传文件到 【延时工作需求及打卡时间截图】表单。提示：上传文件到具体的页面字段，使用SetField的即可，因为它可以自动识别字段类型，完成上传",
        "output": "<thought>\n为了将文件上传到【延时工作需求及打卡时间截图】表单，可以使用关键字SetField来操作上传字段。因为SetField能够自动识别字段类型并完成上传操作。首先，假设我们已经有文件路径，可以直接使用SetField来完成上传。\n</thought>\n\n<code_block>\n# 上传文件到【延时工作需求及打卡时间截图】表单\nSetField | 延时工作需求及打卡时间截图 | image_file_path.png\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传图片 https://datarangers-dev.tos-cn-beijing.volces.com/autotest_data/大屏-海洋.jpeg",
        "output": "<thought>\n解决问题思路\n这个场景的要求是上传图片，可用关键字 `UploadFile`，我们可以使用它，将图片的URL作为参数传入。\n\n</thought>\n\n<code_block>\n# 上传图片 https://datarangers-dev.tos-cn-beijing.volces.com/autotest_data/大屏-海洋.jpeg\nUploadFile | https://datarangers-dev.tos-cn-beijing.volces.com/autotest_data/大屏-海洋.jpeg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置生命周期间隔”，接受count参数，主要作用是：先从count中过滤掉“天”和空白字符，然后向间隔字段中输入处理后的count",
        "output": "<thought>\n我们需要创建一个关键字“设置生命周期间隔”，接受一个参数count。首先，我们可以使用Python的字符串替换或正则表达式来去除“天”和空白字符。接着，使用`SetField`关键字将处理后的字符串输入到间隔字段中。\n</thought>\n\n<code_block>\n设置生命周期间隔\n    [Arguments]  ${count}\n    ${filtered_count}=  Evaluate  '${count}'.replace('天', '').strip()\n    SetField  间隔  ${filtered_count}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证确定按钮不可点击, 即校验存在处于disabled状态的确定按钮",
        "output": "<thought>\n解决问题思路：校验存在禁用状态的确定按钮，可以通过jquery选择器查找具有禁用状态的包含文本“确定”的元素。\n</thought>\n\n<code_block>\n# 校验页面存在禁用状态的确定按钮\nCheckHasElem | :contains(确定):disabled\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间日期，从当天 00:00 - 当前时间，不要秒，将他们输入到有效期中",
        "output": "<thought>\n由于需要获取当前日期和时间，并且将时间范围设置到某个字段中，我们首先需要使用RF的时间关键字来获取和调整日期时间。最后，将时间范围输入到有效期字段中，使用`SetField`关键字。\n</thought>\n\n<code_block>\n# 获取当前的日期和时间，不包括秒\n${current_time}  Get Current Date  result_format=%Y-%m-%d %H:%M\n\n# 获取当天的日期，从00:00开始\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n${start_of_day}  Set Variable  ${current_date} 00:00\n\n# 使用有效期字段设置这两个时间范围\nSetField  有效期  ${start_of_day} ～ ${current_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置  role=\"dialog\"中 说明为：Giraffe_add_parameter+当前时间是年月日时分秒+的说明文案，然后点击  role=\"dialog\"中 确定",
        "output": "<thought>\n这个任务可以分为以下步骤：\n\n1. 获取当前时间，格式为“年月日时分秒”。\n2. 设置说明字段为“Giraffe_add_parameter+当前时间+的说明文案”，其中说明字段是在`role=\"dialog\"`中。\n3. 点击`role=\"dialog\"`中的确定按钮。\n\n我们可以使用`Get Current Date`来获取当前日期和时间，然后使用`SetField`来设置说明字段，最后使用`Click`来点击确定按钮。\n</thought>\n\n<code_block>\n# 获取当前时间\n${current_time}   Get Current Date  result_format=%Y%m%d%H%M%S\n\n# 设置说明字段\nSetField  说明  Giraffe_add_parameter${current_time}的说明文案  base=[role=dialog]\n\n# 点击role=\"dialog\"中的确定\nClick  确定  base=[role=dialog]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击Jack所在表格行中 id=a 且文本为 x 的元素",
        "output": "<thought>\n我们需要在表格中找到包含文本\"Jack\"的那一行，然后点击该行中ID为\"a\"且包含文本\"x\"的元素。可以使用`ClickElemOfRow`关键字来实现，这个关键字允许我们指定行中的元素选择器。\n</thought>\n\n<code_block>\n# 点击Jack所在表格行中 id=a 且文本为 x 的元素\nClickElemOfRow | Jack | [id=a]:contains(x)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将小学拖入学历中",
        "output": "<thought>\n需要使用DAndD关键字将小学拖拽到学历。首先，我们需要确保能够唯一定位这两个元素。可以直接使用文本“小学”和“学历”作为选择器，然后使用DAndD关键字完成操作。\n</thought>\n\n<code_block>\n# 将小学拖拽到学历\nDAndD | 小学 | 学历\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验弹窗中存在文案为  隐藏折后价为0的账单",
        "output": "<thought>\n这个场景要求我们在弹窗中查找特定的文案，因此我们可以使用 `CheckHasText` 关键字，并指定 `base=POPUP` 来表示在弹窗中查找文本。\n</thought>\n\n<code_block>\n# 校验弹窗中存在文案 \"隐藏折后价为0的账单\"\nCheckHasText  隐藏折后价为0的账单  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "返回表格一共有多少行",
        "output": "<thought>\n这个场景需要了解表格的行数，可以使用`GetRowCount`关键字来获取。\n</thought>\n\n<code_block>\n# 获取表格的总行数\n${row_count}  GetRowCount\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等到立即创建按钮可以点击",
        "output": "<thought>\n为了等待按钮可以点击，可以使用RF的等待关键字。当立即创建按钮可见并启用时，执行点击操作。\n</thought>\n\n<code_block>\n# 点击立即创建按钮\nWait Until Element Is Enabled  | button:contains(立即创建)\nClickElem | button:contains(立即创建)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量name为 惺惺相惜",
        "output": "<thought>\n需要创建一个名为name的变量，并将其设置为值“惺惺相惜”，可以使用RF的Set Variable关键字。\n</thought>\n\n<code_block>\n# 创建变量name为 惺惺相惜\n${name}  Set Variable  惺惺相惜\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名称：“在第${i}个页面中增加${name}组件” 的关键字，接受参数 kwargs，作用是：\n# 1. 去掉 i 前后的空白字符，然后在其前面添加字符串：“页面”，然后点击title为 i 的div, 等待0.5s\n# 2. 去掉name前后的空白字符，在第一个 ‘输入关键词搜索’ 中输入name，并回车\n# 3. 0.5s后，双击 title为name且class不包含row-name 的 div，并等待页面出现 ‘样式’，\n# 4. 对于 kwargs 中的每一个 key, value，将 key 映射为 index, 映射关系为：X:0, Y:1, W:2, H:3\n# 5. 然后在第 index 个 data-testid为Number:container 的div 的后代元素 input 中输入 value",
        "output": "<thought>\n我们需要创建一个关键字来完成特定的交互步骤，使用RobotFramework的关键字结合Python来处理映射和执行操作。步骤如下：\n\n1. 去掉 `i` 前后的空白字符，加上‘页面’，点击对应title的div。\n2. 去掉 `name` 前后的空白字符，在搜索框中输入，并回车。\n3. 双击特定的div并等待出现指定文本。\n4. 遍历 `kwargs`，将key映射为index，然后在指定位置输入对应的value。\n</thought>\n\n<code_block>\n*** Keywords ***\n在第${i}个页面中增加${name}组件\n    [Arguments]  &{kwargs}\n\n    # 去掉 i 前后的空白字符并添加字符串\n    ${i_cleaned}=  Strip String  ${i}\n    ${i_final}=  Catenate  SEPARATOR=  页面  ${i_cleaned}\n    ClickElem  div[title='${i_final}']\n    Sleep  0.5s\n\n    # 去掉 name 前后的空白字符并输入\n    ${name_cleaned}=  Strip String  ${name}\n    SetField  输入关键词搜索  ${name_cleaned}  enter=True\n    Sleep  0.5s\n\n    # 双击特定div并等待文本\n    DClick  div[title='${name_cleaned}']:not([class*=row-name])\n    WaitText  样式\n\n    # 处理 kwargs\n    FOR  ${key}  ${value}  IN  &{kwargs}\n        # 映射 key 到 index\n        ${index}=  Evaluate  {'X': 0, 'Y': 1, 'W': 2, 'H': 3}[${key}]\n        ${selector}=  Set Variable  div[data-testid=\"Number:container\"]:eq(${index}) input\n        FillArea  ${selector}  ${value}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在一个或多个class为arco-icon-close的按钮，点击它，直到没有\n\n提示：不能使用 WHILE 循环，会造成死循环，使用 FOR 循环，假设上限为 20，此外点击时候要倒序点击，避免元素数量变化",
        "output": "<thought>\n解决问题思路：首先获取class为arco-icon-close的按钮数量，然后按照倒序依次点击这些按钮。定义一个上限为20的循环来避免死循环问题。通过获取元素的总数并倒序点击元素，可以防止由于页面变化导致的元素索引不准确。\n</thought>\n\n<code_block>\n# 获取class为arco-icon-close的按钮数量\n${count}  GetElemCount  [class=arco-icon-close]\n\n# 如果count大于0，开始循环，倒序点击按钮\nFOR  ${index}  IN RANGE  ${count-1}  -1  -1\n    # 获取并点击第index个元素\n    ClickElem  [class=arco-icon-close]:eq(${index})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面上存在帮助中心(3s超时)，就点击 class包含 close 的svg",
        "output": "<thought>\n此问题的解决方案需要两步：首先，需要判断页面上是否存在\"帮助中心\"，然后，如果存在，就点击类名包含\"close\"的svg元素。在这个过程中，我们将使用两个关键字：IsAnyTextExisting用于检查文本是否存在，ClickElem用于点击元素。\n</thought>\n\n<code_block>\n#检查\"帮助中心\"是否存在\n${exist}  IsAnyTextExisting | 帮助中心 | timeout=3\n# 如果存在，则点击class包含close的svg\nIF  ${exist}\n    ClickElem | svg[class*=close]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“设置数据集抽取方式” 的关键字，接受参数 type，表示抽取类型，作用是：将 div class包含arco-select-single 的元素设置为 type",
        "output": "<thought>\n首先，我们需要定位包含特定 class 名称的元素，然后使用 `FillArea` 关键字将其设置为参数 `type`。选择器需要使用 `:eq(0)` 来选择第一个元素。\n</thought>\n\n<code_block>\n# 设置 div class 包含 arco-select-single 的元素为 type\nFillArea | div[class*=arco-select-single]:eq(0) | ${type}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个叫做 “下载插件” 的关键字，接受 names 参数，逻辑是：\n对于 names 中的每一个 name\n1. 在请输入插件名称关键词中输入 name 并回车\n2. 点击 name 表格行中的 ’下载‘ 小图标",
        "output": "<thought>\n我们需要创建一个名为“下载插件”的关键字，该关键字接受一个参数`names`，并依次处理每个`name`。处理的逻辑为：在一个特定的输入框中输入`name`并回车，然后在表格行中点击与`name`对应的“下载”icon。\n\n首先，我们需要使用`SetField`关键字来填写插件名称的关键词输入框，并设置`enter=True`以模拟回车操作。接下来，使用`ClickIconOfRow`关键字在表格行中点击“下载”icon。\n\n为确保关键字的灵活性和可复用性，应该迭代处理传入的`names`参数列表。Robot Framework的`FOR`循环语法可以很方便地实现这个逻辑。\n</thought>\n\n<code_block>\n*** Keywords ***\n下载插件\n    [Arguments]  @{names}\n    FOR  ${name}  IN  @{names}\n      # 在请输入插件名称关键词中输入name并回车\n      SetField  插件名称关键词  ${name}  enter=True\n      # 点击name表格行中的‘下载’icon\n      ClickIconOfRow  ${name}  下载\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 ‘用户名称搜索’ 中输入 ${name} 后回车",
        "output": "<thought>\n我们需要使用 `SetField` 关键字来向名为“用户名称搜索”的字段中输入值 `${name}`，并设置 `enter=True` 来模拟输入回车。\n</thought>\n\n<code_block>\n# 向‘用户名称搜索’字段中输入 ${name} 后回车\nSetField | 用户名称搜索 | ${name} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标悬停于推送方式右侧的企业群",
        "output": "<thought>\n在这个场景中，我们需要使用“MoveToTextToTheDirectionOf”关键字。首先，将\"推送方式\"作为基准，然后选择\"right\"作为方向，最后选择\"企业群\"作为需要移动到的目标文本。在RF中，\"MoveToTextToTheDirectionOf\"关键字能够实现鼠标移动到基准元素给定方位的目标文本上。\n</thought>\n\n<code_block>\n# 鼠标悬停于推送方式右侧的企业群\nMoveToTextToTheDirectionOf | 推送方式 | right | 企业群\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将有效期设置为 2024-04-07",
        "output": "<thought>\n首先需要判断有效期是否是单独的字段，假设它是一个独立字段。使用`SetField`关键字可以直接设置日期值。没有特别提到的弹窗或上下文的情况下，直接使用字段名称即可。\n</thought>\n\n<code_block>\n# 设置有效期为 2024-04-07\nSetField | 有效期 | 2024-04-07\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击转移至其他账号，将账号id设置为2100001281，将账号名称设置为paperbox，点击我已确认，等待确定修改按钮不再出现在页面",
        "output": "<thought>\n场景中需要依次进行以下操作：点击\"转移至其他账号\"文本、设置账号id、设置账号名称、点击\"我已确认\"文本，并等待\"确定修改\"按钮消失。为此我将使用以下关键字：\n1. 使用`Click`关键字点击\"转移至其他账号\"；\n2. 使用`SetField`关键字设置账号id和账号名称；\n3. 使用`Click`关键字点击\"我已确认\"；\n4. 使用`WaitElemDisappear`关键字等待\"确定修改\"按钮消失。\n</thought>\n\n<code_block>\n# 点击转移至其他账号\nClick | 转移至其他账号\n\n# 设置账号id为2100001281\nSetField | 账号id | 2100001281\n\n# 设置账号名称为paperbox\nSetField | 账号名称 | paperbox\n\n# 点击我已确认\nClick | 我已确认\n\n# 等待确定修改按钮消失\nWaitElemDisappear | button:contains(确定修改)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中 第2个“下载” 的右边图标",
        "output": "<thought>\n首先需要点击弹窗中第二个“下载”，然后再点击其右边的icon。使用ClickIconToTheDirectionOf关键字并指定基准元素和方向。因为是弹窗中操作，base参数设置为POPUP。方向是右边，icon参数为空表示点击任意icon。\n</thought>\n\n<code_block>\n# 点击弹窗中第二个“下载”右边的icon\nClickIconToTheDirectionOf | :contains(下载):eq(1) | right | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹框里的确认按钮",
        "output": "<thought>\n此问题的关键在于理解和识别弹框以及确认按钮。在这个场景中，关键字 'Click' 可以用于实现点击按钮的操作。因为按钮在弹框内，所以我们需要通过设置 'base' 参数为 'POPUP' 来指定搜索的范围。\n</thought>\n\n<code_block>\n# 点击弹框里的确认按钮\nClick | 确认 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 校验当前页面截图中包含5个：tttt",
        "output": "<thought>\n 首先，我们需要获取当前页面截图中的文本信息。然后，我们可以使用`Evaluate`关键字使用Python代码来统计“tttt”在文本中出现的次数。\n </thought>\n \n <code_block>\n # 获取页面截图中的文本\n ${txt}  GetPageScreenshotText\n \n # 统计文本中“tttt”出现的次数\n ${count}  Evaluate  ${txt}.count('tttt')\n \n # 校验“tttt”的数量是否为5\n Should Be Equal As Numbers  ${count}  5\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置签约形式：纸质，先盖章方：对方",
        "output": "<thought>\n解决问题思路, 首先我们需要设置签约形式为纸质，然后设置先盖章方为对方。这里可以使用BatchSetFields关键字来批量设置这两个字段。\n</thought>\n\n<code_block>\n# 设置签约形式为纸质，先盖章方为对方\nBatchSetFields  签约形式=纸质  先盖章方=对方\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认 '当前进行中会话列表' 数量数字, 等于 ${beforeTestSessionCountNum} + 1",
        "output": "<thought>\n首先，我需要获取当前进行中会话列表的行数，然后将其与变量`${beforeTestSessionCountNum} + 1`进行比较。这里可以使用`GetRowCount`来获取表格行数，并使用`Should Be Equal As Numbers`来进行数量比较。\n</thought>\n\n<code_block>\n# 获取当前会话列表行数\n${currentSessionCount}  GetRowCount  tbl=进行中会话列表\n\n# 确认行数是否等于 ${beforeTestSessionCountNum} + 1\nShould Be Equal As Numbers  ${currentSessionCount}  ${beforeTestSessionCountNum + 1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验“预估实发金额”的单位是“万”，并且数字部分>=0",
        "output": "<thought>\n在这个场景中，我们需要校验名为“预估实发金额”的页面字段内容，确定其单位是“万”，且数字部分大于等于0。首先，我们可以使用CheckFieldContains关键字来检查字段内容包含“万”这个单位。然后，我们可以使用Evaluate执行Python代码来判断数字部分是否大于等于0。\n</thought>\n\n<code_block>\n# 校验名为“预估实发金额”字段包含“万”这个单位\nCheckFieldContains | 预估实发金额 | 万\n\n# 获取“预估实发金额”字段的内容并判断数字部分是否大于等于0\n${amount}  GetFieldVal   预估实发金额\n${num}    Evaluate    re.sub(r\"[^0-9.]\", \"\", \"${amount}\")    re\nShould Be True    ${num} >= 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现“新增AP”，然后验证页面包括多个文本包含“AP名称”的元素",
        "output": "<thought>\n首先，需要等待文本“新增AP”出现在页面上。然后，需要验证页面中包含多个文本“AP名称”的元素。可以使用WaitText和GetElemCount关键字来实现。\n</thought>\n\n<code_block>\n# 等待页面出现“新增AP”\nWaitText | 新增AP\n\n# 获取包含文本“AP名称”的元素数量\n${ap_name_count}  GetElemCount | :contains(AP名称)\n\n# 校验包含“AP名称”的元素数量大于1\nShould Be True  ${ap_name_count} > 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "额外费用设置为多个值：有、服务费、55、桌，设置限制使用张数为：按桌限制、2，限购规则设置为：每人最多购买、5、每人每天最多购买、2",
        "output": "<thought>\n为了设置额外费用、限制使用张数和限购规则，我们可以分别使用SetField和FillArea关键字。首先使用SetField设置额外费用为多个值，接着用SetField设置限制使用张数，最后使用SetField来设置限购规则。\n</thought>\n\n<code_block>\n# 设置额外费用为多个值\nSetField | 额外费用 | 有 | 服务费 | 55 | 桌\n\n# 设置限制使用张数\nSetField | 限制使用张数 | 按桌限制 | 2\n\n# 设置限购规则\nSetField | 限购规则 | 每人最多购买 | 5 | 每人每天最多购买 | 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 admin 行中的第4个icon",
        "output": "<thought>\n我们需要实现点击 admin 所在行中的第4个图标。可以使用 `ClickIconOfRow` 关键字，通过指定行名和图标索引（idx）来完成这一操作。\n</thought>\n\n<code_block>\n# 点击 admin 行中的第4个小图标\nClickIconOfRow | admin | idx=3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "<span class=\"byted-date-time-range-picker-placeholder\" elementtiming=\"element-timing\">秒杀开始时间</span> <span class=\"byted-date-time-range-picker-placeholder\" elementtiming=\"element-timing\">结束时间</span>  设置它们的value,",
        "output": "<thought>\n在这个场景中，我们需要设置页面中的两个时间字段：秒杀开始时间和结束时间。根据描述，这些字段是通过特定的选择器来标识的。我们会使用`SetField`关键字来分别设置这两个字段的值。由于没有提供具体的时间值，在示例中，我们可以假设一些时间值用于设置。\n</thought>\n\n<code_block>\n# 设置秒杀开始时间为2023-10-01 00:00:00\nSetField | 秒杀开始时间 | 2023-10-01 00:00:00 \n\n# 设置结束时间为2023-10-01 23:59:59\nSetField | 结束时间 | 2023-10-01 23:59:59\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "双击第二个展现数据，然后点击转化数",
        "output": "<thought>\n首先，我会双击第二个\"展现数据\"，然后在页面中点击\"转化数\"。这可以通过使用关键字DClick和Click来实现。\n</thought>\n\n<code_block>\n# 双击第二个\"展现数据\"\nDClick | 展现数据 | idx=1\n\n# 点击\"转化数\"\nClick | 转化数\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "遍历页面上class包含taskItem的元素并点击",
        "output": "<thought>\n根据问题描述，目标是查找页面上所有class包含taskItem的元素，并进行点击操作。可以使用FindElem关键字与ClickElem关键字相结合。首先使用FindElem查找目标元素，然后使用ClickElem逐一点击。\n</thought>\n\n<code_block>\n# 查找页面上class包含taskItem的所有元素\n${elements}  FindElem | [class*=taskItem]\n\n# 遍历找到的元素并逐一点击\nFOR  ${element}  IN  @{elements}\n  ClickElem | ${element}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取${elem}中的“主播服务满意度评价”字段的值",
        "output": "<thought>\n对于这个问题，我们需要获取字段“主播服务满意度评价”的值。可以使用`GetFieldVal`关键字，因为问题已经提示了需要设置`base`为`${elem}`，这样可以在指定的基准元素`${elem}`中查找该字段。\n</thought>\n\n<code_block>\n# 获取“主播服务满意度评价”字段的值\n${val}  GetFieldVal | 主播服务满意度评价 | base=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在加载失败，则返回失败",
        "output": "<thought>\n为了判断页面是否存在加载失败，我们可以使用 `IsAnyTextExisting` 关键字检查页面上是否存在 \"加载失败\" 的文本。如果存在，则返回失败。我们可以使用 `Fail` 关键字来实现这一点。\n</thought>\n\n<code_block>\n# 如果页面存在加载失败，则返回失败\n${exist}  IsAnyTextExisting | 加载失败\nIF  ${exist}\n    Fail  页面加载失败\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面右侧存在 删除 小图标, 点击它，校验存在购买次日起360天，购买当天默认可用",
        "output": "<thought>\n分析这个场景，需要判断页面右侧是否存在“删除”icon，然后点击它，最后校验文本。可以使用HasIconToTheDirectionOf判断icon是否存在，ClickIconToTheDirectionOf点击icon，CheckHasText校验文本。\n</thought>\n\n<code_block>\n# 判断页面右侧是否存在“删除”icon\n${exist}  HasIconToTheDirectionOf | SCREEN_CENTER | right | delete\n\n# 如果“删除”icon存在，那么点击它并校验文本\nIF  ${exist}\n    # 点击“删除”icon\n    ClickIconToTheDirectionOf | SCREEN_CENTER | right | delete\n\n    # 校验存在指定的文本\n    CheckHasText | 购买次日起360天 | 购买当天默认可用\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "    点击财务\n    点击立即体验\n    点击财务\n    点击共享钱包\n    点击退款\n    联系手机填写 18701669233\n    勾选 我已同意\n    点击 提交\n    点击 确认退款\n    选中 退款记录列表 第一行记录，点击 退款详情\n    点击取消退款\n    去掉退款原因选择 撤回重新提交\n    备注填写 UI自动化\n    点击 确定",
        "output": "<thought>\n该场景是一个典型的顺序操作，可以使用ClickTextOneByOne依次点击相应的文本。然后，我们用SetField来填写联系手机号码，并且使用CheckBoxOn来勾选“我已同意”的复选框。后续根据不同的步骤继续使用Click系列关键字进行操作，直到最后完成整个流程。\n</thought>\n\n<code_block>\n# 依次点击 财务, 立即体验, 财务, 共享钱包, 退款\nClickTextOneByOne | 财务 | 立即体验 | 财务 | 共享钱包 | 退款\n\n# 输入联系手机\nSetField | 联系手机 | 18701669233\n\n# 勾选 我已同意\nCheckBoxOn | 我已同意\n\n# 点击 提交 和 确认退款\nClickTextOneByOne | 提交 | 确认退款\n\n# 选中第一行记录并点击退款详情\nSelectTableRow | 1 | tbl=退款记录列表\nClickTextOfRow | 1 | 退款详情 | tbl=退款记录列表\n\n# 点击取消退款\nClick | 取消退款\n\n# 选择退款原因\nSelectOptionForField | 退款原因 | 撤回重新提交\n\n# 填写备注\nSetField | 备注 | UI自动化\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击图标favor",
        "output": "<thought>\n根据给定的关键字描述，应该使用`ClickIcon`关键字来点击名为`favor`的小图标。由于没有给定索引或基准元素，这意味着点击第一个出现的`favor`图标。\n</thought>\n\n<code_block>\n# 点击名为favor的小图标\nClickIcon | favor\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在ByteArtist 2.0 重磅升级弹窗，就点击class为message-center-card-button的div中的第一个button",
        "output": "<thought>\n首先，我需要判断页面是否存在“ByteArtist 2.0 重磅升级”的文本，以确定弹窗是否存在。可以使用`IsAnyTextExisting`关键字来判断这个文本是否存在。当确认存在这个文本时，就需要对特定的元素进行操作。根据问题描述，我需要点击class为`message-center-card-button`的div中的第一个button。这个可以通过组合使用`ClickElem`和jQuery选择器来实现。\n</thought>\n\n<code_block>\n# 检查页面是否存在“ByteArtist 2.0 重磅升级”\n${exist}  IsAnyTextExisting | ByteArtist 2.0 重磅升级\nIF  ${exist}\n    # 点击 class 为 message-center-card-button 的 div 中的第一个 button\n    ClickElem  div[class=message-center-card-button] button:eq(0)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 elem 的后代元素 span",
        "output": "<thought>\n我们需要查找的是元素 `elem` 的后代元素 `span`。Robot Framework提供了查找元素的关键字，我们可以利用 `FindElem` 来实现。我们将利用传入的 `elem` 对象，并使用选择器 `span` 来获取其后代元素。\n</thought>\n\n<code_block>\n# 查找 elem 的后代元素 span\n${span_elem}  FindElem | ${elem} span\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为：搜索产品 的元素",
        "output": "<thought>\n为了解决这个问题，我需要找到文本为“搜索产品”的元素。可以使用`FindByText`关键字，通过传递“搜索产品”作为参数进行查找。\n</thought>\n\n<code_block>\n# 查找文本为搜索产品的元素\n${elem}  FindByText | 搜索产品\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截图对比 class包含abc的div元素，相似度为 0.99",
        "output": "<thought>\n要进行截图对比，需要用到ImageDiff这个关键字。首先，要查找class包含abc的div元素，可以使用FindElem关键字。找到元素后，再使用ImageDiff进行截图对比，并设置相似度为0.99。\n</thought>\n\n<code_block>\n# 查找class包含abc的div元素\n${elem}  FindElem | div[class*=abc]\n\n# 对比查找到的元素的截图，相似度为0.99\nImageDiff | ${elem} | sim=0.99\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 class包含 arco-modal-content 的元素下class包含arco-form-item arco-form-layout-horizontal的元素输入emr_hsql",
        "output": "<thought>\n首先，需要定位到class包含arco-modal-content的元素，然后在该元素下找到class包含arco-form-item arco-form-layout-horizontal的元素，最后在该元素内输入文本“emr_hsql”。可以使用FindElem和FillArea关键字来实现。\n</thought>\n\n<code_block>\n# 定位class包含arco-modal-content的元素\n${modal_elem}  FindElem | [class*=arco-modal-content]\n\n# 在modal_elem下，定位class包含arco-form-item arco-form-layout-horizontal的元素，并输入emr_hsql\nFillArea | ${modal_elem} [class*=\"arco-form-item arco-form-layout-horizontal\"] | emr_hsql\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在名称中输入：自定义列，然后点击 icon-more，接着点击 ‘查看线上’",
        "output": "<thought>\n首先要在名称字段中输入“自定义列”，可以使用 `SetField` 关键字。接着需要点击“icon-more”图标，可以使用 `ClickIcon` 关键字。最后是点击名为“查看线上”的文本，可以使用 `Click` 关键字。\n</thought>\n\n<code_block>\n# 在名称字段中输入“自定义列”\nSetField | 名称 | 自定义列\n\n# 点击 icon-more 图标\nClickIcon | more\n\n# 点击 “查看线上” 文本\nClick | 查看线上\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问页面   /lowcode-radar/domain-asset/analysis-apply，如果页面存在文案：立即体验，则点击 立即体验，\n设置预约规则为:不需要提前预约，设置最晚退房时间为:10:00，点击是否需确认下拉列表框，将其设为 YES",
        "output": "<thought>\n首先需要访问给定的页面，所以可以使用OpenUrl关键字打开该URL。然后检查页面中是否存在“立即体验”的文案，如果存在则需要点击。接着设置预约规则，这是一个典型的表单填写任务，使用SetField关键字填写字段值“预约规则”和“最晚退房时间”。最后，点击下拉列表框以选择“YES”选项，可以先点击下拉框然后使用SelectOption关键字来选择。\n</thought>\n\n<code_block>\n# 打开目标页面\nOpenUrl | /lowcode-radar/domain-asset/analysis-apply\n\n# 判断页面上是否存在“立即体验”\n${exist}  IsAnyTextExisting | 立即体验\nIF  ${exist}\n    # 点击“立即体验”\n    Click 立即体验\nEND\n\n# 设置预约规则为“不需要提前预约”\nSetField | 预约规则 | 不需要提前预约\n\n# 设置最晚退房时间为“10:00”\nSetField | 最晚退房时间 | 10:00\n\n# 点击是否需确认下拉列表框\nClick | 是否需确认\n\n# 设置其为“YES”\nSelectOption | YES\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击账号登录右侧的手机号",
        "output": "<thought>\n我们需要点击一个文本\"账号登录\"右侧的另一个文本\"手机号\"。可以使用`ClickTextToTheDirectionOf`关键字，其中基准元素为\"账号登录\"，方向是right，目标文本是\"手机号\"。\n</thought>\n\n<code_block>\n# 点击账号登录右侧的手机号\nClickTextToTheDirectionOf | 账号登录 | right | 手机号\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向${elem}中的那个‘取值’输入aaa",
        "output": "<thought>\n首先，分析任务是向`取值`字段中输入`aaa`。可以使用`SetField`关键字，因为它能够针对页面字段进行操作。至于`取值`具体在页面中的位置，可以假设需要在某个基准元素`${elem}`中查找并填入该字段。\n\n具体步骤如下：\n1. 使用`SetField`关键字。\n2. 定位字段名称为`取值`。\n3. 填入值`aaa`。\n4. 设置基准元素为`${elem}`。\n\n这样可以满足需求。\n</thought>\n\n<code_block>\n# 向${elem}中的‘取值’字段中输入aaa\nSetField | 取值 | aaa | base=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认出现 撤回申请 按钮",
        "output": "<thought>\n我们需要确认页面上是否出现 \"撤回申请\" 按钮，我们可以使用RF的 CheckHasText 关键字来完成这个任务。此关键字可以确认页面上是否存在特定的文本，也就是在这个情况下的 \"撤回申请\"。\n</thought>\n\n<code_block>\n# 确认页面上是否出现 \"撤回申请\" 文本\nCheckHasText | 撤回申请\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表达式内容右侧输入框，休息3s，向class包含feature-variant_value的元素且包含文本取值1的元素输入：test10，等待保存按钮消失",
        "output": "<thought>\n我们需要使用 `ClickElemToTheDirectionOf` 来点击 \"表达式内容\" 右侧的输入框。之后用 `Sleep` 关键字休息3秒，接着使用 `FillArea` 关键字向指定的元素输入 `test10`。最后，我们使用 `WaitElemDisappear` 关键字等待包含文本“保存”的按钮消失。\n</thought>\n\n<code_block>\n# 点击表达式内容右侧的输入框\nClickElemToTheDirectionOf | 表达式内容 | right | input, textarea\n\n# 休息3秒\nSleep | 3s\n\n# 向指定的元素输入 test10\nFillArea | [class*=feature-variant_value]:contains(取值1) | test10\n\n# 等待保存按钮消失\nWaitElemDisappear | button:contains(保存)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设定变量为dataops-1.0.0.587",
        "output": "<thought>\n在Robot Framework中，可以使用Set Variable关键字来设定变量。这里需要设定一个名为dataops-1.0.0.587的变量。\n</thought>\n\n<code_block>\n# 设置变量dataops-1.0.0.587\n${dataops}  Set Variable  dataops-1.0.0.587\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置页面高度为 2000",
        "output": "<thought>\n根据任务描述，需要将页面的高度设置为 2000。可以使用 `SetWindowHeight` 关键字来完成该操作。\n</thought>\n\n<code_block>\n# 设置浏览器窗口高度为2000\nSetWindowHeight | 2000\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待 包含progress--line的class消失，获取class以title__bytedancer开头的 的div的文案",
        "output": "<thought>\n首先需要等待类名包含progress--line的元素消失，可以使用`WaitElemDisappear`关键字。然后获取类名以title__bytedancer开头的div的文案，可以使用`GetElemText`关键字。由于需要根据选择器定位元素，因此需要构建对应的jquery选择器。\n</thought>\n\n<code_block>\n# 等待类名包含progress--line的元素消失\nWaitElemDisappear | [class*=\"progress--line\"]\n\n# 获取类名以title__bytedancer开头的div的文本\n${text}  GetElemText | div[class^=\"title__bytedancer\"]\n\n# 输出文本\nLog  ${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ${exist} 为false",
        "output": "<thought>\n解决问题思路: 由于需要校验变量${exist}为false，可以使用RF内置的关键字Should Be Equal As Strings来比较${exist}和\"false\"。\n</thought>\n\n<code_block>\n# 校验变量exist字符串表示等于False\nShould Be Equal As Strings  ${exist}  false\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面包含admin，且数量为2个",
        "output": "<thought>\n为了检查页面上包含两个\"admin\"文本，我们需要先用CheckHasText关键字检查页面是否包含\"admin\"，然后使用GetPageText获取页面的文本内容，再通过Python代码进行计数。\n</thought>\n\n<code_block>\n# 检查页面包含文本admin\nCheckHasText  admin\n\n# 获取页面文本并统计admin的数量\n${page_text}  GetPageText\n${admin_count}  Evaluate  ${page_text}.count('admin')\n\n# 验证admin的数量是否为2\nShould Be Equal As Numbers  ${admin_count}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 class包含xyz的元素的文本, 然后将其输入class为arco-space-item的div中",
        "output": "<thought>\n先使用关键字 \"GetElemText\" 获取class为xyz的元素的文本，然后用关键字 \"FillArea\" 将得到文本填写到class为arco-space-item的div中。\n</thought>\n\n<code_block>\n# 获取class为xyz的元素的文本\n${val}  GetElemText | [class*=xyz]\n\n# 将获取的元素文本输入到class为arco-space-item的div中\nFillArea | [class=arco-space-item] | ${val}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前页面上第一个 日均有流水新主播成材率 的值",
        "output": "<thought>\n要获取当前页面上第一个“日均有流水新主播成材率”的值，首先需要找到包含该文本的元素，然后获取其关联字段的值。可以使用GetFieldVal关键字获取该字段的值。\n</thought>\n\n<code_block>\n# 获取文本为“日均有流水新主播成材率”的字段的值\n${val}  GetFieldVal | 日均有流水新主播成材率\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "乘法计算： 数字 7.01 乘 0.01",
        "output": "<thought>\n在Robot Framework中，`Evaluate`关键字可以用于执行Python代码，以执行各种计算任务。为了计算7.01乘以0.01，我们可以直接在`Evaluate`中执行该乘法操作。\n</thought>\n\n<code_block>\n# 使用Evaluate来计算7.01乘以0.01\n${result}    Evaluate    7.01 * 0.01\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将模型名称和模型描述分别设置为  ${name} 和 ${desc}",
        "output": "<thought>\n对于此任务，我们可以使用 `BatchSetFields` 关键字来批量设置字段值。由于字段名称是“模型名称”和“模型描述”，我们可以将它们与对应的变量关联，分别设置为 `${name}` 和 `${desc}`。\n</thought>\n\n<code_block>\n# 设置模型名称和模型描述\nBatchSetFields  模型名称=${name}  模型描述=${desc}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取div.section中的第二个button的图片",
        "output": "<thought>\n场景要求截取div.section中的第二个button的图片，根据jquery选择器规则，第n个元素用:eq(n-1)表示，所以第二个button用:eq(1)来选择。可以使用ElemScreenshot关键字进行截图。\n</thought>\n\n<code_block>\n# 截取div.section中的第二个button的图片\nElemScreenshot| div.section button:eq(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 ‘关联属性’ 字段的值",
        "output": "<thought>\n首先，分析任务要求，目标是在网页中找到名为‘关联属性’的字段对应的控件值。根据提供的关键字列表，可以使用`GetFieldVal`关键字来获取字段的值。因此，直接使用该关键字即可实现需求。\n</thought>\n\n<code_block>\n# 获取‘关联属性’字段的值\n${val}  GetFieldVal | 关联属性\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印剪切板内容",
        "output": "<thought>\n为了打印剪切板内容，我们需要使用`GetCopied`关键字获取当前剪切板内容，并在不需要粘贴到任何元素的情况下将其打印。可以直接使用`Log`关键字来输出获取的值。\n</thought>\n\n<code_block>\n# 获取剪切板内容\n${clipboard_content}  GetCopied\n\n# 打印剪切板内容\nLog  ${clipboard_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击查看详情，在弹窗中点击最后一个文字：小型，获取当前测试用例的名称，输入到型号描述中",
        "output": "<thought>\n首先需要点击“查看详情”，可以使用Click关键字。然后在弹窗中查找最后一个文字“小型”，并点击它。接下来，需要获取当前测试用例的名称，可以使用Robot Framework的内置变量`${TEST NAME}`。最后，在型号描述字段中输入获取到的测试用例名称，可以使用SetPopupField关键字。\n</thought>\n\n<code_block>\n# 点击查看详情\nClick | 查看详情\n\n# 点击弹窗中最后一个文字“小型”\nClick | 小型 | base=POPUP | idx=-1\n\n# 获取当前测试用例名称并输入到型号描述中\nSetPopupField | 型号描述 | ${TEST NAME}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "跳转回上一个窗口",
        "output": "<thought>\n对于这个任务，需求是从当前窗口跳转回上一个窗口。可以直接使用`ToPrevWindow`关键字来实现。\n</thought>\n\n<code_block>\n# 切换回上一个窗口\nToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘输码核销’ 下面的 '测试POI'，然后在 ‘门店名/ID' 中输入 ‘测试POI-批量4(KTV预约3)’，并点击它",
        "output": "<thought>\n首先需要点击“输码核销”下方的“测试POI”，可以使用`ClickTextToTheDirectionOf`关键字。接下来，在“门店名/ID”中输入“测试POI-批量4(KTV预约3)”，并点击它。可以使用`SetField`关键字进行输入，然后使用`Click`关键字直接点击该文本。\n</thought>\n\n<code_block>\n# 点击'输码核销'下方的'测试POI'\nClickTextToTheDirectionOf | 输码核销 | bottom | 测试POI\n\n# 在'门店名/ID'中输入‘测试POI-批量4(KTV预约3)’\nSetField | 门店名/ID | 测试POI-批量4(KTV预约3)\n\n# 点击‘测试POI-批量4(KTV预约3)’\nClick | 测试POI-批量4(KTV预约3)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击分享icon",
        "output": "<thought>\n任务需要点击分享icon，可以直接使用ClickIcon关键字，并指定name参数为'share'。\n</thought>\n\n<code_block>\n# 点击分享icon\nClickIcon | share\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向第一个class包含arco-input-group-compact的元素输入模糊搜索和${evop_name}",
        "output": "<thought>\n在这个场景中，我需要向第一个class包含arco-input-group-compact的元素输入内容。由于需要输入两个值“模糊搜索”和“${evop_name}”，可以使用FillArea关键字。首先需要确认选择器，使用选择器div[class*=arco-input-group-compact]:eq(0)来定位第一个匹配的元素。\n</thought>\n\n<code_block>\n# 在第一个包含class arco-input-group-compact的元素中输入模糊搜索和变量${evop_name}\nFillArea | div[class*=arco-input-group-compact]:eq(0) | 模糊搜索 | ${evop_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个class为oc-filter-select-filter的页面区域，输入：'年龄>50'",
        "output": "<thought>\n为了完成这个场景，我们需要：\n1. 使用ClickElem关键字点击第一个class为oc-filter-select-filter的页面区域。\n2. 然后使用SendText关键字在该区域输入“年龄>50”。\n在生成selector时，我们需要注意jquery选择器中第一个元素的表示方法应为:eq(0)。\n</thought>\n\n<code_block>\n# 点击第一个class为oc-filter-select-filter的页面区域\nClickElem | [class=oc-filter-select-filter]:eq(0)\n\n# 输入年龄>50\nSendText | 年龄>50\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在iOS这栏填写八位随机数字",
        "output": "<thought>\n首先，需要在\"iOS\"这个字段输入一个八位的随机数。使用\"SetField\"关键字来选择和操作对应的字段。然后使用\"GenerateRandom\"关键字来生成长度为8的随机数。最后把生成的随机数赋值到\"iOS\"字段。\n</thought>\n\n<code_block>\n# 生成8位随机数字\n${num}  GenerateRandom  | 8 | [NUMBERS]\n# 在iOS字段输入生成的随机数\nSetField | iOS | ${num}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置转化窗口期”， 接受参数 args, 主要任务是：向转化窗口期中输入给定的变长参数 args",
        "output": "<thought>\n首先，我需要分析怎样将变长参数 `args` 填入到页面字段 `转化窗口期` 中。对于这个任务，使用关键字 `SetField` 是最合适的，因为它允许我们向指定的字段中填写多个值。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置转化窗口期\n    [Arguments]  @{args}\n    SetField  转化窗口期  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验单元格（2, 1）中包含：字节跳动",
        "output": "<thought>\n解决问题思路：\n通过关键字CheckCellHas检查单元格(2, 1)中包含\"字节跳动\"\n</thought>\n\n<code_block>\n# 校验单元格（2, 1）中包含：字节跳动\nCheckCellHas | 2 | 1 | 字节跳动\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 判断versions是否是string",
        "output": "<thought>\n 要判断变量`versions`是否是字符串类型，我们需要检查其类型。可以使用`Evaluate`关键字来执行Python代码进行类型判断。我们可以通过`isinstance()`函数进行判断。\n </thought>\n \n <code_block>\n # 判断变量versions是否是string\n ${is_string}  Evaluate |  isinstance($versions, str)\n \n # 如果是string，打印是字符串\n IF ${is_string}\n  Log  变量versions是字符串\n ELSE\n  Log  变量versions不是字符串\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 3 个月前的日期，年-月-日",
        "output": "<thought>\n为了解决这个问题，我们可以使用RF标准库中的日期处理关键字。可以利用 Get Current Date 获取当前日期，然后用 Subtract Time From Date 减去3个月。由于日期格式通常是年-月-日格式，我们可以通过设置日期格式来得到最期望的输出格式。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}    Get Current Date    result_format=%Y-%m-%d\n\n# 计算3个月前的日期\n${three_months_ago}  Subtract Time From Date  ${current_date}  3 months  result_format=%Y-%m-%d\n\n# 输出3个月前的日期\nLog    ${three_months_ago}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到投放日附近的 ‘全部’ 文字",
        "output": "<thought>\n我们需要找到“投放日”附近的“全部”文字，使用`FindNearElem`关键词是合适的。\n</thought>\n\n<code_block>\n# 查找 '投放日' 附近的 '全部'\n${elem}  FindNearElem | 投放日 | 全部\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击 “提交”  “确定”",
        "output": "<thought>\n这个任务需要依次点击两个文本按钮：“提交”和“确定”。可以使用`ClickTextOneByOne`关键字，因为它支持依次点击多个文本按钮。\n</thought>\n\n<code_block>\n# 依次点击“提交”和“确定”\nClickTextOneByOne | 提交 | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 auto_test_xx 表格行中包含：成功",
        "output": "<thought>\n解决问题思路：\n在本场景中，只需要使用CheckRowHas关键字，然后传入对应的参数即可。\n</thought>\n\n<code_block>\n# 校验 auto_test_xx 表格行中包含：成功\nCheckRowHas | auto_test_xx | 成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问火山ECS云主机页面链接：https://console.volcengine.com/ecs/region:ecs+cn-beijing/instance\n在筛选条件中输入：proxy_user_password_test，然后回车\n点击包含 proxy_user_password_test 的表格行中的：启动\n点击确定，然后校验表格行proxy_user_password_test中包含：运行中",
        "output": "<thought>\n解决问题思路：首先使用OpenUrl访问指定页面。在筛选条件字段中输入proxy_user_password_test并回车。查找表格中包含该文本的行，然后点击“启动”按钮。接着点击“确定”按钮，在此之后校验该表格行中是否包含“运行中”状态。\n</thought>\n\n<code_block>\n# 打开火山ECS云主机页面\nOpenUrl | https://console.volcengine.com/ecs/region:ecs+cn-beijing/instance\n\n# 在筛选条件中输入proxy_user_password_test并回车\nSetField | 筛选条件 | proxy_user_password_test | enter=True\n\n# 点击包含proxy_user_password_test的表格行中的启动\nClickTextOfRow | proxy_user_password_test | 启动\n\n# 点击确定\nClick | 确定\n\n# 校验表格行proxy_user_password_test中包含运行中\nCheckRowHas | proxy_user_password_test | 运行中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取__current_id='Grid 布局_2' 的div元素并截图",
        "output": "<thought>\n为了获取特定id的元素并截图，我们可以使用FindElem来定位具有特定id的div元素，然后使用ElemScreenshot将其截图。选择器应该是div[id='Grid 布局_2']，然后截图该元素。\n</thought>\n\n<code_block>\n# 查找id为'Grid 布局_2'的div元素\n${elem}  FindElem | div[id='Grid 布局_2']\n\n# 对该元素进行截图\nElemScreenshot| ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${task_name}这一表格行，“统计”字样右侧的小图标\n\n提示：\n可以先查找${task_name}这一表格行，“统计”这个元素，然后点击此元素右边的图标",
        "output": "<thought>\n任务是点击指定表格行中的某个icon，步骤如下：\n1. 使用FindTextOfRow关键字定位到指定表格行内的文字\"统计\"，获取到该元素。\n2. 使用ClickIconToTheDirectionOf关键字，点击获取到的\"统计\"元素右侧的icon。\n通过这两步可以实现对指定表格行\"统计\"字样右侧icon的点击。\n</thought>\n\n<code_block>\n# 定位 ${task_name} 表格行中的 \"统计\" 元素\n${elem}  FindTextOfRow | ${task_name} | 统计\n\n# 点击 \"统计\" 右侧的 icon\nClickIconToTheDirectionOf | ${elem} | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待5秒",
        "output": "<thought>\n为了解决这个问题，可以使用Sleep关键字来实现等待5秒的功能。\n</thought>\n\n<code_block>\n# 等待5秒\nSleep  5s\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取粉丝以及获赞数字段的值，校验每一个字段是否大于0",
        "output": "<thought>\n首先，我们需要获取“粉丝”和“获赞”两个字段的值。这可以通过使用\"GetFieldVal\"关键字针对特定字段来获取其值。然后，我们需要检查它们是否大于0，可以使用\"Should Be True\"关键字来完成这个检查。\n</thought>\n\n<code_block>\n# 获取粉丝字段的值\n${fans}  GetFieldVal  粉丝\n\n# 检查粉丝字段的值是否大于0\nShould Be True  ${fans} > 0\n\n# 获取获赞字段的值\n${likes}  GetFieldVal  获赞\n\n# 检查获赞字段的值是否大于0\nShould Be True  ${likes} > 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写div.demo:eq(0)，设置为 50",
        "output": "<thought>\n对于该问题，我们只需要使用 FillArea 关键字，因为它允许我们直接操作jquery选择器代表的控件区域并填入值。在这种情况下，我们需要选择第一个\"div.demo\"元素并设置其值为50。\n</thought>\n\n<code_block>\n# 选择第一个\"div.demo\"元素并设置其值为50\nFillArea | div.demo:eq(0) | 50\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置镜像为：公共镜像、CentOS、7.8、ON",
        "output": "<thought>\n首先，我们需要根据提供的关键字，通过SetField关键字来完成镜像的设置。我们可以一次向镜像字段关联的页面控件区域中设置多个值，分别是“公共镜像”、“CentOS”、“7.8”和“ON”。\n</thought>\n\n<code_block>\n# 设置镜像为：公共镜像、CentOS、7.8、ON\nSetField | 镜像 | 公共镜像 | CentOS | 7.8 | ON\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 叉号",
        "output": "<thought>\n根据需求，需要点击名为close的小图标，使用`ClickIcon`关键字即可完成此操作。\n</thought>\n\n<code_block>\n# 点击名为close的小图标\nClickIcon | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将autotest所在的下拉框拖动到底部",
        "output": "<thought>\n1. 首先需要定位到包含\"autotest\"文本的元素区域\n2. 使用FindByText定位\"autotest\"元素\n3. 使用ScrollUpDown执行滚动操作\n4. 滚动到最底部可以设置percent为100%\n</thought>\n\n<code_block>\n# 定位包含autotest文本的元素\n${elem}  FindByText  autotest\n\n# 滚动到底部\nScrollUpDown  ${elem}  100%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "evaluate if zero count == 0",
        "output": "<thought>\n通过Evaluate关键字执行Python代码来判断zero count是否等于0\n</thought>\n\n<code_block>\n${result}    Evaluate    ${zero_count} == 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "记录下已选列表中第一项的 资产编号 的值到变量 ${assetId}",
        "output": "<thought>\n要获取已选列表中第一项的\"资产编号\"的值并赋值给变量${assetId}，我们需要执行以下步骤：\n\n1. 使用GetCellValue关键字获取已选列表中第一行\"资产编号\"列的值\n2. 使用Set Variable关键字将获取到的值赋值给变量${assetId}\n\n注意在使用GetCellValue关键字时，行号row_name/id使用\"1\"，列名col_name/id使用\"资产编号\"。\n</thought>\n\n<code_block>\n# 获取已选列表中第一行\"资产编号\"列的值\n${value}  GetCellValue | 1 | 资产编号\n# 赋值给变量${assetId}\n${assetId}  Set Variable  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量 x 设置为 3",
        "output": "<thought>\n由于该任务是需要将变量 x 设置为 3，RobotFramework提供了一个内置关键字`Set Variable`可以直接用于这一目的。\n</thought>\n\n<code_block>\n# 设置/创建变量 x = 3\n${x}  Set Variable  3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击保存，页面应该包含编辑成功",
        "output": "\n    \n<thought>\n 首先需要点击保存按钮，然后验证页面是否包含“编辑成功”文本。可以使用Click关键字点击保存，然后使用CheckHasText关键字检查文本。\n </thought>\n \n <code_block>\n # 点击保存按钮\n Click | 保存\n \n # 验证页面包含“编辑成功”文本\n CheckHasText | 编辑成功\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击空白，获取合同总额值，然后对 class包含 style__UIPanelBody 进行截屏，校验截图文案中包含此值",
        "output": "<thought>\n这个问题需要分为三个步骤来解决：首先，点击空白区域以确保页面状态是未选择状态。其次，获取目标字段\"合同总额\"的值。最后，截取指定class元素的截图，并校验截图中的内容是否包含该值。我们将使用ClickWhiteArea、GetFieldVal、ElemScreenshot以及GetElemScreenshotText来实现此操作。最后通过Should Contain校验截图内容。\n</thought>\n\n<code_block>\n# 点击空白区域\nClickWhiteArea\n\n# 获取合同总额值\n${contract_total}  GetFieldVal  合同总额\n\n# 对class包含style__UIPanelBody的元素进行截图\nElemScreenshot | [class*=style__UIPanelBody]\n\n# 获取元素截图中的文本\n${screenshot_text}  GetElemScreenshotText  [class*=style__UIPanelBody]\n\n# 校验截图中包含合同总额值\nShould Contain  ${screenshot_text}  ${contract_total}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "浏览器访问https://awacs-boe.byted.org/ruler/meta/instance_type_history?search=%7B%22page%22%3A1%2C%22pageSize%22%3A10%2C%22instanceType%22%3A%22%22%7D\n获取表格第一行的  ID 和 下发规格",
        "output": "<thought>\n首先，使用OpenUrl关键字访问指定的URL。然后，通过GetCellValue关键字获取目标表格第一行中“ID”和“下发规格”两个单元格的值。\n</thought>\n\n<code_block>\n# 打开指定URL\nOpenUrl | https://awacs-boe.byted.org/ruler/meta/instance_type_history?search=%7B%22page%22%3A1%2C%22pageSize%22%3A10%2C%22instanceType%22%3A%22%22%7D\n\n# 获取表格第一行的ID值\n${id_value}  GetCellValue | 1 | ID\n\n# 获取表格第一行的下发规格值\n${spec_value}  GetCellValue | 1 | 下发规格\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${task_name}这一行，“统计”字样右侧的小图标",
        "output": "<thought>\n任务是点击指定表格行中的某个icon，步骤如下：\n1. 使用FindTextOfRow关键字定位到指定表格行内的文字\"统计\"，获取到该元素。\n2. 使用ClickIconToTheDirectionOf关键字，点击获取到的\"统计\"元素右侧的icon。\n通过这两步可以实现对指定表格行\"统计\"字样右侧icon的点击。\n</thought>\n\n<code_block>\n# 定位 ${task_name} 表格行中的 \"统计\" 元素\n${elem}  FindTextOfRow | ${task_name} | 统计\n\n# 点击 \"统计\" 右侧的 icon\nClickIconToTheDirectionOf | ${elem} | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "去掉count前后的空白字符和‘个’",
        "output": "<thought>\n在RobotFramework中无法直接操作字符串去除空白字符和特定字符。可以使用Evaluate关键字执行Python代码来处理字符串。\n</thought>\n\n<code_block>\n# 去掉count前后的空白字符和‘个’\n${result}    Evaluate    $count.strip().replace(\"个\", \"\")\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "往商机报备中输入创建中国呢，校验是否有 测试商机年前封网",
        "output": "<thought>\n根据给定任务，首先需要在“商机报备”中输入“创建中国呢”。这可以通过使用`SetField`关键字来完成。之后，需要校验页面上存在“测试商机年前封网”这段文本，可以使用`CheckHasText`关键字来进行校验。\n</thought>\n\n<code_block>\n# 往商机报备中输入创建中国呢\nSetField | 商机报备 | 创建中国呢\n\n# 校验页面存在 测试商机年前封网\nCheckHasText | 测试商机年前封网\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 i 为 1",
        "output": "<thought>\n我们需要使用RobotFramework中的Set Variable关键字来创建变量i并将其设置为1。\n</thought>\n\n<code_block>\n# 创建变量 i 并设置为 1\n${i}  Set Variable  1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘AI创作’下面的‘图片生成’按钮，设置 ‘投放时间’ 为：10:11 ~ 18:12，检查页面是否包含“设备”标签",
        "output": "<thought>\n要点击‘AI创作’下面的‘图片生成’按钮，用`ClickTextToTheDirectionOf`关键字指定基准文本为‘AI创作’，目标文本为‘图片生成’，方向为bottom。接着，使用`SetField`关键字设置‘投放时间’字段为‘10:11 ~ 18:12’。最后，利用`CheckHasText`关键字校验页面是否包含“设备”标签。\n</thought>\n\n<code_block>\n# 点击“AI创作”下方的“图片生成”按钮\nClickTextToTheDirectionOf | AI创作 | bottom | 图片生成\n\n# 设置“投放时间”为“10:11 ~ 18:12”\nSetField | 投放时间 | 10:11 ~ 18:12\n\n# 校验页面是否包含“设备”标签\nCheckHasText | 设备\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在页面上寻找PlaceHolde中包含“搜索AP名称”的input/textarea，在input/textarea中输入“AP名称”，并敲回车键",
        "output": "<thought>\n首先，我们需要找到一个jquery选择器可以选择PlaceHolde中包含“搜索AP名称”的input或textarea。可以使用属性选择器结合:jQuery :contains伪选择器完成该部分。然后在找到的元素中输入“AP名称”并敲回车键。使用FillArea来填入值并输入回车。\n</thought>\n\n<code_block>\n# 查找PlaceHolder中包含“搜索AP名称”的input或textarea\n${elem}  FindElem | input[placeholder*=\"搜索AP名称\"], textarea[placeholder*=\"搜索AP名称\"]\n\n# 在找到的input/textarea中输入“AP名称”并回车\nFillArea | ${elem} | AP名称 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取2分钟后的时分，向请选择时间输入${time_after_2_minutes}",
        "output": "<thought>\n为了获取2分钟后的时分，可以使用Robot Framework的`Get Current Date`关键字，并利用其`increment`参数增加2分钟。然后，将结果输入到\"请选择时间\"字段中。使用`SetField`关键字完成输入操作。\n</thought>\n\n<code_block>\n# 获取2分钟后的时间，并格式化为时:分\n${time_after_2_minutes}  Get Current Date  result_format=%H:%M  increment=2min\n\n# 输入计算后的时间到\"请选择时间\"字段\nSetField | 请选择时间 | ${time_after_2_minutes}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 role=\"dialog\"中  数据源为:业管主数据成本中心，字段类型为：字符串，数编码为：Giraffe，参数名称:Giraffe_add_parameter+当前时间是年月日时分秒",
        "output": "<thought>\n需要在角色为\"dialog\"的区域中批量设置多个字段的值。因此可以使用`BatchSetFields`关键字。为了生成参数名称，需要利用当前时间，可以使用RF的日期时间处理关键字`Get Current Date`获取当前时间，然后生成参数名称字符串。\n</thought>\n\n<code_block>\n# 获取当前时间，格式为：年月日时分秒\n${当前时间}   Get Current Date  result_format=%Y%m%d%H%M%S\n\n# 在role=\"dialog\"区域设置数据源、字段类型、数编码和参数名称\nBatchSetFields  数据源=业管主数据成本中心  字段类型=字符串  数编码=Giraffe  参数名称=Giraffe_add_parameter${当前时间}  base=[role=\"dialog\"]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 弹窗中 “Month of allocation”为2024-08~2024-09",
        "output": "<thought>\n为了在弹窗中设置“Month of allocation”为“2024-08~2024-09”，我们可以使用`SetPopupField`关键字。这个关键字专门用于操作弹窗中的页面字段，根据需求，我们需要设置的字段名是“Month of allocation”，值为“2024-08~2024-09”。\n</thought>\n\n<code_block>\n# 设置弹窗中的Month of allocation为2024-08~2024-09\nSetPopupField | Month of allocation | 2024-08~2024-09\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对url中包含 `example.com/api/products` 的 POST 请求进行mock，mock数据存放在 `products_mock.json`",
        "output": "<thought>\n对于指定的URL和请求方法，我们需要使用`Start Mock`关键字来设置mock响应。根据要求，URL中应包含`example.com/api/products`，请求方式为POST，mock数据存放在`products_mock.json`。因此，`Start Mock`需要传递的参数依次是path、method以及mock_data_path。\n</thought>\n\n<code_block>\n# 对 URL 包含 `example.com/api/products` 的 POST 请求进行 mock，mock 数据存放在 `products_mock.json`\nStart Mock  example.com/api/products  POST  mock_data_path=products_mock.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用 getFeiShuSession 方法 参数: ${env}  ${login_user_info} 并把返回结果放在全局变量 ${feishu_session} 中",
        "output": "<thought>\n首先，我们需要创建并初始化全局变量 ${feishu_session}。然后，我们可以调用getFeiShuSession方法并传递参数${env}和${login_user_info}。我们将调用的返回结果存储在${feishu_session}中。在RobotFramework中，我们可以使用关键字\"Set Global Variable\"来创建和初始化全局变量，并使用关键字\"Set Variable\"来设置变量的值。\n</thought>\n\n<code_block>\n# 创建并初始化全局变量 ${feishu_session}\nSet Global Variable  ${feishu_session}\n\n# 调用getFeiShuSession方法并传递参数${env}和${login_user_info}\n${feishu_session}  getFeiShuSession  ${env}  ${login_user_info}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为：zhengchengyu 的元素 elem，然后打印元素信息",
        "output": "<thought>\n我们需要找到文本为“zhengchengyu”的元素，然后打印该元素的信息。首先可以使用`FindByText`关键字来找到元素，然后使用`PrintElemRect`来打印元素的位置和尺寸信息。\n</thought>\n\n<code_block>\n# 查找文本为zhengchengyu的元素\n${elem}  FindByText | zhengchengyu\n\n# 打印该元素的信息\nPrintElemRect  ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 如果页面有一个或者多个可点击的class为ovui-modal__close-icon，就依次点击，没有则忽略。提示：需要获取所有满足条件的元素，并逐个点击元素列表中的每一个元素\n",
        "output": "\n    \n<thought>\n 首先，我们需要判断是否存在一个或多个class为`ovui-modal__close-icon`的元素。可以使用`GetElemCount`来获取这些元素的数量。如果数量大于0，那么我们就使用一个循环来依次点击每一个元素，使用`ClickElem`来点击每一个元素。\n </thought>\n \n <code_block>\n # 获取class为ovui-modal__close-icon的元素数量\n ${count}  GetElemCount  [class=ovui-modal__close-icon]\n \n # 如果数量大于0，依次点击每个元素\n FOR  ${index}  IN RANGE  0  ${count}\n     ClickElem  [class=ovui-modal__close-icon]:eq(${index})\n END\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格中包含：张三、李四、王武",
        "output": "<thought>\n这是一个简单的用例，我们可以使用关键字“CheckTableHas”来检查表格是否包含指定的文本。这个关键字可以检查表格是否包含给定的一个或多个文本。\n</thought>\n\n<code_block>\n# 校验表格中包含：张三、李四、王武\nCheckTableHas | 张三 | 李四 | 王武\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取5天后的日期，然后把他填入结束日期中",
        "output": "<thought>\n首先，我们需要使用RF的内置关键字 \"Get Current Date\" 获取当前日期，然后用 \"Add Time To Date\" 添加5天得到5天后的日期。然后我们可以使用 \"SetField\" 关键字把得到的日期填入结束日期字段中。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date} =  Get Current Date\n\n# 计算5天后的日期\n${date_after_5_days} =  Add Time To Date  ${current_date}  5 days\n\n# 输入结束日期\nSetField  | 结束日期 | ${date_after_5_days}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 For 循环，最多执行 3 次，每次打印 Hello",
        "output": "<thought>\n在RF中，我们可以使用\"Builtin\"库中的关键字\"Log\"来打印我们需要的文本，此外，我们可以使用 \"FOR\" 循环关键字来实现多次执行任务的需求。\n</thought>\n\n<code_block>\n# 使用 FOR 关键字，遍历一个长度为3的列表\nFOR    ${i}    IN RANGE    3\n    # 打印 'Hello'\n    Log    Hello\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第一行中的最后一个icon",
        "output": "<thought>\n在给定的场景中，我们需要点击表格第一行中的最后一个icon。根据可用的关键字列表，最合适的关键字是 `ClickIconOfRow`，它能够点击表格行中的icon元素。对于定位表格行，我们可以使用行号或者行中的特定文本，这里我们直接使用行号1表示第一行。为了选择icon的位置，我们需要使用序号表示法 `idx=-1` 来表示行中的最后一个icon。\n</thought>\n\n<code_block>\n# 点击第一行中的最后一个icon\nClickIconOfRow | 1 | idx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置熔断配置、策略上线流程、“规则组创建、引用和编排”，分别为 关闭、“预上线+正式上线”、“无需审批”",
        "output": "<thought>\n依次设置熔断配置、策略上线流程、规则组创建、引用和编排对应的值\n</thought>\n\n<code_block>\n# 设置熔断配置为关闭\nSetField | 熔断配置 | 关闭\n\n# 设置策略上线流程为预上线+正式上线\nSetField | 策略上线流程 | 预上线+正式上线\n\n# 设置规则组创建、引用和编排为无需审批\nSetField | 规则组创建、引用和编排 | 无需审批\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取文案“广州赫基大厦有几个服务台？${timestamp}”下方“知识解决方案”卡片内容",
        "output": "<thought>\n要解决这个问题，我们需要遵循以下步骤：\n1. 首先，查找文案“广州赫基大厦有几个服务台？${timestamp}”所在的元素。\n2. 从这个元素出发，查找给定方向下的文案“知识解决方案”所在的元素。\n3. 找到步骤2中找到的元素的祖先中，class包含card的元素。\n4. 获取步骤3中找到的元素的文本内容。\n\n根据描述的关键字，可以使用 `FindByText` 来找到第一步和第二步的元素；使用 `FindParentElem` 来捕获第三步中所需的祖先元素；最后使用 `GetElemText` 来获取文本。\n</thought>\n\n<code_block>\n# 查找文案“广州赫基大厦有几个服务台？${timestamp}”所在的元素\n${base_elem}  FindByText  广州赫基大厦有几个服务台？${timestamp}\n\n# 在base_elem下方查找“知识解决方案”文案所在的元素\n${knowledge_elem}  FindTextToTheDirectionOf  ${base_elem}  bottom  知识解决方案\n\n# 查找${knowledge_elem}祖先中class包含card的元素\n${card_elem}  FindParentElem  ${knowledge_elem}  [class*=card]\n\n# 获取${card_elem}的文本内容\n${card_content}  GetElemText  ${card_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击按钮 abc",
        "output": "<thought>\n这是一个简单的点击按钮操作，我们可以使用Click关键字实现这个任务。我们需要把按钮的文本\"abc\"作为参数传给Click关键字，这样RF框架就能找到这个按钮并点击它。\n</thought>\n\n<code_block>\n# 点击按钮 abc\nClick | abc\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "返回class包含dashboard-iframe的元素的个数",
        "output": "<thought>\n为了获取class属性包含dashboard-iframe的元素的数量，我们可以使用RF框架提供的`GetElemCount`关键字。需要构建一个合适的jquery选择器，能够匹配所有class包含指定文本的元素，然后传递给该关键字以获取数量。\n</thought>\n\n<code_block>\n# 获取class包含dashboard-iframe的元素个数\n${cnt}  GetElemCount | [class8=dashboard-iframe]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击下拉弹框里的退出登录",
        "output": "<thought>\n为了点击下拉弹框里的\"退出登录\"选项，我们可以使用Click关键字。因为需要明确这个文本是在弹框中，可以使用base参数指定为POPUP来表示操作的目标是在弹框中内容。通过这种方式，我们能够准确地找到并点击\"退出登录\"。\n</thought>\n\n<code_block>\n# 点击弹框中的退出登录\nClick | 退出登录 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“字节云验证用户细查脱敏生效”，逻辑是：\n#1.获取文本包含\"os_name\"的class包含BehaviorFlowInfoParamItem__paramItem的元素下的子元素的文本\n#2.校验该文本中是否包含“*”",
        "output": "<thought>\n1. 使用`FindElem`查找包含\"os_name\"的元素。\n2. 使用`GetElemText`获取该元素的文本。\n3. 使用`Should Contain`校验文本是否包含“*”。\n</thought>\n\n<code_block>\n*** Keywords ***\n字节云验证用户细查脱敏生效\n    # 查找文本包含\"os_name\"的元素\n    ${elem}  FindElem  [class*=BehaviorFlowInfoParamItem__paramItem]:contains(os_name)\n    \n    # 获取后代元素的文本\n    ${text}  GetElemText  ${elem}\n    \n    # 校验文本中是否包含“*”\n    Should Contain  ${text}  *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面标题包含“首页”",
        "output": "<thought>\n这里问题是要检查页面标题是否包含“首页”。根据关键字，我们可以使用\"WaitTitleContainsAny\"来等待页面标题出现所需的文本。这是等待指定的文本在页面的标题中出现的关键字，如果文本出现，那么该关键字将返回成功。\n</thought>\n\n<code_block>\n# 检查页面标题是否包含\"首页\"\nWaitTitleContainsAny | 首页\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含AeolusArrowLeft的svg，如果页面有确定按钮就点击, 并等待按钮消失",
        "output": "<thought>\n首先，我们需要点击一个具有特定class的svg元素。接着，通过检查页面是否存在“确定”按钮来决定是否点击。最后，等待该按钮消失。我们可以使用ClickElem关键字来点击svg，然后用IsAnyTextExisting检查“确定”按钮是否存在，存在则点击，并使用WaitElemDisappear等待消失。\n</thought>\n\n<code_block>\n# 点击class包含AeolusArrowLeft的svg\nClickElem | svg[class*='AeolusArrowLeft']\n\n# 检查页面是否有“确定”按钮，存在则点击\n${exist}  IsAnyTextExisting | 确定\nIF  ${exist}\n    Click  确定\nEND\n\n# 等待“确定”按钮消失\nWaitTextDisappear | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第一列倒数第一个按钮",
        "output": "<thought>\n根据题目要求，需要点击表格第一列中倒数第一个按钮。可以使用ClickElemOfCell关键字来实现。通过指定row_name_or_id和col_name_or_id参数来定位单元格，并使用selector参数选择按钮。由于是倒数第一个按钮，需使用:eq(-1)来表示。\n</thought>\n\n<code_block>\n# 使用 ClickElemOfCell 点击表格第一列倒数第一个按钮\nClickElemOfCell | -1 | 1 | :button:eq(-1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取复制的内容",
        "output": "<thought>\n思路：此处需求较为简单，只需要调用GetCopied关键字即可获取剪切板的内容。GetCopied关键字的功能就是获取复制的内容。\n</thought>\n\n<code_block>\n# 获取剪切板内容\n${copied_content}  GetCopied\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击移除，直到不出现移除",
        "output": "<thought>\n为了实现点击“移除”按钮直到该按钮不再出现，可以使用FOR循环限制最多循环10次。在每次循环中，首先判断页面上是否存在“移除”文本，如果存在则点击，否则退出循环。\n</thought>\n\n<code_block>\n# 设置最大循环次数为10\nFOR    ${index}    IN RANGE    10\n    # 检查页面是否存在“移除”按钮\n    ${exist}  IsAnyTextExisting | 移除\n    \n    # 如果存在，则点击“移除”按钮\n    IF   ${exist}\n        Click | 移除\n    ELSE\n        # 按钮不存在时提前退出循环\n        Exit For Loop\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击模型中心，在请输入名称中输入 sd1.5 并回车",
        "output": "<thought>\n首先需要点击“模型中心”文本，然后在出现的输入框中输入“sd1.5”并回车。可使用`Click`关键字进行点击操作，使用`SetField`关键字输入文本并回车。\n</thought>\n\n<code_block>\n# 点击模型中心\nClick | 模型中心\n\n# 在请输入名称中输入sd1.5并回车\nSetField | 请输入名称 | sd1.5 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "请输入一级选项 中输入 第一级单选，base：class包括treeDrawer，校验 页面中不存在子级 和 同级",
        "output": "<thought>\n根据场景描述，我们需要在一个指定的区域内输入文本，然后校验页面中不存在某些文本。我们可以使用SetField关键字来输入文本，然后用CheckNotHasText关键字来验证页面中不存在指定的文本。\n首先，为了识别目标区域，我们会使用选择器base=class包含treeDrawer的方式。\n接下来，将第一级单选输入到该区域。\n最后，使用CheckNotHasText来验证页面中不存在子级和同级这两个文本。\n</thought>\n\n<code_block>\n# 在class包含treeDrawer的区域输入“第一级单选”\nSetField  | 一级选项  | 第一级单选  | base=[class*=treeDrawer]\n\n# 校验页面内不包含文本“子级”和“同级”\nCheckNotHasText  | 子级  | 同级\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第3行第4列单元格，然后向其中输入：55",
        "output": "<thought>\n首先，我们需要使用`ClickTextOfCell`关键字来点击表格中第3行第4列的单元格，这个关键字需要提供行号和列号。接着，使用`FillCell`关键字向点击后的单元格中输入数字55。需要确保每个关键字的参数设置正确，确保定位到正确的单元格位置。\n</thought>\n\n<code_block>\n# 点击第3行第4列的单元格\nClickElemOfCell | 3 | 4\n\n# 向选中的单元格中输入55\nFillCell | 3 | 4 | 55\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新打开的页面",
        "output": "<thought>\n在此场景下，我们想切换到新打开的页面，可以使用关键字 \"ToNewWindow\"。\n</thought>\n\n<code_block>\n# 使用关键字切换到新打开的页面\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“添加页面” 的关键字，作用是：点击 title 为 ‘新增页面’ 的div中的后代元素 svg",
        "output": "<thought>\n首先，需要查找 title 为 ‘新增页面’ 的 div 元素，然后在其后代中找到 svg 元素进行点击。可以使用 `FindElem` 查找 div 元素并进一步选择其后代元素 svg。\n</thought>\n\n<code_block>\n# 查找 title 为 ‘新增页面’ 的 div 元素中的 svg 元素并点击\n${div_elem}  FindElem  div[title='新增页面']\nClickElem  svg  base=${div_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在查找服务中输入：云主机",
        "output": "<thought>\n在这个场景中，需要在页面的查找服务字段中输入\"云主机\"。首先，我们使用SetField关键字，然后为这个关键字提供必要的参数，第一个参数是字段名称，这里为\"查找服务\"，第二个参数是需要输入的值，即\"云主机\"。\n</thought>\n\n<code_block>\n# 在查找服务字段输入云主机\nSetField | 查找服务 | 云主机\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击BLOCK右侧的icon",
        "output": "<thought>\n首先，我们需要找到基准元素“BLOCK”，然后点击其右侧的图标。可以使用`ClickIconToTheDirectionOf`关键字，该关键字允许我们指定基准元素和方向（right），并选择目标icon。\n</thought>\n\n<code_block>\n# 点击BLOCK右侧的icon\nClickIconToTheDirectionOf | BLOCK | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截图断言 名称设置为 新建自定义报表 ，相似度为0.95",
        "output": "<thought>\n为了完成这个任务，我需要使用`ImageDiff`关键字。由于没有提供特定的jquery选择器，因此`selector`保持默认值。需要将名称设置为`新建自定义报表`，并将相似度设置为`0.95`。\n</thought>\n\n<code_block>\n# 截图对比，名称设置为新建自定义报表，相似度为0.95\nImageDiff | pic_name=新建自定义报表 | sim=0.95\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 className 为arco-tabs-header-title-text 且内容是监听的元素",
        "output": "<thought>\n为了点击 className 为 arco-tabs-header-title-text 且内容是 监听 的元素，我们可以使用 ClickElem 关键字。该关键字接受一个 jQuery 选择器，因此我们可以构建一个选择器，用于定位具有特定 className 和文本内容的元素。选择器将是 .arco-tabs-header-title-text:contains(监听)。\n</thought>\n\n<code_block>\n# 点击 className 为 arco-tabs-header-title-text 且内容是监听的元素\nClickElem | [class=arco-tabs-header-title-text]:contains(监听)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "关闭弹框",
        "output": "<thought>\n要关闭弹框，可以使用提供的关键字CloseNotifications，它用于关闭页面上的各种弹窗/通知/问卷/新手引导等提示。\n</thought>\n\n<code_block>\n# 关闭页面上的弹窗/通知\nCloseNotifications\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 日历小图标，点击 flink_test 或者 for_oceanus",
        "output": "<thought>\n在这种情况下，我们需要首先点击日历图标，然后尝试点击文本 “flink_test” 或 “for_oceanus” 中的任意一个。根据题意，“日历”可能指的是一个图标，因此使用 ClickIcon 来点击。接着使用 ClickAny 来尝试点击两个选项之一。\n</thought>\n\n<code_block>\n# 点击日历图标\nClickIcon | calendar\n\n# 尝试点击文本 flink_test 或 for_oceanus\nClickAny | flink_test | for_oceanus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向第一个class包含view-rulers的元素输入test1，然后获取工单编号的值并存储到变量${bianliang}，如果这个值为空，就等待3秒后继再继续获取。此过程最多重复10次",
        "output": "<thought>\n首先需要使用FillArea向第一个符合条件的元素填写test1，然后使用GetFieldVal获取工单编号的值。为了实现循环检查工单编号不为空的逻辑，我将使用Robot Framework支持的IF/ELSE语法和Repeat Until循环。每次获取不成功时让脚本等待3秒，最多重复10次。\n</thought>\n\n<code_block>\n# 向第一个class包含view-rulers的元素输入test1\nFillArea | div[class*=view-rulers]:eq(0) | test1\n\n# 获取工单编号的值并存储到变量${bianliang}\n${bianliang}  GetFieldVal | 工单编号\n\n# 如果工单编号为空，最多重试10次，每次等待3秒\n${retry_count}  Set Variable  0\nWHILE  \"${bianliang}\" == \"\" and ${retry_count} < 10\n    Sleep  3s\n    ${bianliang}  GetFieldVal | 工单编号\n    ${retry_count}  Evaluate  ${retry_count} + 1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前页面url，然后打印当前页面 cookies",
        "output": "<thought>\n根据任务要求，我们需要使用RobotFramework来获取当前页面的URL以及打印当前页面的cookies。首先可以使用GetCurrentUrl关键字来获取URL。然后，利用SeleniumLibrary中的Get Cookies关键字来获取cookies并打印。通过使用Builtin库中的Log关键字，我们可以将cookies输出到日志，以便查看。\n</thought>\n\n<code_block>\n# 获取当前页面的URL\n${url}  GetCurrentUrl\n\n# 打印当前页面的cookie\n${cookies}  Get Cookies\nLog  ${cookies}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送 ctrl + v",
        "output": "<thought>\n为了解决这个问题，我们可以直接使用`SendCtrlV`关键字，因为它用于发送`ctrl + v`，满足问题需求。\n</thought>\n\n<code_block>\n# 发送 ctrl + v 到当前光标位置\nSendCtrlV\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果发件渠道处于可点击状态，就点一下",
        "output": "<thought>\n要解决这个问题，我们需要：\n1. 首先检查发件渠道元素是否处于可点击状态(即enabled状态)\n2. 如果处于可点击状态，则点击该元素\n3. 可以使用IsElementEnabled关键字来判断元素状态\n4. 使用IF条件语句来处理不同状态下的操作\n5. 假设发件渠道元素的文本是\"发件渠道\"，我们可以使用Click关键字来点击它\n</thought>\n\n<code_block>\n# 检查发件渠道是否可点击，如果是则点击\n${status}  IsElementEnabled  :contains(发件渠道)\nIF  ${status}\n    Click  发件渠道\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击修订，点击实验状态下的进行中选项，点击售卖延期左边的查看，等待页面出现 上传单个合同文件，页面弹框中应存在${pdf_add_note}",
        "output": "<thought>\n1. 首先点击“修订”按钮，可以通过文本“修订”直接点击。\n2. 然后在“实验状态”下选择“进行中”选项。可以假设“实验状态”为一个下拉菜单或类似的选择控件，因此使用`SelectOptionForField`。\n3. 接下来点击“售卖延期”左边的“查看”，可使用`ClickTextToTheDirectionOf`选择“售卖延期”左侧的“查看”按钮。\n4. 等待页面出现文本“上传单个合同文件”，使用`WaitText`关键字。\n5. 确认页面弹框中存在动态变量`${pdf_add_note}`，考虑使用`CheckHasText`或者通过文本查找来确认。\n</thought>\n\n<code_block>\n# 点击修订\nClick | 修订\n\n# 选择实验状态下的进行中选项\nSelectOptionForField | 实验状态 | 进行中\n\n# 点击售卖延期左边的查看\nClickTextToTheDirectionOf | 售卖延期 | left | 查看\n\n# 等待页面出现 上传单个合同文件\nWaitText | 上传单个合同文件\n\n# 页面弹框中应存在 ${pdf_add_note}\nCheckHasText | ${pdf_add_note} | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索产品输入框输入访问控制，然后选择访问控制(IAM) ",
        "output": "<thought>\n1. 首先需要定位到搜索产品输入框，可以使用`SetField`关键字来输入文本\n2. 输入\"访问控制\"后，需要从下拉选项中选择\"访问控制(IAM)\"\n3. 选择下拉选项可以使用`SelectOption`关键字\n4. 由于提示中没有提供具体的字段名称，我们可以假设输入框的名称为\"搜索\"或\"产品搜索\"\n5. 选择下拉选项时，可以直接使用文本\"访问控制(IAM)\"，或者如果知道它是第几个选项，可以使用OPTIONS_i格式\n</thought>\n\n<code_block>\n# 在搜索输入框中输入\"访问控制\"\nSetField | 搜索 | 访问控制\n\n# 从下拉选项中选择\"访问控制(IAM)\"\nSelectOption | 访问控制(IAM)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面包含 增长分析，则执行移除操作，否则执行签署操作",
        "output": "<thought>\n首先需要判断页面是否包含文本\"增长分析\"，如果包含，则执行\"移除\"操作，否则执行\"签署\"操作。可以使用`IsAnyTextExisting`关键字来判断文本是否存在，然后用RF的IF/ELSE语句来执行相应的操作。\n</thought>\n\n<code_block>\n# 判断页面是否包含\"增长分析\"\n${exist}  IsAnyTextExisting | 增长分析\n\n# 如果包含\"增长分析\"，则执行移除操作，否则执行签署操作\nIF  $exist\n    移除\nELSE\n    签署\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 Summary 表 第2行的内容依次为：'', 'Byteplus', 'bptestsg02', 'SG', 'General business', 'Refund', 'Settlement exemption', '2024-09', '-$4,684,796.960000USD', '-$4,684,796.96USD', '-$5.64USD', '-$4,684,791.32USD', '-$3,971,359.30USD', '-$357,043.03USD'",
        "output": "<thought>\n我们需要校验 Summary 表的第二行内容依次为特定文本。可以通过 `CheckCellHas` 关键字来分别校验每个单元格的内容。由于有多个单元格，所以使用循环来减少重复代码，依次检查每个列中的内容是否与期望的相符。\n</thought>\n\n<code_block>\n# 定义期望的值列表\n@{expected_values}  Create List  ''  Byteplus  bptestsg02  SG  General business  Refund  Settlement exemption  2024-09  -$4,684,796.960000USD  -$4,684,796.96USD  -$5.64USD  -$4,684,791.32USD  -$3,971,359.30USD  -$357,043.03USD\n\n# 使用循环检查每个单元格\n${length}  Get Length  ${expected_values}\nFOR  ${index}  IN RANGE  1  ${length+1}\n  CheckCellHas  2  ${index}  ${expected_values}[${index-1}]  tbl=Summary\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击 自定义字段配置 下面的 添加一行，向“自定义字段配置”表格的第一行输入多个值：testtesttest、1，校验当前页面截图中包含两个：testtesttest",
        "output": "<thought>\n 首先，需要点击“自定义字段配置”下方的“添加一行”按钮。然后，向“自定义字段配置”表格的第一行输入指定的值“testtesttest”和“1”。最后，获取当前页面的截图并校验截图中包含两个“testtesttest”。\n </thought>\n \n <code_block>\n # 点击自定义字段配置下方的添加一行\n ClickTextToTheDirectionOf | 自定义字段配置 | bottom | 添加一行\n \n # 向自定义字段配置表格的第一行输入值：testtesttest、1\n FillRow | 1 | testtesttest | 1 | base=自定义字段配置\n \n # 截取当前页面截图\n Screenshot\n \n # 获取页面截图中的文本\n ${txt}  GetPageScreenshotText\n \n # 校验截图中包含两个testtesttest\n Should Be Equal As Strings  ${txt.count('testtesttest')}  2\n </code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "击表格中的第一行的更多小图标，点击充值，校验页面 收款计划 右边存在 明细",
        "output": "<thought>\n首先需要点击表格中第一行的更多icon，可以使用`ClickIconOfRow`关键字来实现。接下来，点击“充值”文本，使用`Click`关键字。最后，校验页面中“收款计划”右边存在“明细”，可以使用`CheckHasElemToTheDirectionOf`关键字。\n</thought>\n\n<code_block>\n# 点击表格中第一行的更多icon\nClickIconOfRow | 1 | more\n\n# 点击“充值”按钮\nClick | 充值\n\n# 校验“收款计划”右边存在“明细”\nCheckHasTextToTheDirectionOf | 收款计划 | right | 明细\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击当前弹窗中的日历小图标",
        "output": "<thought>\n需要在弹窗中点击日历小图标，可以使用`ClickIcon`关键字，基准元素设置为`POPUP`。\n</thought>\n\n<code_block>\n# 点击弹窗中的日历icon\nClickIcon | calendar | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找页面frame的个数",
        "output": "<thought>\n要查找页面中iframe的个数，我们可以直接使用GetElemCount关键字，并传入iframe选择器。这样可以获取页面中所有iframe元素的数量。\n</thought>\n\n<code_block>\n# 获取页面中iframe的数量\n${cnt}  GetElemCount | iframe\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印文本为 ‘指标’ 的元素信息",
        "output": "<thought>\n要打印文本为‘指标’的元素信息，可以使用FindByText关键字找到该元素，然后使用PrintElemRect打印其信息。\n</thought>\n\n<code_block>\n# 查找文本为‘指标’的元素\n${elem}  FindByText | 指标\n\n# 打印该元素的信息\nPrintElemRect | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待 合同名称字段的值变为 ${docx_name_1}",
        "output": "<thought>\n要等待合同名称字段的值变为某个值，可以使用WaitFieldContainsAll关键字。需要等字段名称为合同名称的页面字段包含传入的值，即${docx_name_1}。\n</thought>\n\n<code_block>\n# 等待合同名称字段的值变为指定文本\nWaitFieldContainsAll | 合同名称 | ${docx_name_1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘/abc’ 左边的 class包含right-circle的元素，然后获取表格 PID 列的内容，校验其包含 ‘/data_search’",
        "output": "<thought>\n首先，使用 ClickElemToTheDirectionOf 关键字点击 '/abc' 左边的 class 包含 right-circle 的元素，该关键字可以帮助我们定位到 '/abc' 左边的特定元素并进行点击操作。接着，我们需要获取表格 PID 列的内容，这可以通过使用 GetColValues 关键字实现，它会返回一个包含指定列所有单元格内容的列表。最后，使用 ShouldContain 关键字检查返回的列表中是否包含 '/data_search'，以验证表格内容是否正确。\n</thought>\n\n<code_block>\n# 点击 '/abc' 左边的 class 包含 right-circle 的元素\nClickElemToTheDirectionOf  |  /abc  |  left  |  .right-circle\n\n# 获取表格 PID 列的内容\n@{pid_values}=  GetColValues  |  PID\n\n# 校验返回的列表中是否包含 '/data_search'\nShould Contain  |  ${pid_values}  |  /data_search\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击元素 svg[class*=arco-icon-more]",
        "output": "<thought>\n在这个场景中，目标是点击一个SVG图标，它的class属性包含\"arco-icon-more\"。对于这种操作，我们可以使用`ClickElem`关键字并传入一个合适的jquery选择器。在jQuery中，选择class包含某个字符串的元素可以通过`[class*='字符串']`来实现。因此，这里可以直接使用`ClickElem | svg[class*='arco-icon-more']`。\n</thought>\n\n<code_block>\n# 点击class包含arco-icon-more的svg元素\nClickElem | svg[class*='arco-icon-more']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面上包含 同时对比 文案的按钮",
        "output": "<thought>\n在页面上寻找一个包含“同时对比”文案的按钮。可以使用 `Click` 关键字来点击包含该文本的元素。\n</thought>\n\n<code_block>\n# 点击包含“同时对比”的按钮\nClick | 同时对比\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "浏览器访问https://awacs-boe.byted.org/ruler/meta/approval_matrix?search=%7B%22page%22%3A1%2C%22pageSize%22%3A20%7D\n点击  创建审批规则\n设置机型  尹鹏程-测试\n设置CPU 型号  intel\n设置是否有本地盘  否\n设置产品审批人  yinpengcheng.123@bytedance.com\n设置子产品审批人  yinpengcheng.123@bytedance.com\n设置研发审批人 yinpengcheng.123@bytedance.com\n设置运维审批人  yinpengcheng.123@bytedance.com\n点击弹框中的  确定",
        "output": "<thought>\n我们需要先打开特定的URL，然后点击“创建审批规则”按钮。接下来，我们将通过批量设置关键字设置各种审批人的信息。最后，确认设置通过点击弹窗中的“确定”按钮。\n</thought>\n\n<code_block>\n# 访问特定URL\nOpenUrl | https://awacs-boe.byted.org/ruler/meta/approval_matrix?search=%7B%22page%22%3A1%2C%22pageSize%22%3A20%7D\n\n# 点击“创建审批规则”\nClick | 创建审批规则\n\n# 批量设置审批规则信息\nBatchSetFields  机型=尹鹏程-测试  CPU型号=intel  是否有本地盘=否  产品审批人=yinpengcheng.123@bytedance.com  子产品审批人=yinpengcheng.123@bytedance.com  研发审批人=yinpengcheng.123@bytedance.com  运维审批人=yinpengcheng.123@bytedance.com\n\n# 点击弹框中的“确定”\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘城市’ 为：‘南京市’、‘北京市’",
        "output": "<thought>\n为设置“城市”为“南京市”和“北京市”，可以使用`SetField`关键字在同一字段中依次输入这两个值。\n</thought>\n\n<code_block>\n# 设置城市为南京市、北京市\nSetField | 城市 | 南京市 | 北京市\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击操作列下的第一个编辑按钮，输入模版信息：外部路由配置，然后保存，页面预期出现文案：更新成功",
        "output": "<thought>\n首先，我们需要点击表格中“操作”列下的第一个“编辑”按钮，这可以使用`ClickTextOfCell`关键字。然后，我们使用`SetField`或`SendText`来输入“外部路由配置”到模版信息字段中。接着点击保存按钮，最后使用`CheckHasText`关键字检查页面上是否出现“更新成功”的文案。\n</thought>\n\n<code_block>\n# 点击表格操作列下的第一个 '编辑' 按钮\nClickTextOfCell | 1 | 操作 | 编辑\n\n# 输入模版信息：外部路由配置\nSetField | 模版信息 | 外部路由配置\n\n# 点击保存按钮\nClick | 保存\n\n# 检查页面出现更新成功的文案\nCheckHasText | 更新成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将点击Sales并拖拽到class包含ewqswcn0的元素的左上角",
        "output": "<thought>\n首先，我们需要找到文本为 \"Sales\" 的元素，然后将其拖拽到有 class 包含 'ewqswcn0_' 的元素左上角。\n我们可以使用 \"FindByText\" 和 \"FindElem\" 关键字分别定位 \"Sales\" 文本及目标元素, 然后使用 \"DAndD\" 关键字实现拖拽操作。\n左上角可设置偏移为 dx=1, dy=1\n</thought>\n\n<code_block>\n# 找到文本为 \"Sales\" 的元素\n${sales_elem}  FindByText | Sales\n\n# 找到有 class 包含 'ewqswcn0_' 的元素\n${target_elem}  FindElem | [class*=ewqswcn0_]\n\n# 拖拽 \"Sales\" 元素到目标元素的左上角\nDAndD | ${sales_elem} | ${target_elem} | dx=1 | dy=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 20 条/页，5s后检查表格行数量为 20",
        "output": "<thought>\n为了实现这个场景，首先需要点击文本“20 条/页”，然后等待5秒以确保页面加载完成。之后，我们需要检查表格行的数量是否为20。\n我将使用`Click`关键字来点击“20 条/页”文本，然后使用`Sleep`关键字来等待5秒，最后使用`CheckRowCount`关键字检查表格行的数量。\n</thought>\n\n<code_block>\n# 点击 20 条/页\nClick | 20 条/页\n\n# 等待 5 秒以确保页面加载完成\nSleep  | 5s\n\n# 检查表格行数量是否为20\nCheckRowCount | 20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间戳 保留前10位",
        "output": "<thought>\n要获取当前时间戳并保留前10位，可以使用Python的time库获取当前时间的时间戳。Robot Framework支持通过Evaluate关键字来执行Python代码，因此可以通过Evaluate调用Python代码获取当前时间戳，之后使用字符串切片保留前10位即可。\n</thought>\n\n<code_block>\n# 获取当前时间戳并保留前10位\n${timestamp}   Evaluate  str(int(time.time()))[:10]  modules=time\nLog  ${timestamp}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "新增援站，设置源站模式为：主源站，设置源站类型为：源站域名，设置回源地址为：www.baidu.com11，设置HTTP端口为：9998，点击确定",
        "output": "<thought>\n本场景中涉及到的关键步骤有：点击，选择型号和输入值，然后点击确定。\n- \"新增援站\"、\"确定\"是点击操作，可以使用Click关键字，对应的文本直接作为参数输入。\n- \"主源站\"、\"源站域名\"是选择操作，可以使用SetField关键字，字段名和字段值作为参数输入。\n- \"www.baidu.com11\"、\"9998\"是输入操作，可以使用SetField关键字，字段名和字段值作为参数输入。\n综合以上步骤，我们可以使用BatchSetFields关键字来批量进行选择和输入操作，将字段名和字段值作为键值对输入。\n</thought>\n\n<code_block>\n# 点击新增援站\nClick  |  新增援站\n\n# 批量设置字段\nBatchSetFields  |  源站模式=主源站 | 源站类型=源站域名 | 回源地址 =www.baidu.com11 | HTTP端口=9998\n\n# 点击确定\nClick  |  确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格中 粉丝 这一列的所有值，然后剔除数组中第一条数据，然后剔除数组中每个元素的非数字的部分，将数组中的元素全部转换为数字，然后计算出一共有多少为0的值，并且计算出为0值的百分比，校验这个百分比是否小于20% ",
        "output": "\n<thought>\n首先使用GetColValues获取表格中“粉丝”列的所有值。然后剔除数组中第一条数据。接下来使用Evaluate去除每个元素中的非数字部分，并将其转换为数字。计算数组中值为0的数量，并计算其百分比。最后，使用RF的Should Be True验证百分比是否小于20%。\n</thought>\n\n<code_block>\n# 获取表格中“粉丝”列的所有值\n@{fans_col_values}  GetColValues | 粉丝\n\n# 剔除数组中第一条数据\n@{fans_col_values}  Set Variable | @{fans_col_values}[1:]\n\n# 去除每个元素的非数字部分并转换为数字\n@{fans_numeric_values}  Evaluate | [int(re.sub(r'\\\\D', '', x) or 0) for x in $fans_col_values] | re\n\n# 计算为0的值的个数\n${zero_count}  Evaluate | $fans_numeric_values.count(0)\n\n# 计算为0值的百分比\n${total_count}  Get Length | ${fans_numeric_values}\n${zero_percentage}  Evaluate | (${zero_count} / ${total_count}) * 100\n\n# 校验百分比是否小于20%\nShould Be True  ${zero_percentage} < 20\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入框placeholder=\"请输入整数或小数\"输入1",
        "output": "<thought>\n在这个场景中，我们需要在一个具有特定占位符属性的输入或文本区域中输入一个值。在Robot Framework中，我们可以使用FillArea关键字通过jQuery选择器定位元素并输入值。为了定位具有特定占位符的元素，可以使用属性选择器语法。在jQuery中，选择器可以表示为$('[placeholder=\"请输入整数或小数\"]')。该语法可以直接用于FillArea关键字以输入指定的值。\n</thought>\n\n<code_block>\n# 在具有placeholder为\"请输入整数或小数\"的输入或文本区域中输入1\nFillArea | [placeholder=\"请输入整数或小数\"] | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入密码 ${ADMIN_PASSWORD}，然后回车",
        "output": "<thought>\n任务是向页面中的字段输入密码并回车。根据描述，应该使用`SetField`关键字，因为它适用于向有名称的页面字段中填写值，并且可以利用`enter=True`参数来模拟回车操作。\n</thought>\n\n<code_block>\n# 输入'密码'并回车\nSetField | 密码 | ${ADMIN_PASSWORD} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择售卖内容为：图书",
        "output": "<thought>\n我们可以通过使用SetField关键字来处理这个测试场景。我们可以假设\"售卖内容\"是一个下拉选择框或是一个可以输入内容的文本框。我们需要将其设置为\"图书\"。\n</thought>\n\n<code_block>\n# 选择售卖内容为：图书\nSetField | 售卖内容 | 图书\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${text_end}中包含2个${current_date}",
        "output": "<thought>\n在这个场景中，我们需要校验一个文本变量`${text_end}`中是否包含两个`${current_date}`。Robot Framework的内置关键字`Should Contain`可以用于检查一个字符串是否包含另一个字符串。为了验证`${text_end}`中有两个`${current_date}`，我们需要利用Python的能力来计算出现次数。我们可以使用`Evaluate`关键字来执行Python代码，计算`${text_end}`中`${current_date}`出现的次数，然后验证该次数是否等于2。\n</thought>\n\n<code_block>\n# 获取${text_end}中${current_date}出现的次数\n${count}  Evaluate  ${text_end}.count(${current_date})\n\n# 校验${current_date}出现次数为2\nShould Be Equal As Numbers  ${count}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗的 “实例ID”并输入本文“vol-k4ucf0m15yft6h3wsc34”",
        "output": "<thought>\n这个测试场景涉及在弹窗中点击“实例ID”并输入具体的文本。根据关键字说明，我们可以使用Click关键字点击弹窗中的文本，然后使用SetPopupField关键字在弹窗中的相关字段中输入文本。\n</thought>\n\n<code_block>\n# 点击弹窗中的实例ID\nClick | 实例ID | base=POPUP\n\n# 在弹窗中的实例ID字段中输入 vol-k4ucf0m15yft6h3wsc34\nSetPopupField | 实例ID | vol-k4ucf0m15yft6h3wsc34\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "${beforeTestSessionNum} 应和 ${beforeTestSessionCount} 相等",
        "output": "<thought>\n为了验证 `${beforeTestSessionNum}` 和 `${beforeTestSessionCount}` 是否相等，我们需要使用 RobotFramework 中的 `Should Be Equal` 关键字。这个关键字可以直接比较两个变量的值是否相等，如果不相等则会抛出错误。\n</thought>\n\n<code_block>\n# 验证 ${beforeTestSessionNum} 和 ${beforeTestSessionCount} 相等\nShould Be Equal | ${beforeTestSessionNum} | ${beforeTestSessionCount}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击【自动化测试专用job】，等待页面加载完成后，检测页面包含class=monaco-editor元素。",
        "output": "<thought>\n首先使用Click关键字点击文本【自动化测试专用job】，接着使用WaitLoading等待页面加载完成，最后使用WaitElem关键字检测页面是否包含class=monaco-editor的元素。\n</thought>\n\n<code_block>\n# 点击自动化测试专用job\nClick | 自动化测试专用job\n\n# 等待页面加载完成\nWaitLoading\n\n# 检测页面包含class=monaco-editor的元素\nWaitElem | [class=monaco-editor]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格中的第一行第一列包含{evop_name}，检查页面操作人一列不包含admin",
        "output": "<thought>\n对于这个场景，我们需要进行两项检查：\n1. 检查表格中的第一行第一列是否包含变量{evop_name}。\n2. 检查页面的“操作人”一列不包含文本“admin”。\n\n我们可以使用`CheckCellHas`关键字来验证第一行第一列是否包含指定文本。同时，可以使用`CheckColNotHas`关键字来验证特定列中不包含指定文本。需要假设“操作人”是页面上的一个表格列。\n</thought>\n\n<code_block>\n# 检查表格中的第一行第一列包含变量evop_name\nCheckCellHas | 1 | 1 | ${evop_name}\n\n# 检查操作人列不包含文本admin\nCheckColNotHas | 操作人 | admin\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${elem}里面的删除键",
        "output": "<thought>\n要点击`${elem}`中的删除键，显然需要使用`Click`关键字并结合`base`属性来指定操作范围。`${elem}`应该可以被看作一个选择器来表示基准元素。因此，我们需要选择`Click | 删除 | base=${elem}`这样的关键字来实现这个操作。\n</thought>\n\n<code_block>\n# 点击${elem}中的删除按钮\nClick | 删除 | base=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 Giraffe_UI创建巨量广告报表后拼接时间缀",
        "output": "<thought>\n为了在 ‘Giraffe_UI创建巨量广告报表’ 后拼接时间缀，需要执行以下步骤：\n1. 使用`Get Current Date`获取当前日期。\n2. 使用`Catenate`关键字将时间缀拼接到报表名称中。\n\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y%m%d\n\n# 拼接时间缀到报表名称\n${report_name}  Catenate  SEPARATOR=  Giraffe_UI创建巨量广告报表  ${current_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加条件后选择 user_type这个选项，然后获取所有 class 包含 a ，但不包含 b 的元素，逐个点击它们",
        "output": "<thought>\n首先，我们需要点击“添加条件”按钮，然后选择“user_type”选项。接下来，我们需要获取所有 `class` 包含 `a` 但不包含 `b` 的元素的数量，并逐个点击这些元素。为了实现这个流程，我们将使用以下关键字：\n1. 使用 `Click` 关键字点击“添加条件”。\n2. 使用 `SelectOption` 关键字选择 `user_type`。\n3. 使用 `GetElemCount` 获取符合选择器 `[class*='a']:not([class*='b'])` 的元素数量。\n4. 用一个循环逐个点击这些元素，循环中使用 `ClickElem`。\n</thought>\n\n<code_block>\n# 点击添加条件\nClick | 添加条件\n\n# 选择 user_type 选项\nSelectOption | user_type\n\n# 获取所有 class 包含 a 但不包含 b 的元素数量\n${count}  GetElemCount | [class*='a']:not([class*='b'])\n\n# 循环点击每个元素\nFOR  ${index}  IN RANGE  0  ${count}\n    ClickElem | [class*='a']:not([class*='b']):eq(${index})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 设置PCIe 品牌 ID 测试\n # 设置PCIe 设备 ID 1122\n # 设置PCIe 设备数量 2\n # 设置PCIe 设备描述 测试",
        "output": "\n    \n<thought>\n 为每个字段使用SetField关键字设置相应的值，因为它们都属于PCIe相关字段。根据问题描述，字段名和值是明确的。\n </thought>\n \n <code_block>\n # 设置PCIe 品牌 ID 为“测试”\n SetField | PCIe 品牌 ID | 测试\n \n # 设置PCIe 设备 ID 为“1122”\n SetField | PCIe 设备 ID | 1122\n \n # 设置PCIe 设备数量为“2”\n SetField | PCIe 设备数量 | 2\n \n # 设置PCIe 设备描述为“测试”\n SetField | PCIe 设备描述 | 测试\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 每日消费时段 右侧存在 全天可用",
        "output": "<thought>\n我们需要验证\"每日消费时段\"右侧是否存在文本\"全天可用\"。使用\"CheckHasTextToTheDirectionOf\"关键字，可以有效地完成文本校验任务，指定方向为\"right\"。在这个场景中，我们不需要使用复杂的Selector，因为我们仅校验特定文本在预期位置存在。\n</thought>\n\n<code_block>\n# 校验“每日消费时段”右侧存在“全天可用”\nCheckHasTextToTheDirectionOf | 每日消费时段 | right | 全天可用\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：新建第${i}组的事件属性，接受kwargs参数，主要逻辑是：\n1. 先判断第 i 个，class包含formContainer的元素ele是否存在，如果不存在就点击 添加属性，最多循环5次\n2. 如果ele已经存在，就对于kwargs的每一个字段key和值value,先判断key是否等于 事件公共属性，如果等于就点击ele中的这个key, 否则把ele中的字段key设置成对应的value",
        "output": "<thought>\n解决问题思路：\n1. 使用 `IsAnyElemExisting` 检查第 i 个包含 `formContainer` 的元素是否存在。\n2. 若不存在，则使用 `Click` 点击“添加属性”，该操作最多循环5次，通过 `FOR` 循环实现。\n3. 遍历 `kwargs`，检查每个 `key` 是否等于 \"事件公共属性\"。\n4. 若等于，则在特定基准元素中点击 `key`，否则在基准元素中使用 `SetField` 设置 `key` 和 `value`。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建第${i}组的事件属性\n    [Arguments]  &{kwargs}\n    ${selector}  Set Variable  div[class*=formContainer]:eq(${i-1})\n    ${timeout}   Set Variable  5\n\n    FOR  ${j}  IN RANGE  ${timeout}\n        ${exist}  IsAnyElemExisting  ${selector}\n        Exit For Loop If  ${exist}\n        Click  添加属性\n    END\n\n    FOR  ${key}  ${value}  IN  &{kwargs}\n        IF  \"${key}\" == \"事件公共属性\"\n            Click  ${key}  base=${selector}\n        ELSE\n            SetField  ${key}  ${value}  base=${selector}\n        END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果有升级完成弹窗，就点击 已知晓，再上传一张演出海报图为${IMAGE_URL_fourth}",
        "output": "<thought>\n首先，我们需要检测“升级完成”弹窗是否存在，如果存在，则点击“已知晓”按钮。然后，填写‘演出海报’字段为指定的图片URL，来上传这张图片文件。\n</thought>\n\n<code_block>\n# 检查是否存在升级完成弹窗\n${exist}  IsAnyTextExisting | 升级完成\n\n# 如果存在，点击已知晓\nIF  $exist\n    Click  已知晓  | base=POPUP\nEND\n\n# 设置演出海报字段的值，系统会字段判断此控件的类型，如果是文件上传会自动上传文件\nSetField | 演出海报 | ${IMAGE_URL_fourth}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 Purge by Prefix开关为：打开",
        "output": "<thought>\n要设置“Purge by Prefix”开关为打开，我们首先需要定位到该开关的控件。假设我们可以通过控件名称来直接操作这个开关。使用 `SetField` 关键字来设置开关的状态为打开。如果开关在特定上下文中，例如弹窗或者特定区域，我们可以使用 `base` 或 `near` 参数来精确定位控件。\n\n以下为假设的解决思路：\n1. 确定控件名称为 “Purge by Prefix”。\n2. 使用 `SetField` 关键字来设置开关为打开。\n</thought>\n\n<code_block>\n# 设置“Purge by Prefix”开关为打开\nSetField | Purge by Prefix | 打开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找svg元素，class属性包含arco-icon-edit",
        "output": "<thought>\n这是一道查找元素的问题，可以使用FindElem关键字来解决。我们需要找到一个class包含'arco-icon-edit'的svg元素。所以需要使用jQuery的属性选择器[class*=value]来匹配元素的class属性，其中value为'arco-icon-edit'。由于可能有多个class，我们使用*=运算符来匹配包含这个值的class。\n</thought>\n\n<code_block>\n# 查找svg元素，其class属性包含'arco-icon-edit'\n${elem}  FindElem | svg[class*='arco-icon-edit']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到id包含summon的iframe",
        "output": "<thought>\n为了切换到id包含summon的iframe，我将使用ToFrame关键字，并创建一个jquery选择器来选择具有包含特定id的iframe元素。由于选择器需要基于id属性选择iframe，因此可以使用属性选择器语法。\n</thought>\n\n<code_block>\n# 切换到id包含summon的iframe\nToFrame | iframe[id*=summon]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ACCOUNT 的值不为：CDN测试，则打印1，否则检查表格数据有 Suborder7261980470631600420",
        "output": "<thought>\n首先，我们需要检查变量 ACCOUNT 的值是否为 \"CDN测试\"，可以使用 RF 内置的 IF 语句进行判断。根据条件，如果 ACCOUNT 的值不等于 \"CDN测试\"，则直接打印1；否则，使用 CheckTableHas 关键字来检查表格中是否包含 \"Suborder7261980470631600420\"。\n</thought>\n\n<code_block>\n# 判断 ACCOUNT 的值是否为 \"CDN测试\"\nIF  \"${ACCOUNT}\" != \"CDN测试\"\n    Log  1\nELSE\n    # 检查表格中是否包含 \"Suborder7261980470631600420\"\n    CheckTableHas | Suborder7261980470631600420\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“开启关联属性”，主要作用是将 “关联属性” 字段设置为 ON",
        "output": "<thought>\n要将“关联属性”字段设置为 ON，可以使用 SetField 关键字。该关键字可用于在指定字段中填入值，因此在这里适用于将“关联属性”设置为 ON。\n</thought>\n\n<code_block>\n开启关联属性\n    # 设置“关联属性”字段为 ON\n    SetField  关联属性  ON\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击修改登录设置右侧的小图标",
        "output": "<thought>\n为了实现“点击修改登录设置右侧的icon”，我们需要先定位“修改登录设置”文本，然后在其右侧找到目标icon并点击。根据关键字描述，我们可以使用 `ClickIconToTheDirectionOf` 关键字。这个关键字允许我们指定基准文本，然后在指定的方向（例如“right”）查找并点击目标icon。\n</thought>\n\n<code_block>\n# 点击“修改登录设置”右侧的图标\nClickIconToTheDirectionOf | 修改登录设置 | right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向‘请输入名称’输入：${tmp_name}",
        "output": "<thought>\n首先，需要使用`SetField`关键字，因为我们是在页面的指定名称字段中输入文本。假设‘请输入名称’是字段的标签，在这种情况下，应该直接使用`SetField`来输入变量`${tmp_name}`。\n</thought>\n\n<code_block>\n# 在‘请输入名称’字段中输入${tmp_name}\nSetField | 请输入名称 | ${tmp_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 第2个 Business mode 右边的筛选小图标",
        "output": "<thought>\n为了实现点击第2个“Business mode”右边的筛选icon的操作，我们需要使用ClickIconToTheDirectionOf关键字。首先，我们通过:contains(Business mode):eq(1)定位到第二个“Business mode”元素，然后指定方向为right，目标是icon，icon名称是 filter。\n</thought>\n\n<code_block>\n# 点击第2个“Business mode”右边的筛选icon\nClickIconToTheDirectionOf | :contains(Business mode):eq(1) | right | filter\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“进入${menu}页面”，主要逻辑是：先删除变量menu前后的空白字符, 然后使用空格或>作为分隔符对menu进行分隔，然后等于页面加载完成，并点击分隔出的每一项，每次点击间隔1s",
        "output": "<thought>\n这个任务需要我创建一个新的关键字“进入${menu}页面”。首先，我需要删除变量menu的前缀和后缀空格，然后用空格或者\">\"符号来分隔它。然后，我需要等待页面加载完成。在页面加载完成后，我需要逐个点击分隔出的每一个项，并在每次点击之间停顿1秒钟。这个任务需要我使用RobotFramework的内置关键字和循环结构来完成。\n</thought>\n\n<code_block>\n进入${menu}页面\n    [Arguments]  ${menu}\n    ${menu}=   Evaluate   '${menu}'.strip()\n    @{menu_items}=   Evaluate   re.split(r'\\\\s+|>', '${menu}')\n    WaitLoading\n    FOR   ${item}   IN   @{menu_items}\n        ClickMenu   ${item}\n        Sleep   1s\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘登录’，不包括 ‘验证码登录’",
        "output": "<thought>\n在这个场景中，我们需要点击文本为“登录”的元素，并且明确排除“验证码登录”这个文本。可以使用`Click`关键字，并使用`exclude`参数来排除“验证码登录”。\n</thought>\n\n<code_block>\n# 点击‘登录’，排除‘验证码登录’\nClick | 登录 | exclude=验证码登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击取消旁边的删除按钮, 然后点击确定",
        "output": "<thought>\n首先，我会使用关键字 \"ClickTextToTheDirectionOf\" 来点击 \"取消\" 旁边的 \"删除\" 按钮。然后，我会使用关键字 \"Click\" 来点击 \"确定\"。\n</thought>\n\n<code_block>\n# 点击取消旁边的删除按钮\nClickTextToTheDirectionOf | 取消 | right | 删除\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送方向键：向下",
        "output": "<thought>\n要发送方向键\"向下\"的操作，可以使用RobotFramework的Press Keys关键字。根据示例代码中的用法，Press Keys需要两个参数：第一个参数是元素选择器（这里不需要特定元素，所以用None），第二个参数是要按下的键（这里是ARROW_DOWN）。\n\n由于问题描述只需要发送向下方向键，不需要组合键，所以直接使用ARROW_DOWN即可。\n</thought>\n\n<code_block>\n# 发送向下方向键\nPress Keys | None | ARROW_DOWN\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在搜索中输入 auto_test, 并回车",
        "output": "<thought>\n这个问题比较简单。思路是：直接通过SetField关键字将搜索框标识为\"搜索\"，然后将\"auto_test\"值放入搜索框，最后输入回车。\n</thought>\n\n<code_block>\n# 在搜索框中键入'auto_test'\nSetField | 搜索 | auto_test | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到当前激活元素右侧 20px 处",
        "output": "<thought>\n首先，我们需要获取当前激活的元素。然后，通过获取这个元素的位置，移动鼠标到该元素的右侧20px处。这需要用到`GetActiveElem`获取当前激活的元素，接下来使用`MoToElem`将鼠标移动到该元素并偏移20px。\n</thought>\n\n<code_block>\n# 获取当前激活的元素\n${active_elem}  GetActiveElem\n\n# 移动鼠标到当前激活元素右侧20px处\nMoToElem | ${active_elem} | dx=20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中表格 cert_hosting 这一行的 radio",
        "output": "<thought>\n在弹窗中找到 `cert_hosting` 这一行，并点击这一行中的 `radio` 按钮。我需要使用关键字 `ClickElemOfRow`，其中 `row_name_or_id` 设置为 `cert_hosting`，`selector` 设置为 `:radio`，`base` 设置为 `POPUP`。\n</thought>\n\n<code_block>\n# 点击弹窗中表格 cert_hosting 这一行的 radio\nClickElemOfRow | cert_hosting | :radio | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击查询",
        "output": "<thought>\n在查询文本中，可以直接使用Click关键字\n</thought>\n\n<code_block>\n# 点击查询文本\nClick | 查询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对 URL 中包含 /api/v3/orders/details 的 GET 请求，且请求体匹配 order_id=.* 的接口进行 mock，mock 数据存放在 http://example.net/details_mock.json",
        "output": "<thought>\n为了对指定URL的请求进行mock，我们需要使用`Start Mock`关键字。根据问题描述，我们需要mock的是URL中包含`/api/v3/orders/details`的GET请求，并且请求体应该匹配正则表达式`order_id=.*`。我们还知道mock数据存放在`http://example.net/details_mock.json`。因此，应该设置`Start Mock`关键字的`path`为`/api/v3/orders/details`，`method`为`GET`，`req_body_pattern`为`order_id=.*`，以及`mock_data_path`为给定的URL。\n</thought>\n\n<code_block>\n# 对请求 url 中包含 /api/v3/orders/details, 且请求方式为 GET, 且请求体匹配 order_id=.* 的接口进行 mock，mock 数据存放在: http://example.net/details_mock.json\nStart Mock  /api/v3/orders/details  GET  order_id=.*  mock_data_path=http://example.net/details_mock.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "    向data-e2e=ad_drawer_range_picker__ocRangePicker的div元素输入2024-08-18～2024-09-12",
        "output": "<thought>\n在这个场景中，我们需要向一个特定的div元素输入一个日期范围。根据提供的关键字，我们可以使用FillArea来实现这一点，因为FillArea允许我们根据jquery选择器指定的元素来输入文本。我们需要构建jquery选择器以选择具有特定属性data-e2e的div元素。在jquery中，可以使用属性选择器来实现这一点：[attribute=value]。因此，我们的选择器将是div[data-e2e=ad_drawer_range_picker__ocRangePicker]。\n</thought>\n\n<code_block>\n# 在具有data-e2e属性的div元素中输入日期范围\nFillArea | div[data-e2e=ad_drawer_range_picker__ocRangePicker] | 2024-08-18～2024-09-12\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置产品合格证为：ISO9001，并忽略可能出现的失败",
        "output": "<thought>\n对于这一场景，需要使用`SetField`关键字来设置产品合格证字段。为了确保即使出现失败错误也不会影响测试执行，我们可以使用Robot Framework的`Run Keyword And Ignore Error`来忽略错误。\n</thought>\n\n<code_block>\n# 设置产品合格证为 ISO9001，并忽略可能出现的失败\nRun Keyword And Ignore Error  SetField | 产品合格证 | ISO9001\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向下滚动半个屏幕",
        "output": "<thought>\n为实现页面向下滚动半个屏幕的功能，RobotFramework 的标准库中没有直接用于滚动半屏的关键字。可以通过执行 JavaScript 来滚动页面。JavaScript 可以使用 window.scrollBy(0, window.innerHeight / 2) 来实现滚动半个屏幕的效果。故需使用 Execute Javascript 关键字来完成此任务。\n</thought>\n\n<code_block>\n# 向下滚动半个屏幕\nExecute Javascript | window.scrollBy(0, window.innerHeight / 2)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘取消’左侧的保存，向请输入关键词输入${me_name}，鼠标悬停${me_name}",
        "output": "<thought>\n在这个场景中，我们需要完成三个步骤：首先，点击“取消”左侧的“保存”按钮；其次，向“请输入关键词”输入框中输入变量`${me_name}`；最后，将鼠标悬停在`${me_name}`文本上。\n\n为此，我们可以使用以下关键字：\n1. `ClickTextToTheDirectionOf`：用于点击“取消”左侧的“保存”。\n2. `SetField`：用于在“请输入关键词”输入框中输入`${me_name}`。\n3. `MoTo`：用于将鼠标移动到`${me_name}`文本上。\n\n为了实现上述需求，我会依次调用这些关键字。\n</thought>\n\n<code_block>\n# 点击“取消”左侧的“保存”\nClickTextToTheDirectionOf | 取消 | left | 保存\n\n# 在“请输入关键词”输入框中输入${me_name}\nSetField | 请输入关键词 | ${me_name}\n\n# 鼠标悬停在${me_name}文本上\nMoTo | ${me_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送以下请求，curl 'https://xxx.yyy.zzz.com/api/top/CDN/2021-03-01/ListCdnDomains' \\\n-H 'accept: application/json, text/plain, */*' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n-H 'servicename: CDN' \\\n--data-raw '{\"PageNum\":1,\"PageSize\":10,\"ResourceTags\":[]}'，并获取所有的「Domain」字段存储在「DomainList」列表中，获取「域名」列的内容存储在「dList」中，预期「dList」和「DomainList」相同",
        "output": "<thought>\n首先使用UiSendRequest发送请求并获取返回数据，然后使用GetValuesFromJson获取所有的「Domain」字段，并将结果存储在DomainList列表中；接着，使用GetColValues获取表格的「域名」列的内容，并将结果存储在dList列表中。最后，使用RF内置的关键字Should Be Equal作比较，确保DomainList和dList相同。\n</thought>\n\n<code_block>\n# 发送请求并获取返回JSON数据\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/api/top/CDN/2021-03-01/ListCdnDomains | {\"PageNum\": 1, \"PageSize\": 10, \"ResourceTags\": []} | {\"accept\": \"application/json, text/plain, */*\", \"content-type\": \"application/json;charset=UTF-8\", \"servicename\": \"CDN\"}\n\n# 获取所有的「Domain」字段存储在「DomainList」列表中\n@{DomainList}  GetValuesFromJson | ${resp_json} | Domain\n\n# 获取「域名」列的内容存储在「dList」中\n@{dList}  GetColValues | 域名\n\n# 预期「dList」和「DomainList」相同\nShould Be Equal | ${dList} | ${DomainList}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "员工选择“panza.liang”，工卡号输入 100200300，点击提交",
        "output": "<thought>\n根据题目描述，我们需要做三个操作，首先是选择一个名字“panza.liang”，然后输入工卡号100200300，最后点击提交。对于选择员工名，我们可以假设它是一个下拉列表，所以我们可以通过SetField关键字来选择。对于工卡号，我们可以同样的方法来输入。最后，我们可以通过Click关键字来操作提交按钮。\n</thought>\n\n<code_block>\n# 选择员工为\"panza.liang\"\nSetField | 员工 | panza.liang\n\n# 输入工卡号100200300\nSetField | 工卡号 | 100200300\n\n# 点击提交\nClick | 提交\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将username、password分别输入到账号名和密码的字段中，点击登录",
        "output": "<thought>\n在此场景中，我们需要将“username”和“password”输入到对应的字段中，并执行一次点击动作来登录。在RF中，我们可以使用BatchSetFields关键字来同时设置账号名和密码。然后使用Click关键字来执行对“登录”按钮的点击操作。为了保证准确性，我们需要确保selector或文本与页面元素的对应关系明确。\n</thought>\n\n<code_block>\n# 输入账号名和密码\nBatchSetFields  账号名=username  密码=password\n\n# 点击登录按钮\nClick | 登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果不存在class包含arco-switch-checked的元素，则点击表格第一行第一列内容",
        "output": "<thought>\n首先，我们需要检查页面中是否存在class包含\"arco-switch-checked\"的元素。如果不存在该元素，则需要点击表格的第一行第一列内容。为此，我们可以先使用IsAnyElemExisting关键字来判断元素是否存在。根据判断结果，如果不存在该元素，则使用ClickTextOfCell关键字点击表格的第一行第一列。\n</thought>\n\n<code_block>\n# 判断class包含arco-switch-checked的元素是否存在\n${exist}  IsAnyElemExisting  [class*='arco-switch-checked']\n\n# 如果不存在，则点击表格的第一行第一列\nIF  not ${exist}\n    ClickTextOfCell  1  1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘我创建的’ 为：开",
        "output": "<thought>\n为了设置字段‘我创建的’为‘开’，可以使用`SetField`关键字。因为这里没有提到特定的上下文，比如基准元素或者靠近哪个文本，我们只需直接设置字段即可。\n</thought>\n\n<code_block>\n# 设置‘我创建的’为‘开’\nSetField | 我创建的 | 开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 晓明 所在表格行中的 class*=edit 的svg",
        "output": "<thought>\n对于给定的任务，我们需要在“晓明”所在的表格行中找到一个元素，这个元素是一个class属性包含\"edit\"的svg图标。关键字ClickElemOfRow可以用来根据表格行和元素选择器来点击元素。我们将使用selector来定位class属性包含\"edit\"的svg。\n</thought>\n\n<code_block>\n# 点击 晓明 所在表格行中的 class*=edit 的svg\nClickElemOfRow | 晓明 | svg[class*='edit']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的第一个 下载 左边的小图标",
        "output": "<thought>\n需要点击弹窗中第一个“下载”左边的icon。首先，定位“下载”文本，然后使用ClickIconToTheDirectionOf关键字，指定方向为left。\n</thought>\n\n<code_block>\n# 点击弹窗中第一个“下载”左边的icon\nClickIconToTheDirectionOf | 下载 | left | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "返回上一页，设置名称为“123456”，回车，点击123456右边的编辑图标",
        "output": "<thought>\n此问题要求我们执行以下任务：首先返回上一页，接着在一个输入字段中设置名称为“123456”并按回车，然后点击文本“123456”右边的编辑图标。解决这个问题可以分解为几个步骤：使用PageBack关键字来返回上一页，使用SetField关键字输入“123456”并回车，最后使用ClickIconToTheDirectionOf关键字来点击“123456”右边的编辑图标。\n</thought>\n\n<code_block>\n# 返回上一页\nPageBack\n\n# 设置名称为“123456”并按回车\nSetField | 名称 | 123456 | enter=True\n\n# 点击123456右边的编辑icon\nClickIconToTheDirectionOf | 123456 | right | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前用例的名称",
        "output": "<thought>\n为了获取当前用例的名称，我们可以使用Robot Framework中内置的变量`${TEST NAME}`。这个变量会自动包含当前正在执行的测试用例的名称。因此，不需要使用复杂的选择器或自定义关键字，直接使用该内置变量即可解决问题。\n</thought>\n\n<code_block>\n# 获取当前用例的名称\n${test_case_name}  Set Variable  ${TEST NAME}\nLog  当前用例的名称是：${test_case_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在\"删除\"按钮，那么点击它",
        "output": "<thought>\n首先需要判断\"删除\"按钮是否存在，然后利用 RF 的 IF/ELSE 语句，如果\"删除\"按钮存在，那么点击它。\n</thought>\n\n<code_block>\n# 判断\"删除\"按钮是否存在\n${exist}  IsAnyTextExisting | 删除 \n\n# 如果存在\"删除\"按钮，那么点击它\nIF  $exist\n    Click  删除\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “来客密码登录” 的关键字，接受 phone_no, password, shop 参数，默认值分别为变量 PHONE_NO, PASSWORD, SHOP_NAME 操作逻辑为：\n# 1. 打开浏览器，访问主页 MAIN_PAGE\n# 2. 输入手机号，点击立即登陆，点击密码登陆，1秒钟后输入密码，然后勾选 ‘已阅读’，最后点击立即入驻\n# 3. 等待页面进入首页出现欢迎",
        "output": "<thought>\n1. 关键字需要打开浏览器并访问主页，这是通过OpenBrowser实现的。\n2. 需要输入手机号码，使用SetField。\n3. 需要点击多个文本按钮，使用Click和ClickTextOneByOne。\n4. 需要等待页面加载并通过页面上的欢迎信息验证加载完成，使用WaitText。\n5. 需要勾选复选框，使用CheckBoxOn。\n6. 等待时间，使用Sleep。\n</thought>\n\n<code_block>\n*** Keywords ***\n来客密码登录\n    [Arguments]  ${phone_no}=${PHONE_NO}  ${password}=${PASSWORD}  ${shop}=${SHOP_NAME}\n    \n    # 打开浏览器并访问主页\n    OpenBrowser  ${MAIN_PAGE}\n    \n    # 输入手机号\n    SetField  手机号  ${phone_no}\n    \n    # 点击立即登陆和密码登陆\n    ClickTextOneByOne  立即登陆  密码登陆\n    \n    # 等待1秒后输入密码\n    Sleep  1s\n    SetField  密码  ${password}\n    \n    # 勾选‘已阅读’\n    CheckBoxOn  已阅读\n    \n    # 点击立即入驻\n    Click  立即入驻\n    \n    # 等待页面出现欢迎\n    WaitText  欢迎\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "区域 下拉框，设定值为 赫基大厦",
        "output": "<thought>\n根据题目描述，我们需要使用SetField关键字来对一个控件进行操作。首先，我们指定要操作的字段名称为\"区域\" ，然后设定要输入的值为\"赫基大厦\" 。因此，编写自动化脚本的思路整体较为简单。\n</thought>\n\n<code_block>\n# 设置区域字段为赫基大厦\nSetField | 区域 | 赫基大厦\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘新会话’，输入 ‘自动化测试会话’，点击svg class包含bytereplay-icon，校验class为ai-msg-content-md的元素内有文本，最后判断${val}时长大于或者等于${val1}时长",
        "output": "<thought>\n首先，我们需要点击“新会话”文本，然后输入“自动化测试会话”。接着点击包含特定SVG图标的元素。校验某个class元素中是否存在文本，我们可以通过获取该元素的文本来判断是否为空。最后，比较两个时长变量，确保前者大于或等于后者。\n</thought>\n\n<code_block>\n# 点击“新会话”\nClick | 新会话\n\n# 输入“自动化测试会话”\nSendText | 自动化测试会话\n\n# 点击 class 包含 bytereplay-icon 的 svg 图标\nClickElem | svg[class*='bytereplay-icon']\n\n# 获取 class 为 ai-msg-content-md 的元素文案\n${elemText}  GetElemText | [class=ai-msg-content-md]\n\n# 校验元素文案不为空\nShould Not Be Empty | ${elemText}\n\n# 判断 ${val} 时长大于或者等于 ${val1} 时长\nShould Be True | ${val} >= ${val1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一条记录的第一个编辑icon",
        "output": "<thought>\n这个问题需要点击第一条记录中的第一个编辑icon。可以使用`ClickIconOfRow`关键字。指定行号为1，图标名称为\"edit\"，索引为0。\n</thought>\n\n<code_block>\n# 点击第一条记录的第一个编辑icon\nClickIconOfRow | 1 | edit | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数据类型右边的请选择",
        "output": "<thought>\n要点击“数据类型”右边的“请选择”，可以使用 `ClickTextToTheDirectionOf` 关键字。指定基准元素为“数据类型”，方向为右边。\n</thought>\n\n<code_block>\n# 点击数据类型右边的请选择\nClickTextToTheDirectionOf | 数据类型 | right | 请选择\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击id=x的div或name=x的span",
        "output": "<thought>\n我们需要点击id为x的div元素或者name为x的span元素，可以利用`ClickElem`关键字并结合jquery选择器来选择这些元素。\n</thought>\n\n<code_block>\n# 点击id=x的div或name=x的span\nClickElem | div[id='x'],span[name='x']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击包含复制 的按钮，基准元素：包括IContractSearchResultContainer或table-row的class",
        "output": "<thought>\n为了实现点击包含“复制”的按钮，且该按钮的基准元素是class包含“IContractSearchResultContainer”或“table-row”的元素，我们可以使用`Click`关键字。在选择器中使用jQuery语法选择具有指定class的基准元素。选择器可以是`[class*=IContractSearchResultContainer], [class*=table-row]`，然后使用`base`参数来指定基准元素。最终选择包含“复制”的按钮进行点击。\n</thought>\n\n<code_block>\n# 点击基于包含IContractSearchResultContainer或table-row的class的元素中的复制按钮\nClick | 复制 | base=[class*=IContractSearchResultContainer], [class*=table-row]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用“任务中心审批” 的关键字，入参： ${USER_LFF_CLM1_PRE} ${ENV} ${search_value}",
        "output": "<thought>\n首先需要调用“任务中心审批”关键字，并传入参数。假设这个关键字执行一些审批操作。我们需要确保参数正确传递并调用关键字。\n</thought>\n\n<code_block>\n# 调用“任务中心审批”关键字，传入参数：${USER_LFF_CLM1_PRE}, ${ENV}, ${search_value}\n任务中心审批 | ${USER_LFF_CLM1_PRE} | ${ENV} | ${search_value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 请选择字段 ，选择 sum_sales 下拉选择项",
        "output": "<thought>\n首先需要找到“请选择”的字段，然后选择“sum_sales”作为选项。可以使用`Click`和`SelectOptionForField`关键字来实现。\n</thought>\n\n<code_block>\n# 点击请选择字段\nClick | 请选择\n\n# 选择 sum_sales 下拉选择项\nSelectOption | sum_sales\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面是否包含SAML 2.0字样 如果包含SAML 2.0字样就点击接入新平台按钮 否则就结束",
        "output": "<thought>\n首先需要判断页面是否包含“SAML 2.0”文案。然后根据判断结果进行操作：如果包含，则点击“接入新平台”按钮；如果不包含，则不执行任何操作结束。使用`IsAnyTextExisting`判断文本存在性，并用RF的IF结构实现逻辑判断与操作。\n</thought>\n\n<code_block>\n# 判断页面是否包含SAML 2.0\n${exist}  IsAnyTextExisting | SAML 2.0\nIF  ${exist}\n    # 点击接入新平台按钮\n    Click  接入新平台\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class包含ff-feature-variant的元素内的class包含feature-variant_value的元素且包含文本取值1的元素下的取值输入test1",
        "output": "<thought>\n首先需要定位到class包含`ff-feature-variant`的元素，然后在其内寻找class包含`feature-variant_value`且文本包含“取值1”的元素，再在该元素下找到‘取值’并输入`test1`。考虑使用`FindElem`和`SetField`关键字结合定位这些元素。\n</thought>\n\n<code_block>\n# 查找class包含ff-feature-variant的元素\n${feature_variant_elem}  FindElem  |  div[class*=ff-feature-variant]\n\n# 在class包含ff-feature-variant的元素内查找class包含feature-variant_value且文本包含“取值1”的元素\n${value_elem}  FindElem  |  ${feature_variant_elem} div[class*=feature-variant_value]:contains(取值1)\n\n# 在所找到的元素下的‘取值’中输入test1\nSetField  |  取值  |  test1  |  base=${value_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ‘产品汇总’ 表 第2行  第5列 等于 ‘云服务器’",
        "output": "<thought>\n要校验‘产品汇总’表第2行第5列的值是否等于‘云服务器’，可以使用 `GetCellValue` 获取该单元格的值，然后使用 `Should Be Equal As Strings` 进行比较。\n</thought>\n\n<code_block>\n# 获取‘产品汇总’表第2行第5列的值\n${cell_value}  GetCellValue  2  5  tbl=产品汇总\n\n# 校验该值是否等于‘云服务器’\nShould Be Equal As Strings  ${cell_value}  云服务器\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 复制并创建右边的文案更多，等待3s，校验建议用餐人数右侧存在3人",
        "output": "<thought>\n首先，需要点击“复制并创建”右边的文案“更多”，可以使用ClickTextToTheDirectionOf关键字。然后，使用Sleep等待3秒。接下来，使用CheckHasTextToTheDirectionOf关键字校验“建议用餐人数”右侧是否包含“3人”。\n</thought>\n\n<code_block>\n# 点击“复制并创建”右边的文案更多\nClickTextToTheDirectionOf | 复制并创建 | right | 更多\n\n# 等待3秒\nSleep | 3s\n\n# 校验“建议用餐人数”右侧存在“3人”\nCheckHasTextToTheDirectionOf | 建议用餐人数 | right | 3人\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“检查动态授权自定义展示”的关键字，接收参数property name，作用是先将鼠标向下滚动 2 次，然后点击动态值，然后点击placeholder为请选择属性的元素，并输入property name",
        "output": "<thought>\n首先，使用PageDown关键字将页面向下滚动2次。然后，使用Click关键字点击文本为“动态值”的元素。接着，使用ClickElem选择placeholder为“请选择属性”的元素。最后，使用SendText关键字输入传入的参数property name。\n</thought>\n\n<code_block>\n*** Keywords ***\n检查动态授权自定义展示\n    [Arguments]  ${property_name}\n    \n    # 向下滚动2次\n    PageDown  2\n    \n    # 点击“动态值”文本\n    Click  动态值\n    \n    # 点击placeholder为“请选择属性”的元素\n    ClickElem  [placeholder=\"请选择属性\"]\n    \n    # 输入属性名称\n    SendText  ${property_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印表格第一行的数据",
        "output": "<thought>\n要打印表格第一行的数据，我们可以使用GetRowValues关键字获取第一行的值，并打印结果。\n</thought>\n\n<code_block>\n# 获取表格第一行的值\n@{row_values}  GetRowValues | 1\n\n# 打印获取到的行值\nLog | ${row_values}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第2个标签名称左面，class包含checkbox的元素",
        "output": "<thought>\n在给定场景中，“点击第2个标签名称左面，class包含checkbox的元素”意味着我们需要确定一个基准元素并在其左侧点击一个特定的元素。我们可以使用`ClickElemToTheDirectionOf`关键字，它允许我们在指定基准元素的某个方向上点击目标元素。首先，我们需要找到基准元素“标签名称”，然后使用该元素作为基准，选择左侧方向并点击目标元素。目标元素是class包含checkbox的元素。在jQuery中，选择器可以通过[class*=checkbox]来表示。\n</thought>\n\n<code_block>\n# 点击第2个标签名称左面的class包含checkbox的元素\nClickElemToTheDirectionOf | :contains(标签名称):eq(1) | left | [class*=checkbox]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “依次校验表格行中的每个值” 的关键字，接受 row 和变长参数 args，作用是，校验表格的第 row 行的每一个单元格中的值依次为 args 对应的值",
        "output": "<thought>\n首先，我们需要获取指定行(row)的数据，这可以通过关键字GetRowValues来实现。然后，获取传递的args参数的长度，并遍历每个参数。对于每个参数，用Should Be Equal As Strings关键字来校验获取到的行数据和参数是否匹配。\n</thought>\n\n<code_block>\n依次校验表格行中的每个值\n    [Arguments]  ${row}  @{args}\n    # 获取指定行的所有值\n    @{row_values}  GetRowValues  ${row}\n    # 获取参数 args 的长度\n    ${length}  Get Length  ${args}\n    # 遍历每个参数，校验对应的行数据\n    FOR   ${index}  IN RANGE  ${length}\n        Should Be Equal As Strings  ${row_values}[${index}]  ${args}[${index}]\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击data_source_us后面的加号",
        "output": "<thought>\n需要点击“data_source_us”文本右边的加号图标。可以使用ClickIconToTheDirectionOf关键字，以“data_source_us”为基准元素，方向为right，图标名为plus。\n</thought>\n\n<code_block>\n# 点击data_source_us右边的加号图标\nClickIconToTheDirectionOf | data_source_us | right | plus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成一个带当天日期的格式为字符串",
        "output": "<thought>\n为了解决这个问题，可以使用RF自带的时间处理关键字。首先，使用 `Get Current Date` 获取当前日期，然后将其转换为字符串格式。最后，将这个日期字符串与所需的格式结合起来。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 生成带当天日期的格式字符串\n${formatted_string}  Set Variable  ${current_date} some_fixed_text\n\n# 输出结果\nLog  ${formatted_string}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "工作流操作，选择 仅创建，等待5秒\n检查 ‘工单类型’ 右侧带有文案为 ‘AI填单’ 的 span 元素\n检查 ‘工单标题’ 输入框，内容为 电视黑屏无法显示，检查 ‘解决方案’ 输入框，内容为 联系供应商维修投屏电视",
        "output": "<thought>\n首先，使用SelectOptionForField关键字选择选项“仅创建”，然后等待5秒。接下来，使用CheckHasElemToTheDirectionOf关键字检查‘工单类型’右边是否存在包含文本‘AI填单’的span元素。最后，使用CheckFieldContains关键字检查‘工单标题’和‘解决方案’字段中是否包含特定内容。\n</thought>\n\n<code_block>\n# 选择 ‘仅创建’\nSelectOptionForField | 工作流操作 | 仅创建\n\n# 等待5秒\nSleep | 5s\n\n# 检查 ‘工单类型’ 右侧带有文案为 ‘AI填单’ 的 span 元素\nCheckHasElemToTheDirectionOf | 工单类型 | right | span:contains(AI填单)\n\n# 检查 ‘工单标题’ input/textarea，内容为 电视黑屏无法显示\nCheckFieldContains | 工单标题 | 电视黑屏无法显示\n\n# 检查 ‘解决方案’ input/textarea，内容为 联系供应商维修投屏电视\nCheckFieldContains | 解决方案 | 联系供应商维修投屏电视\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定位iframe元素，获取src属性，并打印",
        "output": "<thought>\n首先，我们需要定位iframe元素，这可以通过FindElem关键词进行。然后通过GetElemAttr关键字来获取元素的src属性。最后，采用BuiltIn库的Log关键字来打印获取到的src属性。\n</thought>\n\n<code_block>\n# 定位 iframe 元素\n${iframe}  FindElem | iframe\n\n# 获取 iframe 的 src 属性\n${src}  GetElemAttr | ${iframe} | src\n\n# 打印 src 属性\nLog  ${src}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 elem 向下滚动 50",
        "output": "<thought>\n给定需求是将元素向下滚动50%，可以直接使用关键字`ScrollUpDown`，指定元素和滚动百分比。\n</thought>\n\n<code_block>\n# 将元素elem向下滚动50%\nScrollUpDown | ${elem} | 50%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "删除所有 cookie",
        "output": "<thought>\n删除所有 cookie 可以直接使用 RobotFramework 的内置关键字 `Delete All Cookies` 来完成。这是一个内置操作，不需要额外的库或自定义关键字。\n</thought>\n\n<code_block>\n# 删除所有 cookie\nDelete All Cookies\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格第4列只包含libra",
        "output": "<thought>\n为了校验表格第四列只包含libra，我们可以使用GetColValues关键字获取第四列的所有值。然后，我们可以遍历这些值，使用RF内置的Should Contain关键字校验每一项是否包含\"libra\"。为了实现这个过程，可以用RF的FOR循环结构来迭代每一个值，并进行校验。\n</thought>\n\n<code_block>\n# 获取表格第四列的所有值\n@{col_values}  GetColValues | 4\n\n# 遍历获取的值，校验每一个都应该包含\"libra\"\nFOR  ${val}  IN  @{col_values}\n    Should Contain  ${val}  libra\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写个条件表达式，如果 传入的变量 time 等于a， 那么校验页面存在：今天，然后调用名为合同组审批页面点击无需比对 关键字，入参 ${assert_list}",
        "output": "<thought>\n首先需要判断传入的变量 time 是否等于 'a'。如果是，则校验页面上存在文本 \"今天\"，然后调用关键字 \"合同组审批页面点击无需比对\"，并传入参数 ${assert_list}。可以使用 Robot Framework 内置的 IF 语法来实现条件判断，使用 CheckHasText 关键字检查页面文本，并使用变量传递来调用关键字。\n</thought>\n\n<code_block>\n# 条件判断是否变量 time 等于 'a'\nIF  \"${time}\" == \"a\"\n    # 校验页面上存在 \"今天\"\n    CheckHasText  今天\n\n    # 调用关键字 合同组审批页面点击无需比对，传入参数 ${assert_list}\n    合同组审批页面点击无需比对  ${assert_list}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 ‘上线通知’ (3s超时)，就点击最后一个 叉号",
        "output": "<thought>\n首先使用 `IsAnyTextExisting` 关键字在页面中查找是否存在文本 '上线通知'，并设置 3 秒的超时时间。如果存在该文本，则使用 `ClickIcon | close | idx=-1` 关键字点击最后一个 'close' 图标。使用Robot Framework的IF语句结构来实现条件逻辑。\n</thought>\n\n<code_block>\n# 判断页面是否存在“上线通知”\n${exist}  IsAnyTextExisting | 上线通知 | timeout=3\n\n# 如果存在“上线通知”，则点击最后一个关闭图标\nIF  ${exist}\n    ClickIcon | close | idx=-1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名称 “接入新平台” 的关键字，接受参数 name、 kwargs ， 业务逻辑为：\n如果页面上不存在 name，就点击接入新平台, 然后将 kwargs 中的一系列 key 和 value ，将每一个 value值填入 key字段中，最后点击确定，并校验页面包含 创建成功 和 name",
        "output": "<thought>\n首先，需要判断页面上是否存在参数name，这可以通过`IsAnyTextExisting`关键字实现。如果不存在，就点击“接入新平台”。接着，利用`BatchSetFields`关键字将`kwargs`中的键值对填入相应字段。最后，点击“确定”并使用`CheckHasText`关键字校验页面是否包含“创建成功”和参数name。\n</thought>\n\n<code_block>\n*** Keywords ***\n接入新平台\n    [Arguments]  ${name}  &{kwargs}\n\n    # 判断页面上是否存在name\n    ${exist}  IsAnyTextExisting  ${name}\n    IF  not ${exist}\n        # 如果name不存在，点击接入新平台\n        Click  接入新平台\n\n        # 批量设置字段\n        BatchSetFields  &{kwargs}\n\n        # 点击确定\n        Click  确定\n\n        # 校验页面包含创建成功和name\n        CheckHasText  创建成功  ${name}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击MiniBase所在行的模块管理，点击托管左边的证书中心，点击定制管报后再次点击确认",
        "output": "<thought>\n首先，我们需要使用`ClickTextOfRow`关键字点击表格中\"MiniBase\"所在行的\"模块管理\"。接下来，应采用`ClickTextToTheDirectionOf`关键字来点击\"托管\"左边的\"证书中心\"。最后，使用`Click`关键字依次点击\"定制管报\"和\"确认\"。\n</thought>\n\n<code_block>\n# 点击 MiniBase 所在行的模块管理\nClickTextOfRow | MiniBase | 模块管理\n\n# 点击托管左边的证书中心\nClickTextToTheDirectionOf | 托管 | left | 证书中心\n\n# 点击定制管报\nClick | 定制管报\n\n# 点击确认\nClick | 确认\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验产品服务正下方包含增长分析",
        "output": "<thought>\n在这个场景中，我们需要验证在“产品服务”正下方的元素是否包含“增长分析”文本。我们可以使用CheckHasTextToTheDirectionOf关键字，该关键字通常用来验证特定文本是否存在于基准元素的给定方向。在目前的场景中，我们将“产品服务”作为基准元素，并指定方向为“bottom”，然后校验其中是否存在“增长分析”。\n</thought>\n\n<code_block>\n# 校验产品服务正下方包含文案：增长分析\nCheckHasTextToTheDirectionOf | 产品服务 | bottom | 增长分析\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "43、点击 访问控制\n44、点击 IP黑/白名单 右边的图标，设置 IP列表 为 1.2.3.4\n45、点击 URL鉴权配置 右边的图标，设置 鉴权类型 为 TypeA，设置 鉴权KEY 为 adasd123，设置有效时间为 100",
        "output": "<thought>\n1. 点击\"访问控制\"可以使用`Click`关键字。\n2. 点击\"IP黑/白名单\"右边的icon，可以使用`ClickIconToTheDirectionOf`，方向为`right`，icon未指定，因此可使用默认参数。\n3. 设置\"IP列表\"，可以使用`SetField`关键字，填写IP值。\n4. 点击\"URL鉴权配置\"右边的icon，同样可以使用`ClickIconToTheDirectionOf`，方向为`right`。\n5. 设置\"鉴权类型\"，\"鉴权KEY\"和\"有效时间\"可以使用`BatchSetFields`关键字来简化设置。\n</thought>\n\n<code_block>\n# 点击访问控制\nClick | 访问控制\n\n# 点击 IP黑/白名单 右边的icon\nClickIconToTheDirectionOf | IP黑/白名单 | right\n\n# 设置 IP列表 为 1.2.3.4\nSetField | IP列表 | 1.2.3.4\n\n# 点击 URL鉴权配置 右边的icon\nClickIconToTheDirectionOf | URL鉴权配置 | right\n\n# 设置 鉴权类型 为 TypeA，设置 鉴权KEY 为 adasd123，设置有效时间为 100\nBatchSetFields  鉴权类型=TypeA  鉴权KEY=adasd123  有效时间=100\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "2025-01-02 21:18:58.938 把这样的日期转成yyyy-mm-dd格式",
        "output": "<thought>\n对于日期格式转换问题，Robot Framework 的 BuiltIn 库提供了一些日期和时间处理的关键字。在这个场景中，可以使用 Convert Date 关键字将日期从一种格式转换为另一种格式。首先，我们需要确定当前日期时间的格式，然后利用 Convert Date 将其转换为目标格式 yyyy-mm-dd。\n</thought>\n\n<code_block>\n# 将日期转换为所需格式\n${converted_date}  Convert Date  2025-01-02 21:18:58.938  result_format=%Y-%m-%d\n\n# 输出转换后的日期以便验证\nLog  ${converted_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${数据集列表} 设置为全局变量",
        "output": "<thought>\n要将 `${数据集列表}` 设置为全局变量，可以使用 `Set Global Variable` 关键字。这个关键字将变量设置为全局可用，以便在其他测试用例中使用。\n</thought>\n\n<code_block>\n# 将${数据集列表}设置为全局变量\nSet Global Variable  ${数据集列表}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 请输入主机记录 设置为8位随机字符串，然后调用 ‘机器审核’ 关键字，并将审核结果报错在变量 result 中",
        "output": "<thought>\n首先需要生成一个8位随机字符串，然后使用`SetField`关键字将其设置到名为“请输入主机记录”的字段中。接着调用自定义关键字“机器审核”，并将结果存储在变量`result`中。生成随机字符串可以使用`GenerateRandom`关键字。\n</thought>\n\n<code_block>\n# 生成8位随机字符串\n${random_string}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n\n# 设置请输入主机记录为生成的随机字符串\nSetField | 请输入主机记录 | ${random_string}\n\n# 调用机器审核关键字，并存储结果\n${result}  机器审核\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击文本为 禁用xxx 的 class*=Card 元素",
        "output": "<thought>\n首先，我们需要找到 class 包含 Card 的元素中，文本为 禁用xxx 的元素。可以使用 FindElem 关键字通过 jQuery 选择器来定位这样的元素。为了确保选到的元素是包含“禁用xxx”文本的，我们可以使用 :contains 选择器。然后，使用 ClickElem 关键字来点击找到的元素。\n</thought>\n\n<code_block>\n# 定位并点击 class 包含 Card 且文本包含 禁用xxx 的元素\nClickElem | [class*=Card]:contains(禁用xxx)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断火山引擎所在区域是否可上下滚动",
        "output": "<thought>\n要判断\"火山引擎\"所在区域是否可上下滚动，需要使用`IsScrollable`关键字。这个关键字可以检查指定元素或文本所在区域的滚动性。由于题目中指定的是文本区域，所以第一个参数应该是\"火山引擎\"，第二个参数direction设置为'y'表示检查上下滚动性。该关键字会返回一个布尔值表示是否可滚动。\n</thought>\n\n<code_block>\n# 判断火山引擎所在区域是否可上下滚动\n${scrollable}  IsScrollable | 火山引擎 | y\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面有 5 个升级，则点击其中的第三个，否则点击第一个",
        "output": "<thought>\n解决问题的思路是首先获取页面中‘升级’出现的数量，然后根据数量来判断执行相应的点击操作。可以利用GetElemCount关键字来获取数量，并通过RF的IF/ELSE进行判断和分支处理。\n</thought>\n\n<code_block>\n# 获取‘升级’的数量\n${count}  GetElemCount  :contains(升级)\n\n# 判断数量，并点击相应的元素\nIF  ${count} >= 3\n    Click  升级  idx=2\nELSE\n    Click  升级  idx=0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“选择图表类型”，接受type参数，主要逻辑是：根据输入的中文type，查找映射，得到因为的type名称，然后点击class 包含对应英文type的svg，\n类型映射关系为：折线图：line-chart，堆叠图：stacked-graph，柱形图：bar-chart，双轴图：combo-chart, 环形图: pie-chart, 百分比图: icon-percentage",
        "output": "<thought>\n首先创建一个关键字\"选择图表类型\"，接受type参数。然后创建一个映射字典，根据中文type找到对应的英文type名称。接着组合出一个选择器，使用ClickElem关键字点击目标元素。\n</thought>\n\n<code_block>\n选择图表类型\n    [Arguments]  ${type}\n    ${typeMap}  Create Dictionary  折线图=line-chart  堆叠图=stacked-graph  柱形图=bar-chart  双轴图=combo-chart  环形图=pie-chart  百分比图=icon-percentage\n    ${targetType}  Get From Dictionary  ${typeMap}  ${type}\n    ${selector}  Set Variable  svg[class*=${targetType}]\n    ClickElem  ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${申请的数据表} 所在表格行中的 ‘加签’ 按钮",
        "output": "<thought>\n根据场景描述，我们需要在特定数据表行中点击一个特定按钮。可以使用 ClickTextOfRow 来点击表格行中的指定文本。要点击表格行内的按钮，可以进一步使用 ClickElemOfRow 来操作行内的元素。\n</thought>\n\n<code_block>\n# 点击 ${申请的数据表} 所在表格行中的‘加签’按钮\nClickElemOfRow | ${申请的数据表} | button:contains(加签)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量 date 是 2022-01-11 10:11:12 格式的，请把他转换成时间戳格式",
        "output": "<thought>\n使用RF的标准库DateTime中的关键字\"Convert Date\"将日期从\"YYYY-MM-DD hh:mm:ss\"格式转换为时间戳。\n<thought>\n\n<code_block>\n# 使用“Convert Date”将日期从\"YYYY-MM-DD hh:mm:ss\"格式转换为时间戳\n${timestamp}  Convert Date  ${date}  result_format=epoch\n<code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "按下 向下翻页键",
        "output": "<thought>\n解决问题思路：在此场景中，我们需要使用RobotFramework来触发向下翻页键（Page Down）。我们可以使用Builtin关键字“Press Keys”来实现这个操作。\n</thought>\n\n<code_block>\n# 按下向下翻页键\nPress Keys | None | PAGE_DOWN\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取说明字段当前的值，然后加上当前日期（年-月-日）后，重新把它填入此字段的",
        "output": "<thought>\n首先，需要获取说明字段的当前值。然后，获取当前日期。接着，将当前值和日期格式化为字符串后拼接，最后将结果设置回说明字段。\n</thought>\n\n<code_block>\n# 获取说明字段的当前值\n${current_value}  GetFieldVal | 说明\n\n# 获取当前日期并格式化为年-月-日\n${current_date}  Get Current Date | result_format=%Y-%m-%d\n\n# 拼接说明字段值和当前日期\n${new_value}  Set Variable  ${current_value}${current_date}\n\n# 将新的值输入回说明字段\nSetField | 说明 | ${new_value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将class=source-module-container的页面区域保存为基准图，命名为大屏成交来源，相似度为0.98",
        "output": "<thought>\n首先，选择器应该选取class=source-module-container的元素，并将其命名为大屏成交来源。需要设置相似度为0.98。使用ImageDiff关键字可以实现这个功能。\n</thought>\n\n<code_block>\n# 将class=source-module-container的页面区域保存为基准图，命名为大屏成交来源，相似度为0.98\nImageDiff | [class=source-module-container] | pic_name=大屏成交来源 | sim=0.98\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字，自定义SQL自动插入查询语句，接受参数 ${表信息}，逻辑是：先等待元素 div.view-line 出现，0.5s后，获取当前激活元素 elem，然后将 ${表信息} 粘贴到其中",
        "output": "<thought>\n我们需要使用以下关键字来解决这个问题：\n1. `WaitElem` 用于等待 `div.view-line` 元素出现。\n2. `Sleep` 用于等待0.5秒。\n3. `GetActiveElem` 获取当前激活的元素。\n4. `Paste` 将 `${表信息}` 粘贴到激活的元素中。\n</thought>\n\n<code_block>\n*** Keywords ***\n自定义SQL自动插入查询语句\n    [Arguments]  ${表信息}\n\n    # 等待元素div.view-line出现\n    WaitElem  div.view-line\n\n    # 等待0.5秒\n    Sleep  0.5s\n\n    # 获取当前激活的元素\n    ${elem}  GetActiveElem\n\n    # 将${表信息}粘贴到激活的元素中\n    Paste  ${elem}  ${表信息}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加一行，设置表格最后一行的字段Key为user_map_key，设置表格最后一行的字段值为ip",
        "output": "\n    \n<thought>\n 首先，使用Click关键字点击“添加一行”按钮。然后使用GetRowCount关键字获取当前表格的行数，以确定最后一行的编号。接着，使用FillCell关键字分别设置最后一行的“Key”和“值”字段。\n </thought>\n \n <code_block>\n # 点击添加一行\n Click | 添加一行\n \n # 获取当前表格的行数\n ${row_count} =  GetRowCount\n \n # 设置表格最后一行的字段Key为user_map_key\n FillCell | ${row_count} | Key | user_map_key\n \n # 设置表格最后一行的字段值为ip\n FillCell | ${row_count} | 值 | ip\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 ‘请输入主播昵称’ 中输入 ‘001’，在开始日期中输入 2024-11-26，结束日期中输入 2024-12-11，处罚维度中输入：账号｜直播",
        "output": "<thought>\n应该使用BatchSetFields关键字来批量填写多个字段。在‘请输入主播昵称’中输入‘001’，在开始日期中输入2024-11-26，结束日期中输入2024-12-11，处罚维度中输入：账号｜直播。通过BatchSetFields可以一次性设置多个字段，减少代码量。\n</thought>\n\n<code_block>\n# 批量设置主播昵称、开始日期、结束日期和处罚维度\nBatchSetFields  请输入主播昵称=001  开始日期=2024-11-26  结束日期=2024-12-11  处罚维度=账号｜直播\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取模块 近30天数据概况 中 音浪(火力) 指标的值",
        "output": "<thought>\n为了获取目标数据，我们首先需要通过一些关键词来定位到“近30天数据概况”模块中的“音浪(火力)”指标。由于GetFieldVal关键字能够直接获取字段的值并且支持near参数，因此可以利用该关键字来获取“音浪(火力)”的值。\n</thought>\n\n<code_block>\n# 获取音浪(火力)指标的值，在“近30天数据概况”模块附近\n${val}  GetFieldVal | 音浪(火力) | near=近30天数据概况\n\n# 输出获取的值以供验证\nLog  音浪(火力)的值为：${val}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 mon 设置为上个月",
        "output": "<thought>\n为了将字段mon设置为上个月，可以使用RF的日期处理关键字。首先，通过Get Current Date获取当前日期，然后使用Subtract Time From Date减少一个月的时间，得到上个月的日期。接着，使用SetField将解析后的月份设置到字段mon中。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 计算上个月日期\n${last_month_date}  Subtract Time From Date  ${current_date}  1month  result_format=%m\n\n# 设置字段mon为上个月\nSetField  mon  ${last_month}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为'缓存刷新-目录刷新'的关键字，接受参数：任务类型，前缀刷新，URL，请输入规则，刷新模式，参数默认值均为${EMPTY}，逻辑如下：\n# 1. 设置 目录刷新的任务类型为：任务类型\n# 2. 设置 目录刷新的前缀刷新为：前缀刷新\n# 3. 设置 目录刷新的URL为：URL\n# 4. 设置 目录刷新的请输入规则为：请输入规则\n# 5. 设置 目录刷新的刷新模式为：刷新模式\n# 6. 点击 提交",
        "output": "<thought>\n 任务涉及到依次设置页面字段并提交。可以使用`SetField`关键字为每个字段设置值，最后使用`Click`关键字进行提交。\n </thought>\n \n <code_block>\n 缓存刷新-目录刷新\n     [Arguments]  ${任务类型}=${EMPTY}  ${前缀刷新}=${EMPTY}  ${URL}=${EMPTY}  ${请输入规则}=${EMPTY}  ${刷新模式}=${EMPTY}\n \n     # 设置 目录刷新的任务类型为：任务类型\n     SetField  任务类型  ${任务类型}  near=目录刷新\n \n     # 设置 目录刷新的前缀刷新为：前缀刷新\n     SetField  前缀刷新  ${前缀刷新}  near=目录刷新\n \n     # 设置 目录刷新的URL为：URL\n     SetField  URL  ${URL}  near=目录刷新\n \n     # 设置 目录刷新的请输入规则为：请输入规则\n     SetField  请输入规则  ${请输入规则}  near=目录刷新\n \n     # 设置 目录刷新的刷新模式为：刷新模式\n     SetField  刷新模式  ${刷新模式}  near=目录刷新\n \n     # 点击 提交\n     Click  提交\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量 ${xx} 的值写入 file1.txt 文件",
        "output": "<thought>\n解决这个问题需要将变量的值写入一个文本文件。在Robot Framework中，可以使用\"Create File\"关键字来创建文件，并写入内容。\"Append To File\"关键字也可以用于追加内容到文件中。由于需求是将变量的值写入文件，选择\"Create File\"会更好，因为它会直接写入而不是追加。首先，我需要确保变量${xx}已经被声明和初始化。然后，我将使用\"Create File\"来完成写入任务。\n</thought>\n\n<code_block>\n# 假设变量${xx}已经被声明和初始化为某个值\n\n# 将变量${xx}的值写入到文件file1.txt\nCreate File  file1.txt  ${xx}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取校验表格 订单id 列的数据，并校验数据非空",
        "output": "<thought>\n首先，使用`GetColValues`关键字获取表格中订单id列的所有数据。然后，使用RF内建循环遍历这些数据，并使用`Should Not Be Empty`关键字校验每个数据不为空。\n</thought>\n\n<code_block>\n# 使用GetColValues获取订单id列的数据\n@{order_ids}  GetColValues | 订单id\n\n# 遍历每个订单id并校验不为空\nFOR  ${id}  IN  @{order_ids}\n    Should Not Be Empty  ${id}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置请选择开始日期为当前时间十分钟后的时间，格式为%Y-%m-%d %H:%M:%S",
        "output": "<thought>\n首先，我需要获取当前的日期和时间，并将其转换为特定格式。这可以通过RF的标准库关键字Get Current Date来实现。然后，我需要将当前时间增加十分钟，这可以用Add Time To Time关键字来实现。最后，我需要将计算后的时间格式化为\"年-月-日 时:分:秒\"，并将其设置为”开始日期“字段的值。\n</thought>\n\n<code_block>\n# 获取当前日期和时间\n${current_time}     Get Current Date    result_format=%Y-%m-%d %H:%M:%S\n\n# 增加十分钟到当前时间\n${future_time}     Add Time To Time    ${current_time}    10 minutes    result_format=%Y-%m-%d %H:%M:%S\n\n# 设置”开始日期“字段为计算后的时间\nSetField    开始日期    ${future_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击我已阅读checkbox",
        "output": "<thought>\n需要使用CheckBoxOn关键字来勾选名为“我已阅读”的checkbox。\n</thought>\n\n<code_block>\n# 勾选“我已阅读”复选框\nCheckBoxOn | 我已阅读\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个新建标签的方法，字段上级分类输入${Tag_Directory}，字段名称输入${Tag},字段描述输入自动化测试标签，字段保密级别输入L3，点击下一步，点击字段名，字段正则表达式输入小写英文字母，字段命中率阈值输入100，点击下一步，点击提交，等待页面出现操作成功",
        "output": "<thought>\n这个场景需要填写多个字段，因此可以使用`BatchSetFields`来简化操作。需要注意的是，所有字段的输入操作可以合并为一个`BatchSetFields`。然后通过点击和输入来完成后续步骤。最终需要等待操作成功的文本出现。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建标签\n    [Arguments]  ${Tag_Directory}  ${Tag}\n    \n    # 批量填写字段信息\n    BatchSetFields  上级分类=${Tag_Directory}  名称=${Tag}  描述=自动化测试标签  保密级别=L3\n    \n    # 点击下一步\n    Click | 下一步\n    \n    # 点击字段名\n    Click | 字段名\n    \n    # 填写正则表达式和命中率阈值\n    BatchSetFields  正则表达式=小写英文字母  命中率阈值=100\n    \n    # 点击下一步\n    Click | 下一步\n    \n    # 点击提交\n    Click | 提交\n    \n    # 等待页面上出现操作成功\n    WaitText | 操作成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 test_zd 所在行中，“字典” 所在列中的删除按钮",
        "output": "<thought>\n我们需要在表格中找到包含\"test_zd\"的行，并在该行的\"字典\"列中点击“删除”按钮。为此，我们可以使用`ClickElemOfCell`关键字来完成。这个关键字使用了行和列的标识符以及一个选择器来识别按钮。\n</thought>\n\n<code_block>\n# 在test_zd所在行，字典列中点击删除按钮\nClickElemOfCell | test_zd | 字典 | button:contains(删除)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面中有超过一个class=card-XseJjh的元素，并且第一个元素中包含${creator_name}，最后一个元素中包含${person1_name}",
        "output": "<thought>\n1. 首先需要使用GetElemCount关键字获取class=card-XseJjh的元素数量，并校验是否大于1\n2. 然后需要获取第一个元素(索引0)的文本内容，校验是否包含${creator_name}\n3. 最后需要获取最后一个元素(索引-1)的文本内容，校验是否包含${person1_name}\n4. 可以使用GetElemText关键字获取元素文本，使用Should Contain关键字进行包含校验\n</thought>\n\n<code_block>\n# 获取class=card-XseJjh的元素数量并校验大于1\n${count}  GetElemCount  [class=card-XseJjh]\nShould Be True  ${count} > 1\n\n# 校验第一个元素包含${creator_name}\n${first_elem_text}  GetElemText  [class=card-XseJjh]:eq(0)\nShould Contain  ${first_elem_text}  ${creator_name}\n\n# 校验最后一个元素包含${person1_name}\n${last_elem_text}  GetElemText  [class=card-XseJjh]:eq(-1)\nShould Contain  ${last_elem_text}  ${person1_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${risk_party_name}前三个字",
        "output": "<thought>\n要解决这个问题，我们需要点击 `${risk_party_name}` 的前三个字。假设 `${risk_party_name}` 是一个变量名，我们需要将其前三个字提取出来，然后使用 `Click` 关键字来执行点击操作。由于 `Click` 关键字支持点击指定文本，我们可以通过提取变量的前三个字来实现这一操作。\n</thought>\n\n<code_block>\n# 使用 Python 来提取变量的前三个字\n${first_three_chars}    Evaluate    ${risk_party_name}[0:3]\n\n# 点击提取的前三个字\nClick    ${first_three_chars}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 Add，点击弹窗中的 Cache key，校验页面包含删除后不可恢复，确定删除吗？，取消，确定",
        "output": "<thought>\n首先，我需要使用`Click`关键字点击文本“Add”。接着，使用`Click`关键字点击弹窗中的文本“Cache key”，这需要使用`base=POPUP`来定位。最后，使用`CheckHasText`关键字校验页面中包含“删除后不可恢复”，“确定删除吗？”，“取消”和“确定”这几个文本。\n</thought>\n\n<code_block>\n# 点击Add按钮\nClick | Add\n\n# 点击弹窗中Cache key\nClick | Cache key | base=POPUP\n\n# 校验页面包含删除后的提示文本和操作按钮\nCheckHasText | 删除后不可恢复 | 确定删除吗？ | 取消 | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待一会，如果${approve_type} 为 盖章，获取页面上的“未比对”文案有${unmatched_count}个，然后执行${unmatched_count}+1次下面的操作：\n点击“盖章”按钮后，如果弹窗中出现“其他”字样时则点击“合同页数过多”再点击“确定”按钮，若弹窗中出现“审批意见”的话就点击弹窗中的“盖章”按钮",
        "output": "<thought>\n首先，我们需要等待一段时间, 可以使用Sleep关键字。在检查${approve_type}是否为\"盖章\"时，利用RF的IF语句。如果条件满足，获取页面上\"未比对\"文案的个数，使用GetElemCount关键字。将${unmatched_count}赋值给该值，并通过循环执行${unmatched_count}+1次操作。每次循环中，点击\"盖章\"按钮后，要判断弹窗中是否出现\"其他\"或者\"审批意见\"字样，然后执行相应的操作。可以使用IsAnyTextExisting判断文本存在与否，根据结果点击不同的按钮。\n</thought>\n\n<code_block>\n# 等待一段时间\nSleep  2s\n\n# 如果${approve_type}为盖章\nIF  \"${approve_type}\" == \"盖章\"\n    # 获取页面上“未比对”文案个数\n    ${unmatched_count}  GetElemCount  :contains(未比对)\n    \n    # 计算总次数\n    ${total_count}=  Evaluate  ${unmatched_count} + 1\n    \n    # 执行操作 ${unmatched_count}+1 次\n    FOR  ${index}  IN RANGE  ${total_count}\n        # 点击“盖章”按钮\n        Click  盖章\n        \n        # 判断弹窗是否出现“其他”\n        ${exist_other}  IsAnyTextExisting  其他  base=POPUP\n\n        # 判断弹窗是否出现“审批意见”\n        ${exist_opinion}  IsAnyTextExisting  审批意见  base=POPUP\n        \n        # 如果出现“其他”\n        IF  ${exist_other}\n            # 点击“合同页数过多”\n            Click  合同页数过多  base=POPUP\n\n            # 点击“确定”按钮\n            Click  确定  base=POPUP\n            \n        # 否则如果出现“审批意见”\n        ELSE IF  ${exist_opinion}\n            # 点击弹窗中的“盖章”按钮\n            Click  盖章  base=POPUP\n        END\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面上存在“行业通用”选项",
        "output": "<thought>\n为了判断页面上是否存在“行业通用”选项，可以使用 IsAnyTextExisting 关键字，该关键字用于判断一组文本是否至少有一个存在于页面上。\n</thought>\n\n<code_block>\n# 使用IsAnyTextExisting判断页面上是否存在“行业通用”\n${exist}  IsAnyTextExisting  行业通用\n\n# 如果存在“行业通用”，则打印ok\nIF  ${exist}\n    Log  ok\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class 包含 plus 的 svg",
        "output": "<thought>\n根据场景需求，需要选择一个能够点击特定元素的关键字，这里选择 \"ClickElem\" 是因为它能够接收一个JQuery选择器作为参数。  \n为了选择 class 包含 plus 的 svg，我们需要写一个包含类名的JQuery选择器，然后把这个选择器传给 \"ClickElem\" 关键字。  \n</thought>\n\n<code_block>\n# 点击 class 包含 plus 的 svg\nClickElem | svg[class*='plus']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击客户业务 商机管理",
        "output": "<thought>\n为了完成这个任务，我们需要依次点击“客户业务”和“商机管理”这两个文本。可以使用ClickTextOneByOne关键字来依次点击这些文本。\n</thought>\n\n<code_block>\n# 依次点击客户业务和商机管理\nClickTextOneByOne | 客户业务 | 商机管理\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个“访问主页”的关键字，接受参数 url，默认值为${HOST}，作用为：访问给定的 url",
        "output": "<thought>\n我们需要编写一个自定义关键字，名为“访问主页”，接受一个参数“url”，并设置默认值为${HOST}。通常情况下，通过调用OpenUrl关键字来访问给定的URL。\n</thought>\n\n<code_block>\n*** Keywords ***\n访问主页\n    [Arguments]  ${url}=${HOST}\n    # 访问给定的url\n    OpenUrl  ${url}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 placeholder 带有 请尝试描述目的地 的输入框，输入 自然景点，检查界面出现 推荐内容，且推荐内容列表下，确认有3行内容，其中第一行包含文案：热门",
        "output": "<thought>\n此场景要求在页面的某个输入框(input或textarea)中输入文本，然后检查界面是否出现指定的推荐内容以及推荐列表的行数和特定文本。首先，我们可以使用`FillArea`关键字在`placeholder`属性为\"请尝试描述目的地\"的输入框中输入\"自然景点\"。接下来，我们使用`WaitText`关键字等待页面上出现\"推荐内容\"文本。这可以确保我们在下一步操作前，页面加载出了推荐内容。然后，使用`CheckRowCount`关键字来检查推荐内容列表中是否有3行内容。最后，使用`CheckRowHas`关键字验证第一行是否包含\"热门\"文本。\n</thought>\n\n<code_block>\n# 在占位符为\"请尝试描述目的地\"的输入框中输入\"自然景点\"\nFillArea | [placeholder*=\"请尝试描述目的地\"] | 自然景点\n\n# 等待页面上出现文本\"推荐内容\"\nWaitText | 推荐内容\n\n# 检查推荐内容列表有3行\nCheckRowCount | 3 | tbl=推荐内容\n\n# 确认推荐内容列表的第一行包含\"热门\"\nCheckRowHas | 1 | 热门 | tbl=推荐内容\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击火山引擎基础产品右边列的 + icon ",
        "output": "<thought>\n要在RobotFramework中实现点击\"火山引擎基础产品\"右边列的\"+\"图标的操作，我们需要使用ClickIconToTheDirectionOf关键字。在这里，“火山引擎基础产品”是基准元素，我们需要指定方向为right，目标图标为plus。因此可以直接使用ClickIconToTheDirectionOf来实现。\n</thought>\n\n<code_block>\n# 点击'火山引擎基础产品'右边的'+'图标\nClickIconToTheDirectionOf | 火山引擎基础产品 | right | plus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成一个 100 到 200 之间的数。提示：可以使用python的random模块",
        "output": "<thought>\n使用Python的random模块可以通过Evaluate关键字调用，并生成100到200之间的随机数。\n</thought>\n\n<code_block>\n# 生成100到200之间的随机数\n${random_num}  Evaluate  random.randint(100, 200)  modules=random\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 设置自定义超线程取值范围为 下拉列表中的第一个选项\n # 设置自定义 SNC/NPS 取值范围为 第一个选项",
        "output": "\n    \n<thought>\n 我们需要使用`SelectOptionForField`关键字来选择两个下拉列表的第一个选项。可以通过使用特殊值`OPTIONS_1`来实现这个选择。\n </thought>\n \n <code_block>\n # 设置自定义超线程取值范围为下拉列表中的第一个选项\n SelectOptionForField | 自定义超线程取值范围 | OPTIONS_1\n \n # 设置自定义 SNC/NPS 取值范围为下拉列表中的第一个选项\n SelectOptionForField | 自定义 SNC/NPS 取值范围 | OPTIONS_1\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "若页面有“近7天数据概况”文字，则打印成功",
        "output": "<thought>\n这个任务的目标是检查页面是否存在“近7天数据概况”这个文本，如果存在则打印“成功”。为此，我们可以使用`IsAnyTextExisting`关键字来判断文本是否存在，然后使用IF语句来根据判断结果进行日志输出。\n</thought>\n\n<code_block>\n# 检查页面是否存在“近7天数据概况”文本\n${exist}  IsAnyTextExisting | 近7天数据概况\n\n# 如果存在，则打印成功\nIF  ${exist}\n    Log  成功\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入姓名张三，密码 ${pss}，点击登录，等待页面出现 welcome",
        "output": "<thought>\n在处理这个问题的过程中，我需要做的是，首先，使用SetField关键字输入姓名张三，然后使用变量 ${pss} 输入密码。然后，我需要使用Click关键字点击登录。最后，我需要使用WaitText关键字等待页面出现“welcome”。这四个步骤可以完全满足题目的要求，从而实现自动化测试。\n</thought>\n\n<code_block>\n# 输入姓名张三\nSetField | 姓名 | 张三\n\n# 输入密码 ${pss}\nSetField | 密码 | ${pss}\n\n# 点击登录\nClick | 登录\n\n# 等待页面出现 welcome\nWaitText | welcome\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置关键字“跳转至快速创建页面”，作用如下：\n向搜索关键字中输入：${task_name}，如果存在${task_name}，点击${task_name}，点击表管理，点击快速建表，切换到新窗口，等待页面加载完成，如果页面包含文本：基础信息，打开${数据开发页面}，运行关键字删除未上线任务_V2，否则运行关键字 跳转至快速创建页面",
        "output": "跳转至快速创建页面\n    SetField | 搜索关键字 | ${task_name}\n    ${exist}  IsAnyTextExisting | ${task_name}\n    IF  ${exist}\n        Click | ${task_name}\n        # 依次点击：表管理，快速建表\n        ClickTextOneByOne | 表管理 | 快速建表\n        ToNewWindow\n        WaitLoading\n        ${exist2}  IsAnyTextExisting | 基础信息\n        IF  ${exist2}\n            OpenUrl | ${数据开发页面}\n            删除未上线任务_V2\n        ELSE\n            跳转至快速创建页面\n        END\n    END"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 需求单-需求行 后面的输入框，输入台式机，点击空白处，获取当前页面的截图 校验 包含 EPSPV202005170002",
        "output": "<thought>\n在这个场景中，我们需要点击“需求单-需求行”后的input/textarea元素，然后在其中输入“台式机”。为了找到这个input/textarea，我们可以使用`FindElemToTheDirectionOf`关键字来定位“需求单-需求行”右侧的元素。当我们找到这个元素后，可以使用`FillArea`关键字在这个元素上输入“台式机”。为了确认输入生效，我们可以在点击空白处后使用`Screenshot`来获取当前页面的截图，最后使用`GetPageScreenshotText`获取截图中的文本，并使用`Should Contain`校验文本中包含“EPSPV202005170002”。\n</thought>\n\n<code_block>\n# 查找“需求单-需求行”右侧的input/textarea元素\n${elem}  FindElemToTheDirectionOf | 需求单-需求行 | right | input, textarea\n\n# 在找到的元素中输入“台式机”\nFillArea | ${elem} | 台式机\n\n# 点击空白处以取消输入焦点\nClickWhiteArea\n\n# 获取当前页面的截图\nScreenshot\n\n# 从截图中获取文本信息\n${txt}  GetPageScreenshotText\n\n# 校验截图中包含文本“EPSPV202005170002”\nShould Contain  ${txt}  EPSPV202005170002\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取7天前和今天的日期，以 2022-01-11 格式输出",
        "output": "<thought>\n首先，我们需要使用RobotFramework的标准库关键字来获取当前日期。然后，我们可以使用Add Time To Date关键字将日期减少7天。最后，使用Convert Date关键字以所需格式输出日期。\n</thought>\n\n<code_block>\n# 获取当前日期\n${today}  Get Current Date\n\n# 计算7天前的日期\n${seven_days_ago}  Add Time To Date  ${today}  -7 days\n\n# 以指定格式输出今天的日期\n${formatted_today}  Convert Date  ${today}  result_format=%Y-%m-%d\n\n# 以指定格式输出7天前的日期\n${formatted_seven_days_ago}  Convert Date  ${seven_days_ago}  result_format=%Y-%m-%d\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击送审渠道号输入框，勾选13_juliang_shenhe",
        "output": "\n    \n<thought>\n 首先需要点击送审渠道号的input或textarea，然后勾选名为13_juliang_shenhe的复选框。可以使用ClickElem关键字选择input/textarea元素，并使用CheckBoxOn关键字勾选复选框。\n </thought>\n \n <code_block>\n # 点击送审渠道号的input/textarea\n ClickElem | input[placeholder*='送审渠道号'],textarea[placeholder*='送审渠道号']\n \n # 勾选13_juliang_shenhe复选框\n CheckBoxOn | 13_juliang_shenhe\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量 date 应该能正则匹配到这个格式的字符串：2024-01-02",
        "output": "<thought>\n为了验证变量date是否能与给定的日期字符串正则匹配，我将使用Robot Framework的内建关键字Should Match Regexp。如果不能匹配，此关键字将导致测试失败，并显示错误消息。\n</thought>\n\n<code_block>\n# 使用RobotFramework内建关键字Should Match Regexp做正则表达式匹配校验\nShould Match Regexp  ${date}  \\\\d{4}-\\\\d{2}-\\\\d{2}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为“更多操作”的关键字：\n# 1. 接收参数name, 鼠标放置在name上，然后点击元素ele",
        "output": "<thought>\n要实现“更多操作”关键字，首先需要将鼠标放置在指定的name参数上。接下来，我们需要点击选取好的元素ele。使用的关键字包括MoTo来移动鼠标到指定位置，以及ClickElem来点击元素。name是一个传入的参数，会用MoToField进行鼠标定位。\n</thought>\n\n<code_block>\n*** Keywords ***\n更多操作\n    [Arguments]  ${name}\n    # 移动到name字段\n    MoToField  ${name}\n\n    # 点击元素ele\n    ClickElem  ${ele}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "回到之前打开的页面，点击了解更多，点击不感兴趣,并截图",
        "output": "<thought>\n这个场景需要解决以下几个步骤：首先，我们需要返回到前一个页面，这可以通过使用PageBack关键字来完成。其次，点击\"了解更多\"文本，可以使用Click关键字。然后，点击\"不感兴趣\"文本，同样使用Click关键字。最后，需要截图，可以使用Screenshot关键字来完成。这个过程涉及到页面导航、元素点击和页面截屏的操作。\n</thought>\n\n<code_block>\n# 返回到之前的页面\nPageBack\n\n# 点击了解更多\nClick | 了解更多\n\n# 点击不感兴趣\nClick | 不感兴趣\n\n# 截图\nScreenshot\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送以下请求，从其响应的 json 中取出 TopDataDetails 字段，请求如下：curl 'https://xxx.yyy.zzz.com/api/top/CDN/cn-north-1/2021-03-01/DescribeEdgeStatusCodeRanking' ",
        "output": "<thought>\n要发送HTTP请求，我们可以使用关键字 UiSendRequest。在这里，我们只需要提供请求方法 (GET) 和URL。然后，我们可以使用 GetValuesFromJson 关键字从响应 JSON 中提取 TopDataDetails 字段。\n</thought>\n\n<code_block>\n# 向 https://xxx.yyy.zzz.com/api/top/CDN/cn-north-1/2021-03-01/DescribeEdgeStatusCodeRanking 发送 get 请求\n${resp_json}  UiSendRequest | GET | https://xxx.yyy.zzz.com/api/top/CDN/cn-north-1/2021-03-01/DescribeEdgeStatusCodeRanking\n\n# 从响应 JSON 中获取 TopDataDetails\n${top_data_details}  GetValuesFromJson | ${resp_json} | TopDataDetails\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 列表中第一项的管理，然后调用 创建合同-托管基础 关键字获取合同编号，并将其输入“请输入合同编号搜索”中，回车",
        "output": "<thought>\n首先需要点击列表中第一项的管理，可以通过选择器选择第一项，然后点击其管理。接着调用自定义关键字创建合同-托管基础并获取合同编号。最后，将获取的合同编号输入到“请输入合同编号搜索”字段中，并回车。\n</thought>\n\n<code_block>\n# 点击第一项的管理\nClickTextOfRow | 1 | 管理 | tbl=列表\n\n# 调用创建合同-托管基础关键字，并获取返回的合同编号\n${contract_number}  创建合同-托管基础\n\n# 输入合同编号，并回车\nSetField | 请输入合同编号搜索 | ${contract_number} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "去除 ${COOKIES_decrypt} 变量末尾的 ‘\\t’，然后再检查，如果末尾不是 ';' 就追加一个 ';'",
        "output": "<thought>\n首先，我们需要去除变量 ${COOKIES_decrypt} 末尾的制表符 '\\t'。这可以用 Python 的 rstrip 方法实现。然后，我们需要检查变量是否以 ';' 结尾，如果不是则添加一个 ';'。对于变更后的字符串检查，可以使用 Robot Framework 的内置 IF 语法。最终，我们会使用 Set Variable 来更新 ${COOKIES_decrypt}。\n</thought>\n\n<code_block>\n# 去除 ${COOKIES_decrypt} 变量末尾的 '\\t'，并更新变量\n${COOKIES_decrypt}  Evaluate  ${COOKIES_decrypt}.rstrip('\\t')\n\n# 检查是否以 ';' 结尾，不是则追加 ';'\nIF  '${COOKIES_decrypt}'[-1] != ';'\n    ${COOKIES_decrypt}  Evaluate  '${COOKIES_decrypt}' + \";\"\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “关闭浏览器” 的关键字，作用是先校验页面无错误信息，然后再关闭浏览器",
        "output": "<thought>\n对于关闭浏览器前的操作，我们需要确保页面上没有错误信息。可以通过使用CheckErrMsg关键字来检测是否存在异常提示信息。如果页面没有错误信息，我们就可以使用CloseBrowser关键字安全地关闭浏览器。\n</thought>\n\n<code_block>\n*** Keywords ***\n关闭浏览器\n    # 校验页面是否有错误信息\n    CheckErrMsg\n    # 关闭浏览器\n    CloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 class=c-m-cform-section 且文案包括 乙方 的区域中的 乙方主体名称 为 北京开心麻花娱乐文化传媒股份有限公司",
        "output": "<thought>\n1. 首先需要定位到包含\"乙方\"文本且class为\"c-m-cform-section\"的区域\n2. 然后在该区域内设置\"乙方主体名称\"字段的值为指定公司名称\n3. 可以使用FindElem定位区域，然后使用SetField在该区域内设置字段值\n4. 由于要在特定区域内操作字段，需要使用base参数指定基准元素\n</thought>\n\n<code_block>\n# 定位包含\"乙方\"的c-m-cform-section区域\n${section}  FindElem  [class=c-m-cform-section]:contains(乙方)\n\n# 在该区域内设置乙方主体名称字段\nSetField  乙方主体名称  北京开心麻花娱乐文化传媒股份有限公司  base=${section}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面包含：提交成功",
        "output": "<thought>\n通过使用 CheckHasText 关键字来检查页面上是否包含 \"提交成功\" 的文本。\n</thought>\n\n<code_block>\n# 检查页面包含提交成功\nCheckHasText | 提交成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找第 3 个表格中的 小夜曲 这一行中的文案为删除的 button 元素",
        "output": "<thought>\n为了查找第三个表格中特定行的元素，首先要锁定表格范围，然后在此范围内对行进行识别。对于表格中指定的行，使用参数 row_name_or_id 来定义“表格行中的文本或行号”，这是直接识别行的方式。然后需要选择行内特定的元素，这是通过 FindElemOfRow 实现的。为了捕获特定的 `button` 元素，需要使用 jquery selector 定位其属性为 `删除` 的 `button`。由于需要处理第三个表格，因此需要为 `tbl` 参数指定为 `3`。\n</thought>\n\n<code_block>\n# 查找第三个表格中小夜曲所在行的文案为删除的button元素\n${elem}  FindElemOfRow | 小夜曲 | button:contains(删除) | tbl=3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查 class*=iaas-ecs-arco-table-tr 的元素只有两个",
        "output": "<thought>\n为了检查 class*=iaas-ecs-arco-table-tr 的元素是否有两个，我们需要使用 GetElemCount 关键字获取这些元素的数量，然后使用 Should Be Equal As Strings 关键字进行验证。\n</thought>\n\n<code_block>\n# 获取 class*=iaas-ecs-arco-table-tr 的元素个数\n${cnt}  GetElemCount  [class*=iaas-ecs-arco-table-tr]\n\n# 校验元素个数是否为2\nShould Be Equal As Strings  ${cnt}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到先前的窗口，点击class没有arco-link-disabled的“详情”，校验页面url包含id=",
        "output": "<thought>\n首先，我们需要切换回先前的窗口。然后，使用`ClickElem`关键字来点击class不包含`arco-link-disabled`的“详情”。最后，通过`WaitURLContainsAny`关键字来校验页面的URL是否包含`id=`。\n</thought>\n\n<code_block>\n# 切换到先前的窗口\nToPrevWindow\n\n# 点击class没有arco-link-disabled的“详情”\nClickElem | :not([class*=arco-link-disabled]):contains(详情)\n\n# 校验页面url包含id=\nWaitURLContainsAny | id=\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class 为 cloud-ti-fe-space-item 中的添加域名",
        "output": "<thought>\n为了实现点击 class 为 cloud-ti-fe-space-item 中的‘添加域名’按钮，我们可以使用 Click 关键字。根据问题描述，我们需要指定 base 参数，来选择特定的 class 选择器中的元素。在这种情况下，应该使用 base 来指定选择 class 为 cloud-ti-fe-space-item 的容器元素，然后在这个范围内点击文本‘添加域名’。\n</thought>\n\n<code_block>\n# 点击 class 为 cloud-ti-fe-space-item 中的 ‘添加域名’元素\nClick | 添加域名 | base=[class=cloud-ti-fe-space-item]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹窗中的策略ID为一个长度为7位数的int，策略说明为：我是一个描述",
        "output": "<thought>\n设置弹窗中的元素值，可以使用关键字\"SetField\"来完成，\"策略ID\"设置为随机的长度为7位的整数，这个可以通过Evaluate执行Python代码来实现，\"策略说明\"则直接设置为\"我是一个描述\"。\"base=POPUP\"表示操作的是在弹窗中的字段。\n</thought>\n\n<code_block>\n# 生成一个长度为7位数的int\n${random_int} =  Evaluate  random.randint(1000000, 9999999)  modules=random\n\n# 设置策略ID为随机生成的7位整数\nSetField | 策略ID | ${random_int} | base=POPUP\n\n# 设置策略说明为：我是一个描述\nSetField | 策略说明 | 我是一个描述 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面底部保存草稿右侧的预览，等待一会，然后堂食外带约定设置为 ‘仅堂食’， 将 其他规则 移动到视野内，然后将其他规则设置为：‘可与店内其他优惠同享 可以使用包间’",
        "output": "<thought>\n我们需要依次完成以下操作：\n\n1. 点击“保存草稿”右侧的“预览”按钮。\n2. 等待一段时间。\n3. 设置“堂食外带约定”为“仅堂食”。\n4. 将“其他规则”元素移动到视野内。\n5. 设置“其他规则”为指定的内容。\n\n可以使用以下关键字：\n- `ClickTextToTheDirectionOf` 用于点击“保存草稿”右侧的“预览”。\n- `Sleep` 用于等待。\n- `SetField` 来设置“堂食外带约定”和“其他规则”。\n- `MoveIntoView` 用于将“其他规则”移动到视野内。\n</thought>\n\n<code_block>\n# 点击保存草稿右侧的预览\nClickTextToTheDirectionOf | 保存草稿 | right | 预览\n\n# 等待一段时间\nSleep | 2s\n\n# 设置堂食外带约定为仅堂食\nSetField | 堂食外带约定 | 仅堂食\n\n# 将其他规则移动到视野内\nMoveIntoView | :contains(其他规则)\n\n# 设置其他规则为可与店内其他优惠同享 可以使用包间\nSetField | 其他规则 | 可与店内其他优惠同享 可以使用包间\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "让某个文本出现在视野中",
        "output": "<thought>\n将某个元素或文本移动到视野中，可以使用MoveIntoView关键字。这个关键字接受一个基于jQuery的选择器作为参数，将该元素移动到视野中。\n\n首先，我们需要确定要移动到视野中的具体元素，这里我们假设使用文本“操作日志”作为案例。可以通过jQuery选择器`:contains(操作日志)`来选择包含“操作日志”文本的元素。然后使用MoveIntoView关键字将它移动到视野中。\n\n需要注意的是，选择器应唯一且准确地指向目标元素，以避免移动其他不相关的元素。\n</thought>\n\n<code_block>\n# 将文本“操作日志”移动到视野中\nMoveIntoView | :contains(操作日志)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击创建实例\n设置计费类型为：包年包月\n向地域及可用区中输入多个值：华北2、可用区A",
        "output": "<thought>\n场景需要进行以下操作：1) 点击“创建实例”按钮；2) 设置计费类型为“包年包月”；3) 在“地域及可用区”下输入多个值“华北2”和“可用区A”。我会选择使用`Click`关键字来点击按钮，以及`SetField`关键字来设置字段值。\n</thought>\n\n<code_block>\n# 点击创建实例按钮\nClick | 创建实例\n\n# 设置计费类型为：包年包月\nSetField | 计费类型 | 包年包月\n\n# 针对“地域及可用区”设置多个值\nSetField | 地域及可用区 | 华北2 | 可用区A\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左侧菜单中的共享钱包，点击可共享账户tab，弹窗中如果存在立即体验按钮，就把这个弹窗关闭掉",
        "output": "<thought>\n首先需要通过ClickMenu关键字点击左侧菜单中的“共享钱包”，然后通过Click关键字点击“可共享账户”标签页。在弹窗中，我们需要检查“立即体验”按钮是否存在，如果存在则通过ClickIconToTheDirectionOf关键字点击关闭按钮将其关闭。\n</thought>\n\n<code_block>\n# 点击左侧菜单中的共享钱包\nClickMenu 共享钱包\n\n# 点击可共享账户tab\nClick 可共享账户\n\n# 判断弹窗中“立即体验”按钮是否存在\n${exist} IsAnyTextExisting | 立即体验 | base=POPUP | timeout=3\nIF ${exist}\n    # 如果存在立即体验按钮，点击弹窗右上方的关闭图标\n    ClickIconToTheDirectionOf | 立即体验 | topRight | close | base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为‘设置HTTPS证书配置’的关键字，接受参数：状态，证书来源，配置模式，服务端证书，其中 证书来源，配置模式 默认为 ${EMPTY}逻辑如下：\n# 1. 将 证书配置 的状态设置为：状态\n2. 将 证书来源，配置模式 分别设置为：证书来源，配置模式\n# 2. 将服务端证书 设置为：将服务端证书",
        "output": "<thought>\n我们需要创建一个关键字‘设置HTTPS证书配置’，它接受四个参数。首先，我们将使用SetField关键字设置‘证书配置’的状态。接下来，使用BatchSetFields关键字批量设置‘证书来源’和‘配置模式’。最后，再次使用SetField关键字设置‘服务端证书’。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置HTTPS证书配置\n    [Arguments]  ${状态}  ${证书来源}=${EMPTY}  ${配置模式}=${EMPTY}  ${服务端证书}\n    \n    # 设置证书配置的状态\n    SetField  证书配置  ${状态}\n    \n    # 设置证书来源和配置模式\n    BatchSetFields  证书来源=${证书来源}  配置模式=${配置模式}\n    \n    # 设置服务端证书\n    SetField  服务端证书  ${服务端证书}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向下滑动到__current_id=\"Grid 布局_4\"展示在页面内",
        "output": "<thought>\n为使元素__current_id=\"Grid 布局_4\"可见，需要将其滚动到视野内。可以使用MoveIntoView关键字。需构建正确的jquery选择器以定位该元素。\n</thought>\n\n<code_block>\n# 将元素__current_id=\"Grid 布局_4\"移动到视野内\nMoveIntoView | [__current_id=\"Grid 布局_4\"]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表头“属性名称”列里的checkbox",
        "output": "<thought>\n我们需要点击表头中“属性名称”列里的checkbox。可以使用ClickElem关键字，选择th标签包含“属性名称”的元素，再选择其内的input[type='checkbox']元素。\n</thought>\n\n<code_block>\n# 点击表头“属性名称”列里的checkbox\nClickElem | th:contains(属性名称) input[type='checkbox']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到文本：防抖，然后双击",
        "output": "<thought>\n首先需要使用MoTo关键字移动到文本“防抖”，随后使用DClick关键字进行双击操作。\n</thought>\n\n<code_block>\n# 移动到文本“防抖”\nMoTo | 防抖\n\n# 双击文本“防抖”\nDClick | 防抖\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击前 30 名,前 10 名,自定义,前 50 名,前 100 名",
        "output": "<thought>\n根据提供的关键字列表，我们可以使用ClickTextOneByOne关键字来依次点击给定的多个文本。该关键字适合用于依次点击一组文本，并且可以指定基准元素，但在此场景中不需要指定基准元素。为此场景，可以直接将这些文本作为参数传递给ClickTextOneByOne关键字。\n</thought>\n\n<code_block>\n# 依次点击前 30 名,前 10 名,自定义,前 50 名,前 100 名\nClickTextOneByOne | 前 30 名 | 前 10 名 | 自定义 | 前 50 名 | 前 100 名\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "1. 打开谷歌浏览器，Local Storage注入变量SWITCH_ROLE_VERSION_STORAGE=100，并使用cookies=${ZZR_SSO_COOKIES}访问 ${APP_SIGNIN_PAGE}  2. 等待页面加载完成",
        "output": "<thought>\n首先，我们需要使用`OpenBrowser`关键字打开谷歌浏览器，并设置Local Storage中的`SWITCH_ROLE_VERSION_STORAGE`变量为100。然后使用cookies访问指定的登录页面`${APP_SIGNIN_PAGE}`。之后，我们需要等待页面加载完成，可以使用`WaitLoading`关键字来实现。\n</thought>\n\n<code_block>\n# 打开谷歌浏览器并访问登录页面，同时注入cookies\nOpenBrowser | ${APP_SIGNIN_PAGE} | cookies=${ZZR_SSO_COOKIES} | name=chrome\n\n# 设置Local Storage变量\nLocalStorageSetItem | SWITCH_ROLE_VERSION_STORAGE | 100\n\n# 等待页面加载完成\nWaitLoading | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 付费方式 下面的 第二个 请选择，再点击 预付费",
        "output": "<thought>\n1. 首先需要定位\"付费方式\"下方的第二个\"请选择\"元素\n   - 可以使用ClickTextToTheDirectionOf关键字，以\"付费方式\"为基准，方向为bottom\n   - 目标文本是\"请选择\"，idx=1表示第二个(因为idx从0开始)\n2. 然后需要点击\"预付费\"选项\n   - 可以直接使用Click关键字点击文本\"预付费\"\n   - 或者如果是在下拉框中，可能需要使用SelectOption关键字\n   - 根据提示，这里应该是点击操作\n</thought>\n\n<code_block>\n# 点击付费方式下方的第二个\"请选择\"\nClickTextToTheDirectionOf | 付费方式 | bottom | 请选择 | idx=1\n\n# 点击预付费选项\nClick | 预付费\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量 resp 是个 JSON，如果 resp 的 data 字段，长度为 1 就取出其中的 dashboard_id 字段，否则就抛出异常",
        "output": "<thought>\n首先，我需要从 JSON 对象 `resp` 中获取 `data` 字段的值，然后判断其长度。如果长度为 1，就获取 `dashboard_id` 字段的值，否则抛出异常。为了实现这个逻辑，我会使用 `GetValuesFromJson` 获取值，用 `Evaluate` 判断列表长度，以及抛出异常。\n</thought>\n\n<code_block>\n# 从 resp 中获取 data 字段的值\n${data}  GetValuesFromJson  |  ${resp}  |  data\n\n# 获取 data 的长度\n${data_len}  Evaluate  len(${data})\n\n# 判断 data 的长度\nIF  \"${data_len}\" == \"1\"\n    # 获取 dashboard_id 字段的值\n    ${dashboard_id}  GetValuesFromJson  |  ${data}[0]  |  dashboard_id\nELSE\n    # 抛出异常\n    Fail  Data length is not 1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面包含 发送飞书通知 就点击发送按钮 否则点击完成按钮",
        "output": "<thought>\n首先，使用`IsAnyTextExisting`关键字检查页面是否包含“发送飞书通知”。然后通过IF/ELSE结构来判断：如果存在，就点击“发送”按钮；如果不存在，就点击“完成”按钮。\n</thought>\n\n<code_block>\n# 判断页面是否存在“发送飞书通知”\n${exist}  IsAnyTextExisting | 发送飞书通知\n\n# 如果存在“发送飞书通知”，点击“发送”按钮，否则点击“完成”按钮\nIF  $exist\n    Click  发送\nELSE\n    Click  完成\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格第一列包含老用户",
        "output": "<thought>\n我们需要校验表格的第一列中包含“老用户”这个文本。可以使用关键字CheckColHas来验证特定文本是否存在于指定列。表格列是从1开始计数，因此第一列的列号是1。\n</thought>\n\n<code_block>\n# 校验表格第一列包含“老用户”\nCheckColHas | 1 | 老用户\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击收藏",
        "output": "<thought>\n需要通过给定的关键字来点击页面上的“收藏”文本。可以直接使用Click关键字来实现。\n</thought>\n\n<code_block>\n# 点击“收藏”文本\nClick | 收藏\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到当前页面中图片所在区域进行截图对比，并存储为image1",
        "output": "<thought>\n1. 首先需要定位页面中的图片区域，可以使用FindElem关键字配合jQuery选择器来查找图片元素\n2. 图片元素通常使用img标签，所以选择器可以是\"img\"\n3. 找到图片元素后，使用ImageDiff关键字进行截图对比\n4. 需要指定存储的图片名称为image1\n5. 如果页面有多个图片，需要确定是第一个图片还是所有图片，这里假设是对第一个图片进行操作\n</thought>\n\n<code_block>\n# 查找页面中的第一个图片元素\n${image_elem}  FindElem  img:eq(0)\n\n# 对找到的图片元素进行截图对比并存储为image1\nImageDiff  ${image_elem}  pic_name=image1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "去掉 某个字符串变量a中的以下字符 , ¥ ",
        "output": "<thought>\n要去掉字符串变量中的特定字符，可以使用Evaluate关键字来执行Python代码，因为Robot Framework没有直接提供字符串替换的关键字。Python的replace方法可以用于替换字符串中的特定字符。\n</thought>\n\n<code_block>\n# 使用Python代码去掉字符串中的 逗号 和 ¥ 符号\n${result}  Evaluate  ${a}.replace(',', '').replace('¥', '')\n\n# 打印结果\nLog  ${result}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击新建\n城市字段输入广州，点击第一个选项\n楼宇字段输入广州，点击第一个选项\n办公室字段输入“办公室 1”\n点击提交\n提交完成后检查列表数据的第一行中，城市是否为广州市，地点是否为“办公室 1”",
        "output": "<thought>\n点击新建，选择城市和楼宇。填写办公室字段，并点击提交。检查列表数据是否与预期一致。通过以下关键字完成任务：Click, SetField, ClickElem, CheckCellHas。\n</thought>\n\n<code_block>\n# 点击新建\nClick | 新建\n\n# 输入城市广州并选择第一个选项\nSetField | 城市 | 广州\n\n# 输入楼宇广州并选择第一个选项\nSetField | 楼宇 | 广州\n\n# 输入办公室名称\nSetField | 办公室 | 办公室 1\n\n# 点击提交\nClick | 提交\n\n# 检查提交后表格第一行的数据\nCheckCellHas | 1 | 城市 | 广州市\nCheckCellHas | 1 | 地点 | 办公室 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含${contract_list}或者class包含${contract_list_button} 中的 复制按钮",
        "output": "<thought>\n在给定的场景中，我们需要点击 \"复制\" 按钮，该按钮位于 class 属性包含 `${contract_list}` 或者 `${contract_list_button}` 的元素中。根据关键字说明，我们可以使用 `ClickElem` 关键字，通过构造合适的 jQuery 选择器来实现这个需求。\n\n首先，我们需要设计一个符合条件的选择器。`[class*=${contract_list}]` 和 `[class*=${contract_list_button}]` 是我们根据 class 属性选择元素的方式。为了选择 \"复制\" 按钮，我们可以进一步缩小选择范围，假设 \"复制\" 按钮是这些元素中的一部分（例如一个包含 \"复制\" 文本的按钮），可以构造选择器 `button:contains(复制)` 来定位具体的按钮。\n\n因此，选择器可以构造为 `[class*=${contract_list}] button:contains(复制), [class*=${contract_list_button}] button:contains(复制)`。接下来，我们使用 `ClickElem` 来点击获得的第一个符合条件的元素。\n</thought>\n\n<code_block>\n# 点击 class 包含 ${contract_list} 或 ${contract_list_button} 中的 \"复制\" 按钮\nClickElem | [class*=${contract_list}] button:contains(复制), [class*=${contract_list_button}] button:contains(复制)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 首次响应时长 字段下的值，是否包含 ${hms}",
        "output": "<thought>\n为了解决这个问题，我需要使用 `GetFieldVal` 关键字获取 `首次响应时长` 字段的值。然后使用 `Should Contain` 来校验该值是否包含 `${hms}`。首先，获取字段值，再进行包含校验。\n</thought>\n\n<code_block>\n# 获取首次响应时长字段的值\n${response_time}  GetFieldVal  首次响应时长\n\n# 校验字段值是否包含${hms}\nShould Contain  ${response_time}  ${hms}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 MAIN_PAGE 中包含 ‘maat’ 就打印 111，否则打印 222",
        "output": "<thought>\n如果“MAIN_PAGE”变量中包含“maat”，则需要打印“111”，否则打印“222”。为了实现这个操作，我们可以使用Robot Framework的内置关键字`Should Contain`来检查“MAIN_PAGE”是否包含“maat”。然后，我们可以使用if...else条件来根据结果打印不同的文本。我们也需要确保在开始前“MAIN_PAGE”变量存在。\n</thought>\n\n<code_block>\n# 首先判断MAIN_PAGE变量是否存在\n${exist}  IsVarExisting | MAIN_PAGE\nIF  $exist\n    # 如果存在，则检查是否包含‘maat’\n    ${status}  Should Contain  ${MAIN_PAGE}  maat\n    IF  ${status}\n        # 如果包含‘maat’，则打印111\n        Log  111\n    ELSE\n        # 如果不包含‘maat’，则打印222\n        Log  222\n    END\nELSE\n    # 如果MAIN_PAGE变量不存在，则打印错误信息\n    Fail  Variable MAIN_PAGE does not exist.\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取实验名称的值",
        "output": "<thought>\n我们需要获取字段名为“实验名称”的值。可以使用 `GetFieldVal` 关键字传入字段名以获取其对应控件的值。\n</thought>\n\n<code_block>\n# 获取字段“实验名称”的值\n${experiment_name}  GetFieldVal  实验名称\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面显示删除，点击删除，点击确定，直到页面不显示删除。提示：为避免无限循环，最多循环20次",
        "output": "<thought>\n首先，我需要判断页面上是否存在“删除”文本。如果存在，则点击“删除”，然后点击“确定”。这个过程需要循环执行，直到页面上不再显示“删除”文本。为了避免无限循环，我会设置一个最大循环次数20次。每次循环后再次检查页面是否还有“删除”文本，如果没有，则退出循环。\n</thought>\n\n<code_block>\n# 初始化循环次数\n${max_loops}  Set Variable  20\n${loop_count}  Set Variable  0\n\n# 循环点击删除和确定，直到页面不显示删除或达到最大循环次数\nWHILE  ${loop_count} < ${max_loops}\n    ${exist}  IsAnyTextExisting  删除\n    IF  ${exist}\n        Click  删除\n        Click  确定\n        ${loop_count}  Set Variable  ${loop_count + 1}\n    ELSE\n        BREAK\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 attrition_flag 拖拽到 ‘请拖入值填充列字段’ 中",
        "output": "<thought>\n首先，我们需要使用`DAndD`关键字来实现拖拽操作。我们需要选择源元素`attrition_flag`和目标元素`请拖入值填充列字段`。可以直接使用文本来标识这些元素，因为题目中没有指出他们通过特定的选择器表示。\n</thought>\n\n<code_block>\n# 将 attrition_flag 拖拽到 ‘请拖入值填充列字段’\nDAndD | attrition_flag | 请拖入值填充列字段\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将当前页面设置基准图",
        "output": "<thought>\n设置当前页面为基准图，我们可以使用ImageDiff关键字来实现，selector为空，默认为全屏截图。\n</thought>\n\n<code_block>\n# 设置当前页面为基准图\nImageDiff\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将PHONE_NUM填入手机号码",
        "output": "<thought>\n在这个场景中，我们需要将变量`${PHONE_NUM}`中的值输入到一个名为手机号码的字段中。可以直接使用`SetField`关键字，该关键字用于将值输入到指定的页面字段中。变量`${PHONE_NUM}`会自动解析为其值，因此可以直接使用。\n</thought>\n\n<code_block>\n# 将变量${PHONE_NUM}的值输入到手机号码字段\nSetField | 手机号码 | ${PHONE_NUM}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取class=commentItem-jrXo5p区域的值",
        "output": "<thought>\n为了获取指定区域的值，我需要选择适当的关键字来定位元素，然后获取其文本或属性值。根据提示信息，目标元素通过class名称指定，可能包含多个元素。所以我应该使用FindElem来定位元素，然后使用GetElemText来获取文本值。\n</thought>\n\n<code_block>\n# 查找class=commentItem-jrXo5p的元素\n${elem}  FindElem | [class=commentItem-jrXo5p]\n\n# 获取找到元素的文本值\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${assert_list} 为空，打印log为空，否则打印列表的长度，并将列表最后一个写到文件 last.item 中",
        "output": "<thought>\n为了判断 ${assert_list} 是否为空，我们需要使用 IF 条件语句。如果不为空，则获取列表长度并打印，同时将最后一个元素写入文件。Robot Framework 的 IF 语句允许在 ELSE 块中执行不同的操作，因此我们可以利用这一点来实现逻辑分支。我们可以通过获取列表的长度来判断，并用BuiltIn库的关键字来记录日志和写入文件。\n</thought>\n\n<code_block>\n# 判断 ${assert_list} 是否为空列表\nIF  ${assert_list} == []\n    # 列表为空，打印日志\n    Log  为空\nELSE\n    # 列表不为空，获取其长度并打印\n    ${length}=  Get Length  ${assert_list}\n    Log  列表的长度为: ${length}\n\n    # 获取列表的最后一个元素\n    ${last_item}=  Evaluate  ${assert_list}[-1]\n    \n    # 将最后一个元素写入文件\n    Create File  last.item  ${last_item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面元素加载完毕，点击按钮 SLA自动化，过期时间输入1000，点击 Inquiry，子域名 选择 应用，将 影响区域 设置为：中国大陆地区，TLS 版本设置 取消勾选 TLS v1.0，配置确认弹窗点击确认",
        "output": "<thought>\n该问题要求等待页面元素加载完成后，执行一系列操作。首先，使用 `WaitLoading` 等待页面加载完成。接着，点击 \"SLA自动化\" 按钮，使用 `Click` 关键字。然后在过期时间输入框中输入 \"1000\"，可以用 `SetField` 实现。点击 \"Inquiry\" 按钮，使用 `Click` 关键字。接下来，使用 `SelectOptionForField` 设置子域名为 \"应用\"。继续使用 `SetField` 选择影响区域为 \"中国大陆地区\"。最后，取消勾选 \"TLS v1.0\" 并点击弹窗中的确认。分别使用 `CheckBoxOff` 和 `Click` 关键字。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 点击SLA自动化按钮\nClick | SLA自动化\n\n# 输入过期时间1000\nSetField | 过期时间 | 1000\n\n# 点击Inquiry按钮\nClick | Inquiry\n\n# 子域名选择应用\nSelectOptionForField | 子域名 | 应用\n\n# 将影响区域设置为：中国大陆地区\nSetField | 影响区域 | 中国大陆地区\n\n# 取消勾选 TLS v1.0\nCheckBoxOff | TLS v1.0\n\n# 配置确认弹窗点击确认\nClick | 确认 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "使用 ${session} 登录飞书",
        "output": "<thought>\n首先根据题目给出的关键字，我们可以知道要使用`LoginFeiShu`关键字并传入`session`参数。这是为了能够登录飞书，然后我们可以进行后续的测试工作。\n</thought>\n\n<code_block>\n# 使用给定的 session 参数登录飞书\nLoginFeiShu | ${session} \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选 弹窗中 PoP rate，点击 弹窗中 Amount paid 并 选择“Amount due”，校验存在 “Amount paid is empty”",
        "output": "<thought>\n这个场景涉及操作一个弹窗。首先，我将使用`CheckBoxOn`关键字来勾选弹窗中的“PoP rate”复选框。接下来，我需要点击弹窗中的“Amount paid”，为此可以使用`Click`关键字，base设置为`POPUP`表示弹窗。然后，选择“Amount due”选项，我将使用`SelectOption`关键字来实现。最后，使用`CheckHasText`关键字校验页面是否包含“Amount paid is empty”文本。需要注意的是，由于这些操作发生在弹窗中，因此大部分关键字会使用`base=POPUP`。\n</thought>\n\n<code_block>\n# 勾选弹窗中的“PoP rate”复选框\nCheckBoxOn | PoP rate | base=POPUP\n\n# 点击弹窗中的“Amount paid”\nClick | Amount paid | base=POPUP\n\n# 选择“Amount due”选项\nSelectOption | Amount due\n\n# 校验页面是否包含“Amount paid is empty”文本\nCheckHasText | Amount paid is empty\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击绑核（CpuPin)右侧的是按钮",
        "output": "\n    \n<thought>\n 根据描述，需要点击“绑核（CpuPin)”右侧的按钮。可以使用ClickElemToTheDirectionOf关键字，选择direction为right，selector选择按钮元素。\n </thought>\n \n <code_block>\n # 点击 “绑核（CpuPin)” 右侧的按钮\n ClickElemToTheDirectionOf | 绑核（CpuPin) | right | button\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找div元素，class为xyz，内容包含“所属指标分组”",
        "output": "<thought>\n这个任务需要查找div元素，需要满足两个条件，class为xyz和内容包含“所属指标分组”。通过阅读RF关键字说明，可以发现关键字FindElem符合要求，它可以查找jquery选择器表示的元素。这里的jquery选择器可以写成\"div[class=xyz]:contains('所属指标分组')\"，其中div表示HTML中的div元素，[class=xyz]表示class为xyz，:contains('所属指标分组')表示内容包含\"所属指标分组\"。\n</thought>\n\n<code_block>\n# 查找class为xyz，内容包含“所属指标分组”的div元素\n${elem}  FindElem | div[class=xyz]:contains('所属指标分组')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "为第一个 th 元素添加属性 'data-xxxx', 属性值为：‘xxxx’",
        "output": "<thought>\n首先需要找到第一个`th`元素，然后使用RF内置的关键字或执行JS代码来添加指定的属性和值。这里可以使用`FindElem`来定位第一个`th`元素，之后使用`Execute Javascript`来添加属性。\n</thought>\n\n<code_block>\n# 定位第一个th元素\n${first_th}  FindElem  th:eq(0)\n\n# 给定位的th元素添加属性'data-xxxx'，属性值为'xxxx'\nExecute Javascript  document.querySelector('th:eq(0)').setAttribute('data-xxxx', 'xxxx')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“登录火山引擎” 的关键字，接受 user, password, sub_user 参数，逻辑是：\n1. 打开浏览器访问：https://console.volcengine.com/ \n2. 点击 ‘子用户登录’\n3. 然后在 主账号、子账号、密码中分别输入：user, sub_user, password\n4. 最后点击 ‘立即登录’，并等页面url不再包含 login",
        "output": "<thought>\n要实现“登录火山引擎”的自动化脚本，需要按照以下步骤操作：\n1. 使用 `OpenBrowser` 关键字打开指定 URL。\n2. 使用 `Click` 关键字点击 “子用户登录”。\n3. 使用 `BatchSetFields` 关键字在 “主账号”、“子账号”和“密码”字段中填入对应的参数值。\n4. 使用 `Click` 关键字点击 “立即登录”。\n5. 使用 `WaitURLNotContains` 关键字等待页面 URL 不再包含 “login”。\n\n接下来，我们将根据上述思路编写代码。\n</thought>\n\n<code_block>\n*** Keywords ***\n登录火山引擎\n    [Arguments]    ${user}    ${password}    ${sub_user}\n    \n    # 打开浏览器并访问火山引擎控制台\n    OpenBrowser    https://console.volcengine.com/\n    \n    # 点击子用户登录按钮\n    Click    子用户登录\n    \n    # 输入主账号、子账号和密码\n    BatchSetFields    主账号=${user}    子账号=${sub_user}    密码=${password}\n    \n    # 点击立即登录按钮\n    Click    立即登录\n    \n    # 等待页面URL不再包含login\n    WaitURLNotContains    login\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面包含文本严格匹配‘视频’的元素",
        "output": "<thought>\n为了解决这个问题，需要使用提供的关键字来找到页面中包含文本“视频”的元素。考虑到要求严格匹配文本“视频”，应该使用FindByText关键字，并设置strict=True参数。\n</thought>\n\n<code_block>\n# 查找文本为'视频'的元素，严格匹配\n${elem}  FindByText | 视频 | strict=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 输入关键词 处填写 输出 ，并回车",
        "output": "<thought>\n在这个场景中，我们需要在“输入关键词”这个字段中填写“输出”并回车。为了实现这个操作，可以使用`SetField`关键字，`enter=True`来确保输入后按下回车键。\n</thought>\n\n<code_block>\n# 在“输入关键词”字段中填写“输出”并回车\nSetField | 输入关键词 | 输出 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中 Post-tax amount，选择 Amount after discount 选项，等待10s，点击第一个tag为img的元素，点击 提交",
        "output": "<thought>\n首先需要点击弹窗中的\"Post-tax amount\"，根据描述应使用`Click`关键字并指定`base=POPUP`。接着选择 \"Amount after discount\" 选项，可以使用`SelectOption`关键字。然后等待10秒，使用`Sleep`关键字。再点击第一个tag为img的元素，可以使用`ClickElem`结合jquery选择器`:eq(0)`。最后点击\"提交\"，使用`Click`关键字。\n</thought>\n\n<code_block>\n# 点击弹窗中的Post-tax amount\nClick | Post-tax amount | base=POPUP\n\n# 选择Amount after discount选项\nSelectOption | Amount after discount\n\n# 等待10秒\nSleep | 10s\n\n# 点击第一个tag为img的元素\nClickElem | img:eq(0)\n\n# 点击提交\nClick | 提交\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击信息模版菜单，随后点击创建模版，输入模版名称：自动化测试，然后生成一年后的年/月/日，输入模版过期时间，鼠标移动确定创建按钮上，双击它，弹出提示后，点击确定",
        "output": "<thought>\n首先，使用ClickMenu关键字点击“信息模版”菜单。然后，使用Click关键字点击“创建模版”按钮。接下来，使用SetField关键字在“模版名称”字段中输入“自动化测试”。利用Get Current Date和Add Time To Date来生成一年后的日期，并使用SetField输入该日期到“模版过期时间”字段。随后，使用MoToElem关键字将鼠标移动到“确定创建”按钮上，并使用DClick双击该按钮。最后，使用Click关键字，基于弹出提示框中的“确定”按钮操控。\n</thought>\n\n<code_block>\n# 点击信息模版菜单\nClickMenu | 信息模版\n\n# 点击创建模版\nClick | 创建模版\n\n# 输入模版名称为“自动化测试”\nSetField | 模版名称 | 自动化测试\n\n# 获取当前日期\n${current_date}  Get Current Date\n\n# 计算一年后的日期\n${next_year_date}  Add Time To Date | ${current_date} | 1 year | result_format=%Y/%m/%d\n\n# 填写模版过期时间\nSetField | 模版过期时间 | ${next_year_date}\n\n# 移动鼠标到“确定创建”按钮上\nMoToElem | button:contains(确定创建)\n\n# 双击“确定创建”按钮\nDClick | button:contains(确定创建)\n\n# 弹出提示后点击确定\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${访问区域} 不为空，则 勾选 ${访问区域}，如果为空 就执行访问区域",
        "output": "<thought>\n根据给出的场景，如果变量 ${访问区域} 不为空，我们需要勾选与该变量名相同的复选框；否则，执行访问区域相关操作。勾选复选框可以使用 CheckBoxOn 关键字。通过判断 ${访问区域} 是否为空，可以使用 Robot Framework 的 IF/ELSE 语法。\n</thought>\n\n<code_block>\n# 如果 ${访问区域} 不为空，则 勾选 ${访问区域}，如果为空 就执行访问区域\nIF  \"${访问区域}\" != \"\"\n    CheckBoxOn  ${访问区域}\nELSE\n    # 执行访问区域的相关操作，假设存在一个名为 ‘访问区域’ 的关键字\n    访问区域\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新弹出的标签页，为推送时间设置两个参数每日和00:00，最后点击与订阅任务1在同一行的删除",
        "output": "<thought>\n1. 先切换到新弹出的标签页。RF提供了ToNewWindow关键字，可以用来切换到新的窗口或者标签页。\n2. 为推送时间设置两个参数每日和00:00。这个操作可以使用SetField关键字完成，用SetField关键字可以填写某个字段。\n3. 最后点击与订阅任务1在同一行的删除。首先需要找到订阅任务1所在的行，然后在该行点击“删除”。可以使用ClickTextOfRow关键字完成这个操作。\n</thought>\n\n<code_block>\n# 切换到新的标签页\nToNewWindow\n\n# 为推送时间设置两个参数每日和00:00\nSetField | 推送时间 | 每日 | 00:00\n\n# 找到订阅任务1所在行，点击删除\nClickTextOfRow | 订阅任务1 | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击查询出发方式右边的按钮",
        "output": "<thought>\n需要点击\"查询出发方式\"文本右边的按钮，可以使用`ClickElemToTheDirectionOf`关键字，方向参数为`right`。\n</thought>\n\n<code_block>\n# 点击查询出发方式右边的按钮\nClickElemToTheDirectionOf | 查询出发方式 | right | button\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置申请人为：zhengchen",
        "output": "<thought>\n要设置申请人，我们可以使用SetField关键字。我们需要在字段名“申请人”处输入“zhengchen”。\n</thought>\n\n<code_block>\n# 设置申请人字段为zhengchen\nSetField | 申请人 | zhengchen\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击project_id前面的勾选框",
        "output": "<thought>\n根据场景描述，我们需要点击一个名为project_id的复选框。可以使用CheckBoxOn关键字来实现此操作，确保复选框被勾选。\n</thought>\n\n<code_block>\n# 勾选名为project_id的复选框\nCheckBoxOn | project_id\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面上第二个停止",
        "output": "<thought>\n根据描述，需要点击页面上第二个包含“停止”文本的元素。可以使用`Click`关键字并结合`idx=1`参数（表示第二个）来实现。\n</thought>\n\n<code_block>\n# 点击页面上第二个停止\nClick | 停止 | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 placeholder 带有 ‘请尝试描述工单内容，AI 会完成表单填写’ 的输入框的后一个svg元素，校验输入框 ${input_selector} 内容，包含 电视黑屏无法显示",
        "output": "<thought>\n首先，我需要选择关键字来定位和点击目标元素。由于要点击的是带有特定placeholder的输入框的后一个svg元素，可以使用`ClickElemToTheDirectionOf`关键字向右点击目标svg元素。其次，我需要验证给定输入框内容是否包含特定文本，可以使用`CheckFieldContains`关键字来完成。因此，问题可以分解为：\n1. 使用`ClickElemToTheDirectionOf`关键字点击查找带有特定placeholder的元素右侧的svg。\n2. 验证给定输入框内容包含指定文本。\n</thought>\n\n<code_block>\n# 点击该input/textarea右侧的svg元素\nClickElemToTheDirectionOf | [placeholder*='请尝试描述工单内容，AI 会完成表单填写'] | right | svg\n\n# 校验给定输入框${input_selector}内容包含文本 \"电视黑屏无法显示\"\nCheckFieldContains | ${input_selector} | 电视黑屏无法显示\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 请求接口https://open.larkoffice.com/open-apis/auth/v3/tenant_access_token/internal body是app_id, app_secret, 从响应体拿出tenant_access_token参数",
        "output": "<thought>\n 首先，需要发送一个POST请求到指定的接口，传递app_id和app_secret作为请求体。然后，从返回的JSON响应中提取tenant_access_token参数。\n </thought>\n \n <code_block>\n # 发送POST请求到指定URL，传递app_id和app_secret作为请求体\n ${resp_json}  UiSendRequest | POST | https://open.larkoffice.com/open-apis/auth/v3/tenant_access_token/internal | {\"app_id\": \"your_app_id\", \"app_secret\": \"your_app_secret\"}\n \n # 从响应体中提取tenant_access_token参数\n ${tenant_access_token}  Set Variable | ${resp_json['tenant_access_token']}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“安全中心”，点击“违规列表”，设置“重点违规类型”为“行为惩罚”，找到包含「全量数据」的元素并点击",
        "output": "<thought>\n首先分析步骤：\n1. 点击“安全中心”可以使用`Click`关键字。\n2. 点击“违规列表”可以使用`Click`关键字。\n3. 设置“重点违规类型”为“行为惩罚”可以使用`SetField`关键字。\n4. 使用`FindByText` 来找到包含“全量数据”的元素。\n5. 最后点击找到的元素，可以使用`ClickElem`关键字。\n</thought>\n\n<code_block>\n# 点击“安全中心”\nClick | 安全中心\n\n# 点击“违规列表”\nClick | 违规列表\n\n# 设置“重点违规类型”为“行为惩罚”\nSetField | 重点违规类型 | 行为惩罚\n\n# 查找包含“全量数据”的元素\n${elem}  FindByText | 全量数据\n\n# 点击找到的元素\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 xxx 写入文件 abc",
        "output": "<thought>\n在RobotFramework中，需要将文本写入一个文件，可使用BuiltIn库的“Create File”或“Append To File”关键字来实现。由于提供的关键字中没有文件操作相关的，因此直接使用内置关键字“Create File”。\n</thought>\n\n<code_block>\n# 将 xxx 写入文件 abc\nCreate File    abc    xxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向当前位置粘贴文本 123",
        "output": "<thought>\n我们需要将文本“123”粘贴到当前光标激活的位置。可以使用`Paste`关键字，其中`selector`参数为空，`txt`参数设为“123”。\n</thought>\n\n<code_block>\n# 向当前位置粘贴文本 123\nPaste | ${EMPTY} | 123\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “Payer账号”\n选择 “Doooo”\n点击“确定”按钮",
        "output": "<thought>\n首先，点击文本“Payer账号”可以使用Click关键字。接着，选择文本为“Doooo”的选项，可以使用SelectOption关键字。最后，点击“确定”按钮，可以使用Click关键字。整个过程使用这三个关键字即可完成。\n</thought>\n\n<code_block>\n# 点击 Payer账号\nClick | Payer账号\n\n# 选择 Doooo\nSelectOption | Doooo\n\n# 点击确定按钮\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 'SSO登录' 的关键字，接受 url 参数，作用就是打开浏览器访问这个 url",
        "output": "<thought>\n为了解决这个问题，我将定义一个名为'SSO登录'的关键字，它接受一个参数'url'。这个关键字的目的是使用关键字'OpenBrowser'打开一个新的浏览器窗口并访问给定的'url'。\n</thought>\n\n<code_block>\n*** Keywords ***\nSSO登录\n    [Arguments]  ${url}\n    OpenBrowser  ${url}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待一秒，点击 结束咨询 按钮，弹窗中点击 确定 按钮，等待直到 结束咨询 按钮消失",
        "output": "<thought>\n对于此场景，我们首先需要等待一秒钟（使用Sleep关键字）。然后点击\"结束咨询\"按钮（使用Click关键字）。在弹出的弹窗中，我们需要点击\"确定\"按钮（使用Click关键字，并设置base为POPUP）。最后，等待\"结束咨询\"按钮消失（使用WaitTextDisappear关键字）。\n</thought>\n\n<code_block>\n# 等待1秒\nSleep | 1s\n\n# 点击结束咨询按钮\nClick | 结束咨询\n\n# 点击弹窗中的确定按钮\nClick | 确定 | base=POPUP\n\n# 等待结束咨询按钮消失\nWaitTextDisappear | 结束咨询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前截图 校验 包含 签约关键字、地址、联系人，且它们都 各出现两次",
        "output": "<thought>\n对于这个问题，我们需要获取当前页面的截图中的文字，然后检查这些文字是否包括“签约关键字”、“地址”和“联系人”，并且这些词汇都要至少出现两次。我们可以使用 RF 的 GetPageScreenshotText 关键字来获取页面截图中的文本，然后用 Should Contain 和 Should Be True 来验证每个关键字的数量。\n</thought>\n\n<code_block>\n# 获取截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验签约关键字出现至少两次\nShould Contain  ${txt}  签约关键字\n${count}  Evaluate  ${txt}.count('签约关键字')\nShould Be True  ${count} >= 2\n\n# 校验地址出现至少两次\nShould Contain  ${txt}  地址\n${count}  Evaluate  ${txt}.count('地址')\nShould Be True  ${count} >= 2\n\n# 校验联系人出现至少两次\nShould Contain  ${txt}  联系人\n${count}  Evaluate  ${txt}.count('联系人')\nShould Be True  ${count} >= 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置SN编号为 SN+生成一串8位随机数",
        "output": "<thought>\n为了完成这个任务，我们需要生成一个以SN开头的随机字符串，可以使用GenerateRandomWithPrefix关键字来生成所需的SN编号，然后使用SetField关键字将其设置到页面字段中。\n</thought>\n\n<code_block>\n# 生成SN开头的随机字符串，后面跟8位数字\n${sn_number}  GenerateRandomWithPrefix  | SN  | 8  | [NUMBERS]\n\n# 设置SN编号为生成的随机串\nSetField  | SN编号  | ${sn_number}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待 '上传单个合同文件' 可点击，超时：10s",
        "output": "<thought>\n要确保“上传单个合同文件”按钮处于可点击状态，即不在禁用状态，可以使用提供的关键字来判断元素的状态。由于我们需要等待元素进入可点击状态，可以使用循环和等待时间来反复检查元素状态，直到条件满足或超时。\n</thought>\n\n<code_block>\n# 定义选择器用于找到合同文件按钮\n${selector}  Set Variable  button:contains(上传单个合同文件)\n\n# 在最多10秒内等待按钮可用\nFOR  ${index}  IN RANGE  10\n    ${status}  IsElementEnabled  ${selector}\n    IF  '${status}' == 'True'\n        Exit For Loop\n    ELSE\n        Sleep  1s\n    END\nEND\nCheckElemEnabled  ${selector}  # 确保按钮最终是可点击状态\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验弹框中不包含“事件发生时间”",
        "output": "<thought>\n要校验弹框中不包含“事件发生时间”，我们可以使用`CheckNotHasText`关键字，并将`base`参数设置为`POPUP`。这样可以限定在弹框内进行文本检查。\n</thought>\n\n<code_block>\n# 校验弹框中不包含“事件发生时间”\nCheckNotHasText | 事件发生时间 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格 ‘环境名称’ 列中包含：线上",
        "output": "<thought>\n在这个案例中，需要验证“环境名称”列包含“线上”。我们可以使用关键字 \"CheckColHas\" 完成校验。\n</thought>\n\n<code_block>\n# 校验表格 '环境名称' 列中包含：线上\nCheckColHas | 环境名称 | 线上\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个关键字 合同管理-每个合同，逻辑：返回此元素的文本[class*\\=IContractSearchResultContainer]",
        "output": "<thought>\n为了获取[class*=IContractSearchResultContainer]的元素文本，我将使用FindElem关键字来定位该元素，然后获取其文本。\n</thought>\n\n<code_block>\n*** Keywords ***\n合同管理-每个合同\n    # 使用FindElem定位[class*=IContractSearchResultContainer]的元素\n    ${elem}  FindElem  [class*=IContractSearchResultContainer]\n    \n    # 获取该元素的文本\n    ${text}  Get Text  ${elem}\n    \n    # 返回该文本\n    [Return]  ${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二个class包含arco-select-arrow-icon的元素",
        "output": "<thought>\n为了点击第二个class包含arco-select-arrow-icon的元素，我们可以使用ClickElem关键字，并通过jquery选择器来定位该元素。为了选择第二个匹配的元素，我们需要使用:eq(1)表示第2个元素。\n</thought>\n\n<code_block>\n# 点击第二个class包含arco-select-arrow-icon的元素\nClickElem | .arco-select-arrow-icon:eq(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘名称’ 前面的 checkbox",
        "output": "<thought>\n在这个场景中，我们需要点击一个checkbox元素，该元素位于文本“名称”的左边。可以使用`ClickElemToTheDirectionOf`关键字来实现，此关键字允许我们根据基准元素给定方向点击目标元素。基准元素为文本“名称”，方向为left，因此应使用“名称”作为基准元素，方向指定为`left`。\n</thought>\n\n<code_block>\n# 点击“名称”左边的第一个checkbox\nClickElemToTheDirectionOf | 名称 | left | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断第一行第四列的文本，如果不是成功，就刷新页面，每5秒循环一次，一共循环10次",
        "output": "<thought>\n我们需要使用IsCellContainsText来判断第一行第四列的文本是否为\"成功\"。如果不是，我们刷新页面，并等待5秒。循环10次，我们可以使用FOR循环和内置的IF/ELSE来实现。\n</thought>\n\n<code_block>\nFOR  ${i}  IN RANGE  10\n    # 判断第一行第四列的文本是否为成功\n    ${success}  IsCellContainsText  1  4  成功\n    IF  not ${success}\n        # 如果不是成功，刷新页面\n        RefreshPage\n        # 等待5秒\n        Sleep  5s\n    ELSE\n        # 如果是成功，跳出循环\n        Exit For Loop\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "ui 点击第一个divclass包含UbaChart__container    ",
        "output": "<thought>\n为了点击包含特定class的第一个div元素，我们可以使用ClickElem关键字，并结合jquery选择器表示方式。我们需要确保选择器能够准确定位到目标元素，并且使用:eq(0)来选择第一个符合条件的元素。\n</thought>\n\n<code_block>\n# 点击第一个class包含UbaChart__container的div元素\nClickElem | div[class*=UbaChart__container]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成\n找到 class含有lp-study-center-page的元素\n截图此元素 对比像素差为0.98",
        "output": "<thought>\n首先，使用WaitLoading关键字等待页面加载完成。接下来，使用FindElem查找class含有lp-study-center-page的元素。最后，使用ImageDiff对比该元素截图与基准图，设定相似度为0.98。\n</thought>\n\n<code_block>\n# 等待加载完成\nWaitLoading\n\n# 查找包含class为lp-study-center-page的元素\n${elem}  FindElem | [class*=lp-study-center-page]\n\n# 对比截图，相似度为0.98\nImageDiff | ${elem} | sim=0.98\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上角的关闭按钮",
        "output": "<thought>\n根据需求，需要点击右上角的关闭按钮。可以使用`ClickIconToTheDirectionOf`关键字，从屏幕中心开始，选择`topRight`方向，图标名为`close`。\n</thought>\n\n<code_block>\n# 点击右上角的关闭按钮\nClickIconToTheDirectionOf | SCREEN_CENTER | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量${x}=3",
        "output": "<thought>\n思路：创建一个变量x，并将其值设置为3。使用关键字 Set Variable。\n</thought>\n\n<code_block>\n${x}  Set Variable  3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取姓名的值。提示可用 GetFieldVal 获取字段的值",
        "output": "<thought>\n根据题目提示，应使用 GetFieldVal 获取字段的值。因此，我们只需要将\"姓名\"作为参数传递给 GetFieldVal 即可获取姓名的值。\n</thought>\n\n<code_block>\n# 获取字段'姓名'的值\n${val}  GetFieldVal | 姓名\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第八个data-auto-id=oc-dropdown的位置，鼠标停留在此",
        "output": "<thought>\n对于这个场景，我们需要先点击第八个data-auto-id为oc-dropdown的元素，然后将鼠标停留在该元素上。我们可以使用ClickElem关键字来点击特定的元素，然后使用MoToElem关键字来将鼠标移动到该元素上。\n</thought>\n\n<code_block>\n# 点击第八个data-auto-id为oc-dropdown的元素\nClickElem | [data-auto-id='oc-dropdown']:eq(7)\n\n# 将鼠标移动到第八个data-auto-id为oc-dropdown的元素上\nMoToElem | [data-auto-id='oc-dropdown']:eq(7)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待【审批中】出现",
        "output": "<thought>\n解决问题思路：\n1. 使用 `WaitText` 关键字等待页面上出现文本【审批中】。\n2. 如果需要等待特定的元素出现，可以使用 `WaitElem` 关键字配合jquery选择器。\n\n由于题目要求的是等待文本【审批中】出现，直接使用 `WaitText` 就可以解决问题。\n\n关键字选取：`WaitText`。\n</thought>\n\n<code_block>\n# 等待页面上出现文本【审批中】\nWaitText | 审批中 | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 元素//*[@id=\"arco-tabs-0-panel-2\"]",
        "output": "<thought>\n解决问题思路：\n1. 观察到目标元素的XPath是 `//*[@id=\"arco-tabs-0-panel-2\"]`。\n2. 需要将XPath转换为jQuery选择器。\n3. 根据XPath语法，`//*[@id=\"arco-tabs-0-panel-2\"]` 等价于jQuery选择器 `[id=arco-tabs-0-panel-2]`。\n4. 使用 `ClickElem` 关键字点击该元素。\n</thought>\n\n<code_block>\n# 点击id为arco-tabs-0-panel-2的元素\nClickElem | [id=arco-tabs-0-panel-2]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验“请选择单个选项”标题下方，type=“radio”且value=“选项 1”的元素包含checked",
        "output": "<thought>\n1. 首先需要定位到\"请选择单个选项\"标题下方的元素\n2. 使用FindElemToTheDirectionOf关键字来查找标题下方的radio元素\n3. 指定方向为\"bottom\"，选择器为\"input[type='radio'][value='选项 1']\"\n4. 使用GetElemAttr关键字获取该元素的checked属性\n5. 最后使用Should Be True校验该属性存在\n</thought>\n\n<code_block>\n# 查找\"请选择单个选项\"标题下方的radio元素\n${elem}  FindElemToTheDirectionOf  请选择单个选项  bottom  input[type=\"radio\"][value=\"选项 1\"]\n\n# 获取元素的checked属性\n${checked}  GetElemAttr  ${elem}  checked\n\n# 校验checked属性存在\nShould Be True  ${checked}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为校验的关键字，接受参数 title 和 text ，操作逻辑是 检查表格所有的数据列的 title ，是不是都包含 text",
        "output": "<thought>\n我们需要遍历表格的所有列，并检查每一列的列标题中是否包含给定的文本。可以使用`CheckColHas`关键字来检查列中是否包含指定文本。假设表格在默认的基准元素中，可以指定表格的列号或列名来进行检查。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验\n    [Arguments]  ${title}  ${text}\n    # 获取表格列数\n    ${col_count}=  GetElemCount  th\n    # 遍历所有列\n    FOR  ${i}  IN RANGE  1  ${col_count}\n       # 校验每一列的标题是否包含指定文本\n       CheckColHas  ${i}  ${text}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击选择 ‘预算科目_A0’，并点击",
        "output": "<thought>\n这个场景要求我们使用鼠标点击一个特定的文本，并点击。首先，我们需要使用 `MClick` keyword 来实现鼠标点击。接着，我们确定要点击的文本为‘预算科目_A0’，因此直接使用`MClick | 预算科目_A0`来完成任务即可。\n</thought>\n\n<code_block>\n# 鼠标点击选择 ‘预算科目_A0’\nMClick | 预算科目_A0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "${content} 去掉字符串合同编号，剩余部分赋值给 contract_number",
        "output": "<thought>\n首先需要提取变量 `${content}` 中的字符串并去掉其中的“合同编号”，然后将剩余部分赋值给 `contract_number`。可以使用RF的 `Evaluate` 关键字执行Python代码来完成这个任务。\n</thought>\n\n<code_block>\n# 使用Evaluate关键字执行Python代码来去掉字符串中的\"合同编号\"，并将结果赋值给contract_number\n${contract_number}     Evaluate    ${content}.replace('合同编号', '').strip()\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为'新增 Dashboard 图表'的关键字，接受参数：指标，名称，访问区域，用户运营商，应用层协议，网络层协议，参数默认值均为EMPTY，逻辑如下：\n# 1. 设置 指标 为：指标\n# 2. 设置 名称 为：名称\n# 3. 如果 指标 为：访问带宽，访问流量，访问请求数，访问 QPS，访问 2xx 状态码，访问 3xx 状态码，访问 4xx 状态码，访问 5xx 状态码，下载速度，响应时间 时，则：\n# 3.1 设置 访问区域 为：访问区域\n# 3.2 设置 用户运营商 为：用户运营商\n# 3.3 设置 应用层协议 为：应用层协议\n# 3.4 设置 网络层协议 为：网络层协议\n# 4. 点击 弹窗内 确定",
        "output": "<thought>\n为了解决这个问题，我们需要创建一个RF关键字'新增 Dashboard 图表'，并根据参数值设置页面字段。首先，我们将使用`SetField`关键字设置指标和名称的值。接下来，我们将使用IF条件判断指标是否为指定的值之一，如果是，则使用`SetField`为访问区域、用户运营商、应用层协议和网络层协议设置值。最后，使用`Click`关键字点击弹窗内的确定按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n新增 Dashboard 图表\n    [Arguments]  ${指标}=EMPTY  ${名称}=EMPTY  ${访问区域}=EMPTY  ${用户运营商}=EMPTY  ${应用层协议}=EMPTY  ${网络层协议}=EMPTY\n    \n    # 设置指标和名称\n    SetField  指标  ${指标}\n    SetField  名称  ${名称}\n    \n    # 判断指标是否为指定值之一\n    IF  '${指标}' in ['访问带宽', '访问流量', '访问请求数', '访问 QPS', '访问 2xx 状态码', '访问 3xx 状态码', '访问 4xx 状态码', '访问 5xx 状态码', '下载速度', '响应时间']\n        # 设置访问区域、用户运营商、应用层协议和网络层协议\n        SetField  访问区域  ${访问区域}\n        SetField  用户运营商  ${用户运营商}\n        SetField  应用层协议  ${应用层协议}\n        SetField  网络层协议  ${网络层协议}\n    END\n    \n    # 点击弹窗内的确定\n    Click  确定  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "随机选择Video Consumption Region下拉选项",
        "output": "<thought>\n在这个场景中，我们需要在“Video Consumption Region”字段中随机选择一个下拉选项。这可以通过将字段中的选项数目作为上限生成一个随机数来实现，然后选择相应的选项。使用RobotFramework的内置关键字可以生成随机数。生成随机数的关键字是Generate Random String。然后结合SelectOptionForField来选择生成的选项。\n</thought>\n\n<code_block>\n# 例如假设有 5 个选项，则随机选择一个\n${random_index}  GenerateRandom  | 1 | [NUMBERS]12345\nSelectOptionForField | Video Consumption Region | OPTIONS_${random_index}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 弹窗中 存在 class=arco-checkbox-mask-icon 的元素",
        "output": "<thought>\n为了校验弹窗中是否存在class为arco-checkbox-mask-icon的元素，我们可以使用CheckHasElem关键字。由于需要校验的是弹窗中的元素，我们可以利用base参数将其设置为POPUP。\n</thought>\n\n<code_block>\n# 校验弹窗中存在 class=arco-checkbox-mask-icon 的元素\nCheckHasElem | [class=arco-checkbox-mask-icon] | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘监控数据’ 下方的元素",
        "output": "<thought>\n我们需要点击“监控数据”下方的元素，可以使用`ClickElemToTheDirectionOf`关键字。这个关键字允许我们选择一个基准文本，然后指定一个方向和jquery选择器来确定目标元素的位置。在这个场景中，基准是“监控数据”，方向是下方（bottom），目标元素的选择器可以用`*`表示。\n</thought>\n\n<code_block>\n# 点击“监控数据”下方的元素\nClickElemToTheDirectionOf | 监控数据 | bottom | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击roll=treeitem 且文案包含“giraffe_db_01”的元素",
        "output": "<thought>\n要在页面中点击一个文案包含“giraffe_db_01”的元素，并且属性为roll=treeitem，可以通过CSS选择器来实现。我们可以组合使用属性选择器和内容选择器来定位该元素。具体来说，CSS选择器可以使用带属性的选择器加上\":contains\"函数。如果需要特定第几个元素，比如第一个或最后一个元素，可以使用\":eq\"选择器。但是题目中未指定需要点击第几个，因此我们将默认点击第一个匹配的元素。\n</thought>\n\n<code_block>\n# 点击roll=treeitem且文案包含“giraffe_db_01”的元素\nClickElem | [roll=treeitem]:contains(giraffe_db_01)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 ‘添加筛选条件’ 中输入 192.168.9.96，并回车，等待1s",
        "output": "<thought>\n首先，我需要在‘添加筛选条件’字段中输入192.168.9.96，并回车。根据说明文档，SetField关键字适用于向指定字段输入值。之后，我需要等待1秒，对于等待时间，可以使用Sleep关键字来实现。\n</thought>\n\n<code_block>\n# 在‘添加筛选条件’字段中输入192.168.9.96，并回车\nSetField | 添加筛选条件 | 192.168.9.96 | enter=True\n\n# 等待1秒\nSleep | 1s\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置基础多选为：多选1，多选2",
        "output": "<thought>\n为了设置基础多选为“多选1，多选2”，可以使用`SetField`关键字来操作页面字段。需要注意的是，`SetField`关键字支持依次填入多个值到控件中，因此我们可以一次性传入多个值来实现多选的效果。\n</thought>\n\n<code_block>\n# 设置基础多选为：多选1，多选2\nSetField  基础多选  多选1  多选2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“进入创建规则分群页面” 的关键字，主要操作为：\n点击 ‘创建分群’ 按钮，然后点击 ‘规则创建’ 下方的 ‘立即创建’ 按钮",
        "output": "<thought>\n首先需要点击 ‘创建分群’ 按钮，可以用 `Click` 关键字。接下来需要点击 ‘规则创建’ 下方的 ‘立即创建’ 按钮，这可以用 `ClickTextToTheDirectionOf` 关键字来实现。因此，整个操作过程可以拆分为两步：先点击 ‘创建分群’，再点击 ‘规则创建’ 下方的 ‘立即创建’。\n</thought>\n\n<code_block>\n*** Keywords ***\n进入创建规则分群页面\n    # 点击‘创建分群’按钮\n    Click  创建分群\n    \n    # 点击‘规则创建’下方的‘立即创建’按钮\n    ClickTextToTheDirectionOf  规则创建  bottom  立即创建\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 ‘请选择’ 中输入：页面访问  页面退出",
        "output": "<thought>\n根据要求，需要在名为“请选择”的字段中输入“页面访问”和“页面退出”。使用`SetField`关键字来完成。\n</thought>\n\n<code_block>\n# 在“请选择”字段中输入“页面访问” “页面退出”\nSetField | 请选择 | 页面访问 | 页面退出\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "跳转到这个url https://libra-staging.maat.bytedance.net/libra/flight/500005451/edit",
        "output": "<thought>\n这个任务比较简单，首先打开指定的URL。我们使用RF的OpenUrl关键字来完成此任务。\n</thought>\n\n<code_block>\n# 打开指定的URL\nOpenUrl | https://libra-staging.maat.bytedance.net/libra/flight/500005451/edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击：商品管理、商品发布、创建商品、我知道了",
        "output": "<thought>\n这是一种路径选择，每个步骤都需要点击一个特定的文本或者元素，所以可以使用\"ClickTextOneByOne\"关键字。参数是所需点击的所有元素。\n</thought>\n\n<code_block>\n# 点击商品管理、商品发布、创建商品、我知道了\nClickTextOneByOne | 商品管理 | 商品发布 | 创建商品 | 我知道了\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 弹窗中的 第一个“Payer账号” 为：Doooo",
        "output": "<thought>\n为了设置弹窗中的第一个“Payer账号”为\"Doooo\"，我们需要使用`SetField`关键字。因为这是一个弹窗，我们会使用`base=POPUP`来指定操作的基准元素为弹窗。由于要设置第一个“Payer账号”，我们使用默认的`idx=0`。\n</thought>\n\n<code_block>\n# 设置弹窗中的第一个\"Payer账号\"为Doooo\nSetField | Payer账号 | Doooo | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前 URL，然后从中提取出查询字符串中 contractID 的值",
        "output": "<thought>\n要解决这个问题，我们需要完成以下步骤：\n1. 首先使用GetCurrentUrl关键字获取当前URL\n2. 然后从URL中提取查询字符串部分\n3. 最后从查询字符串中提取contractID参数的值\n\n由于RobotFramework没有直接提取URL参数的内置关键字，我们需要使用Evaluate来执行Python代码解析URL。Python的urllib.parse模块可以很好地处理URL解析任务。\n</thought>\n\n<code_block>\n# 获取当前URL\n${url}  GetCurrentUrl\n\n# 使用Python解析URL并提取contractID参数\n${contract_id}  Evaluate  urllib.parse.parse_qs(urllib.parse.urlparse(\"${url}\").query).get('contractID', [''])[0]  modules=urllib.parse\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 接入源标识 这个字段的值",
        "output": "<thought>\n我们需要获取“接入源标识”字段的值，这可以通过使用`GetFieldVal`关键字来实现。直接传入字段的名称即可得到其对应控件的值。\n</thought>\n\n<code_block>\n# 获取接入源标识字段的值\n${val}  GetFieldVal | 接入源标识\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击出行人数附近的老人",
        "output": "<thought>\n在这个场景中，我们需要点击靠近文本“出行人数”附近的“老人”选项。根据给定的关键字，应该使用Click关键字，并利用near参数来实现对“出行人数”附近“老人”文本的点击。\n</thought>\n\n<code_block>\n# 点击出行人数附近的老人\nClick | 老人 | near=出行人数\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "界面出现 软件类咨询 文字",
        "output": "<thought>\n对于“界面出现 软件类咨询 文字”的场景，可以使用WaitText这个关键字来等待页面中出现“软件类咨询”文字。设置合适的超时时间即可。\n</thought>\n\n<code_block>\n# 等待页面上出现“软件类咨询”文字，最多等待30秒\nWaitText | 软件类咨询 | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class=\"arco-table-cell-expand-icon\"，点击 第2个 bptestsg02 左边的加号，点击 Payer 下方的 ‘删除’，获取当前截图校验存在“确定删除 Summary\n2024-09”",
        "output": "<thought>\n解决问题的思路如下：\n1. 使用 `ClickElem` 关键字选择并点击 class 为 arco-table-cell-expand-icon 的元素。\n2. 使用 `ClickIconToTheDirectionOf` 关键字点击第二个 bptestsg02 左边的加号。\n3. 使用 `ClickTextToTheDirectionOf` 关键字点击 Payer 下方的 \"删除\"。\n4. 使用 `Screenshot` 获取当前页面的截图。\n5. 使用 `GetPageScreenshotText` 获取截图中的文本。\n6. 使用 `Should Contain` 来校验截图中存在 \"确定删除 Summary 2024-09\" 这个文本。\n</thought>\n\n<code_block>\n# 点击 class 为 arco-table-cell-expand-icon 的元素\nClickElem | [class=arco-table-cell-expand-icon]\n\n# 点击第二个 bptestsg02 左边的加号\nClickIconToTheDirectionOf | :contains(bptestsg02):eq(1) | left | plus\n\n# 点击 Payer 下方的 \"删除\"\nClickTextToTheDirectionOf | Payer | bottom | 删除\n\n# 获取当前页面截图\nScreenshot\n\n# 获取截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验截图中存在 \"确定删除 Summary 2024-09\"\nShould Contain  ${txt}  确定删除 Summary 2024-09\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 period 为 Details，点击 Custom column，不勾选 Hide，校验存在 “Total: 30”",
        "output": "<thought>\n首先，我们需要设置字段 period 为 Details，可以使用 SetField 关键字。接下来，使用 Click 关键字点击 Custom column。然后，使用 CheckBoxOff 关键字确认 Hide 复选框没有被勾选。最后，使用 CheckHasText 关键字校验页面上存在文本 \"Total: 30\"。\n</thought>\n\n<code_block>\n# 设置 period 为 Details\nSetField | period | Details\n\n# 点击 Custom column\nClick | Custom column\n\n# 确保 Hide 复选框未被勾选\nCheckBoxOff | Hide\n\n# 校验页面存在文本 \"Total: 30\"\nCheckHasText | Total: 30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“进入${menu}页面”，主要逻辑是：\n1. 先删除变量menu前后的空白字符, 然后使用空格或>作为分隔符对menu进行分隔，取出分割后的最后一项 item\n2. 然后到字典 URL_MAPPING 中查找 item 所对应的值 value\n3. 接着调用关键字 ‘获取URL前缀’，将得到的 prefix 和 value 相加得到一个完整的 url\n4. 访问该URL, 并等待页面加载好",
        "output": "<thought>\n我们需要创建一个关键字来进入指定的页面。首先，通过去除两端空白并分隔字符串获取最后一项。在字典中查找对应的URL值，然后结合URL前缀构建完整的URL，最后打开该URL并等待加载完成。使用`Evaluate`处理字符串分隔和拼接操作。\n</thought>\n\n<code_block>\n*** Keywords ***\n进入${menu}页面\n    [Arguments]  ${menu}\n\n    # 去除menu前后的空白字符\n    ${menu}  Evaluate  ${menu}.strip()\n\n    # 使用空格或>作为分隔符对menu进行分隔，取出最后一项\n    @{items}  Evaluate  re.split(r'\\\\s+|>', '${menu}')\n    ${item}  Set Variable  ${items}[-1]\n\n    # 查找字典中item对应的值\n    ${value}  Get From Dictionary  ${URL_MAPPING}  ${item}\n\n    # 获取URL前缀\n    ${prefix}  获取URL前缀\n\n    # 构建完整的URL\n    ${url}  Evaluate  '${prefix}' + '${value}'\n\n    # 访问该URL并等待加载完成\n    OpenUrl  ${url}\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击优选伙伴自拓客户，输入手机号 8612342624616 然后点击查询，等出现查询完毕",
        "output": "<thought>\n首先需要点击文本“优选伙伴自拓客户”，可以使用`Click`关键字。然后在页面中找到手机号输入框，使用`SetField`关键字输入手机号“8612342624616”。接下来点击“查询”按钮，可以使用`Click`关键字。最后，等待页面出现“查询完毕”文本，使用`WaitText`关键字等待文本出现。\n</thought>\n\n<code_block>\n# 点击优选伙伴自拓客户\nClick | 优选伙伴自拓客户\n\n# 输入手机号\nSetField | 手机号 | 8612342624616\n\n# 点击查询\nClick | 查询\n\n# 等待文本“查询完毕”出现\nWaitText | 查询完毕\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 @{vals} 的第一项数据，并输入到 模糊匹配 右边的输入框",
        "output": "<thought>\n首先，需要获取列表@{vals}的第一项数据。通常，这可以使用Robot Framework的BuiltIn库提供的列表操作关键字。然后，需要在\"模糊匹配\"右边找到目标输入框，目标输入框可以是input或textarea。可以使用FindElemToTheDirectionOf关键字找到这个输入框，最后使用FillArea关键字将获取到的数据输入。\n</thought>\n\n<code_block>\n# 获取@{vals}的第一项数据\n${first_val}  Get From List  ${vals}  0\n\n# 查找模糊匹配右边的输入框（input或textarea）\n${elem}  FindElemToTheDirectionOf  模糊匹配  right  input, textarea\n\n# 将第一项数据输入到找到的输入框中\nFillArea  ${elem}  ${first_val}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取get接口profile_platform/api/v3/global/config的body中的data.finderEnable,如果该值为0，就跳过",
        "output": "<thought>\n1. 首先需要使用`Search Requests`关键字搜索指定接口的请求，这里需要搜索URL包含\"profile_platform/api/v3/global/config\"且方法为GET的请求\n2. 从搜索结果中获取响应体JSON数据\n3. 使用`GetValuesFromJson`关键字从JSON中提取data.finderEnable的值\n4. 使用RF的IF条件判断该值是否为0，如果是则使用Skip关键字跳过测试\n5. 需要注意处理可能没有找到请求的情况\n</thought>\n\n<code_block>\n# 搜索GET请求profile_platform/api/v3/global/config的最后一个请求\n${resp_json}  Search Requests  profile_platform/api/v3/global/config  GET  last\n\n# 从响应JSON中获取data.finderEnable的值\n${finder_enable}  GetValuesFromJson  ${resp_json}  data:finderEnable\n\n# 如果finderEnable为0则跳过测试\nIF  \"${finder_enable}\" == \"0\"\n    Skip  finderEnable is 0, skip this test case\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "退出iframe",
        "output": "<thought>\n退出iframe时，应使用提供的`ExitFrame`关键字。这个操作不需要任何参数或额外处理，只需单独调用该关键字即可完成对iframe的退出。\n</thought>\n\n<code_block>\n# 退出当前嵌套的iframe\nExitFrame\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${数据集信息列表}[内置Hive][table]  粘贴到元素 div.view-lines.monaco-mouse-cursor-text",
        "output": "<thought>\n任务要求将`${数据集信息列表}[内置Hive][table]`的值粘贴到指定元素`div.view-lines.monaco-mouse-cursor-text`中。我们可以首先定义该元素的选择器，然后获取要粘贴的文本，并使用`Paste`关键字完成粘贴工作。\n</thought>\n\n<code_block>\n# 定义元素选择器\n${selector}  Set Variable  div.view-lines.monaco-mouse-cursor-text\n\n# 获取需要粘贴的文本\n${text_to_paste}  Set Variable  ${数据集信息列表}[内置Hive][table]\n\n# 将文本粘贴到指定元素中\nPaste | ${selector} | ${text_to_paste}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间,格式yyyy-mm-dd",
        "output": "<thought>\n我们需要获取当前时间并将其格式化为yyyy-mm-dd格式。Robot Framework的日期和时间处理库提供了一些关键字来帮助完成这个任务。其中，Get Current Date关键字可以用来获取当前日期，并可以通过Convert Date关键字来格式化日期。\n</thought>\n\n<code_block>\n# 获取当前日期并格式化为yyyy-mm-dd\n${current_date}  Get Current Date  result_format=%Y-%m-%d\nLog  ${current_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 localstorage 中的 age 值，并打印",
        "output": "<thought>\n首先，需要从 localStorage 中获取名为 \"age\" 的项对应的值。然后，将获取到的值打印出来。可以使用 LocalStorageGetItem 关键字来实现获取操作，并使用 BuiltIn 的 Log 关键字打印结果。\n</thought>\n\n<code_block>\n# 从 localStorage 中获取名为 \"age\" 的项对应的值\n${age_value}  LocalStorageGetItem  age\n\n# 打印获取到的 age 值\nLog  ${age_value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写abc字段为123并按回车",
        "output": "<thought>\n为了解决这个问题，我们需要填写名为“abc”的字段，并输入“123”后按回车。因此，我们可以使用SetField关键字，并将enter参数设置为True。\n</thought>\n\n<code_block>\n# 填写abc字段为123并按回车\nSetField | abc | 123 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表中男士所在行中包含香烟、wine",
        "output": "<thought>\n要检查表中男士所在行中是否包含“香烟”和“wine”，可以使用CheckRowHas关键字。该关键字可以验证指定行中是否包含给定的文本。\n</thought>\n\n<code_block>\n# 检查表中男士所在行中包含香烟、wine\nCheckRowHas | 男士 | 香烟 | wine\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 弹窗中 “产品汇总”表 “收款人”字段 包含 huleiting",
        "output": "<thought>\n根据需求，首先确定需要校验的内容是弹窗中的表格。我们需要校验“产品汇总”表中的“收款人”字段是否包含“huleiting”。可以使用CheckColHas关键字来实现这个校验。\n\n步骤：\n1. 确认表格是在弹窗中，因此base参数应为POPUP。\n2. 使用CheckColHas关键字，校验“收款人”列包含“huleiting”。\n\n选择框架中的CheckColHas关键字，因为它可以校验特定列包含指定文本。\n</thought>\n\n<code_block>\n# 校验弹窗中“产品汇总”表“收款人”字段包含 huleiting\nCheckColHas  收款人  huleiting  tbl=产品汇总  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间，以 2022-11-12 06:18 形式保存到变量 create_time",
        "output": "<thought>\n我们需要使用RF标准库中的时间处理关键字。首先，获取当前日期时间，然后再将其格式化为所需的格式（YYYY-MM-DD HH:MM）。可以使用Get Current Date关键字来实现。\n</thought>\n\n<code_block>\n# 获取当前日期时间\n${current_date}  Get Current Date  result_format=%Y-%m-%d %H:%M\n\n# 设置变量 create_time 为当前日期时间\n${create_time}  Set Variable  ${current_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置窗口宽度为 3000",
        "output": "<thought>\n为了设置浏览器窗口的宽度，可以使用SetWindowWidth关键字，并指定所需的宽度值。\n</thought>\n\n<code_block>\n# 设置窗口宽度为 3000\nSetWindowWidth | 3000\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击请选择版本底下的一个下拉框组件，并选择包含587的选项",
        "output": "<thought>\n首先需要查找“请选择版本”文本下方的class包含select的下拉框组件。然后点击该组件以触发下拉菜单。在下拉菜单激活后，选择一个包含“587”的选项。\n</thought>\n\n<code_block>\n# 查找并点击“请选择版本”下方的class包含select的下拉框组件\n${dropdown}  FindElemToTheDirectionOf | 请选择版本 | bottom | [class*=select]\nClickElem | ${dropdown}\n\n# 选择包含587的选项\nSelectOption | 587\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 id=a 元素中的 OK",
        "output": "<thought>\n首先，我们需要点击id为a的元素中的文本OK。可以使用Click关键字，并指定base参数为[id=a]。这将确保只在该元素上下文中寻找并点击OK文本。\n</thought>\n\n<code_block>\n# 在id为a的元素中点击文本OK\nClick | OK | base=[id=a]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“创建随机英文字符串”的关键，接受两个参数：length，str_type，逻辑是：\n1、如果str_type等于0，则创建一个长度等于length的小写字母字符串\n2、如果str_type等于1，则创建一个长度等于length的大写字母字符串\n3、如果str_type等于2，则创建一个长度等于length的大写+小写字母字符串",
        "output": "<thought>\n解决问题思路：\n1. 使用IF/ELSE结构判断str_type的值。\n2. 根据str_type的不同，使用GenerateRandom关键字生成对应的随机字符串。\n3. 对应str_type为0生成小写字母字符串，str_type为1生成大写字母字符串，str_type为2生成大小写字母混合字符串。\n</thought>\n\n<code_block>\n创建随机英文字符串\n    [Arguments]    ${length}    ${str_type}\n    # 如果str_type等于0，生成小写字符串\n    IF    \"${str_type}\" == \"0\"\n        ${result}    GenerateRandom    ${length}    [LOWER]\n    # 如果str_type等于1，生成大写字符串\n    ELSE IF    \"${str_type}\" == \"1\"\n        ${result}    GenerateRandom    ${length}    [UPPER]\n    # 如果str_type等于2，生成大小写混合字符串\n    ELSE IF    \"${str_type}\" == \"2\"\n        ${result}    GenerateRandom    ${length}    [LETTERS]\n    ELSE\n        # 无可用关键字\n        Log    无效的 str_type 值\n    END\n    [Return]    ${result}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量${if_whitelist_1}转换整型",
        "output": "<thought>\n变量${if_whitelist_1}的类型转换可以通过Robot Framework中的`Evaluate`关键字实现，该关键字允许我们执行Python代码。我们可以使用Python的`int()`函数将变量转换为整数类型。\n</thought>\n\n<code_block>\n# 对变量${if_whitelist_1}进行整型转换\n${if_whitelist_1}  Evaluate  int(${if_whitelist_1})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置Temperature为：0到1之间的随机小数，且该小数点后的位数为1个。",
        "output": "\n    \n<thought>\n 要设置Temperature为0到1之间的一位小数，我们可以生成一个随机的小数，然后四舍五入到小数点后一位。由于RF没有内置直接生成小数的功能，可以使用Evaluate执行Python代码来生成随机小数。\n </thought>\n \n <code_block>\n # 生成0到1之间的一位小数\n ${random_temp}  Evaluate  round(random.uniform(0, 1), 1)  modules=random\n \n # 设置Temperature字段\n SetField  Temperature  ${random_temp}\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成八位随机字符串，与libra_autotest_拼接，传入${monitor_name}",
        "output": "<thought>\n首先，我们需要生成八位随机字符串，使用给定的关键字 `GenerateRandom`。然后，将生成的字符串与指定的前缀 `libra_autotest_` 拼接在一起，可以使用 `Catenate` 关键字完成拼接。最后，将拼接后的结果赋值给变量 `${monitor_name}`。\n</thought>\n\n<code_block>\n# 生成八位随机字符串\n${random_str}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n\n# 拼接随机字符串与前缀\n${monitor_name}  Catenate  SEPARATOR=  libra_autotest_  ${random_str}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向选择库输入：${TEST_DB}",
        "output": "<thought>\n根据题目描述，我们需要向一个叫做\"选择库\"的字段输入一个变量${TEST_DB}，为此我们可以使用SetField关键字来完成。\n</thought>\n\n<code_block>\n# 向选择库输入：${TEST_DB}\nSetField | 选择库 | ${TEST_DB}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "for循环三次，每次点击刷新，最后点击立即验证，等待确认邀请按钮消失",
        "output": "<thought>\n针对这个场景，首先需要一个for循环来实现重复3次的操作。在循环内，我们使用`Click`关键字来点击“刷新”按钮。循环结束后，点击“立即验证”按钮，接着使用`WaitElemDisappear`关键字来等待“确认邀请”按钮消失。\n</thought>\n\n<code_block>\n# 使用FOR循环来重复3次点击\nFOR  ${i}  IN RANGE  3\n    # 点击刷新按钮\n    Click  刷新\nEND\n\n# 点击立即验证按钮\nClick  立即验证\n\n# 等待确认邀请按钮消失\nWaitElemDisappear  button:contains(确认邀请)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "击最早入住时间附近的请选择时间，点击第二个00，点击 列表中第一行的 删除小图标，点击提交审核",
        "output": "<thought>\n场景需要分为几个步骤：\n1. 点击最早入住时间附近的“请选择时间”按钮。\n2. 点击弹出的时间选择框中的第二个“00”。\n3. 点击列表中第一行的删除icon。\n4. 点击提交审核按钮。\n使用的关键字有：Click, Click, ClickIcon。\n</thought>\n\n<code_block>\n# 点击最早入住时间附近的请选择时间\nClick | 请选择时间 | near=最早入住时间\n\n# 点击弹窗中的第二个“00”\nClick | 00 | idx=1 | base=POPUP\n\n# 点击列表中第一行的删除icon\nClickIconOfRow | 1 | delete\n\n# 点击提交审核\nClick | 提交审核\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定位到这个文本元素 e2e-auto-test-加速域名接入-sr，然后再点击这个元素旁边的超链接",
        "output": "<thought>\n首先需要定位到文本元素 \"e2e-auto-test-加速域名接入-sr\"，然后找到它旁边的超链接并点击。可以通过 FindByText 定位文本元素，再使用 ClickElemToTheDirectionOf 点击文本元素右边的超链接。\n</thought>\n\n<code_block>\n# 定位文本元素 \"e2e-auto-test-加速域名接入-sr\"\n${elem}  FindByText | e2e-auto-test-加速域名接入-sr\n\n# 点击文本元素右边的超链接\nClickElemToTheDirectionOf | ${elem} | right | a\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果今天日期(例如：2023-11-16)是大于本月的4号，就打印xx,否则打印yy",
        "output": "<thought>\n首先需要获取当前日期，然后提取当前的日作为判断条件。比较当前日与4，如果大于则打印\"xx\"，否则打印\"yy\"。使用Robot Framework内置的IF语法进行条件判断。\n</thought>\n\n<code_block>\n# 获取当前日期，并提取出日\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n${current_day}  Convert Date  ${current_date}  result_format=%d\n\n# 比较今天日期是否大于4号\nIF  '${current_day}' > '04'\n    Log  xx\nELSE\n    Log  yy\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证表格第一行的“用户名”=${creator_name}，“已标注数量”=3，“标注量占比”=100%，“进入质检数量”=3",
        "output": "<thought>\n1. 首先需要验证表格第一行的各个单元格内容是否符合预期\n2. 对于\"用户名\"列，需要检查是否等于变量${creator_name}\n3. 对于\"已标注数量\"、\"标注量占比\"、\"进入质检数量\"列，需要检查是否分别等于3、100%、3\n4. 可以使用CheckCellHas关键字来验证每个单元格的内容\n5. 由于是验证第一行，row_name_or_id参数使用1\n6. 列名直接使用中文列名作为参数\n</thought>\n\n<code_block>\n# 验证第一行用户名列等于${creator_name}\nCheckCellHas | 1 | 用户名 | ${creator_name}\n\n# 验证第一行已标注数量列等于3\nCheckCellHas | 1 | 已标注数量 | 3\n\n# 验证第一行标注量占比列等于100%\nCheckCellHas | 1 | 标注量占比 | 100%\n\n# 验证第一行进质检数量列等于3\nCheckCellHas | 1 | 进入质检数量 | 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 respJson 中的 name",
        "output": "<thought>\n我们需要从 JSON 对象中提取名为 \"name\" 的字段值，使用提供的关键字 `GetValuesFromJson` 完成此任务。\n</thought>\n\n<code_block>\n# 从JSON对象 respJson 中获取名为 name 的值\n${value}  GetValuesFromJson | ${respJson} | name\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个关键字：“添加参与分析的事件过滤条件”， 接受 group_name, args 参数，主要逻辑是：\n# 1. 如果group_name为A, 则抛出异常信息：事件A为起始事件，请使用 “添加起始事件过滤条件” 或 “添加终止事件过滤条件” 关键字处理\n# 2. 将 group_name 映射为index, 映射关系为：A: 0, B: 1, C:2, D: 3, E:4\n# 3. 点击第index个过滤条件按钮，等待0.5s\n# 4. 在第index个 div class=interest-events-box 元素elem1中，找到 div class包含index_container 的后代元素elem2的直接后代元素 div class=ant-row, 向其中输入一个或多个 args",
        "output": "<thought>\n任务是编写一个关键字来处理事件过滤条件逻辑。首先，需要处理异常情况，如果`group_name`是A，就抛出异常。然后，根据提供的映射关系获取`index`，接着点击对应的过滤条件按钮，等待0.5秒，最后在特定选择器中输入`args`。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加参与分析的事件过滤条件\n    [Arguments]  ${group_name}  @{args}\n\n    # 创建 group 映射\n    ${group_map}  Create Dictionary  A=0  B=1  C=2  D=3  E=4\n\n    # 检查 group_name 是否为 A\n    IF  \"${group_name}\" == \"A\"\n        Fail  事件A为起始事件，请使用 “添加起始事件过滤条件” 或 “添加终止事件过滤条件” 关键字处理\n    END\n\n    # 获取 index\n    ${index}  Set Variable  ${group_map[\"${group_name}\"]}\n\n    # 点击第 index 个过滤条件按钮\n    ClickElem  button:contains(过滤条件):eq(${index})\n\n    # 等待 0.5 秒\n    Sleep  0.5s\n\n    # 定义选择器 1\n    ${selector1}  Set Variable  div.interest-events-box:eq(${index})\n\n    # 定义选择器 2\n    ${selector2}  Set Variable  ${selector1} div[class*=index_container] > div.ant-row\n\n    # 填入参数 args\n    FillArea  ${selector2}  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 用户运营商分布 下面的 流量",
        "output": "<thought>\n在这个场景中，我们需要点击“用户运营商分布”下面的“流量”。我们可以使用`ClickTextToTheDirectionOf`关键字，其中基准元素为“用户运营商分布”，方向为“bottom”，目标文本为“流量”。\n</thought>\n\n<code_block>\n# 点击用户运营商分布下方的流量\nClickTextToTheDirectionOf | 用户运营商分布 | bottom | 流量\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${vs_benchmark_val}大于0则报错",
        "output": "<thought>\n在这个场景中，我们需要判断一个变量${vs_benchmark_val}是否大于0，如果大于0就报错。为了实现这个功能，我们可以使用Robot Framework的IF语句判断条件。当${vs_benchmark_val}大于0时，我们可以利用RF内置的\"Fail\"关键字来触发错误。对于RF的IF/ELSE语法，条件判断结束后需要用END结束。\n</thought>\n\n<code_block>\n# 如果${vs_benchmark_val}大于0则报错\nIF  ${vs_benchmark_val} > 0\n    Fail  Value is greater than 0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置配置空间：launch_test_hdl,回车",
        "output": "<thought>\n这个任务要求在配置空间中输入文本“launch_test_hdl”并回车。可以使用`SetField`关键字来完成这个任务，因为我们需要将文本输入到指定字段中并按下回车。\n</thought>\n\n<code_block>\n# 设置配置空间为：launch_test_hdl，并回车\nSetField | 配置空间 | launch_test_hdl | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取第一个“服务满意度”的后一个元素的文案",
        "output": "<thought>\n首先需要查找文本为“服务满意度”的元素，然后查找其后的下一个元素，最后获取该元素的文本内容。可以使用FindByText关键字查找“服务满意度”元素，然后使用FindElem查找它的下一个元素，最后使用GetElemText获取文本。\n</thought>\n\n<code_block>\n# 查找第一个文本为“服务满意度”的元素\n${elem}  FindByText  服务满意度\n\n# 查找“服务满意度”元素的下一个元素\n${next_elem}  FindElem  ${elem} + *\n\n# 获取下一个元素的文本\n${text}  GetElemText  ${next_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 检查页面上有跳过两字就点击，没有则跳过",
        "output": "<thought>\n 首先需要检查页面是否存在“跳过”文本。可以使用`IsAnyTextExisting`关键字来判断。如果存在，则使用`Click`关键字点击该文本。\n </thought>\n \n <code_block>\n # 判断页面是否存在“跳过”\n ${exist}  IsAnyTextExisting | 跳过\n \n # 如果存在，则点击“跳过”\n IF  $exist\n  Click | 跳过\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "不勾选 弹窗中的 隐藏0元账单",
        "output": "<thought>\n为了实现“不勾选弹窗中的‘隐藏0元账单’”，我们需要使用CheckBoxOff关键字。因为这个复选框在弹窗中，我们需要指定base=POPUP。关键字参数name_or_index应该是‘隐藏0元账单’。\n\n所以，我们将使用以下关键字：\nCheckBoxOff | 隐藏0元账单 | base=POPUP\n</thought>\n\n<code_block>\n# 取消勾选弹窗中的‘隐藏0元账单’\nCheckBoxOff | 隐藏0元账单 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击浮层上的确定按钮",
        "output": "<thought>\n根据题目要求，我们需要点击浮层上的确定按钮。这个场景可以通过\"Click\"关键字实现，因为\"Click\"关键字可以点击指定的文本，我们只需要指定基准元素为\"POPUP\"表示弹出层/弹窗即可。\n</thought>\n\n<code_block>\n# 点击浮层上的确定按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在请输入插件名称关键词中输入 ComfyUI-ResAdapter 并回车，如果ComfyUI-ResAdapter表格行中包含 已下载，就点击 ‘删除’ 小图标，然后点击确定，如果页面包含：确定要在本房间卸载该插件吗，然后点击确定",
        "output": "<thought>\n步骤如下：\n1. 使用`SetField`在\"请输入插件名称关键词\"中输入\"ComfyUI-ResAdapter\"并回车。\n2. 使用`IsRowContainsText`检查\"ComfyUI-ResAdapter\"所在表格行中是否包含\"已下载\"。\n3. 如果包含，使用`ClickIconOfRow`点击\"删除\"icon。\n4. 再使用`Click`点击\"确定\"。\n5. 使用`IsAnyTextExisting`检查页面是否包含\"确定要在本房间卸载该插件吗\"。\n6. 如果包含，就再次点击\"确定\"。\n</thought>\n\n<code_block>\n# 在请输入插件名称关键词中输入 ComfyUI-ResAdapter 并回车\nSetField | 插件名称关键词 | ComfyUI-ResAdapter | enter=True\n\n# 判断ComfyUI-ResAdapter表格行中是否包含 已下载\n${exist}  IsRowContainsText | ComfyUI-ResAdapter | 已下载\n\nIF  $exist\n    # 表格行中包含已下载时，点击删除icon\n    ClickIconOfRow | ComfyUI-ResAdapter | 删除\n\n    # 点击确定\n    Click | 确定\nEND\n\n# 判断页面是否包含 \"确定要在本房间卸载该插件吗\"\n${exist}  IsAnyTextExisting | 确定要在本房间卸载该插件吗\n\nIF  $exist\n    # 点击确定\n    Click | 确定\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择表格当中第一个状态为“运行中”的这一行的第一列的文字，进行点击，其实就是先获取表格状态列的所有值，找到第一个为运行中的行，然后点击此行的第一列",
        "output": "<thought>\n1. 首先使用关键字 GetColValues 获取表格状态列的所有值，保存为列表变量。\n2. 使用 FOR 循环迭代列表变量，通过 IF 判断找出第一个“运行中”的行数。\n3. 然后使用 ClickTextOfCell 根据找到的行数，点击第一列的文字。\n</thought>\n\n<code_block>\n# 获取表格状态列的所有值\n@{statuses}  GetColValues | 状态 \n\nFOR   ${index}  ${status}  IN ENUMERATE  @{statuses}\n    # 找出第一个为运行中的行数\n    IF  '${status}' == '运行中'\n        # 记录行数，点击此行的第一列\n        ${row} =  Evaluate  ${index} + 1\n        ClickTextOfCell | ${row} | 1 | *\n        Exit For Loop\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置class包含stream-array-events的区域中输入：test L2 指标 test count > 1 数字 a",
        "output": "<thought>\n 需要在指定的class区域输入多个值，适合使用`FillArea`关键字。`FillArea`可以通过jquery选择器定位元素并输入多个值。选择器需要包含指定的class，输入的值依次为：test, L2, 指标, test, count, >, 1, 数字, a。\n </thought>\n \n <code_block>\n # 在class包含stream-array-events的区域中输入相应的值\n FillArea | div[class*=stream-array-events] | test | L2 | 指标 | test | count | > | 1 | 数字 | a\n </code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 Excel 上，等待0.5s",
        "output": "<thought>\n需要先将鼠标移动到文本\"Excel\"上，然后等待0.5秒。可使用MoTo关键字进行移动，再使用Sleep关键字进行等待。\n</thought>\n\n<code_block>\n# 移动到Excel文本上\nMoTo | Excel\n\n# 等待0.5秒\nSleep | 0.5s\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 ${elem}  表示class 为 InlineFirstItem__outer-container__TQuRy 的第 ${index} 个 div",
        "output": "<thought>\n首先，我们需要创建一个变量 `${elem}`，它表示类名为 `InlineFirstItem__outer-container__TQuRy` 的第 `${index}` 个 div。我们将使用 RF 的 `Set Variable` 关键字来创建变量并使用 jQuery 选择器构建 `:eq` 伪类选择器来定位目标元素。\n</thought>\n\n<code_block>\n# 创建变量 ${elem}，表示 class 为 InlineFirstItem__outer-container__TQuRy 的第 ${index} 个 div\n${elem}  Set Variable  div[class=InlineFirstItem__outer-container__TQuRy]:eq(${index - 1})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“登录VeStack” 的关键字，接受 user, password 参数，默认值分别为：‘veStack_iaas’ 和 ‘Root@123’，作用是：\n1. 打开浏览器访问 http://10.56.226.2:33060/product/ecs/region:ecs+cn-velab-auto/dashboard\n2. 输入主账号 和 密码, 点击登录，等待页面出现：云服务器",
        "output": "<thought>\n1. 使用`OpenBrowser`关键字打开浏览器并访问给定URL。\n2. 使用`BatchSetFields`关键字输入主账号和密码。\n3. 使用`Click`关键字点击登录按钮。\n4. 使用`WaitText`关键字等待页面出现“云服务器”。\n\n需要注意：使用默认参数值，将user和password参数值设定，最后等待“云服务器”文本出现。\n</thought>\n\n<code_block>\n*** Keywords ***\n登录VeStack\n    [Arguments]  ${user}=veStack_iaas  ${password}=Root@123\n    # 打开浏览器并访问指定URL\n    OpenBrowser  http://10.56.226.2:33060/product/ecs/region:ecs+cn-velab-auto/dashboard\n    \n    # 输入主账号和密码\n    BatchSetFields  主账号=${user}  密码=${password}\n    \n    # 点击登录按钮\n    Click  登录\n    \n    # 等待页面出现“云服务器”\n    WaitText  云服务器\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 编辑 icon",
        "output": "<thought>\n根据需求，需要点击名称为“编辑”的图标。在提供的关键字中，`ClickIcon` 可以通过传递 `name` 参数来实现这一需求。因此，我们可以使用 `ClickIcon` 关键字并指定 `name='edit'` 来完成任务。\n</thought>\n\n<code_block>\n# 点击编辑图标\nClickIcon | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面没有 ‘验证码’，则点击登录",
        "output": "<thought>\n首先使用`GetElemCount`关键字来获取文本为‘验证码’的元素数量。如果结果为0，说明页面没有‘验证码’，这时使用`Click`关键字点击登录。可以利用RF内置的IF语法来实现条件判断。\n</thought>\n\n<code_block>\n# 获取‘验证码’的元素个数\n${cnt}  GetElemCount  :contains(验证码)\n\n# 如果‘验证码’不存在，则点击登录\nIF  ${cnt} == 0\n    Click  登录\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "跳转至新打开窗口",
        "output": "<thought>\n要跳转到新打开的窗口，我们可以使用关键字\"ToNewWindow\"，这是因为这个关键字会执行浏览器的窗口切换操作，将焦点从当前窗口切换到新打开的窗口。\n</thought>\n\n<code_block>\n# 切换到新打开的窗口\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置参与分析的事件”，接受 group_name, args 参数，业务逻辑是：\n1. 先将 group_name 映射为index, 映射关系为：A: 0, B: 1, C:2, D: 3, E:4\n2. 查找第index个div class=interest-events-box 元素elem1, 如果此元素不存在，就点击新增事件按钮，然后等待0.5s, 此过程最多循环4次\n3. 如果elem1已经存在，则向其后代元素 div class=interest-events-line 中输入给定的一个或多个 args",
        "output": "<thought>\n解决问题思路：\n1. 使用Create Dictionary创建group_name到index的映射。\n2. 使用Set Variable获取group_name对应的index。\n3. 使用FOR循环最多4次，每次检查div.interest-events-box对应的index是否存在。\n4. 如果不存在，点击“新增事件”按钮并休眠0.5秒，再次检查。\n5. 使用FindElem查找目标元素。\n6. 如果元素存在，使用FillArea向其后代元素中输入args。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置参与分析的事件\n    [Arguments]  ${group_name}  @{args}\n    ${dict}  Create Dictionary  A=0  B=1  C=2  D=3  E=4\n    ${index}  Set Variable  ${dict[\"${group_name}\"]}\n    ${i}  Set Variable  0\n    FOR  ${i}  IN RANGE  4\n        ${exist}  IsAnyElemExisting  div.interest-events-box:eq(${index})\n        Exit For Loop If  ${exist}\n        Click  新增事件\n        Sleep  0.5s\n    END\n    ${elem1}  FindElem  div.interest-events-box:eq(${index})\n    FillArea  ${elem1} div.interest-events-line  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为'新增策略-观察模式'的关键字，接受参数：加速域名，预警带宽，检测时段，拦截方式，限速大小，持续时长，参数默认值均为EMPTY，逻辑如下：\n# 1. 设置 加速域名为：加速域名\n# 2. 设置 预警带宽为：预警带宽\n# 3. 设置 检测时段为：检测时段\n# 4. 设置 拦截方式为：拦截方式\n# 5. 如果拦截 拦截方式为：观察模式，则 点击右下角 确定\n# 6. 如果拦截 拦截方式为：自动限速，则 将限速大小 设置为：限速大小，将持续时长 设置为：持续时长\n# 7. 如果拦截 拦截方式为：自动封禁，则 将限速大小 设置为：限速大小\n# 8. 点击 右下角确定",
        "output": "<thought>\n根据需求，我们需要针对不同参数设置对应字段，并在不同条件下执行不同的操作，例如点击确定按钮或设置额外的参数值。我们可以使用 `BatchSetFields` 来批量设置字段值，使用 `IF/ELSE` 结构来执行不同的条件判断和操作。\n</thought>\n\n<code_block>\n*** Keywords ***\n新增策略-观察模式\n    [Arguments]  ${加速域名}=${EMPTY}  ${预警带宽}=${EMPTY}  ${检测时段}=${EMPTY}  ${拦截方式}=${EMPTY}  ${限速大小}=${EMPTY}  ${持续时长}=${EMPTY}\n    \n    # 批量设置字段值\n    BatchSetFields  加速域名=${加速域名}  预警带宽=${预警带宽}  检测时段=${检测时段}  拦截方式=${拦截方式}\n    \n    # 根据拦截方式执行不同的操作\n    IF  \"${拦截方式}\" == \"观察模式\"\n        ClickTextToTheDirectionOf  SCREEN_CENTER  bottomRight  确定\n    ELSE IF  \"${拦截方式}\" == \"自动限速\"\n        BatchSetFields  限速大小=${限速大小}  持续时长=${持续时长}\n        ClickTextToTheDirectionOf  SCREEN_CENTER  bottomRight  确定\n    ELSE IF  \"${拦截方式}\" == \"自动封禁\"\n        SetField  限速大小  ${限速大小}\n        ClickTextToTheDirectionOf  SCREEN_CENTER  bottomRight  确定\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面上存在 “无需比对”按钮 就点击它，之后出现弹窗点击“确定”按钮，重复此操作直到页面上没有 “开始比对”字样，或达到最大重复次数：5",
        "output": "<thought>\n对于这个任务，首先需要判断页面上是否存在“无需比对”按钮，如果存在就点击。接着，检测弹窗并点击“确定”按钮。重复这个操作，直到页面上不再有“开始比对”字样，或者重复次数达到5次。为了实现这个逻辑，需要用到循环和条件判断。我们将使用IsAnyTextExisting检查“无需比对”按钮是否存在，用Click关键字点击按钮，然后用CheckHasText判断“开始比对”是否在页面上，来决定是否继续循环。\n</thought>\n\n<code_block>\n${MAX_TIMES}    Set Variable    5\n\nFOR    ${i}    IN RANGE    ${MAX_TIMES}\n    # 检查是否存在“无需比对”按钮\n    ${exist}    IsAnyTextExisting    无需比对\n    IF    ${exist}\n        # 点击“无需比对”按钮\n        Click    无需比对\n        # 等待弹窗出现并点击“确定”\n        WaitText    确定\n        Click    确定    base=POPUP\n    ELSE\n        # 如果按钮不存在，退出循环\n        Exit For Loop\n    END\n    # 检查页面是否还有“开始比对”字样\n    ${exist}    IsAnyTextExisting    开始比对\n    IF    not ${exist}\n        # 如果没有“开始比对”字样，退出循环\n        Exit For Loop\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在菜单栏找到 服务概览 并点击, 在页面中找到 快速入门 并点击，等待10s，关闭弹框，等待确定按钮消失",
        "output": "<thought>\n首先，我需要点击菜单栏中的\"服务概览\"，然后在新页面中找到并点击“快速入门”。接着，等待10秒以确保页面加载或其他动态内容显示。关闭任何出现的弹框，然后等待“确定”按钮的元素消失。\n</thought>\n\n<code_block>\n# 点击菜单栏中的 服务概览\nClickMenu | 服务概览\n\n# 点击页面中的 快速入门\nClick | 快速入门\n\n# 等待10秒，确保页面加载完成\nSleep | 10s\n\n# 关闭弹框\nCloseNotifications\n\n# 等待 确定 按钮消失\nWaitTextDisappear | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将第2个class为ovui-select__options保存为基准图",
        "output": "<thought>\n在这个场景中，我们需要截取第2个class为ovui-select__options的元素并保存为基准图。根据规则，第2个元素在jQuery选择器中应表示为:eq(1)。我们可以使用ImageDiff关键字来截取图片并保存。需要传递selector参数来定位元素，并使用pic_name参数来指定保存的基准图片名称。\n</thought>\n\n<code_block>\n# 截取第2个class为ovui-select__options的元素的图片并保存为基准图\nImageDiff | [class=ovui-select__options]:eq(1) | pic_name=基准图\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 Summary distribution，选择包含“hxq经纪人44(123)\"，校验表格第一行第一列包含“hxqppe4\"",
        "output": "<thought>\n为了完成这个任务，我需要执行以下步骤：\n1. 点击文本 \"Summary distribution\"。\n2. 选择包含文本 \"hxq经纪人44(123)\" 的选项。\n3. 校验表格的第一行第一列是否包含文本 \"hxqppe4\"。\n\n我可以首先使用 Click 关键字点击 \"Summary distribution\"。接着，我使用 SelectOption 来选择包含 \"hxq经纪人44(123)\" 的选项。最后，我使用 CheckCellHas 关键字来检查表格的第一行第一列是否包含 \"hxqppe4\"。\n</thought>\n\n<code_block>\n# 点击 Summary distribution\nClick | Summary distribution\n\n# 选择包含“hxq经纪人44(123)\" 的选项\nSelectOption | hxq经纪人44(123)\n\n# 校验表格第一行第一列包含“hxqppe4”\nCheckCellHas | 1 | 1 | hxqppe4\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到大屏文件",
        "output": "<thought>\n解决这个问题的思路是使用RF中的MoTo关键字把鼠标移动到\"大屏文件\"的元素上。这是一个非常直接的方法，不需要其他额外操作。\n</thought>\n\n<code_block>\n# 移动鼠标到\"大屏文件\"\nMoTo | 大屏文件\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置产品审批人  yinpengcheng.123@bytedance.com 回车，如果执行失败则进行一次重试",
        "output": "<thought>\n我们需要使用`SetField`来设置产品审批人，并输入回车。为了实现重试机制，可以利用`TRY/EXCEPT`结构。如果设置失败，就在`EXCEPT`中重试一次。\n</thought>\n\n<code_block>\n# 尝试设置产品审批人\nTRY\n    SetField | 产品审批人 | yinpengcheng.123@bytedance.com | enter=True\nEXCEPT\n    # 如果失败，重试一次\n    SetField | 产品审批人 | yinpengcheng.123@bytedance.com | enter=True\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击name=dd或id=dd的按钮",
        "output": "<thought>\n我们可以通过使用关键字ClickElem来解决该问题。该关键字接受一个jquery选择器作为参数，可以用来指定id或name属性为dd的元素。我们可以通过一个逗号分隔的选择器来选择name=dd或id=dd的元素。\n</thought>\n\n<code_block>\n# 点击name=dd或id=dd的按钮\nClickElem | button[name='dd'],button[id='dd']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验变量 value 和 变量 ${大屏URL} 相等",
        "output": "<thought>\n首先需要判断如何校验两个变量的相等性。在Robot Framework中，可以使用`Should Be Equal As Strings`关键字来比较两个字符串变量的值是否相同。因此，这里可以使用`Should Be Equal As Strings`关键字来解决这个问题，传入变量`value`和`${大屏URL}`作为参数。\n</thought>\n\n<code_block>\n# 校验变量 value 和变量 ${大屏URL} 相等\nShould Be Equal As Strings  ${value}  ${大屏URL}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置业务维度事件指标”，接受参数 name, args, 主要作用是:\n1. 先判断class包含single-events__style且文本包含name的元素或style文本包含name的元素：${elem1}是否存在（1s超时）,如果不存在就点击事件指标按钮，此过程最多进行4次\n2. 如果元素${elem1}已经存在，就向字段name中输入给定的一个或多个 args",
        "output": "<thought>\n需要使用FOR语句来实现循环，并在循环内部使用IsAnyElemExisting关键字进行元素存在判断，如果不存在就进行点击操作，然后增加重试计数，直到达到最大重试次数。当找到指定的元素或完成所有重试之后，退出循环，并检查是否因为找不到指定元素而退出循环，如果是，则报错退出。否则，使用SetField关键字向已经找到的字段输入给定的参数。\n</thought>\n\n<code_block>\n设置业务维度事件指标\n    [Arguments]  ${name}  @{args}\n    # 设置最大重试次数为4\n    ${max_retry}  Set Variable  4\n    # 初始化当前重试次数为0\n    ${retry}  Set Variable  0\n    # 使用循环进行元素存在判断和点击操作\n    FOR  ${i}  IN RANGE  ${max_retry}\n        # 判断class包含single-events__style且文本包含name的元素或style文本包含name的元素是否存在\n        ${exist}  IsAnyElemExisting | [class*=single-events__style]:contains(${name}), span[style*=${name}] | timeout=1\n        # 如果元素存在，跳出循环\n        IF  ${exist}\n            Exit For Loop\n        END\n        # 如果元素不存在，点击事件指标按钮\n        Click  事件指标\n        # 更新当前重试次数\n        ${retry}  Evaluate  ${retry} + 1\n    END\n    # 如果重试次数达到最大值，表示元素不存在，无法进行后续操作\n    IF  ${retry} == ${max_retry}\n        Fail  无法找到指定元素\n    END\n    # 如果元素存在，向字段name中输入给定的一个或多个 args\n    SetField | ${name} | @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击取消按钮右侧的入库按钮",
        "output": "<thought>\n要想实现点击\"取消\"按钮右侧的\"入库\"按钮，可以通过现有关键字\"ClickTextToTheDirectionOf\"来实现。先找到\"取消\"按钮，然后根据方向信息找到右侧的\"入库\"按钮并点击。\n</thought>\n\n<code_block>\n# 点击取消按钮右侧的入库按钮\nClickTextToTheDirectionOf | 取消 | right | 入库\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到所有的checkbox 都变成off状态",
        "output": "<thought>\n为了将所有复选框元素都设置为off状态，我们需要找到所有的checkbox元素，然后逐一取消勾选。可以使用FindElem关键字来获取所有checkbox元素的选择器，然后使用CheckBoxOff关键字取消勾选。\n</thought>\n\n<code_block>\n# 找到所有的checkbox元素\n${checkboxes}  FindElem | input[type=checkbox]\n\n# 循环遍历每一个checkbox元素并将其设置为off状态\nFOR  ${index}  IN  @{checkboxes}\n   CheckBoxOff | ${index}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印元素 ${elem} 的信息",
        "output": "<thought>\n首先，考虑到需要打印元素的信息，可以使用 PrintElemRect 关键字。该关键字可以获取并打印元素的空间尺寸和位置信息。由于目标元素为变量 ${elem}，我们直接将其传递给 PrintElemRect 即可。\n</thought>\n\n<code_block>\n# 打印元素 ${elem} 的信息\nPrintElemRect  ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验class=card-XseJjh的页面元素中包含：${template_name}、${creator_name}、“更新于 2025-04-02 16:26:24”、“1次使用”",
        "output": "<thought>\n1. 需要校验一个特定class的元素中包含多个文本，使用CheckHasText关键字最合适\n2. 需要校验的文本包括变量${template_name}、${creator_name}和固定文本\"更新于 2025-04-02 16:26:24\"、\"1次使用\"\n3. 由于是校验特定元素而非整个页面，需要指定base参数为元素选择器\n4. 所有文本都需要同时存在，所以使用CheckHasText而不是CheckHasAnyText\n5. 日期时间格式固定，不需要精确匹配，保持strict=False默认值即可\n</thought>\n\n<code_block>\n# 校验card元素中包含所有指定文本\nCheckHasText  ${template_name}  ${creator_name}  更新于 2025-04-02 16:26:24  1次使用  base=[class=card-XseJjh]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“删除统计口径”，接受一个参数name, 作用是：\n1. 输入name 到 “请输入属性名”中，查询\n2. 点击删除，校验页面包含 ‘是否要删除统计口径’，然后点击确定按钮",
        "output": "<thought>\n要解决此问题，我需要：\n1. 使用`SetField`将参数`name`输入到“请输入属性名”中。\n2. 查询后点击删除按钮。\n3. 使用`CheckHasText`校验页面是否包含‘是否要删除统计口径’。\n4. 确认后，点击“确定”按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n删除统计口径\n    [Arguments]  ${name}\n    \n    # 输入name到请输入属性名字段中\n    SetField  请输入属性名  ${name}\n\n    # 点击删除按钮\n    Click  删除\n\n    # 校验页面包含‘是否要删除统计口径’\n    CheckHasText  是否要删除统计口径\n\n    # 点击确定按钮\n    Click  确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 class包含ant-card-body，且文本包含 ‘时间切割’的元素 中输入 1和天",
        "output": "<thought>\n首先，我们需要查找 class 包含 ant-card-body 并且文本包含 “时间切割” 的元素。找到该元素后，然后使用 FillArea 关键字在这个元素中输入 1 和 天。\n</thought>\n\n<code_block>\n# 查找 class 包含 ant-card-body 且文本包含“时间切割”的元素\n${target_elem}  FindElem | div[class*=ant-card-body]:contains(时间切割)\n\n# 在目标元素中输入 1 和 天\nFillArea | ${target_elem} | 1 | 天\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开「IPv6 加速」右侧的开关，其实就是设置「IPv6 加速」字段的值为开",
        "output": "<thought>\n为了完成这个任务，我首先会定位到「IPv6 加速」这个字段，然后填入值“开”。虽然它是一个开关，但在自动化测试中，通常我们通过设置值为“开”或“关”来模拟用户的点击操作。为此，我会使用SetField关键字，因为它很适合这种需要填入特定值的任务。\n</thought>\n\n<code_block>\n# 定位到「IPv6 加速」字段并将其值设为“开”\nSetField | IPv6 加速 | 开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击链接内容下方的添加",
        "output": "<thought>\n根据描述，我们需要点击“链接内容”下方的“添加”按钮。可以使用ClickTextToTheDirectionOf关键字，其中“链接内容”作为基准元素，方向为“bottom”，目标文本为“添加”。\n</thought>\n\n<code_block>\n# 点击链接内容下方的添加\nClickTextToTheDirectionOf | 链接内容 | bottom | 添加\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 包含TitleWrapper的class中的内容",
        "output": "<thought>\n要获取包含TitleWrapper的class中的内容，我们可以使用FindElem关键字来定位具有该class的元素，然后使用GetElemText关键字获取元素的文本内容。\n</thought>\n\n<code_block>\n# 查找class包含TitleWrapper的元素\n${elem}  FindElem | [class*=TitleWrapper]\n\n# 获取该元素的文本内容\n${content}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "集团管理员输入框输入admin${usn}1 选择admin${usn}1 并点击确定",
        "output": "<thought>\n首先，使用SetField关键字在集团管理员的输入框中输入文本admin${usn}1。然后，使用SelectOption选择相同的值admin${usn}1。最后，使用Click关键字来点击确定按钮。\n</thought>\n\n<code_block>\n# 在集团管理员输入框中输入admin${usn}1\nSetField | 集团管理员 | admin${usn}1\n\n# 选择值admin${usn}1\nSelectOption | admin${usn}1\n\n# 点击确定按钮\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击知道了上方的关闭小图标",
        "output": "<thought>\n任务要求点击“知道了”文本上方的关闭icon。可以使用ClickIconToTheDirectionOf关键字，基准元素为“知道了”，方向为top，目标是close图标。\n</thought>\n\n<code_block>\n# 点击知道了上方的关闭icon\nClickIconToTheDirectionOf | 知道了 | top | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在请输入抖音号名称/ID搜索 的输入框中输入maidanglaodo，然后点击下方的maidanglaodo",
        "output": "<thought>\n首先，使用SetField关键字在“请输入抖音号名称/ID搜索”的input/textarea中输入“maidanglaodo”。然后，使用ClickTextToTheDirectionOf关键字点击该输入框下方的文本“maidanglaodo”。\n</thought>\n\n<code_block>\n# 在“请输入抖音号名称/ID搜索”的input/textarea中输入maidanglaodo\nSetField | 请输入抖音号名称/ID搜索 | maidanglaodo\n\n# 点击输入框下方的maidanglaodo\nClickTextToTheDirectionOf | 请输入抖音号名称/ID搜索 | bottom | maidanglaodo\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间,格式为Y-M-D",
        "output": "<thought>\n为了获取当前日期，Robot Framework 标准库中已经提供了相关的关键字可以直接获取并格式化日期。这里可以使用 `Get Current Date` 关键字来获取当前日期，关键字可以将日期格式化为指定的格式Y-M-D。\n</thought>\n\n<code_block>\n# 获取当前时间，格式化为Y-M-D\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 打印格式化后的当前日期\nLog  ${current_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击源站清单下方的查看详情\n    跳转到新的页面\n    验证页面中有源站配置\n    切换到之前的窗口",
        "output": "<thought>\n为了解决这个问题，我们需要进行以下步骤：\n1. 首先，点击“源站清单”下方的“查看详情”。\n2. 假设“源站清单”是一个已知的基准元素，我们需要使用`ClickTextToTheDirectionOf`关键字来实现该操作。\n3. 然后切换到新的窗口，我们使用`ToNewWindow`关键字。\n4. 验证新页面中是否存在“源站配置”这个文本，可以使用`CheckHasText`关键字。\n5. 最后，切换回之前的窗口，使用`ToPrevWindow`关键字。\n</thought>\n\n<code_block>\n# 点击源站清单下方的查看详情\nClickTextToTheDirectionOf | 源站清单 | bottom | 查看详情\n\n# 切换到新的窗口\nToNewWindow\n\n# 校验页面中包含“源站配置”\nCheckHasText | 源站配置\n\n# 切换回之前的窗口\nToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量name=xxx, value=yyy",
        "output": "<thought>\n需要创建两个变量，一个是name，其值为xxx；另一个是value，其值为yyy。可以使用Robot Framework的Set Variable关键字完成。\n</thought>\n\n<code_block>\n# 设置/创建变量 name = xxx\n${name}  Set Variable  xxx\n\n# 设置/创建变量 value = yyy\n${value}  Set Variable  yyy\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “查找canvas” 的关键字，接受参数 text, idx, 其中 idx 的默认值为1，表示给定文案text下方的第一个canvas元素，关键字的逻辑是：\n# 1. 查找文本严格匹配 text 的元素，然后查找其祖先中最近的一个含有第 idx 个 canvas 的div祖先元素\n# 2. 在这个祖先元素中查找第 idx 个 canvas 元素并返回",
        "output": "<thought>\n首先，需要查找文本严格匹配 text 的元素。接着，从这个元素开始查找其祖先中包含第 idx 个 canvas 的 div 祖先元素。最后，在这个祖先元素中查找第 idx 个 canvas 元素并返回。因此，可以使用 FindByText 来查找文本元素，FindParentElem 查找祖先元素，再用 FindElem 查找目标 canvas。\n</thought>\n\n<code_block>\n*** Keywords ***\n查找canvas\n    [Arguments]  ${text}  ${idx}=1\n\n    # 查找文本严格匹配 text 的元素\n    ${elem}  FindByText  ${text}  strict=True\n    \n    # 查找包含第 ${idx} 个 canvas 的 div 祖先元素\n    ${ancestor}  FindParentElem  ${elem}  div:has(canvas:eq(${idx}-1))\n    \n    # 在这个祖先元素中查找第 ${idx} 个 canvas 元素并返回\n    ${canvas}  FindElem  canvas:eq(${idx}-1)  base=${ancestor}\n    [Return]  ${canvas}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "请求URL，https://oa-boe.bytedance.net/wfc_manage/mock/login?userId=5950169",
        "output": "<thought>\n这个场景只需要访问一个特定的URL，可以直接使用`OpenUrl`关键字来完成。由于没有其他交互需求，代码非常简单直接。\n\n分析步骤：\n1. 使用`OpenUrl`关键字打开指定URL\n2. 设置合理的超时时间（使用默认值80秒即可）\n\n不需要其他关键字，因为场景只要求访问URL，不涉及点击、请求发送或mock等操作。\n</thought>\n\n<code_block>\n# 访问登录mock页面\nOpenUrl | https://oa-boe.bytedance.net/wfc_manage/mock/login?userId=5950169\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写页面的第一个表格，表格第 9 行分别填写 a b c Hello",
        "output": "<thought>\n为了实现给第一个表格的第9行填写\"a b c Hello\", 我会使用FillRow关键字。这个关键字的功能是往指定行号的行填写值。我首先会提供行号（这里是9），然后提供需要填入的值\"a b c Hello\"。\n</thought>\n\n<code_block>\n# 往第9行填写值 a b c Hello\nFillRow | 9 | a | b | c | Hello | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入 请输入账号：wangkaipeng_2023，并点击 查询",
        "output": "<thought>\n这个场景需要先在一个名为 \"请输入账号\" 的字段中输入特定文本 \"wangkaipeng_2023\"，然后点击文本 \"查询\"。根据已有的关键字描述，使用 SetField 来输入账号，随后使用 Click 来点击 \"查询\"。\n</thought>\n\n<code_block>\n# 在\"请输入账号\"字段输入\"wangkaipeng_2023\"\nSetField | 请输入账号 | wangkaipeng_2023\n\n# 点击\"查询\"\nClick | 查询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置第2个账务账期为: 2024-08, 获取当前页面URL, 校验其中包含2024",
        "output": "<thought>\n这个问题主要包括了三个步骤，分别是设置第2个账务账期为：2024-08，获取当前页面URL，以及校验URL包含\"2024\"。\n\n对于设置账务账期，我们可以使用SetField关键字，指定要修改的字段是第2个账务账期，输入的值为2024-08。\n\n接着，我们可以使用GetCurrentUrl关键字来获取当前页面的URL。\n\n最后，我们可以使用Should Contain关键字来检查URL是否包含\"2024\"。\n\n这是一种比较直接的解决方案，通过使用RF的内置关键字来做文本的输入和检查，以及URL的获取和检查。\n</thought>\n\n<code_block>\n# 设置第2个账务账期为: 2024-08\nSetField | 账务账期 | 2024-08 | idx=1 \n\n# 获取当前页面URL\n${url}  GetCurrentUrl\n\n# 校验URL中包含'2024'\nShould Contain  ${url}  2024\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "${name_id} 可能含有中文冒号字符，怎么处理一下，让它不再包含这个字符",
        "output": "<thought>\n对于RF框架中的变量操作，可以利用Evaluate关键字执行Python代码。假设变量`${name_id}`为字符串，可以使用Python的字符串方法replace替换掉中文冒号字符。如果替换成功，变量将不再包含该字符。\n</thought>\n\n<code_block>\n# 使用Evaluate执行Python代码替换掉中文冒号字符\n${name_id}  Evaluate  ${name_id}.replace('：', '') \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置全局变量 xxx 的值为：yyy",
        "output": "<thought>\n在Robot Framework中，设置全局变量可以通过BuiltIn库的Set Global Variable关键字来实现。该关键字允许我们将指定的值赋给全局变量，确保在整个测试执行过程中该变量可以被访问和使用。\n</thought>\n\n<code_block>\n# 设置全局变量xxx的值为yyy\nSet Global Variable  ${xxx}  yyy\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面包含操作成功或者暂无数据",
        "output": "<thought>\n根据题目要求，我们需要检查页面是否包含“操作成功”或者“暂无数据”中的任意一个文本。因此，可以使用`CheckHasAnyText`关键字来解决这个问题。\n</thought>\n\n<code_block>\n# 检查页面包含“操作成功”或者“暂无数据”\nCheckHasAnyText | 操作成功 | 暂无数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "让“操作快捷键”出现在画面中",
        "output": "<thought>\n1. 首先需要明确\"操作快捷键\"是一个文本还是一个元素\n2. 根据提示，需要让这个内容\"出现在画面中\"，意味着可能需要滚动页面或移动元素到可视区域\n3. 如果\"操作快捷键\"是一个元素，可以使用MoveIntoView关键字将其移动到视野内\n4. 考虑到提示没有明确说明是文本还是元素，更通用的做法是使用MoveIntoView来处理\n5. 可以先尝试定位包含\"操作快捷键\"的元素，然后将其移动到视野内\n</thought>\n\n<code_block>\n# 将包含\"操作快捷键\"的元素移动到视野内\nMoveIntoView | :contains('操作快捷键')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“编辑自定义属性分组”，点击class包含arco-icon-edit的元素，并确定",
        "output": "<thought>\n 首先需要查找包含特定class的元素，然后点击该元素。接下来需要点击“确定”来完成操作。\n </thought>\n \n <code_block>\n # 点击class包含arco-icon-edit的元素\n ClickElem | [class*=arco-icon-edit]\n \n # 点击确认按钮\n Click | 确定\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 ‘日均有流水新主播成材率’ 下方的 span class包含card-main-value 元素，获取其文本",
        "output": "<thought>\n首先，需要查找基准文本‘日均有流水新主播成材率’。然后，使用FindElemToTheDirectionOf关键字在其下方定位到目标元素，其选择器为span[class*=card-main-value]。最后，使用GetElemText获取该元素的文本。\n</thought>\n\n<code_block>\n# 查找‘日均有流水新主播成材率’下方的目标元素\n${elem}  FindElemToTheDirectionOf | 日均有流水新主播成材率 | bottom | span[class*=card-main-value]\n\n# 获取该元素的文本\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${elements}列表中的每一个的文本都包含今天，格式为yyyy/mm/dd",
        "output": "<thought>\n首先，我们需要获取当前的日期，并将其格式化为yyyy/mm/dd的格式。可以使用Robot Framework的内置关键字来获取当前日期并格式化。之后，我们需要遍历${elements}列表，对于列表中的每一个元素，使用关键字检查其文本是否包含格式化后的日期。\n</thought>\n\n<code_block>\n# 获取当前日期并格式化为yyyy/mm/dd\n${today}  Get Current Date  result_format=%Y/%m/%d\n\n# 遍历${elements}列表，校验每个元素的文本是否包含今天的日期\nFOR  ${element}  IN  @{elements}\n    ${text}  GetElemText  ${element}\n    Should Contain  ${text}  ${today}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义一个列表，列表中有调度策略和成本优先策略",
        "output": "<thought>\n为了解决这个问题，我需要创建一个包含两个策略的列表变量。在Robot Framework中，可以使用“Create List”关键字来创建列表变量。列表中的每个元素可以是一个字符串，代表不同的策略。在这个特定的场景中，我们需要在列表中包含“调度策略”和“成本优先策略”。使用“Create List”关键字可以有效地创建这样的变量。\n</thought>\n\n<code_block>\n# 创建包含两个策略的列表变量\n@{策略列表}  Create List  调度策略  成本优先策略\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选数据复选框",
        "output": "<thought>\n我们需要使用CheckBoxOn关键字来操作名为“数据”的复选框。没有指定base或near参数，因此仅需直接使用名称。\n</thought>\n\n<code_block>\n# 勾选 “数据” 复选框\nCheckBoxOn | 数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中 Payer 并 选择 Owner，对 class 为 echarts-for-react 的元素进行截图对比，基准图名称为：${pic_name}",
        "output": "<thought>\n首先，我们需要点击弹窗中的\"Payer\"。根据说明，弹窗中的元素可以通过`base=POPUP`来定位，我们可以使用`Click`关键字来实现。\n接下来，需要选择\"Owner\"。可以使用`SelectOption`来选择给定的选项。\n最后，对class为\"echarts-for-react\"的元素进行截图对比。可以使用`ImageDiff`关键字，其中`selector`参数指定为`div.echarts-for-react`，并指定`pic_name`为给定的`${pic_name}`。\n</thought>\n\n<code_block>\n# 点击弹窗中的Payer\nClick | Payer | base=POPUP\n\n# 选择Owner\nSelectOption | Owner\n\n# 对class为echarts-for-react的元素进行截图对比，基准图名称为${pic_name}\nImageDiff | div.echarts-for-react | pic_name=${pic_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class 包含 mweb-button-terriary 区域中的第一个 svg",
        "output": "<thought>\n1. 首先需要定位到class包含\"mweb-button-terriary\"的区域，这可以通过jquery选择器来实现\n2. 然后在该区域内查找第一个svg元素，可以通过:eq(0)来定位第一个\n3. 使用ClickElem关键字来点击该元素，因为它更适合基于选择器的操作\n4. 由于是组合选择器，需要先选择父元素再选择子元素，使用空格分隔\n</thought>\n\n<code_block>\n# 点击class包含mweb-button-terriary区域中的第一个svg\nClickElem | [class*=\"mweb-button-terriary\"] svg:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘申请权限’，并切换到新打开的窗口，然后点击 '添加资源'",
        "output": "<thought>\n解决问题思路：首先需要点击‘申请权限’按钮，然后切换到新打开的窗口，最后在新窗口中点击‘添加资源’按钮。可以使用`Click`关键字来点击文本，然后使用`ToNewWindow`关键字切换窗口，再使用`Click`关键字点击新窗口中的文本。\n</thought>\n\n<code_block>\n# 点击‘申请权限’\nClick | 申请权限\n\n# 切换到新打开的窗口\nToNewWindow\n\n# 点击‘添加资源’\nClick | 添加资源\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 1.访问“https://fin-pre.bytedance.net/revenue/#/linglong/autoRevenue”页面\n # 2.点击“新增规则”\n # 3.规则名称输入“123”；规则分类选择“应付”；规则标签选择“通用”；收支方向选择“收”；帐套选择第一个\n # 4.点击确定",
        "output": "<thought>\n 要完成这个场景的自动化测试，需要依次执行以下步骤：\n 1. 使用 `OpenUrl` 关键字访问指定的URL。\n 2. 使用 `Click` 关键字点击“新增规则”。\n 3. 使用 `SetField` 关键字输入规则名称“123”。\n 4. 使用 `SelectOptionForField` 关键字分别选择“应付”、“通用”、“收”，以及选择第一个帐套。\n 5. 使用 `Click` 关键字点击“确定”。\n </thought>\n \n <code_block>\n # 1. 访问指定的URL\n OpenUrl | https://fin-pre.bytedance.net/revenue/#/linglong/autoRevenue\n \n # 2. 点击新增规则\n Click | 新增规则\n \n # 3. 输入规则名称“123”\n SetField | 规则名称 | 123\n \n # 4. 选择规则分类“应付”\n SelectOptionForField | 规则分类 | 应付\n \n # 5. 选择规则标签“通用”\n SelectOptionForField | 规则标签 | 通用\n \n # 6. 选择收支方向“收”\n SelectOptionForField | 收支方向 | 收\n \n # 7. 选择第一个帐套\n SelectOptionForField | 帐套 | OPTIONS_1\n \n # 8. 点击确定\n Click | 确定\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "下拉让class为qc-report-custom-column-table的元素完全可见，检查页面要包含”爆款卡通风“”精致卡通风“”玄幻言情风“ 等全部文案",
        "output": "<thought>\n首先需要使用MoveIntoView关键字将class为qc-report-custom-column-table的元素移动到视野内。接着使用CheckHasText关键字检查页面包含所有指定的文案。\n</thought>\n\n<code_block>\n# 将class为qc-report-custom-column-table的元素移动到视野内\nMoveIntoView | [class=qc-report-custom-column-table]\n\n# 检查页面包含指定的文案\nCheckHasText | 爆款卡通风 | 精致卡通风 | 玄幻言情风\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "同时发送shift和空格键",
        "output": "<thought>\n要同时发送shift和空格键，需要使用键盘组合键操作。RobotFramework中可以使用`Press Keys`关键字来模拟键盘操作。根据示例代码中的用法，`Press Keys`的第一个参数是选择器（这里不需要，用None），第二个参数是要按下的键组合。对于同时按下shift和空格键，应该使用\"SHIFT+SPACE\"的组合表示方式。\n</thought>\n\n<code_block>\n# 同时发送shift和空格键\nPress Keys | None | SHIFT+SPACE\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一行第一列",
        "output": "<thought>\n根据问题，我们需要点击表格的第一行第一列。\"ClickElemOfCell\"，该关键字用于点击单元格中的元素, row_name_or_id: 表格行中的文本或行号, selector为元素的jquery选择器。由于题目中没有给出具体的元素信息，我们可以将其设置为 * 表示任意元素。\n</thought>\n\n<code_block>\n# 使用ClickElemOfCell点击表格的第一行第一列中的任意元素\nClickElemOfCell | 1 | 1 | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含：wf-as-room-entry-text的div中的svg",
        "output": "<thought>\n为了完成这个任务，我们需要点击class包含\"wf-as-room-entry-text\"的div中的svg。可以使用`ClickElem`关键字，并且通过jquery选择器来定位目标元素。我们将创建一个jquery选择器来选择目标元素。\n</thought>\n\n<code_block>\n# 点击class包含\"wf-as-room-entry-text\"的div中的svg\nClickElem | div[class*='wf-as-room-entry-text'] svg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击uiat_rulelist_1717468073左侧的加号，设置用户受众规则为多个值：test_pxf_20210124_04，=，12345，然后点击添加",
        "output": "<thought>\n解决问题思路：首先点击元素uiat_rulelist_1717468073左侧的加号，可以通过使用ClickIconToTheDirectionOf关键字并设定方向为\"left\"来实现。接着，我们需要设置用户受众规则的字段，可以通过使用SetField关键字并设定需要填入的多个值来实现。最后，我们需要点击添加，可以通过使用Click关键字来实现。\n</thought>\n\n<code_block>\n# 点击uiat_rulelist_1717468073左侧的加号\nClickIconToTheDirectionOf | uiat_rulelist_1717468073 | left | plus\n\n# 设置用户受众规则\nSetField | 用户受众规则 | test_pxf_20210124_04 | = | 12345\n\n# 点击添加\nClick | 添加\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面截图中有2个${rule_status}的数据，3个${rule_name}的数据",
        "output": "<thought>\n首先需要获取页面截图中的文本，然后分别统计${rule_status}和${rule_name}在该文本中的出现次数。可以通过内置的GetPageScreenshotText关键字来获取截图中的文本，并使用Should Be True结合字符串方法计数。\n</thought>\n\n<code_block>\n# 获取页面截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验截图中包含2个${rule_status}的数据\nShould Be True  ${txt}.count('${rule_status}') == 2\n\n# 校验截图中包含3个${rule_name}的数据\nShould Be True  ${txt}.count('${rule_name}') == 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 鼠标移动到class=arco-icon-more元素，点击新增任务，设置任务名称为${testName}加上job，设置负责人为zhangxiaoyu.613，点击空白处，设置任务类型为在线任务，设置任务描述为今天的日期。点击确定。",
        "output": "<thought>\n首先，移动鼠标到指定元素上，然后点击“新增任务”。接着设置任务名称、负责人、任务类型和任务描述。最后，点击确定。需要使用的关键字包括`MoToElem`、`Click`、`SetField`、`ClickWhiteArea`和`Get Current Date`。\n</thought>\n\n<code_block>\n# 移动到class为arco-icon-more的元素\nMoToElem | [class=arco-icon-more]\n\n# 点击新增任务\nClick | 新增任务\n\n# 设置任务名称为${testName}加上job\nSetField | 任务名称 | ${testName}job\n\n# 设置负责人为zhangxiaoyu.613\nSetField | 负责人 | zhangxiaoyu.613\n\n# 点击空白处\nClickWhiteArea\n\n# 设置任务类型为在线任务\nSetField | 任务类型 | 在线任务\n\n# 获取今天的日期\n${today}  Get Current Date | result_format=%Y-%m-%d\n\n# 设置任务描述为今天的日期\nSetField | 任务描述 | ${today}\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "领取地点 选择 广州环球都会大厦",
        "output": "<thought>\n解决问题思路：\n用SetField关键字，将领取地点字段设置为广州环球都会大厦。\n</thought>\n\n<code_block>\n# 设置领取地点为广州环球都会大厦\nSetField | 领取地点 | 广州环球都会大厦\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面向下滚动，然后校验详细数据表格中第一行包含 A1 页面访问（总次数）  总次数  中国",
        "output": "<thought>\n根据问题给出的指令，我们首先需要对页面进行向下滚动操作，由关键字 \"PageDown\" 可以直接实现这个操作，默认滚动一次。其次，我们需要检查详细数据表格中的第一行是否包含 \"A1\", \"页面访问（总次数）\", \"总次数\", \"中国\"等文本。由关键字 \"CheckRowHas\" 可以实现这个操作，我们依次输入第一行行的行号1以及需要检查的文本内容即可。注意，表格应该为 \"详细数据\" 。\n</thought>\n\n<code_block>\n# 页面向下滚动\nPageDown\n\n# 校验详细数据表格的第一行包含文本A1、 页面访问（总次数）、总次数、中国\nCheckRowHas | 1 | A1 | 页面访问（总次数） | 总次数 | 中国 | tbl=详细数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击审批中心 评价管理 全部评论 未回复",
        "output": "<thought>\n在这个场景中，需要按照指定的顺序点击一系列文本，这可以使用ClickTextOneByOne关键字来实现。我们依次点击\"审批中心\"、\"评价管理\"、\"全部评论\"和\"未回复\"。由于这些操作不涉及复杂的条件处理或动态元素定位，直接使用ClickTextOneByOne可以简化代码并保证操作顺序。\n</thought>\n\n<code_block>\n# 依次点击审批中心、评价管理、全部评论和未回复\nClickTextOneByOne | 审批中心 | 评价管理 | 全部评论 | 未回复\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 向名为 abcd.txt 的文件中追加一行内容：‘你试试’",
        "output": "\n    \n<thought>\n 为了向文件中追加内容，可以使用Robot Framework的内置关键字`Append To File`。需要指定文件名和要追加的内容。\n </thought>\n \n <code_block>\n # 向名为 abcd.txt 的文件中追加一行内容：‘你试试’\n Append To File | abcd.txt | 你试试\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“清除统计口径”，接受参数name, 逻辑为：\n1. 发送 get 请求到 https://www.toutiao.com, 拿到请求结果为resp, \n2. resp是个JSON，  获取resp中 data字段下的name字段的内容subject_name，如果 subject_name与name一致，则获取获取resp中 data字段下的id字段的内容；否则抛出异常\n3. 发送 delete 请求到 https://www.toutiao.com",
        "output": "清除统计口径\n    [Arguments]  ${name}\n    # 发送 get 请求到 https://www.toutiao.com, 拿到请求结果为 resp\n    ${resp}  UiSendRequest | GET | https://www.toutiao.com\n\n    # 获取 resp中 data字段下的name字段的内容 subject_name\n    ${subject_name}  GetValuesFromJson | ${resp} | data.name\n\n    # 如果 subject_name与name一致，则获取获取resp中 data字段下的id字段的内容；否则抛出异常\n    IF  \"${subject_name}\" == \"${name}\"\n        ${id}  GetValuesFromJson | ${resp} | data.id\n    ELSE\n        Fail  Subject name does not match.\n    END\n\n    # 发送 delete 请求到 https://www.toutiao.com\n    ${delete_resp}  UiSendRequest | DELETE | https://www.toutiao.com"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 获取工单编号的值并存储到变量${bian}",
        "output": "<thought>\n 在这个问题中，我们需要获取工单编号的值并存储到变量${bian}。我们可以使用Robot Framework的\"GetFieldVal\"关键字来获取工单编号的值。我们只需要在\"GetFieldVal\"关键字后面提供我们想要获取的字段名即可，这个例子中，字段名就是\"工单编号\"。然后我们可以使用\"Set Variable\"关键字来将获取到的值存储到变量${bian}。\n </thought>\n \n <code_block>\n # 获取工单编号的值\n ${val} GetFieldVal | 工单编号\n \n # 将获取到的值存储到变量${bian}\n ${bian} Set Variable ${val}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间戳转换成文本",
        "output": "<thought>\n为了获取当前时间戳并转换成文本，可以使用Python内置的`time`模块获取时间戳，然后将其转换为字符串。使用`Evaluate`关键字执行Python代码，调用`time.time()`获取当前时间戳，并用`str()`函数将其转换为字符串。\n</thought>\n\n<code_block>\n# 获取当前时间戳并转换成文本\n${timestamp}  Evaluate  str(int(time.time()))\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将文本为 ‘资产门户’ 的元素向下滚动 50%",
        "output": "<thought>\n首先需要定位文本为“资产门户”的元素，然后使用ScrollUpDown关键字对该元素进行向下滚动50%的操作。\n</thought>\n\n<code_block>\n# 查找文本为‘资产门户’的元素\n${elem}  FindByText | 资产门户\n\n# 对该元素向下滚动50%\nScrollUpDown | ${elem} | 50%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 需求单-需求行 旁边的 哈哈",
        "output": "<thought>\n1. 首先需要理解题目要求：点击\"需求单-需求行\"旁边的\"哈哈\"文本\n2. 分析关键字选择：\n   - 需要使用\"Click\"关键字，因为需要点击文本\n   - 需要使用\"near\"参数来指定\"哈哈\"文本位于\"需求单-需求行\"旁边\n3. 考虑特殊情况：\n   - 如果有多个\"哈哈\"文本，需要明确是哪个\n   - 如果\"需求单-需求行\"和\"哈哈\"在弹出层中，需要指定base=POPUP\n4. 最终决定使用Click关键字，指定文本为\"哈哈\"，near参数为\"需求单-需求行\"\n</thought>\n\n<code_block>\n# 点击\"需求单-需求行\"旁边的\"哈哈\"\nClick | 哈哈 | near=需求单-需求行\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面包含 '已停止'，最长120秒",
        "output": "<thought>\n为了等待页面中出现文本'已停止'，可以使用`WaitText`关键字。因为要等待的文本是单个字符串，所以直接传入即可。指定超时时间为120秒。\n</thought>\n\n<code_block>\n# 等待页面包含'已停止'，最多等120秒\nWaitText | 已停止 | timeout=120\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击收款计划 右侧的编辑 小图标，在编辑筛选 中输入222，点击删除，在删除日志主题弹窗中点击类型为button的 确认 按钮",
        "output": "<thought>\n在这个场景中，我们需要依次执行以下步骤：\n\n1. 点击\"收款计划\"右侧的编辑icon。\n2. 在\"编辑筛选\"中输入222。\n3. 点击\"删除\"按钮。\n4. 在弹出的\"删除日志主题\"弹窗中，点击类型为button的\"确认\"按钮。\n\n根据描述，首先需要使用`ClickIconToTheDirectionOf`关键字结合方向选择来点击指定位置的icon。然后使用`SetField`输入指定内容，接着依次点击\"删除\"和弹窗中的\"确认\"按钮，使用`Click`关键字执行这些操作。\n\n注意事项包括：确保正确识别方向与元素关系，且在基于弹窗操作时，指定base=POPUP。\n</thought>\n\n<code_block>\n# 点击收款计划右侧的编辑icon\nClickIconToTheDirectionOf | 收款计划 | right | edit\n\n# 在编辑筛选中输入222\nSetField | 编辑筛选 | 222\n\n# 点击删除\nClick | 删除\n\n# 在删除日志主题弹窗中点击类型为button的确认\nClickElem | button:contains(确认) | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击预算科目正下方的位置",
        "output": "<thought>\n在此场景中，我们需要找到“预算科目”这个基准元素，并点击其正下方的位置。根据提供的关键字，我们可以使用`ClickDirection`关键字来完成这一操作。`ClickDirection`允许点击基准元素特定方向（如下方）距离一定delta的位置。在这里，预算科目正下方的位置是我们要点击的目标，因此我们可以设置`direction`为`bottom`。\n</thought>\n\n<code_block>\n# 点击预算科目正下方的位置\nClickDirection | 预算科目 | bottom\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个关键字 ‘点击创建合同’，逻辑：点击创建合同，如果‘出现上传合同文件’，则结束该关键字，如果不出现‘上传合同文件’，则等待5s循环，最多12次循环",
        "output": "<thought>\n为了实现这个任务，需要创建一个自定义关键字“点击创建合同”。首先，我们将点击“创建合同”文本，然后检查“上传合同文件”文本是否存在。如果存在，关键字执行结束。如果不存在，则等待5秒钟，至多循环12次以检查文本是否出现。我们将使用Click、IsAnyTextExisting和Sleep等关键字来实现这个逻辑。\n</thought>\n\n<code_block>\n*** Keywords ***\n点击创建合同\n    [Documentation]  点击创建合同，如果出现上传合同文件，则结束该关键字，如果不出现上传合同文件，则等待5s循环，最多12次循环\n    Click  创建合同\n    FOR  ${index}  IN RANGE  12\n       ${exist}=  IsAnyTextExisting  上传合同文件\n       IF  ${exist}\n           Exit For Loop\n       ELSE\n           Sleep  5s\n       END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击对话框中高级设置右侧图标",
        "output": "<thought>\n根据场景要求，需要在对话框（即弹窗）中点击“高级设置”右侧的icon。因此，可以使用ClickIconToTheDirectionOf关键字，基准元素设置为“高级设置”，方向设置为right，目标元素类型设置为icon，并将base参数设置为POPUP以指定操作在弹窗中。\n</thought>\n\n<code_block>\n# 点击对话框中“高级设置”右侧的icon\nClickIconToTheDirectionOf | 高级设置 | right | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "移动视野至 顾客实际需支付",
        "output": "<thought>\n在这个场景中，我们需要将页面视野移动到特定元素“顾客实际需支付”上。根据提供的关键字列表，`MoveIntoView` 是直接将指定元素移动到视图内的最合适关键字。\n</thought>\n\n<code_block>\n# 将元素“顾客实际需支付”移动到视图内\nMoveIntoView | :contains('顾客实际需支付')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在确定选择 点击我知道了",
        "output": "<thought>\n首先需要判断页面是否存在文本“确定选择”，如果存在，则点击“我知道了”。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本“确定选择”\n${exist}  IsAnyTextExisting | 确定选择\n\n# 如果存在，则点击“我知道了”\nIF  ${exist}\n    Click  我知道了\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${use_sub} 为假，就点击 主用户登录，然后输入主账号用户名 ${user_name}, 子用户 ${sub_username}, 密码 ${password}, 否则就输入用户名 张三，密码 password",
        "output": "<thought>\n需要使用RF的IF/ELSE语法来判断变量${use_sub}是否为假。如果为假，首先点击“主用户登录”，然后使用BatchSetFields批量设置用户名、子用户名和密码。否则，直接使用BatchSetFields来输入用户名“张三”和密码“password”。\n</thought>\n\n<code_block>\n# 判断 ${use_sub} 是否为假\nIF  not $use_sub\n    # 点击主用户登录\n    Click  主用户登录\n    # 输入主账号用户名、子账号用户名和密码\n    BatchSetFields  用户名=${user_name}  子用户名=${sub_username}  密码=${password}\nELSE\n    # 输入用户名和密码\n    BatchSetFields  用户名=张三  密码=password\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认「查询」按钮不可点击",
        "output": "<thought>\n首先，我们需要找到「查询」按钮，然后使用关键字\"Element Should Be Disabled\"来检查该元素是否被禁用。因此，我们需要提供一个正确的jquery选择器，来定位「查询」按钮。\n</thought>\n\n<code_block>\n# 定位到查询按钮\n${selector}   Set Variable  button:contains('查询')\n\n# 检查查询按钮是否不可点击\nElement Should Be Disabled  ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置复查人：dorado_test",
        "output": "<thought>\n根据描述，目标是将字段“复查人”设置为“dorado_test”。应该使用SetField关键字来完成此任务。\n</thought>\n\n<code_block>\n# 设置复查人为dorado_test\nSetField | 复查人 | dorado_test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送 post 请求到 https://www.126.com, 参数为：id=x, name=y, 如果响应中的 data 字段中包含 x 则成功，否则就失败",
        "output": "<thought>\n首先需要使用`UiSendRequest`关键字发送POST请求到指定的URL，并传递请求体参数`id=x, name=y`。接收到响应后，检查响应中的`data`字段是否包含`x`。如果包含则记录成功，否则记录失败。\n</thought>\n\n<code_block>\n# 向 https://www.126.com 发送 post 请求, 请求体: {\"id\": \"x\", \"name\": \"y\"}\n${resp_json}  UiSendRequest | POST | https://www.126.com | {\"id\": \"x\", \"name\": \"y\"}\n\n# 检查响应中的 data 字段是否包含 x\n${data_exists}  Evaluate  'x' in ${resp_json}['data']\n\n# 根据检查结果记录成功或失败\nIF  ${data_exists}\n    Log  成功\nELSE\n    Log  失败\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "请选择商机报备状态，选择创建失败",
        "output": "<thought>\n需要选择商机报备状态为“创建失败”，可以使用`SelectOptionForField`关键字，通过指定字段名称和选项值来完成选择。\n</thought>\n\n<code_block>\n# 选择商机报备状态为创建失败\nSelectOptionForField | 商机报备状态 | 创建失败\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ‘指标组名称’ 表格中的 23年春节_入口滲透行 状态列 中包含 等待中",
        "output": "<thought>\n为了实现对指定行和列的校验，可以使用`CheckCellHas`关键字。首先需要找到目标行和列，这里目标行是‘23年春节_入口滲透’，目标列是‘状态’，要校验的文本是‘等待中’。\n</thought>\n\n<code_block>\n# 校验‘指标组名称’表格‘23年春节_入口滲透’行的‘状态’列中包含‘等待中’\nCheckCellHas | 23年春节_入口滲透 | 状态 | 等待中 | tbl=指标组名称\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“分群查看”的关键字；接受参数：name；操作逻辑为：\n# 1.点击 name 所在表格行中的 ‘更多’ 小图标，然后点击 重新计算\n2.页面应该包含刷新成功 ",
        "output": "<thought>\n应该编写一个关键字'分群查看', 参数为name.\n该关键字首先点击name所在表格行中的'更多' icon，然后点击 '重新计算'。\n接着，校验页面包含 '刷新成功' 文本。\n</thought>\n\n<code_block>\n*** Keywords ***\n分群查看\n    [Arguments]  ${name}\n    # 点击 ${name} 所在表格行中的 '更多' icon\n    ClickIconOfRow | ${name} | more\n    # 点击 '重新计算'\n    Click | 重新计算\n    # 校验页面包含 '刷新成功'\n    CheckHasText | 刷新成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击离 ${today} 最近的 ${tomorrow_day}",
        "output": "<thought>\n为了解决这个问题，我需要使用Click关键字来点击文本。因为需要点击离${today}最近的${tomorrow_day}，所以可以利用near参数指定基于${today}的元素，然后点击${tomorrow_day}文本。\n</thought>\n\n<code_block>\n# 点击离 ${today} 最近的 ${tomorrow_day}\nClick | ${tomorrow_day} | near=${today}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断 归因分析 文案所在区域是否可以上下滚动",
        "output": "<thought>\n要判断某个区域是否可以上下滚动，使用的关键字是`IsScrollable`，它可以判断给定的元素或文案所在的区域是否可滚动。在这里，我们需要确定“归因分析”文案所在的区域能否上下滚动，因此可以直接使用该关键字，并指定direction为'y'来判断垂直方向的滚动。\n</thought>\n\n<code_block>\n# 判断“归因分析”文案所在区域是否可以上下滚动\n${status}  IsScrollable | 归因分析 | direction=y\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面中‘灵感’下方存在‘视频’、‘国风美学’按钮",
        "output": "<thought>\n为了校验页面中‘灵感’下方存在‘视频’、‘国风美学’按钮，首先我们需要使用CheckHasTextToTheDirectionOf关键字。这个关键字可以用于验证在基准元素某个方向上存在特定文本。在这个场景中，我们将选择‘灵感’作为基准元素，并且检查其下方是否存在‘视频’和‘国风美学’按钮。\n</thought>\n\n<code_block>\n# 校验‘灵感’下方存在‘视频’按钮\nCheckHasTextToTheDirectionOf | 灵感 | bottom | 视频\n\n# 校验‘灵感’下方存在‘国风美学’按钮\nCheckHasTextToTheDirectionOf | 灵感 | bottom | 国风美学\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击规则创建下面的立即创建, 然后点击刷新方式右边的元素，最后点击分群Vm后面的更多icon",
        "output": "<thought>\n首先，我们需要点击规则创建下面的立即创建文本，我们可以使用ClickTextToTheDirectionOf关键字，base设为规则创建，direction设为bottom，text设为立即创建。\n然后，我们需要点击刷新方式右边的元素，这时我们并不知道元素的具体信息，此时我们需要先定位到刷新方式元素，再使用ClickElemToTheDirectionOf关键字，base设为刷新方式元素，direction设为right。\n最后，我们需要点击分群Vm后面的更多icon，我们可以使用ClickIconToTheDirectionOf关键字，base设为分群Vm，direction设为right，icon设为more。\n</thought>\n\n<code_block>\n# 首先点击规则创建下面的立即创建\nClickTextToTheDirectionOf | 规则创建 | bottom | 立即创建\n\n# 然后点击刷新方式右边的元素\nClickElemToTheDirectionOf | 刷新方式 | right \n\n# 最后点击分群Vm后面的更多icon\nClickIconToTheDirectionOf | 分群Vm | right | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 网络类型 选择 普通(bridge)",
        "output": "\n    \n<thought>\n 首先需要找到合适的关键字来选择网络类型为“普通(bridge)”。可以使用`SelectOptionForField`关键字，字段名为“网络类型”，选项为“普通(bridge)”。\n </thought>\n \n <code_block>\n # 设置网络类型为普通(bridge)\n SelectOptionForField | 网络类型 | 普通(bridge)\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面有弹窗就点击弹窗中的确定",
        "output": "<thought>\n在这个场景中，需要判断页面是否存在弹窗，然后在弹窗中执行点击操作。因此可以使用`IsPopupExists`来判断弹窗是否存在。如果存在，则使用`Click`关键字点击弹窗中的确定按钮。可以使用IF语句来控制流程。\n</thought>\n\n<code_block>\n# 判断页面是否存在弹窗\n${exist}  IsPopupExists\n\n# 如果弹窗存在，点击弹窗中的确定按钮\nIF  $exist\n    Click  确定  | base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择表格第三行",
        "output": "<thought>\n这是一个直接的任务，可以通过使用关键字 \"SelectTableRow\" 来完成。我们只需要传递要选择行的行号（在这种情况下为3）作为参数即可。\n</thought>\n\n<code_block>\n# 选择表格的第三行\nSelectTableRow | 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "curl --location --request POST 'https://data-dev.bytedance.net/invoker_server/openapi/v1/query/getInfo' \\\n--header 'Content-Type: application/json' \\\n--header 'x-jwt-token: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZXJzaW9uIjowLCJhdXRob3JpdHkiOiJET0FTIiwiYXV0aG9yaXR5Q2hhaW4iOlsiZG9hcyJdLCJwcmltYXJ5QXV0aFR5cGUiOiJwc20iLCJwc20iOiJkcC5kYXRhX3NlcnZpY2UuYXBpIiwidXNlciI6ImNoZW54aWFucXVhbiIsImV4cGlyZVRpbWUiOjE2NzExODMxOTl9.WiUPWgLRWkcUcwAa0UUrZ_jgOB7nMcqdrk6KD8mYdmE38J_QS1wwArf_gRmmFK7xnPTNM90YdplN04C29A_ca4ev9SUWgoj4tGJw0Mk2qMXYOwxlYAyt-19lMxSF5Gc-bc5yPBettpsFIM0ZKxX0WPgmlYpj9HUvvMpY-MB1C402s-RHMSkpq3e2c7ADSkHCUGbYoIjtroHURKnq4rzdCWhKhDeUk8J1lM1TUGFK_Zb91afxvxIdIHtHcq4j2pDoMYBBFE3S6fG4dqKPWMvHMw7-tKenWxlRLiyY9qQueOpVswFjVwTHJynI08d1VCRf-9f286fAKusK4ATbHvO8vg' \\\n--data-raw '{\n    \"query_id\":\"7108706518425535501\",\n    \"version\": \"1\"\n}'",
        "output": "<thought>\n我们需要将curl请求转换为RobotFramework的自动化测试脚本。首先，我们需要使用`UiSendRequest`关键字来发送HTTP POST请求。我们将请求的URL、请求头和请求体作为参数传递给该关键字。URL是`https://xxx.yyy.zzz.com/invoker_server/openapi/v1/query/getInfo`，请求头包括`Content-Type`和`x-jwt-token`，请求体是一个包含`query_id`和`version`的JSON对象。\n</thought>\n\n<code_block>\n# 发送POST请求到指定的URL，包含请求头和请求体\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/invoker_server/openapi/v1/query/getInfo | {\"query_id\":\"7108706518425535501\",\"version\": \"1\"} | {\"Content-Type\": \"application/json\", \"x-jwt-token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZXJzaW9uIjowLCJhdXRob3JpdHkiOiJET0FTIiwiYXV0aG9yaXR5Q2hhaW4iOlsiZG9hcyJdLCJwcmltYXJ5QXV0aFR5cGUiOiJwc20iLCJwc20iOiJkcC5kYXRhX3NlcnZpY2UuYXBpIiwidXNlciI6ImNoZW54aWFucXVhbiIsImV4cGlyZVRpbWUiOjE2NzExODMxOTl9.WiUPWgLRWkcUcwAa0UUrZ_jgOB7nMcqdrk6KD8mYdmE38J_QS1wwArf_gRmmFK7xnPTNM90YdplN04C29A_ca4ev9SUWgoj4tGJw0Mk2qMXYOwxlYAyt-19lMxSF5Gc-bc5yPBettpsFIM0ZKxX0WPgmlYpj9HUvvMpY-MB1C402s-RHMSkpq3e2c7ADSkHCUGbYoIjtroHURKnq4rzdCWhKhDeUk8J1lM1TUGFK_Zb91afxvxIdIHtHcq4j2pDoMYBBFE3S6fG4dqKPWMvHMw7-tKenWxlRLiyY9qQueOpVswFjVwTHJynI08d1VCRf-9f286fAKusK4ATbHvO8vg\"}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找所有的 pre 元素，逐个打印他们的文案",
        "output": "<thought>\n要查找所有的pre元素，并逐个获取并打印它们的文本，可以使用以下步骤：\n1. 使用`GetElemCount`获取页面中pre元素的数量。\n2. 使用循环对每一个pre元素，使用基于索引的选择器`FindElem`找到具体的pre元素。\n3. 使用`GetElemText`获取每个pre元素的文本。\n4. 打印获取的文本。\n</thought>\n\n<code_block>\n# 获取页面中pre元素的数量\n${count}  GetElemCount | pre\n\n# 遍历每一个pre元素\nFOR  ${index}  IN RANGE  0  ${count}\n    # 查找第${index}个pre元素\n    ${pre_elem}  FindElem | pre:eq(${index})\n    \n    # 获取pre元素的文本\n    ${pre_text}  GetElemText | ${pre_elem}\n\n    # 打印pre元素的文本\n    Log  ${pre_text}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击入住时间右边的选择框",
        "output": "<thought>\n场景要求点击入住时间右边的选择框，可以使用ClickElemToTheDirectionOf关键字。首先找到基准元素“入住时间”，然后指定它右边的选择框，并使用jQuery选择器定位点击。\n</thought>\n\n<code_block>\n# 点击入住时间右边的选择框\nClickElemToTheDirectionOf | 入住时间 | right | [class*=select]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击上级品类，输入UIAUTO1-UI自动化测试专用",
        "output": "<thought>\n首先，根据描述，我们需要做两步操作：\n1. 点击\"上级品类\"\n2. 输入\"UIAUTO1-UI自动化测试专用\"\n\n我们需要先使用\"Click\"关键字来点击\"上级品类\"，然后使用\"SendText\"关键字在出现的输入框中输入\"UIAUTO1-UI自动化测试专用\"。\n</thought>\n\n<code_block>\n# 点击\"上级品类\"\nClick | 上级品类\n\n# 输入\"UIAUTO1-UI自动化测试专用\"\nSendText | UIAUTO1-UI自动化测试专用\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个数组，向列表中加入¥和,",
        "output": "<thought>\n解决问题思路：在Robot Framework中，创建一个数组并向其中加入特殊字符“¥” 和 “,”，通过使用`Evaluate`关键字来执行Python代码完成。`Evaluate`关键字可以执行任意的Python表达式，因此我们可以直接在Python中创建数组并向其中添加元素。\n</thought>\n\n<code_block>\n# 创建包含\"¥\"和\",\"的数组\n${array}    Evaluate    [\"¥\", \",\"]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 Export CSV 左边的小图标\n勾选 Select all",
        "output": "<thought>\n首先我们需要点击 \"Export CSV\" 左边的图标。可以使用`ClickIconToTheDirectionOf`关键字，基于给定的方向和目标元素。然后我们需要勾选 \"Select all\"，可以使用`CheckBoxOn`关键字。\n</thought>\n\n<code_block>\n# 点击 Export CSV 左边的图标\nClickIconToTheDirectionOf | Export CSV | left\n\n# 勾选 Select all\nCheckBoxOn | Select all\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获体重表格第一行的值",
        "output": "<thought>\n要获取体重表格第一行的值，可以使用`GetRowValues`关键字。这个关键字能够获取指定行的所有值，并以列表形式返回。我们只需指定行号和表格名称即可。\n</thought>\n\n<code_block>\n# 获取体重表格第一行的所有值\n@{vals}  GetRowValues | 1 | tbl=体重\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击文件预取下方的预热\n    验证跳转到新的页面，页面中包含提交预热任务",
        "output": "<thought>\n根据场景描述，首先需要点击“文件预取”下方的“预热”按钮。我们可以使用`ClickTextToTheDirectionOf`关键字来实现这一操作。接下来，需要验证是否跳转到了一个新的页面，并且页面中包含文本“提交预热任务”。为了验证页面的跳转，可以使用`ToNewWindow`来切换到新页面，然后使用`CheckHasText`关键字来检查页面中是否存在“提交预热任务”。\n</thought>\n\n<code_block>\n# 点击文件预取下方的预热\nClickTextToTheDirectionOf | 文件预取 | bottom | 预热\n\n# 切换到新页面\nToNewWindow\n\n# 校验页面包含提交预热任务\nCheckHasText | 提交预热任务\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "导出当前的 cookies",
        "output": "<thought>\n在RobotFramework中，导出当前的cookies可以使用内置的`Get Cookies`关键字。为了查看这些cookies，我们可以使用`Log`关键字记录下来。\n</thought>\n\n<code_block>\n# 获取当前的cookies\n${cookies}    Get Cookies\n\n# 记录获取到的cookies\nLog    ${cookies}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "敲击回车",
        "output": "<thought>\n此任务仅需要敲击回车，可以使用SendText关键字并设置enter=True来完成。\n</thought>\n\n<code_block>\n# 敲击回车\nSendText | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格行 ECS-100 中的更多小图标",
        "output": "<thought>\n根据题干要求，我们需要点击表格行 \"ECS-100\" 中的更多图标。我们可以使用框架中的\"ClickIconOfRow\"关键字来实现这个功能。\"ClickIconOfRow\"关键字的参数包括表格行的文本或行号、图标名、图标序号、表格名和基准元素，这里我们要点击的是\"ECS-100\"这一行中的\"更多\"图标，所以我们将\"row_name_or_id\"设置为\"ECS-100\"，\"icon\"设置为\"more\"。\n</thought>\n\n<code_block>\n# 点击表格行 \"ECS-100\" 中的更多图标\nClickIconOfRow | ECS-100 | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹窗内数据源名称为自动化数据源+随机数字   ",
        "output": "<thought>\n这个任务要求在弹窗中设置数据源名称，并在名称后面附加一个随机数字。为此，我需要使用`SetField`关键字来选取需要设置的字段并将其标记为基于弹窗。为了生成随机数字，我将使用`GenerateRandom`生成一串数字，并附加在名称后。\n</thought>\n\n<code_block>\n# 生成随机数字，长度为5，仅包含数字\n${random_number}  GenerateRandom  | 5 | [NUMBERS]\n\n# 设置弹窗内数据源名称为自动化数据源+随机数字\nSetField | 数据源名称 | 自动化数据源${random_number} | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 点击 的关键字，参数 text 表示要点击的文案，作用是点击对应的 text 文案",
        "output": "<thought>\n要实现一个名为\"点击\"的关键字，并接收一个参数\"text\"用于点击指定的文本，可以使用`Click`关键字。`Click`关键字能够通过文本定位元素并进行点击操作。考虑到可能需要在不同的上下文中使用这个关键字，应该确保该关键字能够在不同情况下正确点击指定文本。\n</thought>\n\n<code_block>\n*** Keywords ***\n点击\n    [Arguments]  ${text}\n    # 使用Click关键字点击指定的text文案\n    Click  ${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择自定义日期  2024-01-01  2024-01-31",
        "output": "<thought>\n要设置自定义日期范围，我们可以使用`SetField`关键字，传入字段名称和两个日期值分别代表开始日期和结束日期。\n</thought>\n\n<code_block>\n# 设置自定义日期为 2024-01-01 到 2024-01-31\nSetField | 自定义日期 | 2024-01-01 | 2024-01-31\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Search Processes 中输入 ${ceo_strategic_apply}并回车，等待加载好后点击创建商品，等一会儿，校验校验弹窗中有 ‘选择品牌’，点击页面底部的提交审核",
        "output": "<thought>\n为了完成这个任务，我将分以下几个步骤：\n1. 使用`SetField`在“Search Processes”中输入`${ceo_strategic_apply}`并回车。\n2. 使用`WaitLoading`等待页面加载完成。\n3. 使用`Click`点击“创建商品”。\n4. 使用`Sleep`稍微等待一段时间。\n5. 使用`CheckHasText`校验弹窗中是否包含“选择品牌”。\n6. 使用`ClickTextToTheDirectionOf`点击页面底部的“提交审核”。\n\n可以利用这些关键字逐步实现该场景。\n</thought>\n\n<code_block>\n# 在“Search Processes”中输入 `${ceo_strategic_apply}` 并回车\nSetField | Search Processes | ${ceo_strategic_apply} | enter=True\n\n# 等待页面加载完成，最多等待30秒\nWaitLoading | timeout=30\n\n# 点击“创建商品”\nClick | 创建商品\n\n# 暂停2秒以确保页面稳定\nSleep | 2s\n\n# 校验弹窗中是否包含“选择品牌”\nCheckHasText | 选择品牌 | base=POPUP\n\n# 点击页面底部的“提交审核”\nClickTextToTheDirectionOf | SCREEN_CENTER | bottom | 提交审核\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个：“弹窗关闭”的关键字，作用是当页面上出现立即推广或者跳过、下一步文字时 点击页面的 class 属性包含 close，没有则跳过",
        "output": "<thought>\n首先，需要定义一个自定义关键字\"弹窗关闭\"。该关键字的作用是先判断页面上是否存在文本\"立即推广\"、\"跳过\"或\"下一步\"，如果存在则点击页面上 class 属性包含 \"close\" 的元素。如果不存在这些文本，则跳过操作。\n\n具体步骤如下：\n1. 使用 `IsAnyTextExisting` 判断是否存在\"立即推广\"、\"跳过\"或\"下一步\"中的任意一个。\n2. 如果存在这些文本，则使用 `ClickElem` 点击 class 属性包含 \"close\" 的元素。\n3. 如果不存在这些文本，则跳过操作。\n\n用到的关键字：\n1. `IsAnyTextExisting` - 判断页面上是否存在指定的文本。\n2. `ClickIfElemExists` - 尝试点击指定的元素。\n3. `IF` - 条件判断。\n</thought>\n\n<code_block>\n*** Keywords ***\n弹窗关闭\n    # 判断页面上是否存在 \"立即推广\"、\"跳过\" 或 \"下一步\"\n    ${exist}  IsAnyTextExisting  立即推广  跳过  下一步\n    \n    # 如果存在这些文本，点击 class 属性包含 \"close\" 的元素\n    IF  ${exist}\n        ClickIfElemExists  [class*=close]\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "更新“业务别名”字段值为’业务别名更新‘",
        "output": "<thought>\n这个场景需要更新页面上的“业务别名”字段值为“业务别名更新”。可以使用`SetField`关键字直接更新相应的字段值。\n</thought>\n\n<code_block>\n# 更新业务别名\nSetField | 业务别名 | 业务别名更新\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 经办人选择 冯志远\n \n ",
        "output": "<thought>\n 根据场景描述，需要将“经办人”字段设置为“冯志远”。可以使用SetField关键字来实现。\n </thought>\n \n <code_block>\n # 设置经办人为冯志远\n SetField | 经办人 | 冯志远\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前浏览器页面的地址, 校验其中包含 session, 然后校验页面是否存在向导式和使用文档，最后点击最早入住时间附近的请选择时间",
        "output": "<thought>\n首先需要获取当前浏览器页面的地址，然后检查URL中是否包含'session'。接下来，需要校验页面是否同时存在文本'向导式'和'使用文档'。最后，我们点击'最早入住时间'附近的'请选择时间'选项。\n</thought>\n\n<code_block>\n# 获取当前页面的URL\n${current_url}  GetCurrentUrl\n\n# 校验URL中包含'session'\nShould Contain  ${current_url}  session\n\n# 校验页面存在'向导式'和'使用文档'\nCheckHasText  向导式  使用文档\n\n# 点击'最早入住时间'附近的'请选择时间'\nClick  请选择时间  near=最早入住时间\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成自签名国际CA 证书",
        "output": "\n<thought>\n为生成自签名国际CA证书，通常需要生成一个随机的密钥对，并使用此密钥对对证书进行签名。可以通过调用外部工具（如OpenSSL）来实现这一点。由于RF中没有直接的关键字用于生成证书，我们可以使用Execute Command关键字来执行命令行指令生成证书。\n</thought>\n\n<code_block>\n# 定义生成随机密钥和自签名证书的命令\n${key_file}  Set Variable  ca_key.pem\n${cert_file}  Set Variable  ca_cert.pem\n\n# 生成私钥\nExecute Command  openssl genrsa -out ${key_file} 2048\n\n# 生成自签名证书\nExecute Command  openssl req -new -x509 -key ${key_file} -out ${cert_file} -days 3650 -subj \"/C=US/ST=California/L=San Francisco/O=Example Company/CN=example.com\"\n\n# 验证证书文件是否生成\nFile Should Exist  ${cert_file}\nFile Should Exist  ${key_file}\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 退款规则 移动到屏幕可见区域，并校验页面存在 到店核销，随时可退，过期未核销自动退，校验团购库存数量下方存在：500份",
        "output": "<thought>\n首先，需要将 `退款规则` 元素移动到可见区域，使用 `MoveIntoView` 关键字。然后，校验页面中同时存在 `到店核销`、`随时可退`、`过期未核销自动退`三段文本，因此使用 `CheckHasText` 关键字。最后，使用 `CheckHasTextToTheDirectionOf` 来校验在 `团购库存数量` 下方存在文本包含 `+500份` 的按钮。\n</thought>\n\n<code_block>\n# 将退款规则移动到可见区域\nMoveIntoView  | :contains(退款规则)\n\n# 校验存在 到店核销、随时可退、过期未核销自动退\nCheckHasText  | 到店核销  | 随时可退  | 过期未核销自动退\n\n# 校验团购库存数量下方存在文本包含 '+500份' 的按钮\nCheckHasTextToTheDirectionOf | :contains(团购库存数量) | bottom | :contains(+500份)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找包含OK或下一步的按钮",
        "output": "<thought>\n首先，我们可以使用`FindByText`关键字来查找文本包含OK或下一步的元素，这是因为该关键字可以根据给定的文本查找/定位/获取元素。并且，由于我们是在查找按钮，所以我们可以在`FindByText`关键字中指定tag参数为\"button\"，这样可以缩小查找范围，提高查找效率。\n</thought>\n\n<code_block>\n# 查找包含OK或下一步的按钮\n${elem}  FindByText | OK | 下一步 | tag=button\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击必填项上面的输入框",
        "output": "<thought>\n首先，定位到“必填项”文本，然后使用ClickElemToTheDirectionOf关键字，选择其上方的input或textarea元素进行点击。\n</thought>\n\n<code_block>\n# 点击必填项上方的输入框\nClickElemToTheDirectionOf | 必填项 | top | input,textarea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "取变量${name}的前12个为字符",
        "output": "<thought>\n可以使用Evaluate关键字结合Python切片来实现获取字符串的前12个字符。\n</thought>\n\n<code_block>\n# 使用Python获取字符串的前12个字符\n${short_name}  Evaluate  $name[:12]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 name包含abc, 且class不包含666, 文本为：确定的元素",
        "output": "<thought>\n在这个场景中，我们需要查找一个元素，该元素的名称属性包含“abc”，且其类名不包含“666”，文本内容为“确定”。通过RF中的FindElem关键字，我们可以构建一个jQuery选择器来匹配这些条件。选择器应使用属性选择器和:not伪类来实现。\n</thought>\n\n<code_block>\n# 定义选择器，查找符合条件的元素\n${elem}  FindElem | [name*=abc]:not([class*=666]):contains(确定)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将事件流程A拖拽到事件流程B",
        "output": "<thought>\n在这个场景中，我们需要将元素“事件流程A”拖拽到元素“事件流程B”。根据已知关键字DAndD的使用说明，直接使用关键字即可实现这一操作。由于没有涉及jquery选择器复杂情况，直接使用名称即可。\n</thought>\n\n<code_block>\n# 将事件流程A拖拽到事件流程B\nDAndD | 事件流程A | 事件流程B\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 忽略大小写匹配 右边的开关。提示：开关一般是指class包含switch的button",
        "output": "<thought>\n 在这个场景中，我们需要找到\"忽略大小写匹配\"文本，然后找到其右边的开关按钮来点击。考虑到开关按钮通常有一个特定的class，我们可以使用\"ClickElemToTheDirectionOf\"关键字，把\"忽略大小写匹配\"作为基准元素，方向设置为\"right\"，最后在选择器中使用包含switch的class来匹配开关按钮。\n </thought>\n \n <code_block>\n # 找到 \"忽略大小写匹配\" 右边的开关按钮并点击\n ClickElemToTheDirectionOf | 忽略大小写匹配 | right | button[class*='switch']\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击漏斗符号",
        "output": "<thought>\n这个场景要求点击漏斗图标，可以使用ClickIcon关键字，并指定name为funnel来实现点击操作。\n</thought>\n\n<code_block>\n# 点击漏斗图标\nClickIcon | funnel\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成6个月后的时间，格式年月",
        "output": "<thought>\n为了生成6个月后的时间并将其格式化为年月，可以使用RobotFramework的`Add Time To Date`和`Convert Date`关键字。首先使用`Get Current Date`获取当前日期，然后使用`Add Time To Date`增加6个月，最后用`Convert Date`将日期格式化为所需的年月格式。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n\n# 增加6个月\n${future_date}  Add Time To Date  ${current_date}  6 months  result_format=%Y-%m-%d\n\n# 将日期格式化为年月格式\n${formatted_date}  Convert Date  ${future_date}  result_format=%Y%m\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘进组用户剔除被动事件’ 为 打开",
        "output": "<thought>\n要实现将‘进组用户剔除被动事件’设置为打开，首先需要判断页面中是否有对应的字段。通常，这种设置项可能是通过选择框或按钮实现的。假设这是一个选择框或者按钮，我们可以使用`SetField`或`Click`关键字。如果没有明确的位置或上下文信息，我们可能需要通过基于jquery选择器的方法来进行操作。\n</thought>\n\n<code_block>\n# 设置进组用户剔除被动事件为打开\nSetField | 进组用户剔除被动事件 | 打开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算${elem}这个元素下面的后代元素的数量",
        "output": "<thought>\n为了计算${elem}元素下面的后代元素数量，我们可以通过查找${elem}内的所有子孙元素，然后使用GetElemCount关键字来获取数量。\n</thought>\n\n<code_block>\n# 获取元素${elem}的所有后代元素数量\n${descendants_count}  GetElemCount  ${elem} *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击id名为navigator-right-other的元素，接着点击“test图表管理_A”右侧的删除，输入删除原因：测试一下",
        "output": "<thought>\n首先需要点击id为navigator-right-other的元素，可以使用ClickElem关键字。接着，找到文本为\"test图表管理_A\"的元素，点击其右侧的删除，可以使用ClickTextToTheDirectionOf关键字。最后，输入删除原因：测试一下，可以使用SendText关键字。\n</thought>\n\n<code_block>\n# 点击id为navigator-right-other的元素\nClickElem | [id=navigator-right-other]\n\n# 点击“test图表管理_A”右侧的删除\nClickTextToTheDirectionOf | test图表管理_A | right | 删除\n\n# 输入删除原因：测试一下\nSendText | 测试一下\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认表格中第一个结果的单号，和${borrowSeq}一致",
        "output": "# 获取表格第一行单号列的值\n${value}  GetCellValue  |  1  |  单号\n# 校验获取的值和${borrowSeq}是否一致\nShould Be Equal As Strings  ${value}  ${borrowSeq}"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向变量 ${line} 代表的页面元素中输入 应用ID  \\=  10000006",
        "output": "<thought>\n解决问题思路：首先利用给定的变量 ${line} 直接通过 FillArea 关键字将应用ID和等号与值输入到对应的元素中。\n</thought>\n\n<code_block>\n# 向 ${line} 代表的页面元素输入 \"应用ID = 10000006\"\nFillArea | ${line} | 应用ID | \\= | 10000006\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 关闭小图标",
        "output": "<thought>\n需要使用ClickIcon关键字来点击弹窗中的关闭icon，通过设置base为POPUP来确保在弹窗中查找元素。\n</thought>\n\n<code_block>\n# 点击弹窗中的关闭icon\nClickIcon | close | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置描述为：【自动化测试创建】请勿操作，设置负责人为：zhangxiaoyu.613，设置类型为：指标，设置方法为：METRICS，设置Region为test",
        "output": "\n    \n<thought>\n 为了解决这个问题，我们需要逐一设置描述、负责人、类型、方法和Region字段。可以使用`SetField`关键字来设置每个字段的值。具体来说：\n \n 1. 使用`SetField`设置描述为【自动化测试创建】请勿操作。\n 2. 使用`SetField`设置负责人为zhangxiaoyu.613。\n 3. 使用`SetField`设置类型为指标。\n 4. 使用`SetField`设置方法为METRICS。\n 5. 使用`SetField`设置Region为test。\n </thought>\n \n <code_block>\n # 设置描述为：【自动化测试创建】请勿操作\n SetField | 描述 | 【自动化测试创建】请勿操作\n \n # 设置负责人为：zhangxiaoyu.613\n SetField | 负责人 | zhangxiaoyu.613\n \n # 设置类型为：指标\n SetField | 类型 | 指标\n \n # 设置方法为：METRICS\n SetField | 方法 | METRICS\n \n # 设置Region为test\n SetField | Region | test\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为‘设置HSTS’的关键字，接受参数：状态，子域名，过期时间，逻辑如下：\n1. 将 HSTS 设置 的状态设置为：状态\n2. 将 HSTS 设置 下面的 子域名 设置为：子域名\n3. 将 HSTS 设置 下面的 过期时间 设置为：过期时间",
        "output": "<thought>\n这个任务可以通过使用BatchSetFields关键字来完成，通过设置near参数为HSTS设置，同时设置状态、子域名和过期时间。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置HSTS\n    [Arguments]  ${状态}  ${子域名}  ${过期时间}\n    BatchSetFields  状态=${状态}  子域名=${子域名}  过期时间=${过期时间}  near=HSTS 设置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 列表第一行第二列的domain，等待loading结束，点击 关闭按钮，检查表格第一行 工单标题 包含 龚颖-${text}",
        "output": "<thought>\n首先，根据描述需要点击表格的某一个单元格。可以使用`ClickTextOfCell`关键字来点击第一行第二列的`domain`。接下来，等待加载完成，可以使用`WaitLoading`关键字。然后，需要点击一个按钮，可以使用`Click`关键字点击`关闭`按钮。最后，需要检查表格第一行某列包含某个文本，可以使用`CheckCellHas`关键字，检查文本为`龚颖-${text}`的包含情况。\n</thought>\n\n<code_block>\n# 点击第一行第二列中的domain\nClickTextOfCell | 1 | 2 | domain\n\n# 等待加载完成\nWaitLoading\n\n# 点击关闭按钮\nClick | 关闭\n\n# 检查表格第一行工单标题列包含指定文本\nCheckCellHas | 1 | 工单标题 | 龚颖-${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在‘数据类型’输入‘Float’",
        "output": "<thought>\n对于这个任务，我需要将值‘Float’填写到名称为‘数据类型’的字段中。可以使用SetField关键字，直接输入数据类型和值。\n</thought>\n\n<code_block>\n# 设置数据类型为Float\nSetField | 数据类型 | Float\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击接入源并选择第一项",
        "output": "<thought>\n要解决这个问题，我首先需要使用 SetField 关键字，因为我需要设置一个字段的值。字段的名字是 “接入源”，而我需要设置的值是特殊值 OPTIONS_1，它代表选择第一个选项。这是一个简单直接的操作，不需要添加额外的条件或者循环。\n</thought>\n\n<code_block>\n# 设置接入源字段为第一个选项\nSetField | 接入源 | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 定义全局变量 ${current_date}，值为今天的日期，格式为“yyyy-mm-dd”",
        "output": "<thought>\n解决问题思路：获取当前日期并将其格式化为“yyyy-mm-dd”。可以使用RF标准库中的Get Current Date关键字，并指定日期格式。将结果存储到全局变量`${current_date}`。\n</thought>\n\n<code_block>\n# 获取当前日期并格式化为“yyyy-mm-dd”\n${current_date}  Get Current Date  result_format=%Y-%m-%d\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class为publish-target-wrapper的div中填写  应用ID  =  10000006",
        "output": "<thought>\n这是一个很简单的场景，只需要用FillArea关键字，将“应用ID”、“=”和“10000006”这三个元素通过 Jquery 选择器选择出来，然后填入到class为publish-target-wrapper的div中即可。\n</thought>\n\n<code_block>\n# 在class为publish-target-wrapper的div中填入\"应用ID\" \"=\" \"10000006\"\nFillArea | div[class=publish-target-wrapper] | 应用ID | = | 10000006\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器，打开MAIN_PAGE，清空用户名、密码字段值，点击 北京火山引擎科技有限公司 后面的 删除icon",
        "output": "<thought>\n首先我们需要打开浏览器并访问MAIN_PAGE，然后清空用户名和密码字段值。之后，我们需要找到“北京火山引擎科技有限公司”并点击其右边的删除icon。可以使用OpenBrowser关键字打开页面，使用SetField清空用户名和密码，最后使用ClickIconToTheDirectionOf点击删除icon。\n</thought>\n\n<code_block>\n# 打开浏览器并访问主页\nOpenBrowser | ${MAIN_PAGE}\n\n# 清空用户名字段\nSetField | 用户名 | ${KEY_BACKSPACE}\n\n# 清空密码字段\nSetField | 密码 | ${KEY_BACKSPACE}\n\n# 点击“北京火山引擎科技有限公司”后面的删除icon\nClickIconToTheDirectionOf | 北京火山引擎科技有限公司 | right | delete\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找元素elem的name=a的父元素",
        "output": "<thought>\n为了找到元素elem的name=a的父元素，我们可以使用提供的关键字FindParentElem。这个关键字允许我们指定一个选择器，用于查找所需的父元素。\n</thought>\n\n<code_block>\n# 查找元素elem的name=a的父元素\n${parent}  FindParentElem | ${elem} | [name=a]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面div 元素 id=dashboardPageContainer，向此元素发送点击事件",
        "output": "<thought>\n解决问题思路\n\n首先我们需要获取到页面中id为dashboardPageContainer的div元素，然后向此元素发送点击事件。根据RobotFramework的关键字使用方式，我们可以使用FindElem关键字来获取元素，然后使用ClickElem关键字来点击该元素。\n</thought>\n\n<code_block>\n# 获取id=dashboardPageContainer的div元素\n${dashboard}  FindElem | div[id='dashboardPageContainer']\n\n# 向获取到的元素发送点击事件\nClickElem | ${dashboard}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待10s，点击ComfyUI-LightColorCulling表格中的 ’下载‘ 小图标，在弹框中输入：内场",
        "output": "<thought>\n首先，我们需要等待10秒钟，然后在名为ComfyUI-LightColorCulling的表格中找到并点击“下载”图标。在表格操作中，我们可以使用ClickIconOfRow或ClickIconOfCell关键字来点击表格中的图标。\n接下来，在弹框中输入“内场”，可以使用SetPopupField关键字来输入文本。\n</thought>\n\n<code_block>\n# 等待10秒\nSleep | 10s\n\n# 点击ComfyUI-LightColorCulling表格中 '下载' icon，默认点击第一行中的\nClickIconOfRow | 1 | download | tbl=ComfyUI-LightColorCulling\n\n# 在弹框中输入：内场\nSetPopupField | 内场\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击到表格中表头的caretdown小图标",
        "output": "<thought>\n需要点击表格的表头行中的caret down icon，可以使用ClickIconOfRow关键字，row_name_or_id使用HEAD表示表头行，icon参数为caret down icon的名称。\n</thought>\n\n<code_block>\n# 点击表头行中的caret down icon\nClickIconOfRow | HEAD | caret-down\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第1个聊天记录按钮",
        "output": "<thought>\n 需要点击第一个聊天记录按钮。可以使用`Click`关键字，`idx=0`表示第一个。假设按钮文本为\"聊天记录\"。\n </thought>\n \n <code_block>\n # 点击第1个聊天记录按钮\n Click | 聊天记录 | idx=0\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "从文件 test_data/events.json 中读取内容，然后从 test_data/events_url.txt 中读取url，最后将内容发送到此URL",
        "output": "<thought>\n为了解决这个问题，可以按照以下步骤处理：\n- 首先，我们需要使用 RF 的 OperatingSystem 库中的 `Get File` 关键字，读取 test_data/events.json 文件中的内容，将内容保存到一个变量中。\n- 然后，我们需要使用 `Get File` 关键字再次读取 test_data/events_url.txt 文件中的url，并将这个url保存到另一个变量中。\n- 最后，我们调用之前定义的 `UiSendRequest` 关键字，将之前读取的json内容作为body发送到url进行POST请求。\n\n注意，这两个文件的内容都需要以字符串的形式保存，因此在读取文件内容的时候，我们不需要进行任何额外的转换操作。并且，这里假设发送HTTP请求的方法是POST，Headers为空。\n\n</thought>\n\n<code_block>\n# 读取 test_data/events.json 文件的内容\n${json_content}  Get File  test_data/events.json\n\n# 读取 test_data/events_url.txt 中的 url\n${url}  Get File  test_data/events_url.txt\n\n# 使用读取的内容和url发送POST请求\n${resp_json}  UiSendRequest  POST  ${url}  ${json_content}  ${None}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 需求单-需求行 为 WR000038/SR000045-软件采购、开发-1000x",
        "output": "<thought>\n我们需要设置“需求单-需求行”的值。首先，我们应确定使用哪个关键字来操作页面字段。根据需求，`SetField`关键字最合适，因为它可以指定字段名并输入值。接下来，需要填入的值为“WR000038/SR000045-软件采购、开发-1000x”。\n\n为了更好地组织代码，我们使用注释来说明每一步的操作。\n</thought>\n\n<code_block>\n# 设置需求单-需求行为 WR000038/SR000045-软件采购、开发-1000x\nSetField | 需求单-需求行 | WR000038/SR000045-软件采购 | 开发-1000x\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义一个全局变量，名字叫“case_name”",
        "output": "<thought>\n可以使用Robot Framework的BuiltIn库中的Set Global Variable关键字来定义全局变量。\n</thought>\n\n<code_block>\n# 定义全局变量case_name\nSet Global Variable  ${case_name}  MyCase\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 弹窗中包含文案  “隐藏折后价为0的账单”",
        "output": "<thought>\n根据要求，需要在弹窗中校验包含文本“隐藏折后价为0的账单”。可以使用CheckHasText关键字，并将base参数设置为POPUP。\n</thought>\n\n<code_block>\n# 校验弹窗中包含文案“隐藏折后价为0的账单”\nCheckHasText | 隐藏折后价为0的账单 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取class包含UILeft中文本 合同编号23232 的个数",
        "output": "<thought>\n我们需要查找class包含UILeft，并且文本包含“合同编号23232”的元素。首先，我们可以使用FindElem关键字，通过jquery选择器查找满足条件的元素。然后，使用GetElemCount关键字获取这些元素的数量。\n</thought>\n\n<code_block>\n# 查找class包含UILeft且文本为合同编号23232的元素\n${elem}  FindElem | [class*=UILeft]:contains(合同编号23232)\n\n# 获取元素的数量\n${cnt}  GetElemCount | [class*=UILeft]:contains(合同编号23232)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 '标签列' 为 dependent_count",
        "output": "<thought>\n要设置“标签列”为“dependent_count”，我们可以使用SetField关键字。假设页面上关于“标签列”的字段是明确的，直接使用SetField填写值即可。\n</thought>\n\n<code_block>\n# 设置标签列为 dependent_count\nSetField | 标签列 | dependent_count\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击class名为delete-btn的元素七次",
        "output": "<thought>\n 要点击class名为delete-btn的元素七次，可以使用ClickElem关键字。需要创建一个循环来重复执行点击操作。通过FindElem找到该元素，然后在循环中执行点击。\n </thought>\n \n <code_block>\n # 定义选择器变量\n ${selector} = span[class='delete-btn']\n \n # 定义循环次数\n ${count} = 7\n \n # 循环点击七次\n FOR ${i} IN RANGE ${count}\n  # 查找并点击元素\n  ${elem} FindElem | ${selector}\n  ClickElem | ${elem}\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行关键字去点击 ‘保存到看板’，如果执行异常，就看页面上是否存在 ‘放弃此查询’，有的话就点击它，然后再去点击保存到看板",
        "output": "<thought>\n首先尝试点击“保存到看板”，如果点击失败（即发生异常），则需要检查页面上是否存在“放弃此查询”文本。如果存在，则点击“放弃此查询”后，再次尝试点击“保存到看板”。可以使用RF的Try/Except结构来处理异常，然后使用IsAnyTextExisting关键字来检查“放弃此查询”是否存在。\n</thought>\n\n<code_block>\n# 尝试点击“保存到看板”\nTRY\n    Click  保存到看板\nEXCEPT\n    # 如果发生异常，则检查“放弃此查询”是否存在\n    ${exist}  IsAnyTextExisting  放弃此查询\n    IF  ${exist}\n        # 如果存在，则点击“放弃此查询”\n        Click  放弃此查询\n    END\n    # 再次尝试点击“保存到看板”\n    Click  保存到看板\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等 ‘我正在为你建立’ 这个文案消失，最多等 180s，如果变量 status 等于 no, 则选中 ‘任务名称/ID’ 表格第一行",
        "output": "<thought>\n我们需要执行以下步骤来完成任务：\n1. 等待文本 '我正在为你建立' 消失，最多等待180秒。我们可以使用WaitTextDisappear来实现这一点。\n2. 接着，我们需要检查变量status是否等于no。\n3. 如果status确实等于no，我们会选中‘任务名称/ID’表格的第一行，这可以通过SelectTableRow关键字来实现。\n\n首先，使用WaitTextDisappear关键字来等待文本消失；接着，使用Robot Framework的内建IF语句来判断变量status的值，并在满足条件的情况下执行相应的动作。\n</thought>\n\n<code_block>\n# 等待文本 ‘我正在为你建立’ 消失\nWaitTextDisappear  我正在为你建立  timeout=180\n\n# 如果变量status是no，选中‘任务名称/ID’表格第一行\nIF  \"${status}\" == \"no\"\n    SelectTableRow  1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "按下回车",
        "output": "<thought>\n为了解决“按下回车”这个场景，可以使用`SendText`关键字，并将`enter`参数设置为`True`。\n</thought>\n\n<code_block>\n# 点击/输入回车\nSendText | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入描述：coral-UI自动化测试",
        "output": "<thought>\n在这个场景中，我们需要为页面上的一个名为“描述”的字段输入文本“coral-UI自动化测试”。使用的关键字是`SetField`，因为它适用于填写有名称的页面字段。\n</thought>\n\n<code_block>\n# 输入描述字段内容\nSetField | 描述 | coral-UI自动化测试\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在编辑器中输入一些文本",
        "output": "<thought>\n在编辑器中输入文本可以使用FillEditor关键字。因为问题没有指定具体的编辑器，我们默认填入文本到第一个编辑器中。\n</thought>\n\n<code_block>\n# 在第一个编辑器中输入文本“这是一段测试文本”\nFillEditor | 这是一段测试文本\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击任务按钮 ",
        "output": "<thought>\n 解决问题思路：根据给定的关键字描述，使用`Click`来点击文本为“任务”的按钮。\n </thought>\n \n <code_block>\n # 点击任务按钮\n Click | 任务\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class=\"lv-tabs-header\" 的短片按钮，页面存在 已撤回合同编号： CT20241118N37574",
        "output": "<thought>\n首先，定位到class为lv-tabs-header的元素中的短片按钮，并点击它。然后使用CheckHasText关键字来校验页面中是否存在指定的合同编号文本。\n</thought>\n\n<code_block>\n# 点击短片按钮\nClickElem | [class=lv-tabs-header]:contains(短片)\n\n# 校验页面存在指定合同编号\nCheckHasText | 已撤回合同编号：CT20241118N37574\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 “配件类型与型号” 设置为：“APAC > Accessories > Mouse > 罗技”",
        "output": "<thought>\n 由于这是一个普通的填充字段任务，我们可以直接使用SetField关键字来解决。字段名为\"配件类型与型号\"，我们需要填入的值为\"APAC > Accessories > Mouse > 罗技\"。由于没有提供其他信息，我们假设这个字段只有一个，所以idx默认为0，enter和base也使用默认值。\n </thought>\n \n <code_block>\n # 设置配件类型与型号\n SetField | 配件类型与型号 | APAC > Accessories > Mouse > 罗技\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置API显示名为：‘${apiName}的显示名’, API描述为：${apiName}的描述, API分组为：测试1",
        "output": "<thought>\n设置API显示名、API描述和API分组需要设置对应的字段，可以使用BatchSetFields关键字一次性设置多个字段。\n</thought>\n\n<code_block>\n# 设置API显示名、API描述和API分组\nBatchSetFields | API显示名=${apiName}的显示名 | API描述=${apiName}的描述 | API分组=测试1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置产品汇总表格中，表头字段 ‘服务主体’ 为 北京火山引擎科技有限公司",
        "output": "<thought>\n设置表头字段的值，由于是填充操作，我们可以使用 FillCell 关键字。由于是对表头字段进行操作，因此 row_name_or_id 的值需要 设置为 特殊值 'HEAD'。 col_name_or_id 的值应该设置为 ‘服务主体’，而填充的值(val)应该是 北京火山引擎科技有限公司。表格名被给出为 产品汇总，因此 tbl 的值应该是 '产品汇总'。\n</thought>\n\n<code_block>\n# 设置产品汇总表格中，表头字段 ‘服务主体’ 为 北京火山引擎科技有限公司\nFillCell | HEAD | 服务主体 | 北京火山引擎科技有限公司 | tbl=产品汇总\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击 ${DEPLOY_MACHINE} 所在行的更多 icon",
        "output": "<thought>\n我们需要在表格中找到 `${DEPLOY_MACHINE}` 所在的行，然后点击该行中的 \"更多\" 图标。根据需求，我们可以使用 `ClickIconOfRow` 关键字，其中 `row_name_or_id` 可以是 `${DEPLOY_MACHINE}`， `icon` 则是 \"more\"。\n</thought>\n\n<code_block>\n# 鼠标点击 ${DEPLOY_MACHINE} 所在行的更多 icon\nClickIconOfRow | ${DEPLOY_MACHINE} | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置第2个 '服务主体' 右边的筛选器的值为: 北京火山引擎科技有限公司。提示：右边的筛选器就是一个页面控件，这里就是要设置一个有名称的页面字段的值",
        "output": "<thought>\n对于这个问题，首先确定我们要操作的是第二个'服务主体'字段。然后我们需要设置其右边的筛选器，即设置其值为：北京火山引擎科技有限公司。根据题目中的关键字，最佳的操作顺序应该是使用 `SetField` 关键字，这个关键字可以设置具有特定名称的字段的值，通过将 `idx` 参数设置为1（因为在这里，索引从0开始），我们可以确保我们在第二个'服务主体' 字段上设置值。 关键字的参数 `@args` 会被设置为 '北京火山引擎科技有限公司'。此外，因为我们不需要在输入值后按下回车，`enter` 参数应该设置为 `False`，`base` 和 `near` 参数可以保留为空。\n</thought>\n\n<code_block>\n# 设置第2个'服务主体'字段的值为：北京火山引擎科技有限公司\nSetField | 服务主体 | 北京火山引擎科技有限公司 | idx=1 | enter=False\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 placeholder=\"Include all  by default\" ，设置 class=\"arco-input-tag-input arco-input-tag-input-size-default\" value=\"\"> 为 bptestsg02",
        "output": "<thought>\n首先需要点击弹窗中的目标元素，可以通过 `Click` 关键字，基于文本匹配来实现。这里的文本需要是唯一可识别的。其次，需要在特定的类名的输入框中设置值，可以使用 `FillArea` 关键字来完成，基于 jquery 选择器来找到对应的元素。\n</thought>\n\n<code_block>\n# 点击 placeholder=\"Include all  by default\" 的元素\nClick | Include all  by default | base=POPUP\n\n# 设置 class=\"arco-input-tag-input arco-input-tag-input-size-default\" 的元素的值为 a-big-shop\nFillArea | [class=\"arco-input-tag-input arco-input-tag-input-size-default\"] | a-big-shop\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 可关闭弹框的关键字，当页面出现 提示 推荐 新手引导的文本时点击关闭小图标",
        "output": "<thought>\n为了解决这个问题，我会创建一个自定义关键字 \"ClosePopup\"。这个关键字首先会检查页面上是否存在 \"提示\"、\"推荐\" 或 \"新手引导\" 的文本。如果这些文本存在，那么它就会点击 \"关闭\" 的图标。这个操作可以通过 \"ClickIcon\" 关键字完成，需要指定 \"close\" 为图标名称。\n</thought>\n\n<code_block>\nClosePopup\n    ${exist}  IsAnyTextExisting | 提示 | 推荐 | 新手引导\n    IF  ${exist}\n        ClickIcon | close\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 1. 浏览器访问awas_url\n  # 2. 等待页面加载完成",
        "output": "<thought>\n 在这个测试案例中，我们需要浏览器访问一个给定的url，然后等待页面加载完成。这个过程可以使用RobotFramework框架的两个关键字完成：\n \n - `OpenUrl`：它可以让我们打开一个给定的url。\n - `WaitLoading`：它可以让我们等待页面加载完成。\n \n 这两个关键字足够满足这个测试案例的需求。\n </thought>\n \n <code_block>\n # 访问给定的URL\n OpenUrl | ${awas_url}\n \n # 等待页面加载完成\n WaitLoading\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在输入框 回显为 未命名报表_1 中 输入 今天统计结果-1",
        "output": "<thought>\n在这个场景中，我们需要在一个input或者textarea中输入文本。因为没有提到具体的字段名称，只提及了回显文本为\"未命名报表_1\"，这意味着我们需要通过选择器找到这个特定的控件。可以使用jquery选择器结合回显文本来定位，然后使用`FillArea`关键字来输入文本。\n</thought>\n\n<code_block>\n# 在回显为未命名报表_1的输入框中输入今天统计结果-1\nFillArea | input[placeholder='未命名报表_1'], textarea:contains('未命名报表_1') | 今天统计结果-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面中class=scene-card的元素至少有一个",
        "output": "<thought>\n使用关键字GetElemCount来获取页面中class为scene-card的元素数量，然后使用Should Be True关键字确认数量大于等于1。\n</thought>\n\n<code_block>\n# 获取class为scene-card的元素个数\n${cnt}  GetElemCount | [class=scene-card]\n\n# 校验页面中class=scene-card的元素至少有一个\nShould Be True  | ${cnt} >= 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "1. 访问页面 page_url\n2. 等待页面 URL 中不再包含 login",
        "output": "<thought>\n要解决这个问题，我们需要两个关键字：OpenUrl和WaitURLNotContains。 \n\n首先，我们使用OpenUrl关键字打开指定的URL。然后，我们使用WaitURLNotContains关键字等待URL不再包含\"login\"这个词。这就是我们解决这个问题的思路。\n</thought>\n\n<code_block>\n# 打开指定的URL\nOpenUrl | ${page_url}\n\n# 等待URL不再包含\"login\"\nWaitURLNotContains | login\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "A 应该为真，B 应该为假",
        "output": "<thought>\n这个问题的要求是验证 A 的值应为真，B 的值应为假，核心的 RF 关键字是 `Should Be True` 和 `Should Not Be True`。\n</thought>\n\n<code_block>\n# 验证 A 的值为真\nShould Be True  ${A}\n\n# 验证 B 的值为假\nShould Not Be True  ${B}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本包含确定的div的下一个id包含x的button元素",
        "output": "<thought>\n本问题主要包含两个步骤：\n- 首先，查找文本包含确定的div元素。\n- 然后，查找该div元素的下一个id包含x的button元素。\n在这里，我们使用FindByText关键字来查找文本包含确定的div元素，然后根据该元素生成一个合适的jquery选择器，使用FindElem关键字查找下一个id包含x的button元素。\n</thought>\n\n<code_block>\n# 查找文本包含\"确定\"的div元素\n${div_elem}  FindByText | 确定 | tag=div\n\n# 查找${div_elem}的下一个id包含x的button元素\n${button_elem}  FindElem | ${div_elem} + button[id*=x]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class名为oc-row-radio内的文字：门店",
        "output": "<thought>\n需要使用Click关键字来点击class名为oc-row-radio内的文字\"门店\"。可以通过ClickElem选择器来实现，选择器为\".oc-row-radio:contains(门店)\"。\n</thought>\n\n<code_block>\n# 点击class名为oc-row-radio内的文字：门店\nClickElem | [class=oc-row-radio]:contains(门店)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面表格第一行是否有${key_name}, 如果有就打印：“找到了”",
        "output": "<thought>\n首先需要判断表格第一行是否包含 `${key_name}`。可以使用 `IsRowContainsText` 关键字来完成这个判断。如果找到，则使用 `Log` 关键字打印“找到了”。\n</thought>\n\n<code_block>\n# 检查表格第一行是否包含${key_name}\n${exist}  IsRowContainsText | 1 | ${key_name}\n\n# 如果找到了则打印“找到了”\nIF  ${exist}\n    Log  找到了\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“SSO登录” 的关键字，接受 url，session, company, 默认值分别为变量 MAIN_PAGE, FEISHU_SESSION 和 COMPANY_CODE，操作逻辑为：\n0. 如果页面包括“全部功能”按钮，就结束，否则执行下面的步骤1和2\n1. 打开浏览器，使用 session 登录飞书，然后打开 url\n2. 先点击 ‘SSO 登录’，然后输入企业识别码, 接着点击下一步，最后点击授权，等页面url中不再包含feishu 即可",
        "output": "SSO登录\n    [Arguments]  ${url}=${MAIN_PAGE}  ${session}=${FEISHU_SESSION}  ${company}=${COMPANY_CODE}\n    # 如果页面包括“全部功能”按钮，就结束\n    IF  IsElemExists | :contains(全部功能)\n        Log  页面已登录\n    ELSE\n        # 打开浏览器，使用 session 登录飞书，然后打开 url\n        OpenBrowser\n        LoginFeiShu | ${session}\n        OpenUrl | ${url}\n        # 先点击 ‘SSO 登录’，然后输入企业识别码为test, 接着点击下一步，最后点击授权\n        Click | SSO 登录\n        SetField | 企业识别码 | ${company}\n        Click | 下一步\n        Click | 授权\n        # 等页面url中不再包含feishu 即可\n        WaitURLNotContains | feishu\n    END"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${login_user} 不为空，则调用 get_feishu_session 关键字，入参： ${login_user}  ${env}",
        "output": "<thought>\n首先，我需要判断变量${login_user}是否为空，这可以通过RF的内置IF/ELSE语法来实现。如果${login_user}不为空，那么我将使用关键字get_feishu_session，参数是${login_user}和${env}。\n</thought>\n\n<code_block>\n# 判断${login_user}是否为空\nIF  \"${login_user}\" != \"\"\n  # 如果不为空，调用get_feishu_session关键字\n  get_feishu_session  ${login_user}  ${env}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 1. 打开ECS_URL\n  # 2. 在 添加筛选条件 搜索框中输入 刘嘉诚-10-强密码\n  # 3. 回车\n  # 4. 等待页面加载完成",
        "output": "<thought>\n 首先，我们需要打开指定的URL，这可以通过 'OpenUrl' 关键字完成。然后我们需要在特定的搜索框中输入一些文本，这可以通过 'SetField' 关键字实现。接着，我们需要模拟回车操作，这可以通过 'SendText' 关键字实现，最后，我们需要等待页面加载完成，这可以通过 'WaitLoading' 关键字实现。\n </thought>\n \n <code_block>\n # 打开指定的URL\n OpenUrl | ${ECS_URL}\n \n # 在指定的搜索框中输入文本\n SetField | 添加筛选条件 | 刘嘉诚-10-强密码\n \n # 模拟回车操作\n SendText | ${KEY_ENTER}\n \n # 等待页面加载完成\n WaitLoading\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗弹出列表的第一个",
        "output": "<thought>\n根据提示，需要选取弹窗弹出列表的第一个选项。SelectOption关键字用于选择特定的选项。如果选择列表在弹窗中出现，可以使用SelectOption选择第一个选项。在这种情况下，通常用OPTIONS_1来表示第一个选项。\n</thought>\n\n<code_block>\n# 选择弹窗弹出列表中的第一个选项\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击每周几不可用   选择周日",
        "output": "<thought>\n这个场景要求我们首先点击文本为“每周几不可用”的元素，然后选择一个选项“周日”。根据提供的关键字描述，“点击每周几不可用”可以使用`Click`关键字，而“选择周日”可以使用`SelectOption`关键字。两个操作之间没有复杂的依赖关系，因此可以依次执行。\n</thought>\n\n<code_block>\n# 点击文本“每周几不可用”\nClick | 每周几不可用\n\n# 选择选项“周日”\nSelectOption | 周日\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面包含 ‘视频’、‘小说’，精确匹配",
        "output": "<thought>\n根据问题描述，校验页面需同时包含‘视频’、‘小说’，并且需要精确匹配。可以使用CheckHasText关键字，并将strict参数设置为True来实现。\n</thought>\n\n<code_block>\n# 校验页面包含 ‘视频’、‘小说’，精确匹配\nCheckHasText | 视频 | 小说 | strict=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送空格键",
        "output": "<thought>\n要发送空格键，可以考虑以下几种方法：\n1. 使用`SendText`关键字直接发送空格字符\n2. 使用`SetField`或`FillArea`等关键字时通过`enter`参数发送空格\n\n最简单直接的方法是使用`SendText`关键字发送空格字符，因为：\n- 它专门用于在光标位置输入文本\n</thought>\n\n<code_block>\n# 发送空格键\nSendText | ${SPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 检查页面包含uitest_import和pw_test",
        "output": "<thought>\n 根据需求，需要检查页面同时包含两个文本：uitest_import和pw_test。可以使用CheckHasText关键字来实现。\n </thought>\n \n <code_block>\n # 校验页面同时包含文本uitest_import和pw_test\n CheckHasText | uitest_import | pw_test\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "同时勾选US-EastRed和US-TTP",
        "output": "<thought>\n在这个场景中，我们需要同时勾选两个复选框，分别是“US-EastRed”和“US-TTP”。可以分别使用CheckBoxOn关键字来实现。由于这两个复选框没有提供基准元素或靠近哪个文本的描述，因此可以直接使用CheckBoxOn关键字针对它们的名称。\n</thought>\n\n<code_block>\n# 勾选“US-EastRed”复选框\nCheckBoxOn | US-EastRed\n\n# 勾选“US-TTP”复选框\nCheckBoxOn | US-TTP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待一秒后输入验证码 CODE_ONLINE。提示：这是要在验证码输入框中输入文本，是对有名称的页面字段的输入操作",
        "output": "<thought>\n首先需要等待一秒，然后找到验证码字段并输入验证码 \"CODE_ONLINE\"。由于验证码字段是有名称的页面字段，可以使用 `SetField` 关键字来完成输入操作。为了等待一秒，使用 `Sleep` 关键字。\n</thought>\n\n<code_block>\n# 等待一秒\nSleep 1s\n\n# 输入验证码 CODE_ONLINE\nSetField | 验证码 | CODE_ONLINE\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“分析时段”，接受变成参数 args, 主要逻辑是向class包含CommonFilters__periodContainer的div中输入给定的一个或多个参数，如果${text}的内容为“自定义时间”，在元素ele2中输入${time}",
        "output": "<thought>\n首先定义关键字“分析时段”，它接收一个参数 args。根据要求，在 class 包含 `CommonFilters__periodContainer` 的 div 中输入这些参数。然后检查 `args` 是否包含“自定义时间”，如果包含则在元素 `ele2` 中输入 `time`。使用 `FillArea` 关键字来填入参数，使用 `IF/ELSE` 判断是否需要输入自定义时间。\n</thought>\n\n<code_block>\n*** Keywords ***\n分析时段\n    [Arguments]  @{args}  ${time}\n    \n    # 向 class 包含 CommonFilters__periodContainer 的 div 中输入参数\n    FillArea  div[class*=CommonFilters__periodContainer]  @{args}\n    \n    # 如果 args 中有 \"自定义时间\"，则在元素 ele2 中输入 time\n    IF  \"自定义时间\" in ${args}\n        FillArea  ${ele2}  ${time}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 等待页面显示运行成功",
        "output": "<thought>\n 这个问题相对简单，可以直接使用关键字\"WaitText\"来实现。\"WaitText\"的功能是等待页面上出现指定的文本内容，这正好符合我们的需求。\n </thought>\n \n <code_block>\n # 等待页面存在\"运行成功\"\n WaitText | 运行成功\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${ip_name} 后面 删除按钮",
        "output": "<thought>\n首先需要找到名为 `${ip_name}` 的文本，然后点击其右边的 删除 按钮。这可以通过使用 `ClickTextToTheDirectionOf` 关键字实现。\n</thought>\n\n<code_block>\n# 点击 ${ip_name} 右边的删除按钮\nClickTextToTheDirectionOf | ${ip_name} | right | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面底部的提交审核，并等待一会，获取数据详情表格中 ‘音浪’ 这一列的值，然后打印其中的每一个值",
        "output": "<thought>\n这个任务需要我们执行以下几个步骤：\n1. 点击页面底部的“提交审核”按钮。\n2. 等待一段时间以确保操作完成。\n3. 获取数据详情表格中“音浪”列的所有值。\n4. 打印这些值。\n\n为了实现这些步骤，我们可以使用以下关键字：\n- `ClickTextToTheDirectionOf`：用来点击位于屏幕底部的“提交审核”按钮。\n- `Sleep` 或 `WaitLoading`：等待一段时间以确保提交操作完成。\n- `GetColValues`：获取数据详情表格中“音浪”列的值。\n- `Log`：打印列值。\n</thought>\n\n<code_block>\n# 点击页面底部的提交审核\nClickTextToTheDirectionOf | SCREEN_CENTER | bottom | 提交审核\n\n# 等待操作完成\nWaitLoading | timeout=30\n\n# 获取数据详情表格中‘音浪’列的值\n@{yinLangValues}  GetColValues | 音浪\n\n# 打印每一个‘音浪’值\nFOR  ${value}  IN  @{yinLangValues}\n    Log  ${value}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中 “隐藏0元账单” 左侧的复选框",
        "output": "<thought>\n为了点击“隐藏0元账单”左侧的复选框，我们需要使用`ClickElemToTheDirectionOf`关键字。基准元素是“隐藏0元账单”，方向是左，选择器应该定位到复选框元素。由于操作在弹窗中发生，需要使用`base=POPUP`。\n</thought>\n\n<code_block>\n# 点击弹窗中“隐藏0元账单”左侧的复选框\nClickElemToTheDirectionOf | :contains(隐藏0元账单) | left | :checkbox | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上角的退出，点击class名为oc-row-radio内的文字：直播间，如果有‘再次确认’4个字就点击，没有就跳过此步骤",
        "output": "<thought>\n首先，定位并点击右上角的退出按钮。其次，找到并点击class名为oc-row-radio内的“直播间”文本。最后，检查页面是否出现“再次确认”这四个字，如果存在，则执行点击操作。\n</thought>\n\n<code_block>\n# 点击右上角的退出文本\nClickTextToTheDirectionOf | SCREEN_CENTER | topRight | 退出\n\n# 点击class名为oc-row-radio内的直播间\nClick | 直播间 | base=[class*=oc-row-radio]\n\n# 检查是否存在‘再次确认’文本，并点击\n${exist}  IsAnyTextExisting | 再次确认\nIF  ${exist}\n    Click  再次确认\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求，GET，url是https://www.baidu.com",
        "output": "<thought>\n这个问题需要我们发送一个GET请求到指定的URL，没有请求体和请求头，所以我们可以直接使用UiSendRequest关键字来实现。\n</thought>\n\n<code_block>\n# 向 https://www.baidu.com 发送 GET 请求\n${resp_json}  UiSendRequest | GET | https://www.baidu.com\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到元素 class=“gl-okee-measure-value” 的值放进列表，列表里的元素个数应该大于0，而且其中每个值应大于0",
        "output": "<thought>\n首先，我们需要找到所有符合条件的元素，使用`FindElem`关键字获取所有class为“gl-okee-measure-value”的元素。然后，我们获取这些元素的值，并验证列表中元素个数大于0。其次，检验每个值是否大于0，可以使用`Should Be True`关键字。\n</thought>\n\n<code_block>\n# 获取class为“gl-okee-measure-value”的元素数量\n${cnt}  GetElemCount  [class=gl-okee-measure-value]\n\n# 确保元素数量大于0\nShould Be True  ${cnt} > 0\n\n# 初始化一个空列表来存储元素的值\n@{values}  Create List\n\n# 使用循环遍历所有元素\nFOR  ${index}  IN RANGE  0  ${cnt}\n    # 找到第index个元素\n    ${elem}  FindElem  [class=gl-okee-measure-value]:eq(${index})\n    \n    # 获取元素的文本值\n    ${value}  Get Text  ${elem}\n    \n    # 将值添加到列表中\n    Append To List  ${values}  ${value}\n    \n    # 检查每个值应大于0\n    Should Be True  ${value} > 0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面元素class为semi2-input semi2-input-default的输入框，然后点击弹出框中class为h-4 w-4的按钮，点击“五月”",
        "output": "<thought>\n首先，使用`ClickElem`关键字点击页面中class为semi2-input semi2-input-default的输入框；然后，使用`ClickElem`关键字在弹出框中点击class为h-4 w-4的按钮；最后，使用`Click`关键字找到并点击文本“五月”。\n</thought>\n\n<code_block>\n# 点击页面中class为semi2-input semi2-input-default的输入框\nClickElem | input[class=\"semi2-input semi2-input-default\"]\n\n# 点击弹出框中class为h-4 w-4的按钮\nClickElem | button[class=\"h-4 w-4\"] | base=POPUP\n\n# 点击文本“五月”\nClick | 五月\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 即梦-图片生成 下方的第3张图片",
        "output": "<thought>\n首先需要找出基准文本“即梦-图片生成”的位置，然后在其下方查找图片元素。我们选择使用ClickElemToTheDirectionOf关键字，其中the_base为\"即梦-图片生成\"，direction为\"bottom\"，selector为\"img\"，并指定idx=2以点击第3张图片\n</thought>\n\n<code_block>\n# 点击即梦-图片生成下方的第3张图片\nClickElemToTheDirectionOf | 即梦-图片生成 | bottom | img | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（app_channel， 字典）中的上传",
        "output": "<thought>\n这个场景描述的是在表格中，特定行和列指定的单元格中点击一个文本为“上传”的元素。我们可以使用`ClickTextOfCell`关键字，其中`row_name_or_id`为“app_channel”，`col_name_or_id`为“字典”，`text`用“上传”来匹配该单元格中的文本。\n</thought>\n\n<code_block>\n# 点击单元格（app_channel，字典）中的上传\nClickTextOfCell | app_channel | 字典 | 上传\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格 “项目”列 依次为default、default、default",
        "output": "<thought>\n解决问题思路：根据要求，需要校验表格中“项目”列的内容是否依次为default、default、default。可以使用CheckColHas关键字来验证“项目”列的内容。需要依次检查第一行到第三行的“项目”列是否为default。\n</thought>\n\n<code_block>\n# 校验第一行“项目”列包含default\nCheckCellHas | 1 | 项目 | default\n\n# 校验第二行“项目”列包含default\nCheckCellHas | 2 | 项目 | default\n\n# 校验第三行“项目”列包含default\nCheckCellHas | 3 | 项目 | default\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击更多，点击删除，点击确定，等待1秒后表格中不包含【创建自动化测试专用】",
        "output": "\n    \n<thought>\n 首先使用`Click`关键字依次点击“更多”、“删除”和“确定”。接着使用`Sleep`等待1秒，然后使用`CheckTableNotHas`关键字检查表格中是否不包含“创建自动化测试专用”。\n </thought>\n \n <code_block>\n # 点击更多，删除，确定\n ClickTextOneByOne | 更多 | 删除 | 确定\n \n # 等待1秒\n Sleep | 1s\n \n # 校验表格不包含【创建自动化测试专用】\n CheckTableNotHas | 创建自动化测试专用\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测页面中__current_id='日历' 的div 里面是否含有class='abc-go'的div",
        "output": "<thought>\n我们需要在包含`__current_id='日历'`的div中查找是否存在一个class为`abc-go`的div。可以使用`IsAnyElemExisting`关键字并构建合适的jQuery选择器来判断。\n</thought>\n\n<code_block>\n# 检查指定div中是否存在class为'abc-go'的div\n${exist}  IsAnyElemExisting | div[__current_id='日历'] div.abc-go\n\n# 如果存在，则打印结果\nIF  ${exist}\n    Log  存在class为'abc-go'的div\nELSE\n    Log  不存在class为'abc-go'的div\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘选择节点范围’ 右边的开关",
        "output": "<thought>\n根据题目描述，我们需要点击“选择节点范围”右边的开关。通常开关是一个class名包含“switch”的元素。为了实现这一操作，我们可以使用`ClickElemToTheDirectionOf`关键字，该关键字允许我们基于一个基准元素来定位方向上的目标元素。在这种情况下，基准元素是“选择节点范围”文本，我们需要在其“右边”查找目标元素，目标元素选择器应该是`[class*=switch]`。\n</thought>\n\n<code_block>\n# 点击 '选择节点范围' 右边的 class 包含 'switch' 的开关\nClickElemToTheDirectionOf | 选择节点范围 | right | [class*=switch]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 第二个 工作日 左边的 请输入，并填写 4",
        "output": "<thought>\n1. 首先需要定位\"第二个工作日\"这个文本元素\n2. 然后在其左侧找到\"请输入\"文本并点击\n3. 点击后光标会激活，直接使用SendText输入数字4\n4. 使用ClickTextToTheDirectionOf关键字可以实现在指定文本元素方向上的点击操作\n</thought>\n\n<code_block>\n# 点击第二个工作日左边的\"请输入\"文本\nClickTextToTheDirectionOf | 工作日:eq(1) | left | 请输入\n\n# 在激活的输入位置填写4\nSendText | 4\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为: \"上传文件创建分群\" 的关键字，接受 type, file_path 参数，file_path 默认为空，业务逻辑是：\n1. 将 ‘文件ID类型’ 字段设置为：type\n2. 如果 file_path 非空，就上传 file_path 指定的文件，否则就上传 files/${type}.csv 文件",
        "output": "<thought>\n1. 使用SetField关键字将‘文件ID类型’字段设置为type。\n2. 检查file_path是否为空字符，如果为空则使用默认路径 'files/${type}.csv'，否则使用传入的file_path。\n3. 根据选择的文件路径使用UploadFile关键字上传文件。\n4. 使用RF内置的IF/ELSE语法进行条件判断并上传文件。\n</thought>\n\n<code_block>\n*** Keywords ***\n上传文件创建分群\n    [Arguments]  ${type}  ${file_path}=${EMPTY}\n    \n    # Step 1: 设置‘文件ID类型’字段为type\n    SetField  文件ID类型  ${type}\n    \n    # Step 2: 如果file_path非空，上传file_path指定的文件，否则上传默认路径文件\n    IF  \"${file_path}\" != \"\"\n        UploadFile  ${file_path}\n    ELSE\n        UploadFile  files/${type}.csv\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取「Language」设置的值，如果等于「English」则打印1",
        "output": "<thought>\n首先，我们通过使用关键字GetFieldVal获取\"Language\"的设置值，然后存储在变量${val}中。接着，我们使用Robot Framework的内置IF/ELSE条件语句来判断这个值是否等于\"English\"。如果是，则使用Log关键字打印1。\n</thought>\n\n<code_block>\n# 获取\"Language\"的值\n${val}  GetFieldVal | Language   \n\n# 如果\"Language\"的值等于\"English\"，则打印1\nIF  \"${val}\" == \"English\"\n  Log  1\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取客户信息表格内容",
        "output": "<thought>\n为了获取客户信息表格的内容，我们需要循环遍历表格的每一行，并获取每一行的值。首先，我们使用GetRowCount关键字来获取表格的总行数。然后，我们可以使用一个循环，从第一行到最后一行，依次调用GetRowValues关键字来获取每行的值。获取到的每行内容可以存储在一个列表中，以便后续使用。\n</thought>\n\n<code_block>\n# 获取客户信息表格的总行数\n${total_rows}  GetRowCount | tbl=客户信息\n\n# 初始化客户信息列表\n@{customer_info_list}  Create List\n\n# 循环获取每一行内容\nFOR  ${row_index}  IN RANGE  1  ${total_rows}+1\n    # 获取当前行的值\n    @{row_values}  GetRowValues | ${row_index} | tbl=客户信息\n\n    # 将当前行的值加入客户信息列表\n    Append To List  ${customer_info_list}  ${row_values}\nEND\n\n# 打印获取的客户信息列表\nLog  ${customer_info_list}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击菜单icon",
        "output": "<thought>\n为了完成“点击菜单icon”这个任务，可以使用提供的关键字 `ClickIcon`。我们需要点击一个图标而不是文本或其他元素，因此 `ClickIcon` 是最合适的选择。\n</thought>\n\n<code_block>\n# 点击菜单图标\nClickIcon | menu\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到placeholder=\"请输入\"的元素，并输入联联永创科技（成都）有限公司，点击查询，等待10秒界面加载，点击第一行 下载",
        "output": "<thought>\n首先需要找到一个元素，其属性为placeholder=\"请输入\"，可以使用FindElem关键字。接下来，使用FillArea关键字输入公司名称\"联联永创科技（成都）有限公司\"。随后，找到并点击\"查询\"按钮，可以使用Click关键字。接下来使用Sleep等待10秒以便页面完成加载。最后，点击表格第一行中的“下载”，可以使用ClickTextOfRow关键字。\n</thought>\n\n<code_block>\n# 查找 placeholder 为 \"请输入\" 的输入框\n${elem}  FindElem | [placeholder='请输入']\n\n# 输入公司名称到找到的元素\nFillArea | ${elem} | 联联永创科技（成都）有限公司\n\n# 点击查询按钮\nClick  | 查询\n\n# 等待10秒以确保页面加载完成\nSleep  | 10s\n\n# 点击表格第一行中的“下载”\nClickTextOfRow | 1 | 下载\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置计算规格为多个值：2 vCPU、8 GiB、g3i\n选中表格行：ecs.g3i.large",
        "output": "<thought>\n对于这个场景，我需要使用SetField关键字来设置“计算规格”的值，然后使用SelectTableRow关键字来选中指定的表格行。因为“设置计算规格为多个值”涉及多个值输入，所以需要依次输入这些值。\n</thought>\n\n<code_block>\n# 设置计算规格为：2 vCPU、8 GiB、g3i\nSetField | 计算规格 | 2 vCPU | 8 GiB | g3i\n\n# 选中表格行：ecs.g3i.large\nSelectTableRow | ecs.g3i.large\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前时间秒维度时间戳，校验文案 UI自动化${timestamp} 是否存在",
        "output": "<thought>\n要获取当前时间的秒级时间戳，可以使用RF的`Get Current Date`关键字或Python代码执行当前时间的获取。然后，我们需要构造要校验的文本`UI自动化${timestamp}`，并使用`IsAnyTextExisting`关键字来检查页面上是否存在该文案。\n</thought>\n\n<code_block>\n# 使用Python获取当前时间的秒级时间戳\n${timestamp}=  Evaluate  int(time.time())  time\n\n# 构造要校验的文案\n${ui_text}  Set Variable  UI自动化${timestamp}\n\n# 判断页面上是否存在该文案\n${exist}  IsAnyTextExisting  ${ui_text}\n\n# 如果存在，记录日志确认\nIF  ${exist}\n    Log  文案UI自动化${timestamp}存在\nELSE\n    Log  文案UI自动化${timestamp}不存在\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "读取vars.yaml",
        "output": "<thought>\n为了读取 vars.yaml 文件，我建议使用 Robot Framework 的 BuiltIn 库中的 `Evaluate` 来执行 Python 代码，因为 Robot Framework 本身没有直接读取 YAML 文件的功能。我们可以使用 Python 的 yaml 库来读取 YAML 文件内容并返回。\n\n步骤如下：\n1. 确保 Robot Framework 的环境中可以使用 yaml 库。\n2. 使用 `Evaluate` 关键字与 Python 代码结合来读取 vars.yaml 文件。\n</thought>\n\n<code_block>\n# 读取 vars.yaml 文件并返回其内容\n&{yaml_content}=    Evaluate    yaml.safe_load(open('vars.yaml'))    modules=yaml\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘撤销’ 右侧 60px 的位置，输入：我不要了\n\n提示：先把鼠标移动到给定偏移量的位置，然后就地点击",
        "output": "<thought>\n在这个场景中，首先需要移动鼠标到“撤销”文本的位置，并在其右侧偏移60px的位置点击。然后在点击的位置输入“我不要了”。为此，可以使用`MoTo`关键字将鼠标移动到“撤销”文本上，并通过`dx=60`进行水平偏移。接着使用`MClick`在当前位置点击，最后使用`SendText`输入文本“我不要了”。\n</thought>\n\n<code_block>\n# 移动鼠标到\"撤销\"文本右侧60px的位置\nMoTo | 撤销 | dx=60\n\n# 点击鼠标当前位置\nMClick\n\n# 输入“我不要了”\nSendText | 我不要了\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击条件回源右边的开关，设置 主回源地址 依次为 IP origin_ip 80 100",
        "output": "<thought>\n首先，我们需要点击条件回源右边的开关。根据提示，开关一般是class包含switch的button。因此，我们可以使用`ClickElemToTheDirectionOf`关键字，选择条件回源右边的按钮。\n接着，需使用`SetField`关键字设置主回源地址的值。在设置时，可以使用多个值作为输入。\n</thought>\n\n<code_block>\n# 点击条件回源右边的开关\nClickElemToTheDirectionOf | 条件回源 | right | button[class*=switch]\n\n# 设置主回源地址依次为 IP, origin_ip, 80, 100\nSetField | 主回源地址 | IP | origin_ip | 80 | 100\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格第一行中 ‘音浪’ 这一列的值，只保留所有数字部分",
        "output": "<thought>\n首先，我们需要获取第一行中名为“音浪”的列的值。我们可以使用`GetCellValue`关键字来获取特定单元格的值。然后，我们需要通过Python的字符串处理提取所有的数字。由于Robot Framework对Python代码的支持，我们可以使用`Evaluate`来完成这一任务。\n</thought>\n\n<code_block>\n# 获取表格第一行中‘音浪’这一列的值\n${yinlang_val}  GetCellValue | 1 | 音浪\n\n# 保留值中的所有数字部分\n${numbers_only}  Evaluate | ''.join(c for c in $yinlang_val if c.isdigit())\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 “月账单概览” 表 有3行",
        "output": "<thought>\n为了校验“月账单概览”表有3行，可以使用`CheckRowCount`关键字。需要确保选择正确的表格，如果不指定`base`，默认为第一个表格。\n</thought>\n\n<code_block>\n# 校验“月账单概览”表有3行\nCheckRowCount | 3 | tbl=月账单概览\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左上角的 < ",
        "output": "<thought>\n在这个场景中，我们需要点击左上角的一个箭头图标，该箭头图标的名称为arrow-left。因为箭头图标位于页面的左上角，可以使用ClickIconToTheDirectionOf关键字来完成这项任务，其中基准元素设置为SCREEN_CENTER，方向设置为topLeft，并指定要点击的icon为arrow-left。\n</thought>\n\n<code_block>\n# 点击屏幕中心左上角的arrow-left图标\nClickIconToTheDirectionOf | SCREEN_CENTER | topLeft | arrow-left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选Sheet",
        "output": "<thought>\n任务是勾选名为“Sheet”的复选框，可以直接使用关键字CheckBoxOn操作，因此应使用CheckBoxOn关键字，并将复选框名称传递给它。\n</thought>\n\n<code_block>\n# 勾选名为“Sheet”的复选框\nCheckBoxOn | Sheet\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向选择指标文本框输入testea",
        "output": "<thought>\n根据描述，我们需要在页面上找到一个名为选择指标的input或textarea控件，并向其中输入文本\"testea\"。可以考虑使用`SetField`关键字，当无法通过字段名称查找时，可以使用`FillArea`与jquery选择器结合。\n</thought>\n\n<code_block>\n# 在选择指标旁边的输入框中输入testea\nSetField | 选择指标 | testea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在‘时间周期’输入‘最近1天’",
        "output": "<thought>\n要在“时间周期”字段输入“最近1天”，可以直接使用SetField关键字，将值设置为“最近1天”。\n</thought>\n\n<code_block>\n# 在‘时间周期’字段输入‘最近1天’\nSetField | 时间周期 | 最近1天\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “进入SladarWeb页面” 的关键字，接受 product_name_id 参数，操作逻辑为：\n1. 等页面加载完成后点击 Web，然后切换到新窗口\n2. 在输入产品名称中输入 product_name_id 并回车\n3. 点击 product_name_id，然后切换到新窗口，并等页面加载好",
        "output": "<thought>\n首先，使用'WaitLoading'等待页面加载完成，然后点击'Web'。然后，使用'ToNewWindow'切换到新打开的窗口。\n其次，在'产品名称'字段中输入参数 'product_name_id' 并回车，这可以通过'SetField'关键字实现。\n接着，点击与 'product_name_id' 同名的链接，可以用'Click'关键字实现。\n最后，切换到新打开的窗口并等待页面加载完成。这个步骤中分别使用了'ToNewWindow'和'WaitLoading'关键字。\n</thought>\n\n<code_block>\n进入SladarWeb页面\n    [Arguments]  ${product_name_id}\n    WaitLoading\n    Click  |  Web\n    ToNewWindow\n    SetField  |  输入产品名称  |  ${product_name_id}  |  enter=True\n    Click  |  ${product_name_id}\n    ToNewWindow\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二个弹框中的第三个 a href 包含 volc 的元素",
        "output": "<thought>\n首先，我们需要识别正确的元素。在这个场景中，我们使用ClickElem来定位元素，因为我们要找到一个特定的jquery选择器元素。我们需要在第二个弹框中点击第三个包含href属性且值中有volc的a元素。因此，我们需要使用base=POPUP并指定popup_index=1来选择第二个弹框。同时，我们需要使用:eq(2)来选择第三个元素，因为jquery选择器是基于零索引的。\n</thought>\n\n<code_block>\n# 点击第二个弹框中的第三个 href 包含 volc 的 a 元素\nClickElem | a[href*=volc]:eq(2) | base=POPUP | popup_index=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘说明’ 为:集团侧业务线数据-使用主数据编码+当前时间，设置 校验关键字模糊查询为:1158268, 校验关键字精准查询:MDPD00003083，点击 校验并提交 按钮，点击待我审批，等待页面加载完成，检查表格任务类型列为实验Review",
        "output": "<thought>\n我们需要按步骤填写字段并点击按钮，然后等待加载完成并检查特定表格列中的值。\n\n1. 使用当前时间生成说明字段的值。\n2. 使用`BatchSetFields`批量设置字段。\n3. 使用`ClickTextOneByOne`依次点击按钮。\n4. 使用`WaitLoading`等待页面加载。\n5. 使用`CheckColHas`检查任务类型列的值。\n\n为了生成说明字段的值，可以使用`Get Current Date`关键字，然后格式化为所需的日期时间格式。\n</thought>\n\n<code_block>\n# 获取当前时间\n${current_time}  Get Current Date  result_format=%Y-%m-%d-%H-%M-%S\n\n# 设置多个字段\nBatchSetFields  说明=集团侧业务线数据-使用主数据编码${current_time}  校验关键字模糊查询=1158268  校验关键字精准查询=MDPD00003083\n\n# 依次点击按钮\nClickTextOneByOne  校验并提交  待我审批\n\n# 等待页面加载完成\nWaitLoading\n\n# 检查任务类型列中包含实验Review\nCheckColHas  任务类型  实验Review\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印当前日期，用 2011/12/25 格式输出",
        "output": "<thought>\n为了完成这个任务，我们可以使用RobotFramework的内建关键字Get Current Date来获取当前日期，并通过 result_format=%Y/%m/%d 指定输出格式\n</thought>\n\n<code_block>\n# 获取当前日期 %Y/%m/%d 格式\n${current_date} =  Get Current Date  result_format=%Y/%m/%d\n\n# 输出转换后的日期\nLog   ${formatted_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 '会议周期' 为：2024/12/30 10:00:00~2024/12/31 08:00:00",
        "output": "<thought>\n根据给出的任务，我们需要为字段“会议周期”设置时间范围。我们可以使用SetField关键字来完成这一任务，并在字段中填写两个时间点。因为时间点格式和范围连接符号都是文本内容，我们可能需要依次填入这些值。\n</thought>\n\n<code_block>\n# 设置会议周期为具体时间段\nSetField | 会议周期 | 2024/12/30 10:00:00 ~ 2024/12/31 08:00:00\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写字段A 设置成 appid  总人数",
        "output": "<thought>\n根据需求，我们需要完成以下动作：在字段A处填入appid 和 总人数\n为完成这个任务，我们可以使用SetField关键字。\n</thought>\n\n<code_block>\n# 在字段A处填入appid和总人数\nSetField | A | appid | 总人数\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第1个账务账期右边选择框。提示：选择框一般为input或select",
        "output": "<thought>\n首先需要找到“账务账期”文本，然后选择其右边的选择框。该选择框一般是input或select元素，所以我们可以使用`ClickElemToTheDirectionOf`关键字来点击位于“账务账期”右侧的第一个选择框。\n</thought>\n\n<code_block>\n# 找到账务账期右边的选择框并点击\nClickElemToTheDirectionOf | :contains(账务账期):eq(0) | right | input, select\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "单元格（emr_modify，状态）中的文本应该包含：开启",
        "output": "<thought>\n根据场景需求，我们需要检查特定单元格（emr_modify，状态）中是否包含文本“开启”。对于此任务，可以使用`CheckCellHas`关键字，其中指定行和列的名称，以及要检查的文本。\n</thought>\n\n<code_block>\n# 校验emr_modify行的状态列中包含开启\nCheckCellHas | emr_modify | 状态 | 开启\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找第一个class包含arco-icon-plus的元素且包含文本添加受众规则",
        "output": "<thought>\n首先，我们需要查找一个class包含特定值的元素，同时该元素还需要包含特定的文本。这可以使用`FindElem`和`FindByText`关键字来实现。\n为了找到第一个class包含`arco-icon-plus`且包含文本`添加受众规则`的元素，我们可以构建一个jquery选择器。\n由于我们只需要第一个匹配的元素，所以不需要使用`:eq`选择器。\n</thought>\n\n<code_block>\n# 查找class包含arco-icon-plus且文本为添加受众规则的元素\n${elem}  FindElem | [class*=arco-icon-plus]:contains(添加受众规则)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击创建分群，点击按天，鼠标移动到${name}_title，点击元素class=\"arco-icon arco-icon-close\"，点击弹窗中的确定，点击空白区域",
        "output": "<thought>\n根据任务描述，需要依次执行以下操作：\n1. 点击“创建分群”按钮。\n2. 点击“按天”按钮。\n3. 移动鼠标到变量`${name}_title`表示的元素上。\n4. 点击一个特定class的关闭图标。\n5. 点击弹窗中的“确定”。\n6. 点击页面空白区域。\n\n为实现上述步骤：\n- 使用`Click`关键字点击“创建分群”和“按天”。\n- 使用`MoToElem`关键字移动鼠标到`${name}_title`元素上。\n- 使用`ClickElem`关键字点击关闭图标。\n- 使用`Click`关键字在弹窗中点击“确定”。\n- 使用`ClickWhiteArea`关键字点击空白区域。\n</thought>\n\n<code_block>\n# 点击创建分群按钮\nClick | 创建分群\n\n# 点击按天按钮\nClick | 按天\n\n# 鼠标移动到变量 ${name}_title 表示的元素上\nMoToElem | ${name}_title\n\n# 点击class为\"arco-icon arco-icon-close\"的元素\nClickElem | [class=\"arco-icon arco-icon-close\"]\n\n# 点击弹窗中的确定\nClick | 确定 | base=POPUP\n\n# 点击页面空白区域\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 搜索发送到https://qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery的所有POST请求,校验响应中的data字段的中的status_code都是200、 \"message\": \"success\"",
        "output": "<thought>\n首先，我们需要搜索发送到指定URL的POST请求，然后从每个响应中提取data字段。接着，需要检查这些响应中的status_code是否都是200，并且message字段是否都是\"success\"。我们可以使用Search Requests关键字来找到这些请求，然后使用GetValuesFromJson关键字从响应中提取所需字段的值。最后，我们可以使用Should Be Equal As Strings关键字来验证这些字段的值是否符合预期。\n</thought>\n\n<code_block>\n# 搜索请求URL包含 https://qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery 的所有POST请求\n${all_responses}  Search Requests  qianchuan.jinritemai.com/ad/api/data/v1/common/statQuery  POST  all\n\n# 对于每一个响应，校验data字段的status_code是200，message是\"success\"\nFOR  ${resp_json}  IN  @{all_responses}\n    ${status_code}  GetValuesFromJson  ${resp_json}  data:status_code\n    ${message}  GetValuesFromJson  ${resp_json}  data:message\n    Should Be Equal As Strings  ${status_code}  200\n    Should Be Equal As Strings  ${message}  success\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击ui_test表格行中的‘删除’icon, 输入删除原因：测试",
        "output": "<thought>\n首先，需要找到ui_test表格行中的‘删除’icon并点击，我们可以使用ClickIconOfRow关键字，它能找到指定表格行中的指定图标并进行点击。然后输入删除原因：测试，我们可以使用SetField关键字，它能选择指定的字段并输入相应的值。\n</thought>\n\n<code_block>\n# 点击ui_test表格行中的‘删除’icon\nClickIconOfRow | ui_test | delete \n\n# 输入删除原因：测试\nSetField | 删除原因 | 测试 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开客户业务 账单管理模块",
        "output": "<thought>\n打开账单管理模块需要依次点击菜单“客户业务”和“账单管理”，这可以通过ClickMenu关键字来实现。\n</thought>\n\n<code_block>\n# 进入账单管理模块\nClickMenu | 客户业务 | 账单管理\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 设置 “请输入注册邮箱” 为 “cpabusinessn@iubridge.com”",
        "output": "<thought>\n 根据问题描述，需要在页面上找到“请输入注册邮箱”关联的输入框并填入指定的邮箱地址。这可以通过`SetField`关键字实现。默认操作第一个匹配的字段，所以不需要指定索引。\n </thought>\n \n <code_block>\n # 设置“请输入注册邮箱”为“cpabusinessn@iubridge.com”\n SetField | 请输入注册邮箱 | cpabusinessn@iubridge.com\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截图整个屏幕图片并对比，相似度取 0.92",
        "output": "<thought>\n此场景较为简单，只需要使用ImageDiff关键字就可以实现。对于截图比较，我们首先需要使用ImageDiff关键字，无需提供选择器，因为想要截取的是整个屏幕。然后需要设置相似度sim=0.92。\n</thought>\n\n<code_block>\n# 截图整个屏幕并和基准图对比，相似度取0.92\nImageDiff | sim=0.92\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "招到第一个输入框，输入2，点击提交订单，检查页面包含：最终以费用中心结算为准",
        "output": "<thought>\n首先，我们需要找到页面上第一个input或textarea元素，然后在该元素中输入\"2\"。接着，我们要点击包含\"提交订单\"文本的按钮。最后，检查页面上是否显示了\"最终以费用中心结算为准\"文本。为此，我们可以使用`Click`、`FillArea`、以及`CheckHasText`关键字来实现。\n</thought>\n\n<code_block>\n# 找到第一个input或textarea，输入2\nSetField | input:eq(0),textarea:eq(0) | 2\n\n# 点击提交订单\nClick | 提交订单\n\n# 检查页面包含：最终以费用中心结算为准\nCheckHasText | 最终以费用中心结算为准\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击v0下面的添加分群",
        "output": "<thought>\n 要解决这个问题，我需要点击“v0”下方的“添加分群”文本。因此，我会使用`ClickTextToTheDirectionOf`关键字，指定基准元素为“v0”，方向为“bottom”，目标文本为“添加分群”。\n </thought>\n \n <code_block>\n # 点击v0下方的添加分群\n ClickTextToTheDirectionOf | v0 | bottom | 添加分群\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击状态，在下拉框选择待发布",
        "output": "<thought>\n在这个场景中，我们需要完成两个步骤：首先点击文本\"状态\"，然后从下拉框中选择\"待发布\"选项。首先，可以使用`Click`关键字来点击\"状态\"文本。接下来，使用`SelectOption`关键字来选择下拉框中的选项\"待发布\"。两个步骤要紧密结合，以确保在选择选项时正确关联到点击的下拉框。\n</thought>\n\n<code_block>\n# 点击状态文本\nClick | 状态\n\n# 在下拉框中选择待发布选项\nSelectOption | 待发布\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在输入原因中输入：就让你过一次吧，然后点击确定",
        "output": "<thought>\n场景要求在一个输入字段中输入文本，然后点击确认。可以使用SetField关键字来输入文本，然后使用Click关键字点击确认按钮。\n</thought>\n\n<code_block>\n# 在输入原因中输入文本“就让你过一次吧”\nSetField | 输入原因 | 就让你过一次吧\n\n# 点击确定按钮\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将表格第 3 行的参考价格设为 ￥100",
        "output": "<thought>\n这是一个简单的脚本编写过程。首先，我们需要定位到表格中的第3行，然后通过使用关键字\"FillCell\"，将第3行的\"参考价格\"设为\"￥100\"。这个关键字将单元格的内容设置为指定的值。\n</thought>\n\n<code_block>\n# 定位到表格的第 3 行参考价格单元格，设置其为 ￥100\nFillCell | 3 | 参考价格 | ￥100\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击保存草稿左侧的提交审核",
        "output": "<thought>\n在这个场景中，需要点击“保存草稿”左侧的“提交审核”文本。可以使用`ClickTextToTheDirectionOf`关键字来实现。基准元素是“保存草稿”，方向是left，目标文本是“提交审核”。\n</thought>\n\n<code_block>\n# 点击保存草稿左侧的提交审核\nClickTextToTheDirectionOf | 保存草稿 | left | 提交审核\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "邮政编码中输入${code}，收件人中输入：胡雷霆，电话中输入：177****8633，点击发送，点击已发邮件，校验发送列表中包含主题为：平安喜乐的邮件。提示：批量设置字段，然后检查主题这个表格列中包含给定文本",
        "output": "<thought>\n首先，批量设置邮政编码、收件人和电话字段。然后点击发送按钮，之后导航到已发邮件。最后，检查发送列表中的主题列是否包含“平安喜乐”。\n</thought>\n\n<code_block>\n# 设置邮政编码、收件人和电话\nBatchSetFields  邮政编码=${code}  收件人=胡雷霆  电话=177****8633\n\n# 点击发送按钮\nClick | 发送\n\n# 点击已发邮件\nClick | 已发邮件\n\n# 校验发送列表中主题列包含“平安喜乐”\nCheckColHas | 主题 | 平安喜乐\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新窗口",
        "output": "<thought>\n为了切换到新窗口，我们可以使用提供的关键字 `ToNewWindow` 来实现。这个关键字将自动切换到当前浏览器中的新打开的窗口。\n</thought>\n\n<code_block>\n# 切换到新窗口\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新打开的窗口, 点击 yangyi 下面的 启动ComfyUI, 设置请选择标签为：batch",
        "output": "<thought>\n首先，使用`ToNewWindow`关键字来切换到新打开的窗口。接着，使用`ClickTextToTheDirectionOf`关键字来点击\"yangyi\"下面的\"启动ComfyUI\"。最后，使用`SetField`关键字设置\"请选择标签\"为\"batch\"。\n</thought>\n\n<code_block>\n# 切换到新窗口\nToNewWindow\n\n# 点击 yangyi 下面的 启动ComfyUI\nClickTextToTheDirectionOf | yangyi | bottom | 启动ComfyUI\n\n# 设置请选择标签为：batch\nSetField | 请选择标签 | batch\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果是cycle_type不是单次，就需要额外设置活动时间为7天后(年-月-日)，商品库存设置方式为现货",
        "output": "<thought>\n首先，我们需要判断变量cycle_type是否为单次。如果不是，则进行后续的设置。对于时间设置，使用RF标准库中的Add Time To Date关键字将当前日期增加7天，并将其格式化为\"年-月-日\"格式。然后利用SetField关键字设置活动时间和商品库存。\n</thought>\n\n<code_block>\n# 判断cycle_type是否为单次\nIF  \"${cycle_type}\" != \"单次\"\n    # 获取7天后的日期并格式化为\"年-月-日\"\n    ${current_date}  Get Current Date  result_format=%Y-%m-%d\n    ${future_date}  Add Time To Date  ${current_date}  7d  result_format=%Y-%m-%d\n    \n    # 设置活动时间为7天后\n    SetField  活动时间  ${future_date}\n    \n    # 设置商品库存为现货\n    SetField  商品库存设置方式  现货\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选表格第一行",
        "output": "<thought>\n勾选表格第一行，其实就是选中表格第一行。为了选中表格的第一行，我们有一个关键字 `SelectTableRow` 可以使用。这个关键字需要一个参数，表示要选中的表格行。在这个例子中，我们要选中的是表格的第一行，所以我们传递 `1` 作为参数。\n</thought>\n\n<code_block>\n# 选中表格第一行\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "根据 xpath //div[.//span[text()='全部工单']]/div[starts-with(@class, 'edit-icon-')] 点击控件",
        "output": "<thought>\n要点击指定的控件，我们可以使用ClickElem关键字和jquery选择器。首先，我们需要构造一个对应于XPath表达式的jquery选择器。XPath中的//div[.//span[text()='全部工单']]可以转换为div:has(span:contains('全部工单'))。XPath中的div[starts-with(@class, 'edit-icon-')]可以转换为div[class^='edit-icon-']。合并后得到的选择器应为：div:has(span:contains('全部工单')) > div[class^='edit-icon-']。接下来，就可以使用ClickElem关键字来点击该元素。\n</thought>\n\n<code_block>\n# 点击包含\"全部工单\"文本的span元素的父div下，class以\"edit-icon-\"开头的div\nClickElem | div:has(span:contains('全部工单')) > div[class^='edit-icon-']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置接入源管理员为：maopengge，接入源备注为：我就测试看看",
        "output": "<thought>\n在这个场景中，需要设置两个字段。可以使用关键字 SetField 分别设置接入源管理员和接入源备注的值。\n</thought>\n\n<code_block>\n# 设置接入源管理员为：maopengge\nSetField | 接入源管理员 | maopengge\n\n# 设置接入源备注为：我就测试看看\nSetField | 接入源备注 | 我就测试看看\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置div class包含monaco-mouse-cursor-text  内容为 SELECT hash_uid as base_id,event as label_value from   rangers.events_all",
        "output": "<thought>\n在这个场景中，我们需要将指定的SQL语句填入一个页面元素中，该元素的选择器条件为其class包含\"monaco-mouse-cursor-text\"。可以使用FillArea关键字，因为它支持通过jquery选择器来定位元素。我们可以通过:contains选择器找到包含给定class的元素，并使用FillArea将SQL语句填入其中。\n</thought>\n\n<code_block>\n# 设置具有指定class的div内容为SQL语句\nFillArea | div[class*=monaco-mouse-cursor-text] | SELECT hash_uid as base_id,event as label_value from rangers.events_all\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对包含detail_info的class截图比对，命名为合同详情-合同文本比对",
        "output": "<thought>\n为了对包含detail_info的class截图并进行对比，应该使用ImageDiff关键字。首先需要创建一个selector来选择包含detail_info的class元素。然后使用ImageDiff关键字进行截图对比，并命名为“合同详情-合同文本比对”。由于没有其他信息需要特别注意，直接使用ImageDiff即可完成任务。\n</thought>\n\n<code_block>\n# 对包含detail_info的class元素进行截图对比，命名为合同详情-合同文本比对\nImageDiff | [class*=detail_info] | pic_name=合同详情-合同文本比对\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在日志详情下方应该存在Hadoop",
        "output": "<thought>\n为了验证“日志详情”下方是否存在“Hadoop”文本，可以使用CheckHasTextToTheDirectionOf关键字来完成。这个关键字能够在指定基准元素的给定方向上检查文本是否存在。我们将“日志详情”作为基准元素，并选取方向为“bottom”来查找下方的“Hadoop”。\n</thought>\n\n<code_block>\n# 校验在 ‘日志详情’ 的下方应该存在Hadoop\nCheckHasTextToTheDirectionOf | 日志详情 | bottom | Hadoop\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查当前选中的页码为 1 且该元素包含aria-current=\"true\"",
        "output": "<thought>\n首先需要获取当前选中的页码元素。可以使用jQuery选择器查找包含文本“1”的元素。然后检查该元素的属性是否包含aria-current=\"true\"。\n</thought>\n\n<code_block>\n# 找到文本为1的页码元素\n${page_elem}  FindByText | 1\n\n# 获取该元素的aria-current属性\n${aria_current}  GetElemAttr | ${page_elem} | aria-current\n\n# 校验aria-current是否为true\nShould Be Equal As Strings  ${aria_current}  true\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "寻找__current_id=\"Module_6\"的div保存在element中",
        "output": "<thought>\n要根据给定的条件找到一个特定的div元素，我们可以利用RF框架中的FindElem关键字来实现。考虑到我们要查找的div具有特定的属性__current_id，我们可以通过jquery选择器\"div[__current_id='Module_6']\"来定位这个元素。\n</thought>\n\n<code_block>\n# 查找__current_id为Module_6的div元素\n${element}  FindElem | div[__current_id='Module_6']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${task_name}这一行，操作列中的 icon",
        "output": "<thought>\n为了解决这个问题，需要点击指定表格行中的一个图标。关键字ClickIconOfCell能够实现这个功能。参数包括：表格行名称（${task_name}）用于定位行，\"操作\"用于定位列，icon需要通过名称来指定。\n</thought>\n\n<code_block>\n# 使用ClickIconOfCell定位并点击指定表格行和列中的icon\nClickIconOfCell | ${task_name} | 操作\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成随机字符串，长度十位，并在前面拼接  ad_autotest_",
        "output": "<thought>\n首先，需生成一个长度为10的随机字符串，使用 `GenerateRandom` 关键字。\n然后，需在前面拼接 \"ad_autotest_\"，可以使用 `GenerateRandomWithPrefix` 关键字，设定前缀并生成符合长度的字符串。\n</thought>\n\n<code_block>\n# 生成 ad_autotest_ 开头的长度为23的随机字符串\n${rand_str}  GenerateRandomWithPrefix  | ad_autotest_ | 22 | [LETTERS][NUMBERS]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "断言页面存在文字“CUPED-活跃天数-回到app(新)-20210901后开启实验可看”",
        "output": "<thought>\n这个任务很直接，我们只需要使用 CheckHasText 关键字检查页面上是否存在制定的文本即可。所以我们将文本 \"CUPED-活跃天数-回到app(新)-20210901后开启实验可看\" 作为参数传递给这个关键字。\n</thought>\n\n<code_block>\n# 断言页面存在文字“CUPED-活跃天数-回到app(新)-20210901后开启实验可看”\nCheckHasText | CUPED-活跃天数-回到app(新)-20210901后开启实验可看\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 设置开启状态为关闭",
        "output": "<thought>\n 需要找出页面上与开启状态相关的控件，然后将其设置为关闭。假设页面上的控件是通过SetField关键字操作的。\n </thought>\n \n <code_block>\n # 设置开启状态为关闭\n SetField | 开启状态 | 关闭\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在筛选条件中输入：${DEPLOY_MACHINE}",
        "output": "<thought>\n首先，理解任务需求是在筛选条件中输入一个变量 ${DEPLOY_MACHINE}。我们可以使用`SetField`关键字来实现这个操作。需要确认的是是否有一个明确的字段名称，比如 \"筛选条件\"，如果有，可以直接使用；如果没有，需要靠近某个文本，比如 \"筛选条件\" 下方。\n\n假设有一个字段名称 \"筛选条件\"，我们可以直接使用 `SetField`。如果没有明确字段名称但有明确位置，我们可以利用 `near` 参数来实现。\n</thought>\n\n<code_block>\n# 在筛选条件字段中输入 ${DEPLOY_MACHINE}\nSetField | 筛选条件 | ${DEPLOY_MACHINE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开工作台页面，设置活动名称为 BOE UI自动化测试，选择投放方式：循环投放",
        "output": "<thought>\n首先需要打开工作台页面，可使用OpenUrl关键字。接着需要设置活动名称，可以使用SetField关键字填写名称。最后，选择投放方式“循环投放”，可以使用SelectOptionForField关键字来选择具体的投放方式。\n</thought>\n\n<code_block>\n# 打开工作台页面\nOpenUrl | ${工作台地址}\n\n# 设置活动名称为 BOE UI自动化测试\nSetField | 活动名称 | BOE UI自动化测试\n\n# 选择投放方式为 循环投放\nSelectOptionForField | 投放方式 | 循环投放\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开 ${abc} 页面，超时30s",
        "output": "<thought>\n通过OpenUrl关键字打开指定url，并设置timeout为30秒。\n</thought>\n\n<code_block>\n# 打开 ${abc} 页面，设置超时为30秒\nOpenUrl | ${abc} | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在“任务配置恢复”，就点击关闭icon，并执行关键字删除未上线任务_V2，参数是${task_name}，否则直接执行关键字删除未上线任务_V2，参数是${task_name}",
        "output": "<thought>\n需要检查页面是否存在文本“任务配置恢复”。如果存在，点击关闭icon，然后执行关键字删除未上线任务_V2；否则，直接执行关键字删除未上线任务_V2。\n使用 `IsAnyTextExisting` 判断文本是否存在，使用 `ClickIcon` 点击关闭icon。\n</thought>\n\n<code_block>\n# 判断页面是否存在“任务配置恢复”\n${exist}  IsAnyTextExisting  任务配置恢复\n\n# 如果存在，点击关闭icon\nIF  $exist\n    ClickIcon  close\nEND\n\n# 执行删除未上线任务_V2关键字，参数为${task_name}\n删除未上线任务_V2  ${task_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取第一个“服务满意度”的值",
        "output": "<thought>\n为了解决这个问题，我们需要找到“服务满意度”字段，然后获取与该字段关联的页面控件的值。我们可以使用`GetFieldVal`关键字来获取值。\n</thought>\n\n<code_block>\n# 获取“服务满意度”字段的值\n${val}  GetFieldVal | 服务满意度\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 包括确定的 按钮",
        "output": "<thought>\n为了点击“包括确定的”按钮，我们可以使用ClickElem关键字。首先，我们需要使用jQuery选择器来选择包含文本“确定”的按钮。根据示例代码的提示，使用`:contains(确定)`可以选择包含该文本的按钮。\n</thought>\n\n<code_block>\n# 点击包含“确定”文本的按钮\nClickElem | button:contains(确定)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“添加属性分组”, 接受name参数，表示属性名称，主要逻辑是：点击属性分组按钮，然后在最后一个选择属性分组的控件中输入name",
        "output": "<thought>\n要创建一个关键字名称为“添加属性分组”，首先你需要点击名为“属性分组”的按钮。然后需要在最后一个选择属性分组的控件中输入参数name。这可以通过使用SetField关键字实现，idx设置为-1表示最后一个控件，并将name作为值提供。\n第一步可以通过使用Click关键字并将“属性分组”作为txt参数来实现。选择这个关键字因为我们只需要简单地点击一个特定文本的按钮。 \n第二步需要用到SetField关键字，因为我们需要在特定的字段中输入特定的值。idx参数设置为-1，因为我们要在最后一个“选择属性分组”的控件中输入name。\n</thought>\n\n<code_block>\n添加属性分组\n    [Arguments]  ${name}\n    # 点击属性分组按钮\n    Click  | 属性分组\n    # 在最后一个选择属性分组的控件中输入name\n    SetField  | 选择属性分组  | ${name} | idx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 “确定” 按钮应该处于禁用状态",
        "output": "<thought>\n解决问题思路：由于我们知道按钮的文本是\"确定\"，所以我们可以使用jquery选择器来定位这个按钮。RF框架内置了一个关键字“Element Should Be Disabled”，可以用来检查页面上的某个元素是否被禁用。\n</thought>\n\n<code_block>\n# 创建变量，存储确定按钮的jquery选择器\n${confirmButtonSelector}  Set Variable  button:contains(确定)\n\n# 使用内置关键字，检查确定按钮是否被禁用\nElement Should Be Disabled  ${confirmButtonSelector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击一个月，点击勾选同意协议，点击表格中第五行的第一列的元素，点击弹窗中的撤回按钮，点击提交",
        "output": "<thought>\n首先，我们需要使用`Click`关键字点击“一个月”这个文本。接下来，我们使用`CheckBoxOn`关键字来勾选“同意协议”。接着，我们需要点击表格中第五行的第一列的元素，选择使用`ClickElemOfCell`关键字。然后，我们使用`Click`关键字点击弹窗中的“撤回”按钮，指定`base=POPUP`。最后，使用`Click`关键字点击“提交”。\n</thought>\n\n<code_block>\n# 点击文本“一个月”\nClick | 一个月\n\n# 勾选“同意协议”选项\nCheckBoxOn | 同意协议\n\n# 点击表格中第五行第一列的元素\nClickElemOfCell | 5 | 1\n\n# 点击弹窗中的撤回按钮\nClick | 撤回 | base=POPUP\n\n# 点击提交\nClick | 提交\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将元素elem1拖动到elem元素右侧 5px",
        "output": "<thought>\n这个场景需要使用DAndD关键字来实现拖拽行为。目标是将元素elem1拖动到元素elem的右侧5px，因此可以通过设置dx参数来完成此操作。dy参数保持为0，因为不需要垂直移动。\n</thought>\n\n<code_block>\n# 将元素elem1拖动到elem元素右侧5px\nDAndD | ${elem1} | ${elem} | dx=5 | dy=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量 ${show_name}  ${desc} 的值分别为：${name}展示名  ${name}描述",
        "output": "<thought>\n需要使用Set Variable关键字来创建和设置两个变量。分别将展示名和描述的值设置给${show_name}和${desc}。\n</thought>\n\n<code_block>\n# 设置变量 ${show_name} 的值为 ${name}展示名\n${show_name}  Set Variable  ${name}展示名\n\n# 设置变量 ${desc} 的值为 ${name}描述\n${desc}  Set Variable  ${name}描述\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字名为：重新申请权限先设置允许，作用是：执行关键字子账号登录，参数是${权限负责人用户名}和${权限负责人密码}，打开${权限设置页面};设置 ‘数据源’，参数是${SJY};向 class包含dprc-group-compact 的元素中输入：数据表 和 ${SQDSJB}，然后回车; 点击单元格（${SQDSJB}，操作）中的设置;设置 只读 的规则为：允许;点击保存;点击确定",
        "output": "<thought>\n分析任务，首先需要登录子账号，然后打开指定的权限设置页面。接下来，填写数据源和数据表参数，并在表格中点击对应的设置选项，设置规则为允许，最后保存并确认更改。使用适合的关键字操作如：`OpenUrl`、`SetField`、`FillArea`、`ClickTextOfCell`等。\n</thought>\n\n<code_block>\n*** Keywords ***\n重新申请权限先设置允许\n    [Arguments]  ${权限负责人用户名}  ${权限负责人密码}  ${权限设置页面}  ${SJY}  ${SQDSJB}\n    \n    # Step 1: 执行子账号登录\n    ${ret}  执行子账号登录  ${权限负责人用户名}  ${权限负责人密码}\n    \n    # Step 2: 打开权限设置页面\n    OpenUrl  ${权限设置页面}\n    \n    # Step 3: 设置数据源\n    SetField  数据源  ${SJY}\n    \n    # Step 4: 向指定元素输入数据表和请求数据表名\n    FillArea  [class*=dprc-group-compact]  数据表  ${SQDSJB}  enter=True\n    \n    # Step 5: 点击表格中设置选项\n    ClickTextOfCell  ${SQDSJB}  操作  设置\n    \n    # Step 6: 设置规则为允许\n    SetField  只读  允许\n    \n    # Step 7: 点击保存\n    Click  保存\n    \n    # Step 8: 点击确定\n    Click  确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击最后一个登录",
        "output": "<thought>\n由于题目要求我们点击最后一个登录，这里可以使用Click关键字，设置txt为\"登录\"，并将idx设置为-1（表示最后一个）。\n</thought>\n\n<code_block>\n# 点击最后一个登录\nClick | 登录 | idx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击 app_channel 所在行中，“字典” 所在列中的文本：上传",
        "output": "<thought>\n首先，定位到“app_channel”所在的表格行，然后在该行中找到“字典”列对应的单元格，接着在其中点击“上传”文本。因此需用到`ClickTextOfCell`关键字。\n</thought>\n\n<code_block>\n# 点击app_channel所在行的字典列的上传\nClickTextOfCell | app_channel | 字典 | 上传\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 时间输入框的小图标",
        "output": "<thought>\n为了点击时间输入框的icon，我们需要先确定icon的选择器。假设时间input/textarea的icon名称是clock。我们会使用`ClickIcon`关键字点击这个icon。因为`ClickIcon`关键字可以直接点击小图标，所以它是最合适的选择。\n</thought>\n\n<code_block>\n# 点击时间输入框的icon\nClickIcon | clock\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将浏览器设置为默认大小",
        "output": "<thought>\n通过设置浏览器窗口的宽度和高度为常见的默认值（如1920x1080）来实现类似的效果。默认大小通常取决于设备和操作系统，但1920x1080是比较常见的桌面浏览器默认尺寸。\n</thought>\n\n<code_block>\n# 设置浏览器为默认大小 1920x1080\nSetWindowSize | 1920 | 1080\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待文本为 ‘用户画像’ 且 class包含disabled的元素消失，然后点击表格中 ${name} 行中的 ‘用户画像’",
        "output": "<thought>\n首先需要等待文本为‘用户画像’且class包含disabled的元素消失，这可以通过WaitElemDisappear关键字实现。接着，在表格中点击`${name}`行中的‘用户画像’文本，可以使用ClickTextOfRow关键字实现。\n</thought>\n\n<code_block>\n# 等待文本为‘用户画像’且class包含disabled的元素消失\nWaitElemDisappear | :contains('用户画像')[class*=disabled]\n\n# 点击表格中${name}行中的‘用户画像’\nClickTextOfRow | ${name} | 用户画像\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新窗口，点击申请权限",
        "output": "<thought>\n为了实现需求，我们需要使用ToNewWindow关键字来切换到新窗口，然后使用Click关键字点击“申请权限”按钮。\n</thought>\n\n<code_block>\n# 切换到新窗口\nToNewWindow\n\n# 点击申请权限\nClick | 申请权限\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 icon: more",
        "output": "<thought>\n要点击名为“more”的图标，可以直接使用`ClickIcon`关键字并指定图标名称为\"more\"。\n</thought>\n\n<code_block>\n# 点击图标more (...)\nClickIcon | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "移动表格中的第一行的最后一个button",
        "output": "<thought>\n为了移动到表格中第一行的最后一个button，需要使用`MoveToElemOfRow`关键字。根据规则，选择器需要表示为:eq(-1)来定位最后一个button。\n</thought>\n\n<code_block>\n# 移动到表格第一行中的最后一个button\nMoveToElemOfRow | 1 | button:eq(-1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个关键字：设置第${group_no}组属性筛选条件，接受 ${line_no}, @{config} 参数，分别表示行号和该行的筛选条件配置，\n# 主要逻辑：\n# 1. 先判断第${group_no}个 div class包含InlineFirstItem__outer-container__TQuRy的元素${elem1}是否存在，如果不存在就要点击对照组按钮，并等待1s，此过程最多循环4次，\n# 2. 如果以上元素已经存在，则再判断此元素下的第${line_no}个 div class包含xxxx的元素${elem2}是否存在，如果不存在就要点击该元素内部的属性过滤按钮，并等待1s，此过程最多循环4次，\n# 3. 最后向元素${elem2} 中输入给定的多个筛选条件",
        "output": "<thought>\n我们首先需要设置两个循环，一个用于检查group div是否存在，另一个用于检查line div是否存在。这两个循环都需要点击特定的按钮以显示隐藏的元素，然后停顿一下以等待元素加载。\n在每个循环中，我们都有一个计数器来跟踪重试次数，并在达到最大重试次数后退出循环。\n在这两个循环结束后，我们可以确认这两个div都存在，然后我们就能找到这些div并在line div中输入给定的筛选条件。\n\n因此，我们需要使用以下关键词：\n- Set Variable: 为计数器设置初始值\n- FOR...IN RANGE...END: 执行循环\n- IsAnyElemExisting: 检查某个元素是否存在\n- Exit For Loop If: 在满足条件时退出循环\n- Click: 点击一个按钮\n- Sleep: 暂停执行\n- FindElem: 找到一个元素\n- FillArea: 在一个元素中输入多个值\n</thought>\n\n<code_block>\n设置第${group_no}组属性筛选条件\n    [Arguments]    ${group_no}    ${line_no}    @{config}\n    ${counter}    Set Variable    0\n    FOR    ${i}    IN RANGE    4\n        ${exist}    IsAnyElemExisting    div[class*='InlineFirstItem__outer-container__TQuRy']:eq(${group_no-1})\n        Exit For Loop If    ${exist}\n        Click    对照组\n        Sleep    1s\n        ${counter}    Set Variable    ${counter+1}\n        Exit For Loop If    ${counter} == 4\n    END\n    ${elem1}    FindElem    div[class*='InlineFirstItem__outer-container__TQuRy']:eq(${group_no-1})\n\n    ${counter}    Set Variable    0\n    FOR    ${i}    IN RANGE    4\n        ${exist}    IsAnyElemExisting   ${elem1} div[class*='xxxx']:eq(${line_no-1})\n        Exit For Loop If    ${exist}\n        ClickElem    ${elem1} button:contains('属性过滤')\n        Sleep    1s\n        ${counter}    Set Variable    ${counter+1}\n        Exit For Loop If    ${counter} == 4\n    END\n    ${elem2}    FindElem    ${elem1} div[class*='xxxx']:eq(${line_no-1})\n    FillArea    ${elem2}    @{config}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击密码登录，设置登录手机号：12341969980，设置登录密码：fangzhouqa666，点击第一个元素为arco-select-highlight",
        "output": "<thought>\n根据提供的场景，需要进行以下步骤：\n1. 点击\"密码登录\"按钮。\n2. 设置登录手机号字段。\n3. 设置登录密码字段。\n4. 点击第一个arco-select-highlight元素。\n\n可以使用`Click`关键字来点击\"密码登录\"，然后使用`SetField`关键字分别设置手机号和密码。最后，使用`ClickElem`关键字结合`jquery`选择器来点击第一个arco-select-highlight元素。\n</thought>\n\n<code_block>\n# 点击密码登录\nClick | 密码登录\n\n# 设置登录手机号为12341969980\nSetField | 登录手机号 | 12341969980\n\n# 设置登录密码为fangzhouqa666\nSetField | 登录密码 | fangzhouqa666\n\n# 点击第一个arco-select-highlight元素\nClickElem | [class=arco-select-highlight]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上角的“北京巨量引擎”",
        "output": "<thought>\n目标是点击页面右上角的“北京巨量引擎”文本。根据提供的关键字，应该使用`ClickTextToTheDirectionOf`关键字，其中基准元素可以是`SCREEN_CENTER`表示屏幕中心，方向可以是`topRight`来表示右上角。因此，我们可以使用`ClickTextToTheDirectionOf | SCREEN_CENTER | topRight | 北京巨量引擎`来定位并点击目标文本。\n</thought>\n\n<code_block>\n# 点击屏幕右上角的“北京巨量引擎”\nClickTextToTheDirectionOf | SCREEN_CENTER | topRight | 北京巨量引擎\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ${approve_user} 变量值为 ${approve_user_1}",
        "output": "<thought>\n该场景需要将变量`${approve_user}`设置为已有变量`${approve_user_1}`的值。因此，可以使用`Set Variable`关键字来完成这一任务。\n</thought>\n\n<code_block>\n# 将变量${approve_user}设置为${approve_user_1}的值\n${approve_user}  Set Variable  ${approve_user_1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 等待页面中出现 ${party_name} 和 ${supplier_name}",
        "output": "<thought>\n页面上需要等待两个文本出现，可以使用WaitText关键字来实现。\n</thought>\n\n<code_block>\n# 等待页面中出现 ${party_name} 和 ${supplier_name}\nWaitText | ${party_name} | ${supplier_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标hover最近1天",
        "output": "<thought>\n为了实现“鼠标hover最近1天”这个需求，我们需要使用`MoTo`或`MoToElem`关键字将鼠标移动到“最近1天”这个文本上。假设页面上有多个相同文本“最近1天”，我们需要确保选择最新的一个，即最后一个。可以使用`MoTo`关键字并将`idx`设置为`-1`来实现。\n</thought>\n\n<code_block>\n# 移动鼠标到最近1天的最后一个文本\nMoTo | 最近1天 | idx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果a=3就打印yes",
        "output": "<thought>\n根据问题要求，需要判断变量a是否等于3，使用Robot Framework的IF语法来实现这个功能，并打印出相应的结果。\n</thought>\n\n<code_block>\n# 如果a等于3，就打印yes\nIF  \"${a}\" == \"3\"\n    Log  yes\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击保存，等到出现：保存成功\n校验表格第一行包含  ${rand_group_name}，每日例行，规则创建\"，但是不包含 huleiting",
        "output": "<thought>\n在这个场景中，我们需要执行以下几个步骤：\n1. 点击保存按钮。\n2. 等待页面上出现“保存成功”的提示。\n3. 校验表格的第一行是否包含文本 `${rand_group_name}`、`每日例行` 和 `规则创建`，同时确认该行不包含 `huleiting`。\n\n为实现以上功能，我将按顺序使用 `Click`、`WaitText`、`CheckRowHas` 和 `CheckRowNotHas` 四个关键字。\n</thought>\n\n<code_block>\n# 点击保存按钮\nClick | 保存\n\n# 等待出现“保存成功”\nWaitText | 保存成功\n\n# 校验表格第一行包含指定的文本\nCheckRowHas | 1 | ${rand_group_name} | 每日例行 | 规则创建\n\n# 校验表格第一行不包含“huleiting”\nCheckRowNotHas | 1 | huleiting\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击名为 用户 的搜索框，并输入 权限账号1 后选择权限账号1",
        "output": "<thought>\n首先需要找到名为“用户”的搜索框，然后在光标激活后输入“权限账号1”，最后在输入框中选择“权限账号1”选项。可以使用以下关键字来实现：\n\n1. `Click` - 点击名为“用户”的搜索框。\n2. `SendText` - 在搜索框中输入“权限账号1”。\n3. `SelectOption` - 选择“权限账号1”选项。\n</thought>\n\n<code_block>\n# 点击名为“用户”的搜索框\nClick | 用户\n\n# 在搜索框中输入“权限账号1”\nSendText | 权限账号1\n\n# 选择权限账号1选项\nSelectOption | 权限账号1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "从 data/test_data 中读取 js 内容，然后在浏览器执行此 js 脚本",
        "output": "<thought>\n首先需要使用RF的内置关键字\"Get File\"读取js文件的内容，然后我们使用\"Execute Javascript\"关键字将读取到的内容在浏览器中执行。这两个关键字都来自于RF的内置关键字库，分别用于读取文件和在浏览器环境中执行javascript代码。\n</thought>\n\n<code_block>\n# 读取js文件内容\n${js_content}   Get File    data/test_data.js\n# 在浏览器执行js脚本\nExecute Javascript    ${js_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待出现 快捷导航 或者 Welcome",
        "output": "<thought>\n需要等待页面上出现“快捷导航”或“Welcome”文本，可以使用 `WaitText` 关键字，传入这两个文本作为参数。\n</thought>\n\n<code_block>\n# 等待页面上出现“快捷导航”或“Welcome”之一\nWaitText | 快捷导航 | Welcome\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击视频,检测页面是否出现常用转场模板字符,如果有则截图",
        "output": "<thought>\n在这个场景中，我们需要首先点击文本 \"视频\"，然后检测页面上是否出现了 \"常用转场模板\" 字符。如果检测到该字符，应该进行截图。\n\n为了解决这个问题，我们可以按照以下步骤进行：\n1. 使用 `Click` 关键字以点击文本 \"视频\"。\n2. 使用 `WaitText` 或 `CheckHasText` 来检测文本 \"常用转场模板\" 是否出现在页面。\n3. 如果该文本存在，使用 `Screenshot` 关键字进行截图。\n4. 使用 IF 结构来判断文本是否存在，以决定是否进行截图。\n\n接下来，将逻辑转换为 RF 的关键字代码。\n</thought>\n\n<code_block>\n# 点击视频\nClick  视频\n\n# 判断页面是否出现常用转场模板\n${exist}  IsAnyTextExisting  常用转场模板\n\n# 如果存在，则截图\nIF  ${exist}\n    Screenshot\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 当页面出现收起，就点击收起文字，没有则忽略\n ",
        "output": "<thought>\n 首先需要判断页面上是否出现“收起”文本。然后根据判断结果来决定是否进行点击操作。使用`IsAnyTextExisting`关键字来判断文本是否存在，如果存在则使用`Click`关键字点击文本。\n </thought>\n \n <code_block>\n # 判断页面是否出现“收起”\n ${exist}  IsAnyTextExisting | 收起\n \n # 如果存在，则点击“收起”\n IF  ${exist}\n  Click | 收起\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为“添加业务对象属性”的关键字，逻辑为：\n# 1. 获取属性名表格的行数rows\n2. 填写 “属性名” 表格第 rows 行的内容为 多个参数args",
        "output": "<thought>\n我们需要创建一个名为“添加业务对象属性”的关键字，并在其中执行以下步骤：\n1. 使用 `GetRowCount` 获取“属性名”表格的行数。\n2. 然后使用 `FillRow` 在第 `rows` 行填写传入的多个参数 `args`。\n3. 由于需要将行数动态绑定到 `FillRow` 的第一个参数，所以在执行时将 `rows` 作为变量传入。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加业务对象属性\n    [Arguments]  @{args}\n    # 获取属性名表格的行数\n    ${rows}  GetRowCount  tbl=属性名\n    # 填写“属性名”表格的第 ${rows} 行的内容\n    FillRow  ${rows}  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验发送到 /data/upload 的 POST 请求的 status_code 都是 201",
        "output": "<thought>\n首先，我需要使用`Search Requests`关键字来查找发送到`/data/upload`的POST请求。然后，我将检查这些请求的`status_code`字段是否等于201。由于我们要检查所有请求的状态码，我们将使用`all`模式来获取所有相关请求。最后，使用`Should Be Equal As Strings`关键字来验证`status_code`是否为201。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 /data/upload, 且请求方式为 POST 的所有请求\n${resp_json}  Search Requests  /data/upload  POST  all\n\n# 校验每个请求的status_code是否为201\nFOR  ${item}  IN  @{resp_json}\n    Should Be Equal As Strings  ${item['status_code']}  201\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将文本为 sales 的元素，拖拽到 ${elem} 中",
        "output": "<thought>\n首先需要找到文本为 \"sales\" 的元素，然后将其拖拽到已知的 `${elem}` 元素上。可以使用 `FindByText` 来获取 \"sales\" 元素，再用 `DAndD` 进行拖拽操作。\n</thought>\n\n<code_block>\n# 查找文本为 sales 的元素\n${sales_elem}  FindByText | sales\n\n# 将 sales 元素拖拽到变量 ${elem} 指向的目标元素\nDAndD | ${sales_elem} | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“盖章”按钮，再点击弹窗中的“盖章”按钮，设置变量 a 为 \"今天\"，判断字符串 b 如果是 快乐 执行第一句 如果是 痛苦 执行第二句",
        "output": "<thought>\n首先，我要点击页面上的“盖章”按钮，可以使用`Click`关键字直接点击文本“盖章”。接着，需要处理弹窗中的操作，可以使用`base=POPUP`指定在弹窗中执行操作，再次点击文本“盖章”按钮。然后，创建一个变量`a`并赋值为“今天”。最后，使用Robot Framework内置的`IF`语法，判断字符串变量`b`的值，如果是“快乐”，执行某个操作，如果是“痛苦”，执行另一个操作。\n</thought>\n\n<code_block>\n# 点击“盖章”按钮\nClick  盖章\n\n# 点击弹窗中的“盖章”按钮\nClick  盖章  | base=POPUP\n\n# 创建变量 a，值为“今天”\n${a}  Set Variable  今天\n\n# 判断字符串 b 的值\nIF  \"${b}\" == \"快乐\"\n    # 执行第一句操作\n    Log  执行第一句\nELSE IF  \"${b}\" == \"痛苦\"\n    # 执行第二句操作\n    Log  执行第二句\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "返回Play List所在行的数据，存为列表",
        "output": "<thought>\n为了获取特定行的数据，我们可以使用`GetRowValues`关键字。该关键字允许我们通过行中的文本或行号来获取该行的所有值，并且返回一个列表。在这个场景中，我们需要找到包含文本\"Play List\"的行，并获取该行的数据。因此，我们将使用`GetRowValues | Play List`来获取数据。由于没有特别指明表格的标识符或基准元素，我们假定默认表格或不需要特别指定。\n</thought>\n\n<code_block>\n# 获取“Play List”所在行的所有值，并存储为列表\n@{play_list_data}  GetRowValues | Play List\n\n# 打印获取到的值（可选步骤，主要用于验证）\nLog  ${play_list_data}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击我参与的，点击搜索算法场景，输入【自动化测试专用】，点击刷新小图标",
        "output": "<thought>\n首先，使用`Click`关键字点击文本“我参与的”。然后，使用`Click`关键字选择“搜索算法场景”。接下来，使用`SendText`关键字输入“自动化测试专用”。最后，使用`ClickIcon`关键字点击刷新图标。\n</thought>\n\n<code_block>\n# 点击“我参与的”\nClick | 我参与的\n\n# 点击“搜索算法场景”\nClick | 搜索算法场景\n\n# 输入“自动化测试专用”\nSendText | 自动化测试专用\n\n# 点击刷新图标\nClickIcon | refresh\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 检测“添加参数”按钮处于disable 不可点击状态",
        "output": "<thought>\n根据需求，需要检测“添加参数”按钮是否处于disabled状态，可以使用CheckElemDisabled关键字来实现。\n</thought>\n\n<code_block>\n# 检查“添加参数”按钮是否处于disabled状态\nCheckElemDisabled | button:contains(添加参数)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击父元素为A里面的第三个div",
        "output": "<thought>\n我们需要在父元素为A的范围内找到第三个div。可以利用`FindElem`来定位这些元素，通过jquery选择器的`:eq()`来选择第三个元素，从而实现点击。\n</thought>\n\n<code_block>\n# 点击父元素为A里面的第三个div\nClickElem | div:eq(2) | base=[id='A']\n\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开相对路径 /flight/81592/report/ad/1277",
        "output": "<thought>\n1. 首先需要获取当前URL，可以使用GetCurrentUrl关键字\n2. 然后需要计算相对路径/flight/81592/report/ad/1277的完整URL\n3. 可以使用Python的urljoin函数来拼接URL，这需要Evaluate关键字\n4. 最后使用OpenUrl打开拼接后的完整URL\n</thought>\n\n<code_block>\n# 获取当前URL\n${current_url}  GetCurrentUrl\n\n# 计算完整URL\n${full_url}  Evaluate  from urllib.parse import urljoin; urljoin(\"${current_url}\", \"/flight/81592/report/ad/1277\")\n\n# 打开完整URL\nOpenUrl  ${full_url}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个叫test的方法，接受入参var",
        "output": "<thought>\n为了在RobotFramework中实现一个叫test的方法并接受一个变量参数var，可以使用RF的User Keyword功能。我们将定义一个User Keyword，名称为test，并且在其内部实现测试逻辑。由于题目没有给出具体的测试操作需求，仅要求编写一个接受参数的方法，因此我们只需展示如何接受参数并在方法内使用即可。我们将使用Click关键字作为示例操作。\n</thought>\n\n<code_block>\n*** Keywords ***\n# 定义一个名为test的方法，接受一个参数var\ntest\n    [Arguments]    ${var}\n    # 示例操作：点击文本为传入参数var的元素\n    Click    ${var}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘实例与镜像’下面的‘实例’，进入实例页面。获取页面表格中‘实例名称/ID’列的值保存到${values}，校验 ${values}第一个值如果包含‘ECS-XXY01’，则勾选第一个值",
        "output": "<thought>\n首先点击导航栏中“实例与镜像”下面的“实例”按钮，进入实例页面。然后获取表格中“实例名称/ID”列的值存入${values}变量。最后判断 ${values} 列表的第一个值是否包含 'ECS-XXY01'，若包含，则勾选第一个值。\n</thought>\n\n<code_block>\n# 点击导航栏中‘实例与镜像’下面的‘实例’按钮\nClickMenu | 实例与镜像 | 实例\n\n# 获取表格中’实例名称/ID‘列的值\n@{values}  GetColValues | 实例名称/ID\n\n# 判断${values[0]}是否包含‘ECS-XXY01’\n${contain}  Run Keyword And Return Status  Should Contain  ${values[0]}  ECS-XXY01\nIF  ${contain}\n    # 勾选第一个值\n    ClickElemOfRow | 1 | :checkbox\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格第一行的 操作 列内容",
        "output": "<thought>\n首先，我们需要确定第一行和“操作”列的元素。对于行，我们可以使用行号，比如 1，对于列，我们可以使用列名，比如“操作”。这样，我们就可以直接使用关键字 `GetCellValue` 来获取第一行和“操作”列的值了。结果将会被保存在一个变量中，供我们后续使用或检查。\n</thought>\n\n<code_block>\n# 获取表格第一行的 '操作' 列内容\n${value}  GetCellValue | 1 | 操作\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验标题为“请选择单个选项”的表格，第一行包含：“选项 1”、“1”、“50%”",
        "output": "<thought>\n1. 首先需要定位到标题为\"请选择单个选项\"的表格\n2. 然后需要校验该表格的第一行是否包含指定的三个文本：\"选项 1\"、\"1\"、\"50%\"\n3. 可以使用CheckRowHas关键字来校验表格行包含指定文本\n4. 由于要校验的是第一行，row_name_or_id参数可以设为1\n5. 表格标题\"请选择单个选项\"可以作为tbl参数的值\n</thought>\n\n<code_block>\n# 校验\"请选择单个选项\"表格的第一行包含\"选项 1\"、\"1\"、\"50%\"\nCheckRowHas | 1 | 选项 1 | 1 | 50% | tbl=请选择单个选项\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置带宽峰值 ArcoSlider 的值为20Mb（其实就是设置‘带宽峰值’字段关联的滑块的值）",
        "output": "<thought>\n为了解决这个问题，我们可以使用 `SetField` 关键字来设置页面中名为“带宽峰值”的控件的值为“20Mb”。根据提示，`SetField` 可以自动处理页面中的各种控件，因此我们只需要简单地调用这个关键字并提供字段名称和目标值即可。\n</thought>\n\n<code_block>\n# 设置带宽峰值为20Mb\nSetField | 带宽峰值 | 20Mb\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：校验非0数字个数，接受 str_list 和 count 参数，\n关键字从一个字符串列表里，获取每一个字符串，将其中的‘,’都去掉，然后判断该字符串是否是数字，如果是数字，且不等于0，则个数加1，最终判断非0数字的数量是否大于等于 count",
        "output": "<thought>\n这个任务主要是进行字符串列表str_list中非零数字的校验，关键点在于：\n1. 如何遍历字符串列表str_list，分析每个字符串是否是数字\n2. 如何判断一个字符串是否是数字，我们可以使用RF的Should Be True关键字来判断\n3. 如何处理非零数字的个数统计\n4. 如何进行非零数字数量与count的比较\n</thought>\n\n<code_block>\n校验非0数字个数\n    [Arguments]  @{str_list}  ${count}\n    # 初始化非零数字的个数为0\n    ${non_zero_count}=  Set Variable  0\n\n    # 取出字符串列表中的每一个字符串\n    FOR  ${str}  IN  @{str_list} \n        ${str}=  Replace String  ${str}  ,  ${EMPTY}  # 将字符串中的','去掉\n        ${is_num}=  Run Keyword And Return Status  Should Be True  ${str}.isnumeric()  # 判断该字符串是否是数字\n        IF  ${is_num}  # 如果是数字\n            ${num}=  Convert To Number  ${str}  # 将字符串转换为数字\n            IF  ${num} != 0  # 如果该数字不等于0\n                ${non_zero_count}=  Evaluate  ${non_zero_count} + 1  # 非零数字的个数加1\n            END\n        END\n    END\n    Should Be True  ${non_zero_count} >= ${count}  # 校验非0数字的数量是否大于等于count\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将变更结果设置为：成功",
        "output": "<thought>\n 通过关键字SetField，我们可以将\"变更结果\"字段设置为\"成功\"。不需要使用idx、enter、base和near参数，因为没有特定的索引指定，没有要求输入回车，也没有特定的基准元素或靠近的文本。\n </thought>\n \n <code_block>\n # 将变更结果设置为：成功\n SetField | 变更结果 | 成功\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向弹窗中的表格第一行中依次输入多个值：huleiting, 你好，hello\\nworld, 99.99, 1110, 2024/09/24, 2024/09/24~2024/09/26, 选项1, 选项1, ${CONTRACT_FILE1}",
        "output": "<thought>\n这个场景需要向弹窗中的表格第一行依次输入多个值，可以使用`FillRow`关键字。由于涉及到特殊值如`${CONTRACT_FILE1}`，我们需要确保它能正确传递。根据要求直接操作弹窗中的表格，因此需要设置`base=POPUP`。\n</thought>\n\n<code_block>\n# 向弹窗中的表格第一行中依次输入多个值\nFillRow | 1 | huleiting | 你好 | hello\\nworld | 99.99 | 1110 | 2024/09/24 | 2024/09/24~2024/09/26 | 选项1 | 选项1 | ${CONTRACT_FILE1} | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择项目：auto_test_project_qa。提示: 在做选择操作时，如果操作的是一个有名称的字段，应该使用 SetField 关键字，它能识别此字段关联的控件类型并完成选择，否则应该使用 SelectOption，它用来选择已经展开的下拉框中的选项",
        "output": "<thought>\n这是一个选择操作的场景，由于给出的信息中包括字段名称，所以可以通过SetField关键字来完成此操作。\n</thought>\n\n<code_block>\n# 选择项目字段为auto_test_project_qa\nSetField | 项目 | auto_test_project_qa\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加项目，项目名称设置为：ui自动化，点击右下角的确定，点击添加票券，变量${count} 值加1，然后将原价设置为此值",
        "output": "<thought>\n1. 需要点击添加项目，可以使用`Click`关键字点击“添加项目”文本。\n2. 然后需要设置项目名称，可以使用`SetField`，以“项目名称”作为字段名。\n3. 需要点击页面右下角的“确定”，可以使用`ClickElemToTheDirectionOf`关键字，以某个基准元素为基点，点击右下角目标。\n4. 点击添加票券，再次用`Click`点击“添加票券”文本。\n5. 将变量${count}加1，可以使用`Evaluate`执行Python代码。\n6. 将原价设置为${count}，可以使用`SetField`，以“原价”作为字段名。\n</thought>\n\n<code_block>\n# 点击添加项目\nClick | 添加项目\n\n# 设置项目名称为“ui自动化”\nSetField | 项目名称 | ui自动化\n\n# 点击右下角的确定\nClickElemToTheDirectionOf | SCREEN_CENTER | bottomRight | :contains(确定)\n\n# 点击添加票券\nClick | 添加票券\n\n# 变量${count} 加1\n${count}  Evaluate  ${count} + 1\n\n# 设置原价为变量${count}的值\nSetField | 原价 | ${count}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向配置名称右边的输入框输入libra_autotest_config_khyocnqtco",
        "output": "<thought>\n首先，我们需要找到“配置名称”右边的元素。根据提示，我们可以使用`FindElemToTheDirectionOf`来查找这个元素。找到之后，我们使用`FillArea`向找到的元素输入文本`libra_autotest_config_khyocnqtco`。\n</thought>\n\n<code_block>\n# 查找配置名称右边的第一个input/textarea\n${elem}  FindElemToTheDirectionOf | 配置名称 | right | input, textarea\n\n# 向找到的元素输入文本\nFillArea | ${elem} | libra_autotest_config_khyocnqtco\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "移动到 class*=more_btn 的 button 上",
        "output": "<thought>\n首先我需要移动到一个满足 class 包含 \"more_btn\" 的 button 上。这个操作可以通过关键字 \"MoToElem\" 来实现。为了选择符合条件的元素，我将使用 jQuery 选择器。这种选择器可以通过 `[class*=more_btn]` 表示第一个匹配的元素。\n</thought>\n\n<code_block>\n# 移动到 class 包含 more_btn 的第一个 button\nMoToElem | button[class*=\"more_btn\"]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将页面下拉至完全可见class为overview-trend-com-wrapper页面\n ",
        "output": "<thought>\n 需要将页面滚动至特定元素可见，可以使用MoveIntoView关键字。首先，定义一个变量来存储jquery选择器，然后调用MoveIntoView进行操作。\n </thought>\n \n <code_block>\n # 定义选择器变量\n ${selector}  Set Variable | [class=overview-trend-com-wrapper]\n \n # 将目标元素滚动到视野内\n MoveIntoView | ${selector}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“阶段2”的父元素的下一个元素",
        "output": "<thought>\n首先，我们需要找到文本为“阶段2”的元素。然后，使用FindParentElem关键字来获取该元素的父元素。接着，在父元素后查找下一个元素，并进行点击操作。这可以通过创建一个jQuery选择器来表示父元素的下一个元素，并使用ClickElem关键字来点击它。\n</thought>\n\n<code_block>\n# 查找文本为阶段2的元素\n${elem}  FindByText | 阶段2\n\n# 找到阶段2的父元素\n${parent}  FindParentElem | ${elem}\n\n# 点击阶段2父元素的下一个元素\nClickElem | ${parent} + *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 工单状态，断言其值为：删除中，然后等待页面删除成功文案消失，在操作人中输入：hlt",
        "output": "<thought>\n首先需要获取工单状态字段的值，然后使用RF的断言关键字来验证该值为“删除中”。验证完成后，需要等待页面上的“删除成功”文案消失。最后，在名为“操作人”的字段中输入“hlt”。可以使用以下关键字来解决这些问题：\n- `GetFieldVal`：获取工单状态字段的值。\n- `Should Be Equal As Strings`：断言工单状态值等于“删除中”。\n- `WaitTextDisappear`：等待“删除成功”文案消失。\n- `SetField`：在“操作人”字段中输入“hlt”。\n</thought>\n\n<code_block>\n# 获取工单状态字段的值\n${order_status}  GetFieldVal | 工单状态\n\n# 断言工单状态值为删除中\nShould Be Equal As Strings  ${order_status}  删除中\n\n# 等待页面删除成功文案消失\nWaitTextDisappear | 删除成功\n\n# 在操作人字段中输入 hlt\nSetField | 操作人 | hlt\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择型号small",
        "output": "<thought>\n根据需求，需要选择一个型号为small的选项。可以使用SetField关键字来设置对应的字段值。\n</thought>\n\n<code_block>\n# 选择型号small\nSetField | 型号 | small\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置转化窗口期为多个值：自定义时间  20  天",
        "output": "<thought>\n解决问题思路：选用SetField关键字对转化窗口期进行设置，将给定的多个值填写到此字段中。\n</thought>\n\n<code_block>\n# 设置转化窗口期为：自定义时间 20 天\nSetField | 转化窗口期 | 自定义时间 | 20 | 天\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${MAIN_PAGE}包含beijing，设置接入点为北京-大兴-A，如果${MAIN_PAGE}包含shanghai，设置接入点为杭州-余杭-A，如果${MAIN_PAGE}包含guangzhou，设置接入点为广州-增城-A",
        "output": "<thought>\n解决问题思路：\n首先，我需要使用RobotFramework的IF/ELSE语法来判断变量${MAIN_PAGE}是否包含特定的城市名称，然后使用SetField关键字设置对应的接入点。具体的解决方法如下：\n</thought>\n\n<code_block>\n# 判断${MAIN_PAGE}是否包含北京\nIF  'beijing' in \"${MAIN_PAGE}\"\n    # 如果包含，设置接入点为北京-大兴-A\n    SetField | 接入点 | 北京-大兴-A\nELSE IF 'shanghai' in \"${MAIN_PAGE}\"\n    # 如果${MAIN_PAGE}包含上海，设置接入点为杭州-余杭-A\n    SetField | 接入点 | 杭州-余杭-A\nELSE IF 'guangzhou' in \"${MAIN_PAGE}\"\n    # 如果${MAIN_PAGE}包含广州，设置接入点为广州-增城-A\n    SetField | 接入点 | 广州-增城-A\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向请输入key搜索输入${params_pwd}",
        "output": "<thought>\n需要在光标激活的位置输入参数`${params_pwd}`，并且在输入框中包含提示文本“请输入key搜索”。可以使用`SendText`关键字来完成。\n</thought>\n\n<code_block>\n# 在“请输入key搜索”位置输入`${params_pwd}`\nSetField | 请输入key搜索 | ${params_pwd}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置全局变量‘PAGE_ACCOUNT’，值为变量ACCOUNT，SUB_ACCOUNT，StartTime 采用 下划线拼接",
        "output": "<thought>\n首先需要将变量ACCOUNT, SUB_ACCOUNT和StartTime用下划线拼接成一个字符串，然后将这个字符串赋值给全局变量PAGE_ACCOUNT。可以利用RobotFramework的Catenate关键字来进行字符串拼接。\n</thought>\n\n<code_block>\n# 以\"_\"为分隔符进行字符串连接\n${combined_string}  Catenate  SEPARATOR=_  ${ACCOUNT}  ${SUB_ACCOUNT}  ${StartTime}\n\n# 设置全局变量PAGE_ACCOUNT为拼接后的字符串\nSet Global Variable  ${PAGE_ACCOUNT}  ${combined_string}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击小放大镜图标搜索",
        "output": "<thought>\n1. 首先分析需求是要点击\"小放大镜icon\"进行搜索，这属于点击图标操作\n2. 查看可用关键字，ClickIcon专门用于点击图标操作，最符合需求\n3. 需要确定放大镜图标的名称，常见的有\"search\"、\"magnifier\"、\"zoom\"等\n4. 假设图标名称为\"search\"，使用ClickIcon关键字即可\n5. 不需要指定idx参数，因为默认就是点击第一个(0)\n6. 不需要base参数，因为不是在弹窗中操作\n7. 不需要near参数，因为没有特定位置要求\n</thought>\n\n<code_block>\n# 点击搜索放大镜图标\nClickIcon    search\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击机构地址选择框，点击逐一点击\"河北省\"\"石家庄市\"\"长安区\"",
        "output": "<thought>\n1. 首先需要点击机构地址选择框，这可以通过Click或ClickElem关键字实现\n2. 然后需要依次选择\"河北省\"\"石家庄市\"\"长安区\"，这可以通过ClickTextOneByOne关键字实现\n3. 由于是逐级选择，可能需要等待前一个选项加载完成，但题目没有明确说明，暂时不考虑等待时间\n4. 选择框可能是一个弹出层，所以可能需要使用base=POPUP参数\n</thought>\n\n<code_block>\n# 点击机构地址选择框\nClick | 机构地址\n\n# 逐级选择地址\nClickTextOneByOne | 河北省 | 石家庄市 | 长安区 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击列表第一行最后一个button，上传文件 abc.txt",
        "output": "<thought>\n首先，我们需要点击列表第一行的最后一个button，可以通过使用`ClickElemOfRow`关键字来实现，`row_name_or_id`设置为1表示第一行，`selector`可以选择button元素，`idx`设置为-1表示最后一个。然后我们需要上传文件`abc.txt`，可以通过`UploadFile`关键字来实现。\n</thought>\n\n<code_block>\n# 点击列表第一行的最后一个button\nClickElemOfRow | 1 | button:eq(-1)\n\n# 上传文件 abc.txt\nUploadFile | abc.txt\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 业务需求人(销售) 王腾蛟",
        "output": "<thought>\n1. 分析需求是要设置\"业务需求人(销售)\"字段的值为\"王腾蛟\"\n2. 可以使用SetField关键字直接设置字段值\n3. 不需要指定idx参数，因为默认就是第一个匹配的字段\n4. 不需要回车操作，enter参数保持默认False\n</thought>\n\n<code_block>\n# 设置业务需求人(销售)为王腾蛟\nSetField | 业务需求人(销售) | 王腾蛟\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“点击${text}”, 接受参数num(默认值为1，表示第一个)，作用是：点击第 num 个text",
        "output": "<thought>\n要实现点击第 num 个给定文本的功能，我们可以使用Click关键字。我们需要处理默认参数值和根据num确定选择器中的索引。具体实现中，我们将处理参数num的默认值为1，转换为选择器中的索引eq(num-1)。\n</thought>\n\n<code_block>\n*** Keywords ***\n点击${text}\n    [Arguments]  ${num}=1\n    ${index}    Evaluate    int(${num}) - 1\n    Click       ${text} | idx=${index}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个空列表",
        "output": "<thought>\n创建一个空列表在RobotFramework中可以通过Evaluate关键字来执行Python代码实现此功能。\n</thought>\n\n<code_block>\n# 用Python创建一个空列表\n${empty_list}    Evaluate    []\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取浏览器控制台变量 aaa 的值",
        "output": "<thought>\n要获取浏览器控制台中的变量值，可以使用Execute Javascript执行JavaScript代码来获取变量aaa的值。\n</thought>\n\n<code_block>\n# 执行JavaScript来获取浏览器控制台变量aaa的值\n${aaa_value}  Execute Javascript  return window.aaa;\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为: \"上传广告eCPM文件\" 的关键字，接受 file_path 参数，file_path 默认为空，业务逻辑是：\n如果 file_path 非空，就上传 file_path 指定的文件，否则就将 files/ecpm_template.csv 文件转换成 excel 格式的文件 file1.xlsx，然后上传此文件",
        "output": "<thought>\n对于这个问题，我们需要创建一个关键字，首先检查 `file_path` 是否为空。如果为空，我们需要将 `files/ecpm_template.csv` 转换为 Excel 格式，然后上传。否则，直接上传提供的文件路径。可以使用 `Set Variable` 和 `Evaluate` 来处理文件路径和格式转换。\n</thought>\n\n<code_block>\n# 创建关键字 '上传广告eCPM文件'\n*** Keywords ***\n上传广告eCPM文件\n    [Arguments]  ${file_path}=\n    \n    # 如果 file_path 为空\n    IF  \"${file_path}\" == \"\"\n        # 设置默认文件路径为 CSV 文件\n        ${file_path}=  Set Variable  files/ecpm_template.csv\n        \n        # 将 CSV 文件路径转换为 XLSX 文件路径\n        ${file_path_xlsx}=  Replace String  ${file_path}  .csv  .xlsx\n        \n        # 使用 pandas 将 CSV 文件转换为 Excel 文件\n        ${output}=  Evaluate  pandas.read_csv(${file_path}).to_excel(${file_path_xlsx})  sys, pandas\n        \n        # 上传转换后的 Excel 文件\n        UploadFile  ${file_path_xlsx}\n    ELSE\n        # 直接上传给定的 file_path\n        UploadFile  ${file_path}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义一个lists，里面包含6个list元素，遍历lists，打印list",
        "output": "<thought>\n在这个场景中，我们需要定义一个包含6个list元素的列表，并遍历它们以打印每个列表。RobotFramework本身没有直接用于循环和打印列表元素的关键字，因此我们需要使用Python代码来实现。我们可以使用Evaluate关键字来执行Python代码来创建和打印列表。\n</thought>\n\n<code_block>\n# 定义lists，包含6个list类型的元素\n${lists}=  Evaluate  [[1, 2, 3], ['a', 'b', 'c'], [True, False], ['x', 'y', 'z'], [10, 20, 30], ['apple', 'banana', 'cherry']]\n\n# 遍历lists并打印每个list\nFOR  ${list}  IN  @{lists}\n   Log  ${list}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将弹窗中的备注设置为八位随机字符串，点击确认，校验页面上含有$random_str，校验页面包含GB或MB",
        "output": "<thought>\n1. 使用`GenerateRandom`生成八位随机字符串。\n2. 使用`SetPopupField`将弹窗中的“备注”设置为该随机字符串。\n3. 使用`Click`点击弹窗中的“确认”。\n4. 使用`CheckHasText`校验页面上含有生成的随机字符串。\n5. 使用`CheckHasAnyText`校验页面包含文本“GB”或“MB”。\n</thought>\n\n<code_block>\n# 生成八位随机字符串\n${random_str}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n\n# 将弹窗中的备注设置为生成的随机字符串\nSetPopupField  备注  ${random_str}\n\n# 点击确认按钮\nClick  确认  | base=POPUP\n\n# 校验页面上含有生成的随机字符串\nCheckHasText  ${random_str}\n\n# 校验页面包含GB或MB\nCheckHasAnyText  GB  MB\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为“权限移交给第${num}个用户”的关键字，逻辑为：\n# 1. 点击文本“请选择移交至”，再点击第num个option元素",
        "output": "<thought>\n为了解决问题，需要首先通过“Click”关键字点击“请选择移交至”文本元素。然后使用“SelectOption”关键字选择第num个option元素，num可以用字符串格式化将参数插入到关键字中。\n</thought>\n\n<code_block>\n*** Keywords ***\n权限移交给第${num}个用户\n    # 点击“请选择移交至”文本\n    Click  请选择移交至\n    \n    # 点击第num个option元素\n    SelectOption  OPTIONS_${num}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 退货 的元素，然后打印尺寸信息",
        "output": "<thought>\n为了查找文本为“退货”的元素，可以使用`FindByText`关键字。找到元素后，使用`PrintElemRect`关键字来打印该元素的空间尺寸和位置信息。\n</thought>\n\n<code_block>\n# 查找文本为\"退货\"的元素\n${elem}  FindByText | 退货\n\n# 打印元素的尺寸信息\nPrintElemRect | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上角刷新图标，等待loading结束，点击申请时间",
        "output": "<thought>\n首先需要点击右上角的刷新icon，这可以通过`ClickIconToTheDirectionOf`关键字，其中`SCREEN_CENTER`作为基准元素，方向为`topRight`，图标名称为`refresh`。接着，使用`WaitLoading`关键字来等待页面加载完成。最后，点击文本`申请时间`，可以直接使用`Click`关键字。\n</thought>\n\n<code_block>\n# 点击右上角的刷新icon\nClickIconToTheDirectionOf | SCREEN_CENTER | topRight | refresh\n\n# 等待页面加载完成\nWaitLoading\n\n# 点击申请时间\nClick | 申请时间\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${AP名称} 所在表格行中的删除icon",
        "output": "<thought>\n为了准确点击 ${AP名称} 所在表格行中的删除icon，我们可以使用 `ClickIconOfRow` 关键字。这个关键字允许在指定的表格行中点击某个图标。由于需要定位到具体行上的图标，必须使用 row_name_or_id 参数指代行，icon 参数指定为删除图标。\n</thought>\n\n<code_block>\n# 点击 ${AP名称} 所在表格行中的删除icon\nClickIconOfRow | ${AP名称} | delete\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个操作按钮",
        "output": "<thought>\n 需要点击第一个操作按钮。可以使用 `Click` 关键字并通过 `idx=0` 指定第一个。\n </thought>\n \n <code_block>\n # 点击第一个“操作”按钮\n Click | 操作 | idx=0\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击id为enableVersion的元素，判断 ${val2} 等于 --，如果 ${date_diff} 等于0 则log aaa，如果小于等于7 则为短期利率，否则为标准利率",
        "output": "<thought>\n首先，我们需要使用ClickElem关键字点击id为enableVersion的元素。接着，使用RF内建的IF语法来检查${val2}是否等于--。在嵌套的IF语句中，我们再检查${date_diff}是否等于0，若是，则记录日志aaa。接下来，检查${date_diff}是否小于等于7，如果是，则记录日志短期利率，否则记录日志标准利率。\n</thought>\n\n<code_block>\n# 点击id为enableVersion的元素\nClickElem  | [id=enableVersion]\n\n# 判断 ${val2} 是否等于 --\nIF  \"${val2}\" == \"--\"\n    # 判断 ${date_diff} 是否等于 0\n    IF  \"${date_diff}\" == \"0\"\n        Log  aaa\n    # 如果 ${date_diff} 小于等于 7\n    ELSE IF  \"${date_diff}\" <= \"7\"\n        Log  短期利率\n    # 其他情况\n    ELSE\n        Log  标准利率\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加条件",
        "output": "<thought>\n在这个场景中，我需要点击文本为“添加条件”的元素。可以使用`Click`关键字来点击特定文本。此处没有提供基准元素，所以不需要设置`base`参数。\n</thought>\n\n<code_block>\n# 点击文本“添加条件”\nClick | 添加条件\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算 ${line_no} - 1",
        "output": "<thought>\n由于需求是需要对变量进行操作，此时我们需要使用RF的内置Evaluate关键字，它可以用于执行Python代码。\n</thought>\n\n<code_block>\n# 使用Evaluate关键字执行Python代码进行计算\n${result}    Evaluate    ${line_no} - 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认页面右上角的文案为“总部子账号”",
        "output": "<thought>\n在这个场景中，需要校验页面右上角是否存在“总部子账号”这个文案。可以使用CheckHasTextToTheDirectionOf关键字，该关键字允许校验基准元素给定方向的文本。这里基准元素可以定义为SCREEN_CENTER，然后使用topRight方向进行文案校验。\n</thought>\n\n<code_block>\n# 校验屏幕中心右上角存在“总部子账号”文本\nCheckHasTextToTheDirectionOf | SCREEN_CENTER | topRight | 总部子账号\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格里带有关键字monitor的行后的按钮",
        "output": "<thought>\n首先需要找到表格中包含关键字\"monitor\"的行。然后点击该行中的按钮。我们可以使用`ClickElemOfRow`关键字来实现这一点。需要注意的是，找到行后，按钮的选择器可以使用`:button`来表示。\n</thought>\n\n<code_block>\n# 点击表格里带有关键字monitor的行后的按钮\nClickElemOfRow | monitor | :button\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面底部‘驳回’，页面出现‘确认驳回’后，点一下弹框中的确定",
        "output": "<thought>\n在这个场景中，需要实现以下步骤：\n1. 点击页面底部的“驳回”按钮。\n2. 使用等待关键字，等待页面上出现“确认驳回”文本。\n3. 在确认驳回的弹框中，点击“确定”按钮。\n\n为实现这些步骤，可以使用以下关键字：\n- `ClickTextToTheDirectionOf`：用于点击页面底部的“驳回”按钮。假设它在屏幕底部附近。\n- `WaitText`：等待页面上出现“确认驳回”文本。\n- `Click`：用于点击弹框中的“确定”按钮。\n</thought>\n\n<code_block>\n# 点击屏幕底部的‘驳回’\nClickTextToTheDirectionOf | SCREEN_CENTER | bottom | 驳回\n\n# 等待页面出现‘确认驳回’文本\nWaitText | 确认驳回\n\n# 点击弹框中的‘确定’\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击我的订单，然后点击创建采购申请后 选择真实采购申请",
        "output": "<thought>\n 首先需要依次点击\"我的订单\"和\"创建采购申请\"，可以使用ClickTextOneByOne关键字。然后需要选择\"真实采购申请\"，可以使用Click关键字。\n </thought>\n \n <code_block>\n # 依次点击“我的订单”和“创建采购申请”\n ClickTextOneByOne | 我的订单 | 创建采购申请\n \n # 点击选择“真实采购申请”\n Click | 真实采购申请\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将表格中第三行的 状态 的值记录为 变量status，并打印status",
        "output": "<thought>\n首先，我们需要获取表格中第三行 状态 列的值，这可以通过使用GetCellValue关键字来实现。然后，我们将这个值设置为变量status，可以使用Log关键字来打印变量status。\n</thought>\n\n<code_block>\n# 获取表格第三行 状态 的值\n${status}  GetCellValue | 3 | 状态\n\n# 打印变量status\nLog  ${status}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果当前页面出现 ‘审批中’ 文案， 就跳过执行当前用例的后续步骤，并将用例标记为成功，原因为：‘审批中’，跳过用例执行",
        "output": "<thought>\n我的解决思路是：\n首先，检查页面上是否出现 \"审批中\" 文案。这可以通过IsAnyTextExisting关键字实现。\n然后，用RF的IF ELSE语法来判断是否应该跳过后续步骤。如果 \"审批中\" 文案存在（即 ${exist} 变量为True），那么就通过Set Test Message设置用例的原因，并使用Pass Execution来将用例标记为成功并终止执行。\n否则，就执行后续步骤。\n</thought>\n\n<code_block>\n# 检查页面上是否出现'审批中'文案\n${exist}  IsAnyTextExisting | 审批中\n\n# 判断是否应该跳过后续步骤\nIF  ${exist}\n    # 如果'审批中'文案存在，设置用例的原因并将用例标记为成功\n    Set Test Message  审批中，跳过用例执行\n    Pass Execution  通过审批\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为:\"邮箱登录\"的关键字,接受email,password,url参数,默认值分别为变量EMAIL,PASSWORD,LOGIN_URL，作用是 打开浏览器,访问url,等页面加载完成后,输入邮箱,密码,然后勾选'我已阅读',最后点击登录",
        "output": "<thought>\n首先，我们需要使用`OpenBrowser`关键字打开浏览器并访问给定的URL。然后，使用`WaitLoading`关键字等待页面加载完成。接下来，使用`SetField`关键字输入邮箱和密码。输入完成后，使用`CheckBoxOn`关键字勾选'我已阅读'复选框，最后使用`Click`关键字点击登录按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n邮箱登录\n    [Arguments]  ${email}=${EMAIL}  ${password}=${PASSWORD}  ${url}=${LOGIN_URL}\n    \n    # 打开浏览器并访问URL\n    OpenBrowser  ${url}\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 输入邮箱\n    SetField  邮箱  ${email}\n    \n    # 输入密码\n    SetField  密码  ${password}\n    \n    # 勾选'我已阅读'复选框\n    CheckBoxOn  我已阅读\n    \n    # 点击登录按钮\n    Click  登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求：curl 'https://vengine-console.bytedance.net/datarangers/api/projects/2113476/events:batchOperate' \\\n--data-raw '{\"operation_type\":7,\"events\":[{\"name\":\"event2OIfKc9pl9\"}]}'",
        "output": "<thought>\n分析这个请求，我们需要发送一个POST请求，并且请求体是JSON格式。我们可以使用提供的关键字UiSendRequest来实现。要特别注意构建请求体的JSON格式。\n</thought>\n\n<code_block>\n# 向 https://xxx.yyy.zzz.com/datarangers/api/projects/2113476/events:batchOperate 发送 POST 请求，带有请求体\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/datarangers/api/projects/2113476/events:batchOperate | {\"operation_type\": 7, \"events\": [{\"name\": \"event2OIfKc9pl9\"}]}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 span[draggable=\"true\"] 文本为 ${表信息} 的元素",
        "output": "<thought>\n要解决这个问题，需要查找一个span元素，其属性draggable为\"true\"，并且其文本等于变量${表信息}。我们可以使用FindElem关键字结合jQuery选择器来实现这个查找。\n</thought>\n\n<code_block>\n# 查找draggable=\"true\" 且文本为${表信息}的span元素\n${elem}  FindElem | span[draggable=\"true\"]:contains(${表信息})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击 解决任务",
        "output": "<thought>\n 这是一个基础点击操作，可以直接使用Click关键字来解决。\n </thought>\n \n <code_block>\n # 点击 解决任务\n Click | 解决任务\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 需求单-需求行 旁边的 ？",
        "output": "<thought>\n要点击\"需求单-需求行\"旁边的\"？\"icon，需要分析以下几点：\n1. 目标是一个问号图标(？)，可以使用ClickIcon关键字\n2. 图标位于\"需求单-需求行\"文本旁边，可以使用near参数指定\n3. 不需要指定base参数，因为不是弹窗中的元素\n4. 不需要指定idx参数，因为假设只有一个这样的图标\n</thought>\n\n<code_block>\n# 点击需求单-需求行旁边的？icon\nClickIcon | question | near=需求单-需求行\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取元素 第一个Task Type，并且点击该元素左边的小图标",
        "output": "<thought>\n获取第一个Task Type元素可以使用`FindByText`关键字并指定idx=0来获取，然后点击该元素左边的icon可以使用`ClickIconToTheDirectionOf`关键字。\n</thought>\n\n<code_block>\n# 获取第一个Task Type元素\n${elem}  FindByText | Task Type | idx=0\n\n# 点击该元素左边的icon\nClickIconToTheDirectionOf | ${elem} | left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “获取APPID” 的关键字，接受参数 url, 默认值为变量 MAIN_PAGE, 逻辑是从 url 中取出路径中纯数字的部分，如从 https://console.volcengine.com/datafinder/project/2190650/event-analysis 中取出 2190650 这个作为返回值",
        "output": "<thought>\n需要从URL中提取路径中纯数字的部分，可以使用Python的正则表达式来匹配数字，并使用Evaluate关键字来执行Python代码。\n</thought>\n\n<code_block>\n*** Keywords ***\n获取APPID\n    [Arguments]  ${url}=${MAIN_PAGE}\n    # 使用正则表达式提取URL中纯数字的部分\n    ${appid}  Evaluate  \"re.search(r'/(\\\\d+)/', '''${url}''').group(1)\"  modules=re\n    [Return]  ${appid}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“添加自定义属性”的关键字，作用为先点击页面的属性管理按钮，然后将页面切换到新窗口，然后点击8次添加按钮，然后将第 1 个 placeholder 为属性key的元素设置为custom1，第 1 个placeholder 为属性名称的元素设置为属性1， 将第 2 个 placeholder 为属性key设置为custom2，第 2 个placeholder为属性名称的元素设置为属性2...依次执行至第 8 个placeholder 为属性key的元素设置为custom8，第 8 个placeholder为属性名称 的元素设置为属性8为止，最后点击确定按钮",
        "output": "<thought>\n首先，点击页面的属性管理按钮。使用 `Click` 关键字。然后切换到新窗口，使用 `ToNewWindow`。接下来，需要点击8次添加按钮，使用 `Click` 关键字。接着，使用 `SetField` 关键字设置各个属性的key和名称。最后，点击确定按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加自定义属性\n    # 点击属性管理按钮\n    Click | 属性管理\n    \n    # 切换到新窗口\n    ToNewWindow\n    \n    # 点击8次添加按钮\n    FOR  ${i}  IN RANGE  8\n        Click | 添加\n    END\n\n    # 设置属性key和名称\n    FOR  ${i}  IN RANGE  1  9\n        SetField | placeholder=属性key | custom${i} | idx=${i-1}\n        SetField | placeholder=属性名称 | 属性${i} | idx=${i-1}\n    END\n\n    # 点击确定按钮\n    Click | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置带宽峰值附近的输入框的值为2",
        "output": "<thought>\n为了在“带宽峰值”附近的input/textarea设置值为2，我们可以使用SetField关键字并指定near参数为“带宽峰值”。该关键字可以帮助我们定位到带宽峰值下方的控件，进而操作它并设置值为2。\n</thought>\n\n<code_block>\n# 设置带宽峰值附近的input/textarea的值为2\nSetField | input,textarea | 2 | near=带宽峰值\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 解决时长 字段下的时间值，从第6个字符开始截取，并以‘/’为分割 分成2部分，然后判断第二部分是否和 ${tt} 一致",
        "output": "<thought>\n首先需要获取“解决时长”字段的值，可以使用`GetFieldVal`关键字。然后从获取的字符串中截取第6个字符及之后的部分，使用Python的split方法将其以‘/’分割成两部分。最后，比较第二部分是否与`${tt}`变量一致。\n</thought>\n\n<code_block>\n# 获取解决时长字段的值\n${val}  GetFieldVal | 解决时长\n\n# 从第6个字符开始截取，并以‘/’分割成两部分\n${split_val}  Evaluate  ${val}[5:].split('/')\n\n# 检查第二部分是否和${tt}一致\nIF  \"${split_val}[1]\" == \"${tt}\"\n    Log  一致\nELSE\n    Log  不一致\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 向第二个class包含arco-select-view-value的元素输入Libra",
        "output": "\n    \n<thought>\n 需要使用`FillArea`关键字来定位并操作页面元素。首先，通过jquery选择器找到第二个class包含`arco-select-view-value`的元素，这可以通过`:eq(1)`来实现，因为jquery中索引从0开始。\n </thought>\n \n <code_block>\n # 向第二个class包含arco-select-view-value的元素输入Libra\n FillArea | [class*=arco-select-view-value]:eq(1) | Libra\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取1天前的年-月-日",
        "output": "<thought>\n为了获取1天前的年-月-日，可以使用Python的日期库来计算当前日期的前一天日期，然后格式化输出。\n</thought>\n\n<code_block>\n# 使用Python内置的日期时间模块计算1天前的日期\n${one_day_ago}  Evaluate  (datetime.datetime.now() - datetime.timedelta(days=1)).strftime('%Y-%m-%d')  datetime\n\n# 输出1天前的年-月-日\nLog  ${one_day_ago}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发送到/mweb/v1/get_history_by_ids的所有post请求，校验响应中的ret字段值等于0",
        "output": "<thought>\n这个场景需要我们执行以下几个步骤：\n1. 使用`Search Requests`关键字搜索发送到`/mweb/v1/get_history_by_ids`的所有POST请求。\n2. 使用`GetValuesFromJson`关键字从每个请求的响应中提取`ret`字段。\n3. 使用`Should Be Equal As Strings`关键字校验提取的`ret`字段值等于0。\n\n由于`Search Requests`关键字支持通过设置`mode`参数为`all`获取所有符合条件的请求，因此我们可以用它来获取所有请求，接下来逐个提取响应中`ret`字段值进行校验。\n</thought>\n\n<code_block>\n# 搜索请求url中包含/mweb/v1/get_history_by_ids, 且请求方式为POST的所有请求\n${responses}  Search Requests  /mweb/v1/get_history_by_ids  POST  all\n\n# 对每个响应执行以下步骤\nFOR  ${response}  IN  @{responses}\n    # 获取响应中的ret字段的值\n    ${ret_value}  GetValuesFromJson  ${response}  ret\n    \n    # 校验ret字段值等于0\n    Should Be Equal As Strings  ${ret_value}  0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击表格第一行的“详情”按钮，检测url携带了action=view和id=，同时页面中没有输入框",
        "output": "\n    \n<thought>\n 首先，使用`ClickTextOfRow`关键字点击表格第一行的“详情”按钮。然后，使用`WaitURLContainsAll`关键字检查URL中包含`action=view`和`id=`。最后，使用`CheckNotHasElem`关键字验证页面中不包含`input`和`textarea`元素。\n </thought>\n \n <code_block>\n # 点击表格第一行的“详情”按钮\n ClickTextOfRow | 1 | 详情\n \n # 检查URL中包含action=view和id=\n WaitURLContainsAll | action\\=view | id\\=\n \n # 验证页面中不包含input和textarea\n CheckNotHasElem | input,textarea\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到 name 为 coralDetailPageIframe 的 frame",
        "output": "<thought>\n要切换到指定的iframe，我们可以使用`ToFrame`关键字，并通过jquery选择器选择name属性为`coralDetailPageIframe`的iframe。\n</thought>\n\n<code_block>\n# 切换到name为coralDetailPageIframe的iframe\nToFrame | iframe[name=coralDetailPageIframe]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "资产状态 下拉框中，选择 闲置",
        "output": "<thought>\n资产状态 下拉框中，选择 闲置，其实就是将‘资产状态’ 字段设置为：闲置，此场景可以使用SetField关键字，设置\"资产状态\"字段为\"闲置\"\n</thought>\n\n<code_block>\n# 设置资产状态为闲置\nSetField | 资产状态 | 闲置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "从文件abc.txt里面读取内容，存放到变量dollarname里",
        "output": "<thought>\n我们需要从文件`abc.txt`中读取内容并存储到变量`dollarname`中。Robot Framework提供了`OperatingSystem`库中的`Get File`关键字，可以使用该关键字来读取文件内容。\n</thought>\n\n<code_block>\n# 从文件abc.txt读取内容存储到变量dollarname\n${dollarname}  Get File  abc.txt\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹框中的合同需求人为张三",
        "output": "<thought>\n根据需求，操作的是弹框中的字段，因此应使用SetPopupField关键字。字段名是合同需求人，值是张三。\n</thought>\n\n<code_block>\n# 设置弹框中的合同需求人为张三\nSetPopupField | 合同需求人 | 张三\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 左侧侧边栏的 合同流程管理",
        "output": "<thought>\n为了实现点击左侧侧边栏中的“合同流程管理”这一操作，我需要使用 ClickTextToTheDirectionOf 关键字，因为“合同流程管理”在左侧侧边栏中，可能需要指定一个基准元素，再通过方向定位来点击它。假设“合同流程管理”在左侧侧边栏上，而侧边栏可能位于页面的左侧，因此我们可以假设从屏幕中心向左定位。\n</thought>\n\n<code_block>\n# 点击左侧侧边栏上的合同流程管理\nClickTextToTheDirectionOf | SCREEN_CENTER | left | 合同流程管理\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 弹窗中 “选择账期”为 2024-08 ~ 2024-09，点击 弹窗中 “确定” 按钮，校验 弹窗中 存在“5,594条”，校验 表格“订单号/账单号”列 为 “Bill7420475322296930598”，点击 第1个 下载 小图标",
        "output": "<thought>\n首先需要设置弹窗中的“选择账期”字段，然后点击同一弹窗中的“确定”按钮。接着，检查弹窗中是否存在文本“5,594条”。最后，验证表格中“订单号/账单号”列是否包含“Bill7420475322296930598”，并点击第一个下载图标。为此，我们可以依次使用SetField、Click、CheckHasText、CheckColHas和ClickIconOfRow这些关键字来实现。\n</thought>\n\n<code_block>\n# 设置弹窗中的“选择账期”为给定值\nSetField | 选择账期 | 2024-08 ~ 2024-09 | base=POPUP\n\n# 点击弹窗中的“确定”按钮\nClick | 确定 | base=POPUP\n\n# 校验弹窗中存在“5,594条”\nCheckHasText | 5,594条 | base=POPUP\n\n# 校验表格“订单号/账单号”列包含“Bill7420475322296930598”\nCheckColHas | 订单号/账单号 | Bill7420475322296930598\n\n# 点击第一个下载icon\nClickIconOfRow | 1 | download | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击coral_auto_las_edit_table所在行的编辑按钮",
        "output": "<thought>\n解决问题思路：\n1. 在表格中找到包含\"coral_auto_las_edit_table\"文本的行；\n2. 在该行中找到编辑按钮并点击；\n</thought>\n\n<code_block>\n# 在表格中找到包含\"coral_auto_las_edit_table\"文本的行并点击编辑按钮\nClickTextOfRow | coral_auto_las_edit_table | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击下方第三个显示出来的指标",
        "output": "<thought>\n要解决这个问题，需要点击下方第三个显示出来的指标。可以使用 ClickElemToTheDirectionOf 关键字，其中基准元素为屏幕中心（SCREEN_CENTER），方向为 bottom，并结合 jQuery 选择器来选中第三个显示出来的指标元素。\n</thought>\n\n<code_block>\n# 点击屏幕下方的第三个显示出来的指标\nClickElemToTheDirectionOf | SCREEN_CENTER | bottom | :contains(指标):eq(2)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个 操作多选Select 的关键字，接受，key， value 参数，操作逻辑是 将 key 右侧Select组件的值设置为 value",
        "output": "<thought>\n对于这个问题，我们需要创建一个关键字，该关键字接受两个参数：key和value。逻辑是将key右侧的Select组件的值设置为value。根据提示信息，这里可以使用SetField关键字。由于SetField有能力直接依据名字定位并设置，因此这里可以直接使用SetField关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n操作多选Select\n    [Arguments]  ${key}  ${value}\n    # 使用SetField关键字找到key右侧关联区域，将其设置为提供的值\n    SetField  ${key}  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格的 ‘预估数量’ 列的值，并校验其大于 0",
        "output": "<thought>\n首先，使用GetColValues关键字获取表格中“预估数量”列的所有值。然后，遍历这些值，使用Should Be True关键字来校验每个值都大于0。\n</thought>\n\n<code_block>\n# 获取‘预估数量’列的值\n@{estimated_qty_values}  GetColValues | 预估数量\n\n# 校验每个‘预估数量’值大于0\nFOR  ${value}  IN  @{estimated_qty_values}\n    Should Be True  ${value} > 0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断表格的第一行 包含 ${name}\n判断表格的第二行 包含 ${name}",
        "output": "<thought>\n需要判断表格的第一行和第二行是否包含变量`${name}`。可以分别使用`CheckRowHas`关键字来验证第一行和第二行是否包含给定的文本。\n</thought>\n\n<code_block>\n# 检查表格的第一行包含 ${name}\nCheckRowHas | 1 | ${name}\n\n# 检查表格的第二行包含 ${name}\nCheckRowHas | 2 | ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标覆盖 编程实验 后，点击出现的带有 立即创建 字段的按钮",
        "output": "<thought>\n首先需要找到“编程实验”所在的元素，并将鼠标移动到该元素上。然后，等待并点击显示出的包含“立即创建”文本的按钮。\n</thought>\n\n<code_block>\n# 移动到“编程实验”文本上\nMoTo | 编程实验\n\n# 等待出现包含“立即创建”的按钮\nWaitElem | button:contains(立即创建)\n\n# 点击包含“立即创建”的按钮\nClickElem | button:contains(立即创建)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新打开的窗口，点击菜单用户触达、消息触达",
        "output": "<thought>\n 解决问题思路：首先需要切换到新打开的窗口，然后依次点击菜单用户触达、消息触达。\n </thought>\n \n <code_block>\n # 切换到新窗口\n ToNewWindow\n \n # 点击菜单用户触达、消息触达\n ClickMenu | 用户触达 | 消息触达\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ${SQL} 粘贴到元素 elem 中",
        "output": "<thought>\n该任务需要将变量 `${SQL}` 的内容粘贴到变量 `elem` 所表示的元素中。我们可以使用 `Paste` 关键字，并且 `Paste` 的 `txt` 参数应为 `${SQL}`。这里不需要通过选择器定位元素，因此 `selector` 可以直接使用 `${elem}`。\n</thought>\n\n<code_block>\n# 将 ${SQL} 内容粘贴到 elem 元素中\nPaste | ${elem} | ${SQL}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击列表中的第一个",
        "output": "<thought>\n根据提示信息，这里的“列表中的第一个”可以理解为选择一个下拉列表中的第一个选项。根据提供的关键字说明，`SelectOption | OPTIONS_i`可以选择第i个选项。因此，为了选择第一个选项，可以使用`SelectOption | OPTIONS_1`关键字。\n</thought>\n\n<code_block>\n# 选择第一个选项\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面第一个包含  ${experiment_name} 后的第一个元素的文本",
        "output": "<thought>\n根据需求，需要找到第一个包含`${experiment_name}`文本的元素，然后获取该元素之后的第一个元素的文本。可以使用`FindByText`关键字定位包含`${experiment_name}`的元素，接着使用`FindElem`关键字选择其下一个元素，最后用`GetElemText`获取该元素的文本。\n</thought>\n\n<code_block>\n# 查找第一个包含${experiment_name}的元素\n${elem}  FindByText | ${experiment_name}\n\n# 查找${elem}之后的第一个元素\n${next_elem}  FindElem | ${elem} + *\n\n# 获取${next_elem}的文本\n${val}  GetElemText | ${next_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“验证${name}按钮是否为可用态”，接受name参数，验证${name}按钮是否为可用态",
        "output": "<thought>\n解决这个问题的关键是要构建一个自定义的关键字，用于检查名为${name}的按钮是否处于可用状态。我们可以利用RobotFramework提供的关键字 “IsElementEnabled” ，此关键字可以返回元素是否为可用状态。将按钮的名字作为输入参数传给这个关键字，然后检查返回的状态值是否为True，即表示按钮处于可用状态。\n</thought>\n\n<code_block>\n验证文本为${name}按钮是否为可用态\n    [Arguments]  ${name}\n    ${status}  IsElementEnabled | button:contains('${name}')\n    IF  $status\n        Log  按钮${name}处于可用状态\n    ELSE\n        Fail  按钮${name}不处于可用状态\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求：curl 'https://cloudapi.bytedance.net/faas/services/ttwy2i/invoke/query_onpremise_env_record' \\\n-H 'authority: cloudapi.bytedance.net' \\\n-H 'accept: application/json' \\\n-H 'accept-language: zh-CN,zh;q=0.9,en;q=0.8' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n-H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' \\\n--data-raw '{\"current\":1,\"pageSize\":10,\"env_id\":\"64002434acff42002cd29798\",\"only_favor\":false,\"sorter\":{},\"filter\":{},\"page\":1,\"limit\":10,\"product_id\":\"61360660bb258b00459e2c1c\",\"current_user\":\"胡雷庭(huleiting.hlt@bytedance.com)\"}' \\\n--compressed",
        "output": "\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/faas/services/ttwy2i/invoke/query_onpremise_env_record | {\"current\":1,\"pageSize\":10,\"env_id\":\"64002434acff42002cd29798\",\"only_favor\":false,\"sorter\":{},\"filter\":{},\"page\":1,\"limit\":10,\"product_id\":\"61360660bb258b00459e2c1c\",\"current_user\":\"胡雷庭(huleiting.hlt@bytedance.com)\"} | {\"accept\": \"application/json\", \"content-type\": \"application/json;charset=UTF-8\"}"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "退出iframe",
        "output": "<thought>\n 在RobotFramework中，退出当前的iframe可以直接使用ExitFrame关键字。这个关键字会让我们从当前iframe返回到主文档。\n </thought>\n \n <code_block>\n # 退出当前iframe，返回主文档\n ExitFrame\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在部分日期不可用，就将顾客不可消费日期设置为多个值：每周不可用、周日、周一、节假期不可用、圣诞节，\n否则将顾客不可消费日期设置为多个值：每周不可用、周日、周二、节假期不可用、国庆节",
        "output": "<thought>\n我们首先需要判断页面是否存在“部分日期不可用”的文本。如果存在，我们将使用 `SetField` 关键字设置顾客不可消费日期为每周不可用、周日、周一、节假期不可用、圣诞节。否则，我们设置为每周不可用、周日、周二、节假期不可用、国庆节。首先使用 `IsAnyTextExisting` 来判断文本是否存在，然后根据结果使用 `IF/ELSE` 语句来选择合适的 `SetField` 操作。\n</thought>\n\n<code_block>\n# 判断页面是否存在文本“部分日期不可用”\n${exist}  IsAnyTextExisting | 部分日期不可用\n\n# 根据判断结果设置顾客不可消费日期\nIF  ${exist}\n    # 如果存在“部分日期不可用”，设置为每周不可用、周日、周一、节假期不可用、圣诞节\n    SetField | 顾客不可消费日期 | 每周不可用 | 周日 | 周一 | 节假期不可用 | 圣诞节\nELSE\n    # 否则，设置为每周不可用、周日、周二、节假期不可用、国庆节\n    SetField | 顾客不可消费日期 | 每周不可用 | 周日 | 周二 | 节假期不可用 | 国庆节\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查地域的数据是不是不包含北京，只有上海和深圳",
        "output": "<thought>\n1. 首先需要获取地域字段的值，可以使用GetFieldVal关键字\n2. 然后需要验证获取的值不包含\"北京\"，但包含\"上海\"和\"深圳\"\n3. 可以使用Should Not Contain校验不包含北京\n4. 使用Should Contain校验包含上海和深圳\n5. 考虑使用多个Should语句进行断言，或者使用Evaluate进行组合判断\n</thought>\n\n<code_block>\n# 获取地域字段的值\n${region_value}  GetFieldVal | 地域\n\n# 校验不包含北京且包含上海和深圳\nShould Not Contain  ${region_value}  北京\nShould Contain  ${region_value}  上海\nShould Contain  ${region_value}  深圳\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“查看LTV${type}”，接受 args 参数，主要完成：点击“LTV${type}”, 等待0.5s, 然后向 LTVn 中输入给定的一个或多个 args",
        "output": "<thought>\n首先需要定义一个关键字来处理任务。“查看LTV${type}”将点击一个动态文本“LTV${type}”，然后等待0.5秒。接着，向名为“LTVn”的字段中输入提供的多个参数`args`。利用关键字`Click`来点击动态文本，使用`Sleep`等待，最后用`SetField`完成输入。\n</thought>\n\n<code_block>\n查看LTV${type}\n    [Arguments]  ${type}  @{args}\n    # 点击文本“LTV${type}”\n    Click  LTV${type}\n    # 等待0.5秒\n    Sleep  0.5s\n    # 向“LTVn”字段中输入提供的参数\n    SetField  LTVn  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "去除变量item前后的空白字符",
        "output": "<thought>\n为了去除变量item前后的空白字符，可以使用内置关键字Strip String。\n</thought>\n\n<code_block>\n# 去除item前后的空白字符\n${trimmed_item}  Strip String  ${item}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验class=xxx 且文案包含 甲方大爷 的页面元素中包含：文案1，文案2，文案3",
        "output": "<thought>\n1. 首先需要定位到class=xxx且包含\"甲方大爷\"文本的元素，可以使用FindElem关键字结合jQuery选择器\n2. 找到该元素后，需要校验它内部是否包含文案1、文案2、文案3三个文本，可以使用CheckHasText关键字\n3. 由于CheckHasText需要指定base参数作为基准元素，我们可以将找到的元素作为base参数传入\n4. 选择器构造需要注意：class=xxx使用[class=xxx]，文本包含使用:contains()\n</thought>\n\n<code_block>\n# 定位class=xxx且包含\"甲方大爷\"的元素\n${target_elem}  FindElem  [class=xxx]:contains(甲方大爷)\n\n# 校验该元素中包含文案1、文案2、文案3\nCheckHasText  文案1  文案2  文案3  base=${target_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“查看转化${type}”，接受变长 args 参数，主要逻辑是：点击type, 并等待0.5s, 如果参数 args 为真，则向字段“转化type”中输入该args",
        "output": "<thought>\n为了实现“查看转化${type}”关键字的功能，可以按照以下步骤编码：\n\n1. 使用`Click`关键字点击指定的`${type}`。\n2. 使用`Sleep`等待0.5秒。\n3. 利用Robot Framework的`IF`语法判断`args`是否为真：\n   - 如果为真，使用`SetField`向名为“转化type”的字段中输入`args`。\n</thought>\n\n<code_block>\n*** Keywords ***\n查看转化${type}\n    [Arguments]  ${type}  @{args}\n    # 点击指定type\n    Click  ${type}\n    # 等待0.5秒\n    Sleep  0.5s\n    # 如果args为真，向转化type字段中输入args\n    IF  $args\n        SetField  转化${type}  @{args}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 获取添加分群的元素个数",
        "output": "<thought>\n 为了获取添加分群的元素个数，需要使用GetElemCount关键字。首先需要根据给定信息确定表示“添加分群”的元素选择器。\n </thought>\n \n <code_block>\n # 获取添加分群按钮的个数\n ${cnt} GetElemCount | :contains(添加分群)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面是否包含：xxx，如果不包含就刷新页面然后再判断，重复此过程，直到文本出现或120s超时，每次重复间隔 10s，如果最终都不包含目标文本，就报错",
        "output": "<thought>\n首先，通过IsAnyTextExisting关键字判断页面是否包含xxx文本，如果存在，就结束，不存在开始循环刷新页面并再次判断。如果120秒后仍然没有找到xxx文本，就结束循环并报出错误。在循环中，每次重复需要等待10秒。\n</thought>\n\n<code_block>\n# 是否包含xxx文本\n${exist}  IsAnyTextExisting | xxx\n# 如果不存在，开始循环\nIF  not $exist\n    # 循环12次，间隔10秒，这样就等于循环120秒\n    FOR   ${i}  IN RANGE  12\n        # 刷新页面\n        RefreshPage\n        Sleep  10s\n        # 再次检查是否包含xxx文本\n        ${exist}  IsAnyTextExisting | xxx\n        # 如果包含，跳出循环\n        IF  $exist\n            Exit For Loop\n        END\n    END\n    # 如果循环结束后仍然没有找到xxx文本，报错\n    IF  not $exist\n        FAIL  \"没有找到xxx文本\"\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取 __current_id=Module_8 的元素的图片",
        "output": "<thought>\n需要使用ElemScreenshot关键字来截取元素的图片。首先，通过选择器来定位__current_id为Module_8的元素。\n</thought>\n\n<code_block>\n# 截取__current_id=Module_8的元素的图片\nElemScreenshot| [__current_id=Module_8]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发送到 login/mixtureLogin 这个接口最后一个post请求，在响应json里面取出RequestId",
        "output": "<thought>\n1. 首先需要使用 `Search Requests` 关键字来搜索发送到 `login/mixtureLogin` 接口的最后一个 POST 请求\n2. 将搜索结果存储在变量 `${resp_json}` 中\n3. 然后使用 `GetValuesFromJson` 关键字从响应 JSON 中提取 `RequestId` 字段的值\n</thought>\n\n<code_block>\n# 搜索发送到 login/mixtureLogin 接口的最后一个 POST 请求\n${resp_json}  Search Requests  login/mixtureLogin  POST  last\n\n# 从响应 JSON 中获取 RequestId 的值\n${request_id}  GetValuesFromJson  ${resp_json}  RequestId\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击证书认证前的元素",
        "output": "<thought>\n在该场景中，我们需要点击某个基准元素“证书认证”前面的一个元素。由于是点击元素，应该使用关键字`ClickElemToTheDirectionOf`。基准元素为“证书认证”，方向为left（左侧），要点击的是其左侧的元素。由于题目没有指定jquery选择器，我们只需要提供一个通用的选择器即可，如`*`，这样就可以点击“证书认证”左边第一个找到的元素。\n</thought>\n\n<code_block>\n# 点击 \"证书认证\" 左侧的第一个元素\nClickElemToTheDirectionOf | 证书认证 | left | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 预期页面存在文案：帮助文档",
        "output": "<thought>\n 这个需求较为简单，只需要使用CheckHasText关键字，传入参数 \"帮助文档\" 即可。\n </thought>\n \n <code_block>\n # 校验页面存在文案：帮助文档\n CheckHasText | 帮助文档\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "出价系数修改为0.88。提示：这是一个设置页面字段值的操作，可以使用 SetField 关键字",
        "output": "<thought>\n 出价系数为页面字段，可以使用 SetField 关键字修改\n </thought>\n \n <code_block>\n # 设置出价系数为 0.88\n SetField | 出价系数 | 0.88\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 配置缓存策略 附近的 了解详情",
        "output": "<thought>\n 在这个问题中，我们需要找到\"配置缓存策略\"附近的\"了解详情\"并点击它。我们可以使用SetField关键字，通过near参数来指定\"配置缓存策略\"文本，然后设置值为\"了解详情\"，这样就可以找到并点击目标元素。\n </thought>\n \n <code_block>\n # 找到\"配置缓存策略\"附近的\"了解详情\"并点击\n Click | 了解详情 | near=配置缓存策略\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算19天前的日期，以 ‘2022-11-01’ 的形式保存到变量 start_date 中，计算8天前的日期，以 ‘2022-11-01’ 的形式保存到变量 end_date 中",
        "output": "<thought>\n计算19天前和8天前的日期时，可以使用RF的日期时间处理关键字`Subtract Date From Date`。需要获取当前日期，然后分别减去19天和8天，并将结果格式化为所需的日期格式。\n</thought>\n\n<code_block>\n# 获取当前日期，并减去19天\n${current_date}   Get Current Date\n${start_date}     Subtract Time From Date  ${current_date}  19 days  result_format=%Y-%m-%d\n\n# 获取当前日期，并减去8天\n${end_date}       Subtract Time From Date  ${current_date}  8 days  result_format=%Y-%m-%d\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击总流量分配右侧的class为flow-circle-active的div，模糊匹配，然后设置 role=\"dialog\"中 维护方式为：外部数据源",
        "output": "<thought>\n首先，我们需要找到总流量分配右侧的class为flow-circle-active的div。我们可以使用`ClickElemToTheDirectionOf`关键字，指定“总流量分配”为基准元素，然后在其右侧寻找该div元素。接下来，我们需要在role为dialog的元素中设置“维护方式”为“外部数据源”，可以使用`SetField`关键字，指定base为role=\"dialog\"以定位到弹窗中。\n</thought>\n\n<code_block>\n# 点击总流量分配右侧的class为flow-circle-active的div\nClickElemToTheDirectionOf | 总流量分配 | right | [class*=flow-circle-active]\n\n# 设置role=\"dialog\"中的维护方式为“外部数据源”\nSetField | 维护方式 | 外部数据源 | base=[role=dialog]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘请输入描述’，输入 ctrl + alt + a，然后输入 8 个英文字母，最后按 ECS",
        "output": "<thought>\n首先，根据提示我们需要首先点击“请输入描述”所在的位置；然后输入 Ctrl + Alt + A 组合键，再输入 8 个随机英文字母，最后需要按下 ESC 键。Robot Framework 的 Press Keys 关键字可以用来输入组合键。在没有提供输入随机字母的关键字时，需要使用Evaluate来生成随机字母。\n</thought>\n\n<code_block>\n# 点击‘请输入描述’\nClick | 请输入描述\n\n# 输入 Ctrl + Alt + A 组合键\nPress Keys | None | CTRL+ALT+A\n\n# 生成随机8个英文字母\n${random_letters} | Evaluate | ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=8)) | random\n\n# 输入随机英文字母\nSendText | ${random_letters}\n\n# 输入 ESC 键\nPress Keys | None | ESC\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置变量 domain 为 1.com，使用 domain 拼接为 URL，访问后，点击空白处，然后截图，校验截图文案中存在：可口可乐",
        "output": "<thought>\n首先，我们需要创建一个变量 domain 并赋值为 \"1.com\"。接下来，我们会使用这个 domain 拼接为一个完整的 URL。之后，我们将访问这个拼接的 URL。访问完 URL 后，点击页面的空白区域，然后进行截图。最后，获取截图中的文本，并校验文本中是否包含 \"可口可乐\"。为此，使用以下关键字：Set Variable、Catenate、OpenUrl、ClickWhiteArea、Screenshot、GetPageScreenshotText、Should Contain。\n</thought>\n\n<code_block>\n# 创建domain变量\n${domain}  Set Variable  1.com\n\n# 拼接URL\n${url}  Catenate  SEPARATOR=://  http  ${domain}\n\n# 打开URL\nOpenUrl  ${url}\n\n# 点击空白处\nClickWhiteArea\n\n# 截图\nScreenshot\n\n# 获取页面截图中的文本\n${screenshot_text}  GetPageScreenshotText\n\n# 校验截图文本中包含\"可口可乐\"\nShould Contain  ${screenshot_text}  可口可乐\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将指标名称后面的两个下拉框分别选择事件指标和进组人均",
        "output": "<thought>\n根据场景描述，需要选择在“指标名称”字段后面的两个下拉框。可以使用`SetField`关键字为“指标名称”字段关联的控件设置多个值。第一个设置为“事件指标”，第二个设置为“进组人均”。\n</thought>\n\n<code_block>\n# 设置指标名称字段后的两个下拉框为事件指标和进组人均\nSetField | 指标名称 | 事件指标 | 进组人均\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验弹窗中 “客户信息”表中 第2行 第1列 为空。提示：可先获取此单元格内容，然后校验",
        "output": "<thought>\n1. 先获取弹窗中“客户信息”表的第2行第1列的值。\n2. 然后校验该值是否为空。\n</thought>\n\n<code_block>\n# 获取弹窗中“客户信息”表的第2行第1列的值\n${cell_value}  GetCellValue | 2 | 1 | tbl=客户信息 | base=POPUP\n\n# 校验该单元格的值是否为空\nShould Be Equal As Strings  ${cell_value}  ${EMPTY}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击火山引擎右边的 控制台切换选择框",
        "output": "<thought>\n在这个任务中，需要在\"火山引擎\"文本的右边查找\"控制台切换选择框\"。假设这个选择框可以是一个input或select元素。在关键词库中，有一个适合此场景的关键字是`ClickElemToTheDirectionOf`。这个关键字可以根据基准元素（即\"火山引擎\"）在指定方向（即右边）查找并点击目标元素。\n\n为了实现这个任务，计划如下：\n1. 使用`ClickElemToTheDirectionOf`关键字。\n2. 基准元素是\"火山引擎\"。\n3. 方向是right。\n4. 使用选择器来查找可能的元素类型（input或select）。\n</thought>\n\n<code_block>\n# 点击火山引擎右边的控制台切换选择框，假设选择框为 input 或 select\nClickElemToTheDirectionOf | 火山引擎 | right | input, select\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击表格 事件名所在行的操作所在列的svgclass包含arco-icon-delete",
        "output": "<thought>\n 首先，我们需要找到表格中\"事件名\"所在的行。然后，在该行中，我们需要找到\"操作\"所在的列。接着，我们需要找到svgclass包含\"arco-icon-delete\"的元素。我们可以使用关键字\"ClickElemOfCell\"来完成这个任务。这个关键字需要三个参数：行名或行号、列名或列号和元素的jquery选择器。这个元素的jquery选择器可以通过匹配svgclass属性来找到。\n </thought>\n \n <code_block>\n # 找到\"事件名\"所在行的\"操作\"所在列的元素，这个元素的svgclass属性包含\"arco-icon-delete\"，然后点击这个元素\n ClickElemOfCell | 事件名 | 操作 | [svgclass*='arco-icon-delete']\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第 1 个 class 为arco-icon arco-icon-arrow-down-fill的元素",
        "output": "<thought>\n需要使用`ClickElem`关键字来点击指定的元素。通过jquery选择器来定位第一个class为`arco-icon arco-icon-arrow-down-fill`的元素。注意在jquery选择器中，第一个元素用`:eq(0)`来表示。\n</thought>\n\n<code_block>\n# 点击第一个 class 为 arco-icon arco-icon-arrow-down-fill 的元素\nClickElem | [classarco-icon.arco-icon-arrow-down-fill]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取55分钟后时间格式为%Y-%m-%d %H:%M:%S",
        "output": "<thought>\n为了计算55分钟后的时间，并以\"%Y-%m-%d %H:%M:%S\"格式显示，可以使用RF的标准库来处理时间。我们可以使用“Get Current Date”获取当前时间，然后使用“Add Time To Date”将55分钟加入当前时间。\n</thought>\n\n<code_block>\n# 获取当前时间\n${current_time}  Get Current Date  result_format=%Y-%m-%d %H:%M:%S\n\n# 在当前时间上加55分钟\n${future_time}  Add Time To Date  ${current_time}  55 minutes  result_format=%Y-%m-%d %H:%M:%S\n\n# 将结果时间打印或存储以供后续使用\nLog  55分钟后时间为: ${future_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个私信主播按钮，点击URL访问诊断附近的参考文档",
        "output": "<thought>\n首先，我们需要点击第一个 '私信主播' 按钮。根据描述，我们可以使用 `Click` 关键字，并指定 `idx=0` 来点击第一个包含该文本的按钮。然后，我们需要在 'URL访问诊断' 附近点击 '参考文档'，这可以通过 `Click` 关键字和 `near` 参数来实现。\n</thought>\n\n<code_block>\n# 点击第一个'私信主播'按钮\nClick | 私信主播 | idx=0\n\n# 点击'URL访问诊断'附近的'参考文档'\nClick | 参考文档 | near=URL访问诊断\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将id以test开头的元素移动到屏幕窗口内",
        "output": "<thought>\n首先需要找到id以test开头的第一个元素。可以使用FindElem关键字，使用选择器'[id^=\"test\"]:eq(0)'来查找。接着，使用MoveIntoView将该元素移动到屏幕视野内。\n</thought>\n\n<code_block>\n# 查找id以test开头的第一个元素\n${elem}  FindElem | [id^=\"test\"]:eq(0)\n\n# 将元素移动到视野内\nMoveIntoView | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击url，重新输入 https://oa-boe.bytedance.net/wfc_manage/mock/login?userId=5950169 并刷新",
        "output": "<thought>\n这个场景实际上就是需要打开一个特定的URL并刷新页面。根据描述，可以直接使用`OpenUrl`关键字来访问指定的URL，然后使用`RefreshPage`关键字来刷新页面。不需要额外的点击或输入操作，因为URL是直接给出的。\n</thought>\n\n<code_block>\n# 访问指定URL\nOpenUrl | https://oa-boe.bytedance.net/wfc_manage/mock/login?userId=5950169\n\n# 刷新页面\nRefreshPage\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发送到/mweb/v1/get_history_by_ids的最后一个post请求，校验响应中的 data 字段中的 task_id 字段不等于 0",
        "output": "<thought>\n首先，我们需要找到发送到特定URL的最后一个POST请求。这个可以通过使用 `Search Requests` 关键字来实现。我们会搜索URL中包含 `/mweb/v1/get_history_by_ids`，并且请求方式为 `POST` 的最后一个请求。之后，我们需要验证响应中的 `data` 字段下的 `task_id` 是否不等于 0。可以使用 `GetValuesFromJson` 关键字来提取 `task_id` 的值，并使用 `Should Not Be Equal As Numbers` 关键字来进行断言。\n</thought>\n\n<code_block>\n# 搜索发送到/mweb/v1/get_history_by_ids的最后一个POST请求\n${resp_json}  Search Requests  /mweb/v1/get_history_by_ids  POST  last\n\n# 从响应中获取data字段下的task_id\n${task_id}  GetValuesFromJson  ${resp_json}  data:task_id\n\n# 校验task_id字段不等于0\nShould Not Be Equal As Numbers  ${task_id}  0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 等待页面加载完成，点击 arrow-down 小图标，等待0.5s，在光标处清空内容，并录入“【自动化测试专用】”，并回车",
        "output": "<thought>\n首先使用`WaitLoading`等待页面加载完成。接着使用`ClickIcon`点击`arrow-down`图标。等待0.5秒后，使用`SendText`清空光标处的内容并输入“【自动化测试专用】”，随后输入回车。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 点击arrow-down图标\nClickIcon | arrow-down\n\n# 等待0.5秒\nSleep | 0.5s\n\n# 在光标处清空内容并输入指定文本，最后回车\nSendText | ${KEY_BACKSPACE}【自动化测试专用】 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个 “设置漏斗事件” 关键字，接受 line_no, name 参数，主要逻辑是：\n# 1. 等待页面加载完成，然后判断文本为line_no的label元素elem1是否存在（1s超时），如果不存在就点击漏斗事件，并等待0.5s, 此过程最多进行4次\n# 2. 如果元素已经存在，就向line_no字段中输入name",
        "output": "<thought>\n1. 首先使用`WaitLoading`等待页面加载完成。\n2. 使用循环`FOR`和`IsAnyElemExisting`来检查文本为`line_no`的`label`元素是否存在。\n3. 如果不存在，则点击\"漏斗事件\"并等待0.5秒，最多尝试4次。\n4. 如果存在，则使用`SetField`在`line_no`字段中输入`name`。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置漏斗事件\n    [Arguments]  ${line_no}  ${name}\n    \n    # 初始化尝试次数为0\n    ${count}  Set Variable  0\n\n    # 循环检查元素是否存在\n    FOR  ${count}  IN RANGE  1  5\n        ${exist}  IsAnyElemExisting  label:contains(${line_no})  timeout=1\n        Exit For Loop If  ${exist}\n\n        # 元素不存在则点击漏斗事件按钮\n        Click  漏斗事件\n        \n        # 等待0.5秒再尝试\n        Sleep  0.5s\n    END\n\n    # 如果元素已存在，设置字段\n    Run Keyword If  ${exist}  SetField  ${line_no}  ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取${val}中 标准融资利率：与%之间的值赋值给a",
        "output": "<thought>\n可以通过Python代码从截图文本中提取“标准融资利率：”与“%”之间的值赋值给变量a。\n</thought>\n\n<code_block>\n# 使用Python代码提取\"标准融资利率：\"与\"%\"之间的值\n${a}  Evaluate  re.search(r'标准融资利率：(\\\\d+(\\\\.\\\\d+)?)%', $val).group(1)  re\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 by_what 中包含 '日', 就点击元素 elem 中 class包含byted-date-picker 的后代元素",
        "output": "<thought>\n首先需要判断变量 by_what 是否包含 '日'。可以使用 RF 的 IF 语法来实现这个逻辑。然后，如果条件为真，则查找 elem 中符合条件的后代元素，通过 ClickElem 对其进行点击。\n</thought>\n\n<code_block>\n# 判断变量 by_what 是否包含 '日'\nIF  '日' in $by_what\n    # class 包含 byted-date-picker 的后代元素\n    ${descendant}  FindElem | ${elem} [class*=byted-date-picker]\n    # 点击找到的元素\n    ClickElem | ${descendant}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 校验页面菜单名称存在回归菜单01",
        "output": "\n    \n<thought>\n 首先需要访问目标页面，然后检查页面的菜单中是否存在“回归菜单01”。可以使用`OpenUrl`打开页面，接着使用`CheckHasText`来验证菜单名称是否存在。\n </thought>\n \n <code_block>\n # 打开目标页面\n OpenUrl | ${目标页面地址}\n \n # 校验页面菜单名称存在“回归菜单01”\n CheckHasText | 回归菜单01\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断 June 所在表格行中是否存在 id=a 且文本为 x 的元素",
        "output": "<thought>\n我们需要判断June所在表格行中是否存在一个元素，该元素的ID为a并且包含文本x。可以使用`IsRowContainsElem`关键字来实现，其中`selector`可以使用jQuery选择器`[id=a]:contains(x)`。\n</thought>\n\n<code_block>\n# 判断 June 所在表格行中是否存在 id=a 且文本为 x 的元素\n${exist}  IsRowContainsElem | June | [id=a]:contains(x)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class=oc-card-wrapper:eq(4)的区域中\"成单明细\"",
        "output": "<thought>\n在这个场景中，我们需要点击一个特定的区域（以jQuery选择器形式表示）中的文本“成单明细”。根据提示，我们可以使用Click关键字配合base参数实现这个需求，首先要选择正确的元素区域作为base，然后在其基础上点击指定的文本。\n</thought>\n\n<code_block>\n# 点击class为oc-card-wrapper的第五个元素中的\"成单明细\"\nClick | 成单明细 | base=[class=oc-card-wrapper]:eq(4)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用 关键字 调试-ys-点击无需比对，并将关键字返回的值赋值给变量 count",
        "output": "<thought>\n根据需求，调用关键字\"调试-ys-点击无需比对\"，并将返回值赋值给变量count。首先需要调用关键字并捕获其返回值，可以使用Robot Framework的变量赋值机制。\n</thought>\n\n<code_block>\n# 调用关键字 调试-ys-点击无需比对，并将关键字返回的值赋值给变量 count\n${count}  调试-ys-点击无需比对\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等class包含show, 文本包含张三的元素消失",
        "output": "<thought>\n首先，我们需要根据具体要求构造jquery选择器，然后使用WaitElemDisappear关键字将其作为参数传递。\n</thought>\n\n<code_block>\n# 构造jquery选择器\n${selector}    Set Variable    div[class*=show]:contains(张三)\n\n# 等待具有class属性包含show并且文本包含张三的元素消失\nWaitElemDisappear    ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 表头行中 Service subject 右边的筛选器，选择 Byteplus Pte. Ltd. 并点击Ok，检查表格第一行的 状态为 已撤销",
        "output": "<thought>\n首先需要点击表头行中\"Service subject\"单元格右边的筛选器图标。然后，在弹出的筛选菜单中选择\"Byteplus Pte. Ltd.\"选项，并点击\"Ok\"按钮进行确认。最后，校验表格第一行的状态列是否为\"已撤销\"。\n这里需要使用的关键字有：`ClickIconOfCell`来点击单元格中的图标，`SelectOptionForField`来选择筛选器中的选项，`Click`来确认选择，`CheckCellHas`来校验状态。\n</thought>\n\n<code_block>\n# 点击表头行中“Service subject”单元格右边的筛选器图标\nClickIconOfCell | HEAD | Service subject | filter\n\n# 选择 Byteplus Pte. Ltd.\nSelectOption | Byteplus Pte. Ltd.\n\n# 点击OK按钮\nClick | Ok\n\n# 检查表格第一行的状态列为已撤销\nCheckCellHas | 1 | 状态 | 已撤销\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“显微镜创建分群”的关键字，接受 name、desc 2个参数，默认值都为空 业务逻辑是：\n1. 点击存为用户分群\n2. 设置 ‘分群名称’ 为 name\n3. 如果 desc 不为空，就把 ‘分群描述’ 设置为 desc，否则就把 ‘分群描述’ 设置为 name + '的分群描述'\n4.点击确定\n5.检查页面应该包含“用户分群保存成功->查看分群”",
        "output": "<thought>\n首先，通过设置默认值为空，定义一个关键字“显微镜创建分群”接受两个参数name和desc。接着，点击“存为用户分群”，设置“分群名称”为name。接下来，使用IF条件判断desc是否为空。如果不为空，则设置“分群描述”为desc；否则，将“分群描述”设置为name加上“的分群描述”。最后，点击确定并检查页面是否包含“用户分群保存成功->查看分群”。\n</thought>\n\n<code_block>\n显微镜创建分群\n    [Arguments]  ${name}=  ${desc}=\n\n    # 点击存为用户分群\n    Click  存为用户分群\n\n    # 设置分群名称\n    SetField  分群名称  ${name}\n\n    # 判断分群描述是否为空\n    IF  '${desc}' != ''\n        # desc不为空，设置分群描述为desc\n        SetField  分群描述  ${desc}\n    ELSE\n        # desc为空，设置分群描述为name + '的分群描述'\n        SetField  分群描述  ${name}的分群描述\n    END\n\n    # 点击确定\n    Click  确定\n\n    # 检查页面包含“用户分群保存成功->查看分群”\n    CheckHasText  用户分群保存成功->查看分群\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 uitest1前面的多选框",
        "output": "<thought>\n这个问题可以通过找到“uitest1”的元素，并在其左边寻找多选框元素，进行点击操作来解决。我们可以使用关键字 \"ClickElemToTheDirectionOf\" 来完成这个任务。\n</thought>\n\n<code_block>\n# 获取uitest1的基准元素，并且点击其左侧的多选框元素\nClickElemToTheDirectionOf | uitest1 | left | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 变更配置下方的规格为 小型，金额为100",
        "output": "<thought>\n根据场景描述，需要在“变更配置”下方的区域设置“规格”和“金额”字段的值。可以使用`BatchSetFields`关键字，通过near参数确定操作位置。在此基础上分别设置规格为“小型”和金额为“100”。\n</thought>\n\n<code_block>\n# 设置变更配置下方的规格为小型，金额为100\nBatchSetFields  规格=小型  金额=100  near=变更配置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将地址的值设置为粘贴板的内容",
        "output": "<thought>\n首先，我们需要获取剪切板的内容。然后将其粘贴到地址字段中。为此，我们可以利用`GetCopied`关键字获取剪切板内容并存储在变量中，再使用`SetField`来设置地址字段。\n</thought>\n\n<code_block>\n# 获取剪切板内容并存储到变量\n${clipboard_content}  GetCopied\n\n# 设置地址字段为剪切板中的内容\nSetField | 地址 | ${clipboard_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 localStorage 中添加 __noti_readed，值为：{\"66cff1f7e3521c1bc0996bec\": 1} ，然后读取该值，校验设置成功",
        "output": "<thought>\n首先，使用LocalStorageSetItem将键值对添加到localStorage中。然后，使用LocalStorageGetItem读取该值，最后使用RF的Should Be Equal As Strings关键字校验读取的值是否与预期值相等。\n</thought>\n\n<code_block>\n# 向localStorage中添加键值对\nLocalStorageSetItem  __noti_readed  {\"66cff1f7e3521c1bc0996bec\": 1}\n\n# 从localStorage中读取值\n${noti_readed}  LocalStorageGetItem  __noti_readed\n\n# 校验设置成功\nShould Be Equal As Strings  ${noti_readed}  {\"66cff1f7e3521c1bc0996bec\": 1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向元素 ${elem} 中输入：${EMPTY}  和  ‘分’",
        "output": "<thought>\n我们需要向元素`${elem}`中输入两个内容：`${EMPTY}`和`分`。通过分析，我们可以利用`FillArea`关键字来实现这一操作。`FillArea`允许我们使用jquery选择器代表的控件区域来输入值。由于`FillArea`关键字需要一个selector作为输入，我们需要确保`${elem}`是一个jquery选择器或其能够被识别成jquery选择器。此外，需要确保`${EMPTY}`变量已经定义。\n</thought>\n\n<code_block>\n# 向指定元素中依次输入`${EMPTY}`和‘分’\nFillArea | ${elem} | ${EMPTY} | 分\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置input  class 包含 arco-input-size-small  的value等于 32，然后点击提交，并等待确认按钮消失",
        "output": "<thought>\n对于这个场景，我们需要首先将指定的值设置到特定的输入框中，然后点击一个提交按钮，最后等待确认按钮的消失。首先，我们通过 `FillArea` 来设置该输入框的值。接下来，使用 `Click` 来模拟点击提交操作。最后，使用 `WaitElemDisappear` 来等待确认按钮消失。\n</thought>\n\n<code_block>\n# 将值32设置到class中包含arco-input-size-small的input中\nFillArea | input[class*=arco-input-size-small] | 32\n\n# 点击提交按钮\nClick | 提交\n\n# 等待确认按钮消失\nWaitElemDisappear | button:contains(确认)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击监听 Tab，页面不包含：规格，但是展示有 加速域名接入",
        "output": "<thought>\n首先需要点击页面上的“监听”标签。接下来，需要验证页面上不包含“规格”这个文本。最后，确认页面上显示了“加速域名接入”这个文本。可以使用Click关键字点击“监听”标签，然后使用CheckNotHasText关键字检查页面不包含“规格”，最后使用CheckHasText关键字检查页面展示“加速域名接入”。\n</thought>\n\n<code_block>\n# 点击监听标签\nClick | 监听\n\n# 校验页面不包含“规格”\nCheckNotHasText | 规格\n\n# 校验页面展示“加速域名接入”\nCheckHasText | 加速域名接入\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 鼠标移动到更多小图标，点击新增任务，设置任务名称为【自动化测试专用job】，设置负责人为zhangxiaoyu.613，设置任务类型为在线任务，设置任务描述为今天的日期。点击确定。",
        "output": "<thought>\n首先，鼠标移动到“更多”图标，然后点击“新增任务”。接着，设置任务名称、负责人、任务类型和任务描述。最后，点击“确定”。我们需要使用`MoToIcon`、`Click`、`SetField`、`Get Current Date`等关键字来完成这些操作。\n</thought>\n\n<code_block>\n# 移动到更多图标\nMoToIcon | more\n\n# 点击新增任务\nClick | 新增任务\n\n# 设置任务名称为【自动化测试专用job】\nSetField | 任务名称 | 自动化测试专用job\n\n# 设置负责人为zhangxiaoyu.613\nSetField | 负责人 | zhangxiaoyu.613\n\n# 设置任务类型为在线任务\nSetField | 任务类型 | 在线任务\n\n# 获取今天的日期\n${today} | Get Current Date | result_format=%Y-%m-%d\n\n# 设置任务描述为今天的日期\nSetField | 任务描述 | ${today}\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击进入对话，等待2s后，校验页面中包含“【自动化测试专用】”，设置请输入消息为：你好，然后回车。等待页面加载完成后，页面中最后一个class=ai-msg-content-md的元素内文本不为空",
        "output": "\n    \n<thought>\n 首先，使用`Click`关键字点击“进入对话”。然后使用`Sleep`等待2秒。接下来，使用`CheckHasText`来校验页面中包含“【自动化测试专用】”。接着，使用`SetField`来设置“请输入消息”字段为“你好”，并输入回车。之后，使用`WaitLoading`等待页面加载完成。最后，使用`GetElemText`和条件判断，确保页面中最后一个class为ai-msg-content-md的元素内文本不为空。\n </thought>\n \n <code_block>\n # 点击进入对话\n Click | 进入对话\n \n # 等待2秒\n Sleep | 2s\n \n # 校验页面中包含“【自动化测试专用】”\n CheckHasText | 【自动化测试专用】\n \n # 设置请输入消息为：你好，然后回车\n SetField | 请输入消息 | 你好 | enter=True\n \n # 等待页面加载完成\n WaitLoading\n \n # 获取页面中最后一个class=ai-msg-content-md的元素内文本\n ${last_msg}  GetElemText | [class=ai-msg-content-md]:eq(-1)\n \n # 确保文本不为空\n Should Not Be Empty | ${last_msg}\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取变量 ${file_and_contract_type_list} 的长度，并循环打印列表中的每个值",
        "output": "<thought>\n这段代码的目标是获取变量 `${file_and_contract_type_list}` 的长度，并循环打印列表中的每个值。首先，借助 `Set Variable` 可以获取列表长度。然后，使用 `FOR` 循环遍历列表，并在循环内使用 `Log` 关键字打印每个值。\n</thought>\n\n<code_block>\n# 获取列表长度\n${length}  Evaluate  len($file_and_contract_type_list)\n\n# 循环打印列表中的每个值\nFOR  ${item}  IN  @{file_and_contract_type_list}\n    Log  ${item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成 5s 后的日期，精确到秒",
        "output": "<thought>\n为了生成5秒后的日期，可以使用Robot Framework的BuiltIn库中的关键字`Get Current Date`，并通过设置`increment`参数来实现时间的增加。在这个场景中，我们需要将`increment`设置为5秒，格式为`5 seconds`。\n</thought>\n\n<code_block>\n# 获取当前日期并增加5秒，格式化到秒\n${future_date}  Get Current Date  increment=5 seconds  result_format=%Y-%m-%d %H:%M:%S\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找页面上第 3 个表格中的 第 2 行的 操作 列中的元素： span.abc",
        "output": "<thought>\n任务是查找页面上第 3 个表格中的第 2 行的操作列中的元素：span.abc。为了解决这个问题，我需要使用 FindElemOfCell 关键字，该关键字可以定位表格单元格中的元素。通过此关键字，我能够明确指定行号和列号，以及目标元素的选择器。由于目标元素选择器是基于 jQuery 的，我们可以利用此选择器直接定位到所需的元素。关键字的参数设置如下：行号为2，列名或列号应为操作，选择器为 span.abc，表格编号为3。\n</thought>\n\n<code_block>\n# 定位第3个表格中第2行操作列中的元素 span.abc\n${elem}  FindElemOfCell | 2 | 操作 | selector=span.abc | tbl=3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 ‘您有未完成的账户开通’，就点击取消",
        "output": "<thought>\n首先使用IsAnyTextExisting判断页面是否存在“您有未完成的账户开通”这个文本。如果文本存在，则点击“取消”按钮。\n</thought>\n\n<code_block>\n# 判断页面中是否存在文本“您有未完成的账户开通”\n${exist}  IsAnyTextExisting | 您有未完成的账户开通\n\n# 如果文本存在，点击“取消”按钮\nIF  ${exist}\n    ClickElem | button:contains(取消)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "元素${elem}向右滚动到80%处",
        "output": "<thought>\n我们需要将元素${elem}向右滚动到80%处，可以直接使用提供的关键字ScrollLeftRight，传递selector为${elem}和percent为80%。\n</thought>\n\n<code_block>\n# 将元素${elem}向右滚动到80%处\nScrollLeftRight | ${elem} | 80%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待2秒",
        "output": "<thought>\n由于要求等待2秒，这个任务相对简单。Robot Framework 的标准库包含一个名为 Sleep 的关键词，可以让测试脚本在一段时间内暂停执行。在这个场景中，我们可以使用此关键词，参数为2秒。Sleep关键字需要一个时间参数，可以是秒，分钟或小时，在这个场景中，我们设定参数为2秒。\n</thought>\n\n<code_block>\n# 等待2秒\nSleep  2s\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击帮助文档，点击前往升级，验证页面文案 不包含 升级套餐获取更多功能",
        "output": "<thought>\n为了解决这个问题，我们需要按照顺序进行以下操作：首先，点击“帮助文档”；然后，点击“前往升级”；最后，验证页面文案不包含“升级套餐获取更多功能”。我们将使用Click关键字来依次点击这两个文本按钮，并使用CheckNotHasText关键字来验证页面中不包含特定的文本。\n</thought>\n\n<code_block>\n# 点击帮助文档\nClick | 帮助文档\n\n# 点击前往升级\nClick | 前往升级\n\n# 验证页面文案不包含升级套餐获取更多功能\nCheckNotHasText | 升级套餐获取更多功能\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对id 为scrollContainer的区域截图对比",
        "output": "<thought>\n我们需要对id为scrollContainer的区域进行截图并与基准图进行对比。可以使用ImageDiff关键字，通过selector参数指定选择器[id=scrollContainer]。\n</thought>\n\n<code_block>\n# 截取 id 为 scrollContainer 的元素的图片并和基准图对比\nImageDiff | [id=scrollContainer]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量A应该不等于变量B",
        "output": "<thought>\n使用内置的Should Not Be Equal关键字检查变量A和B是否不等。\n</thought>\n\n<code_block>\n# 检查变量A和B是否不相等\nShould Not Be Equal  ${A}  ${B}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送如下请求：curl 'https://e168-6-28finder.datarangers-onpremise.volces.com/datafinder/api/v1/projects/4/metrics' \\\n--data-raw '{\"name\":\"tmp1\",\"show_name\":\"\",\"description\":\"\",\"metric_type\":1,\"visible\":0,\"showNameArray\":[],\"descriptionArray\":[],\"dsl\":{\"queries\":[[{\"indicator_show_name\":\"总人数（UV）\",\"measure_info\":{},\"event_indicator\":\"event_users\",\"show_name\":\"任意事件\",\"show_label\":\"A\",\"event_name\":\"any_event\",\"event_type\":\"origin\",\"filters\":[{\"expression\":{\"logic\":\"and\",\"expressions\":[]}}],\"groups_v2\":[],\"extra\":{}}]]}}' \\\n--compressed",
        "output": "# 发送 post 请求到指定的URL, 请求体为给定的JSON数据\n${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/datafinder/api/v1/projects/4/metrics | {\"name\":\"tmp1\",\"show_name\":\"\",\"description\":\"\",\"metric_type\":1,\"visible\":0,\"showNameArray\":[],\"descriptionArray\":[],\"dsl\":{\"queries\":[[{\"indicator_show_name\":\"总人数（UV）\",\"measure_info\":{},\"event_indicator\":\"event_users\",\"show_name\":\"任意事件\",\"show_label\":\"A\",\"event_name\":\"any_event\",\"event_type\":\"origin\",\"filters\":[{\"expression\":{\"logic\":\"and\",\"expressions\":[]}}],\"groups_v2\":[],\"extra\":{}}]]}}"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断当前页面，历史补贴这个列表，表头名称是不是：补贴规则、补贴类型、任务类型、规则状态、参与状态、规则生效时间",
        "output": "<thought>\n首先，我们需要获取历史补贴这个列表的表头行，来判断其是否包含指定的文案。使用`GetRowValues`可以获取特定行的所有列内容。因为是获取表头行的内容，所以在这个场景中可以使用特殊值`HEAD`来表示表头行。然后，我们可以使用`Evaluate`来执行Python代码判断获取的表头内容是否包含所有指定文案。\n</thought>\n\n<code_block>\n# 获取历史补贴列表的表头行的内容\n@{header_values}  GetRowValues | HEAD | tbl=历史补贴\n\n# 定义期望的表头名称列表\n@{expected_headers}  Create List  补贴规则  补贴类型  任务类型  规则状态  参与状态  规则生效时间\n\n# 判断表头是否包含指定的文案\n${result}  Evaluate  all(item in $header_values for item in ['补贴规则', '补贴类型', '任务类型', '规则状态', '参与状态', '规则生效时间'])\n\n# 如果包含，打印成功，否则打印失败\nIF  ${result}\n    Log  表头包含所有指定文案\nELSE\n    Log  表头不包含所有指定文案\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击新建，然后在 ‘搜索想要接入的数据源’ 中输入 ${数据源类型}",
        "output": "<thought>\n第一步是点击“新建”，可以使用RF的关键字“Click”来完成。然后，我们需要在“搜索想要接入的数据源”文本框中输入给定的数据源类型。这可以通过“SetField”关键字来实现，其中“搜索想要接入的数据源”是字段名，而`${数据源类型}`是我们需要输入的值。\n</thought>\n\n<code_block>\n# 点击新建\nClick | 新建\n\n# 在 '搜索想要接入的数据源' 中输入 ${数据源类型}\nSetField | 搜索想要接入的数据源 | ${数据源类型}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 class 包含 virtual-list-holder-inner 的元素向下移动/滑动/滚动 50%",
        "output": "<thought>\n首先，我们需要找到包含特定class的元素，即`class包含virtual-list-holder-inner`。假设该元素需要滚动，因此我们需要使用`ScrollUpDown`关键字来实现滚动操作。给定的百分比是50%，我们需要将元素向下滚动到50%的位置。\n</thought>\n\n<code_block>\n# 滚动 class包含virtual-list-holder-inner 的元素向下移动50%\nScrollUpDown | [class*=virtual-list-holder-inner] | 50\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面不报错",
        "output": "<thought>\n这个场景要求我们验证页面是否存在错误提示。可以使用`CheckErrMsg`关键字来进行校验，该关键字用于检查页面是否有异常提示。\n</thought>\n\n<code_block>\n# 校验页面没有异常提示\nCheckErrMsg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 class 包含 copilot-tab-item-active 的 div 元素的文字内容",
        "output": "<thought>\n在这个场景中，我们需要获取一个特定的div元素的文本。给定的条件是class包含\"copilot-tab-item-active\"。因此，我们可以使用`FindElem`关键字来定位这个元素，然后使用`GetElemText`获取该元素的文本。\n</thought>\n\n<code_block>\n# 查找class包含copilot-tab-item-active的div元素\n${elem}  FindElem | div[class*=\"copilot-tab-item-active\"]\n\n# 获取该元素的文本内容\n${text}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 设备型号=PM20-L20A",
        "output": "<thought>\n为了设置设备型号为PM20-L20A，可以使用SetField关键字。需要确保设备型号的字段名称正确，然后填入所需的值。\n</thought>\n\n<code_block>\n# 设置设备型号为PM20-L20A\nSetField | 设备型号 | PM20-L20A\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "移动到姓名字段上方10px处",
        "output": "<thought>\n根据任务描述，需要将鼠标移动到“姓名”字段上方10像素处。可以使用`MoTo`关键字，指定`dy=-10`来实现此操作。`MoTo`允许我们直接按照给定的偏移量移动鼠标，这样就能准确地完成任务要求。\n</thought>\n\n<code_block>\n# 移动到姓名字段上方10px处\nMoTo | 姓名 | dy=-10\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验今天右侧文案包含昨天",
        "output": "<thought>\n考虑到需要校验“今天”右侧的某个元素中文案包含“昨天”这一需求，使用`CheckHasTextToTheDirectionOf`关键字可以轻松实现。这个关键字用于校验某个基准元素指定方向的目标文本是否存在。根据提示，直接使用这一关键字。同时，“今天”作为基准元素，“右侧”作为方向，“昨天”作为需要校验的文本。\n</thought>\n\n<code_block>\n# 校验“今天”右侧的文案包含“昨天”\nCheckHasTextToTheDirectionOf | 今天 | right | 昨天\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置留存指标”，接受 name、args 参数，主要作用是：\n# 1. 先判断class包含FilterLabel__label且文本包含name的元素${elem1}是否存在（1s超时）,如果不存在就点击留存指标按钮，此过程最多进行4次\n# 2. 如果元素${elem1}已经存在，就向字段name中输入给定的一个或多个 args",
        "output": "设置留存指标\n    [Arguments]  ${name}  @{args}\n    ${count}  Set Variable  0\n    FOR  ${i}  IN RANGE  4\n      ${exist}  IsElemExisting  div[class*=FilterLabel__label]:contains(${name})  timeout=1\n      Exit For Loop If  ${exist}\n      Click  留存指标\n      ${count}  Set Variable  ${i+1}\n    END\n    Run Keyword If  ${count}==4  Fail  \"元素不存在\"\n    SetField  ${name}  @{args}"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选 Ignore Case",
        "output": "<thought>\n首先，分析任务需要勾选名为 \"Ignore Case\" 的复选框。此任务可以直接使用 CheckBoxOn 关键字，通过指定复选框的名称来实现。\n</thought>\n\n<code_block>\n# 勾选 “Ignore Case”\nCheckBoxOn | Ignore Case\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "光标点击弹窗空白处",
        "output": "<thought>\n在这个场景中，我们需要在特定的弹窗中点击空白区域。根据给定的关键字，我们可以使用ClickWhiteArea来实现点击空白处的操作。由于需要在弹窗中进行操作，我们需要确保操作的上下文是在弹窗之内。因此，利用ClickWhiteArea即可完成任务。\n</thought>\n\n<code_block>\n# 在弹窗中点击空白区域\nClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找div元素，class包含acro，内容包含‘所属指标分组’",
        "output": "<thought>\n首先，我将使用RF的FindElem关键字寻找满足特定条件的div元素。该关键字需要一个获取元素的jQuery选择器，我将用包含acro的class属性和内容包含‘所属指标分组’的条件创建选择器。然后，我将把元素存储在变量${elem}里，以便于后续操作。\n</thought>\n\n<code_block>\n# 查找class包含acro，内容为‘所属指标分组’的div\n${elem}  FindElem | div[class*=acro]:contains(所属指标分组)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 包括${select_option}的class 中 高思琪的个数",
        "output": "<thought>\n首先我们需要找到包括变量${select_option}中的class的元素，接着在这些元素中查找文本为“高思琪”的元素。我们使用`GetElemCount`来计算数量。\n</thought>\n\n<code_block>\n# 获取上述元素的个数\n${count}  GetElemCount | [class*=${select_option}]:contains(高思琪)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问 ${MAIN_PAGE}/mdm",
        "output": "<thought>\n1. 这个场景只需要访问一个特定的URL路径，所以只需要使用`OpenUrl`关键字\n2. URL由基础地址`${MAIN_PAGE}`和路径`/mdm`组成，可以直接拼接\n</thought>\n\n<code_block>\n# 访问MDM主页面\nOpenUrl | ${MAIN_PAGE}/mdm\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左侧菜单\"扫码数据\"，进入\"扫码数据菜单\"",
        "output": "<thought>\n解决这个问题的思路是首先根据提供的关键词，找到一个可以帮助我们点击菜单的关键字。在给定的关键词中，`ClickMenu`可以用于点击菜单路径。因此，我们可以使用`ClickMenu`依次点击\"扫码数据\"来进入相应的页面。\n</thought>\n\n<code_block>\n# 点击左侧菜单\"扫码数据\"，然后进入\"扫码数据菜单\"\nClickMenu | 扫码数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将域名设置为 lf-schedule，选择第一个，获取 开始日期字段的值 判断其为 2022-1-1，结束日期为 2023-1-1",
        "output": "<thought>\n首先，我们应该使用SetField关键字将域名设置为lf-schedule。接下来，用SelectOption选择第一个选项。然后，使用GetFieldVal关键字获取开始日期字段的值，并进行Should Be Equal As Strings的校验，确保其为2022-1-1。最后，再用GetFieldVal获取结束日期字段的值，并同样使用Should Be Equal As Strings校验其为2023-1-1。\n</thought>\n\n<code_block>\n# 设置域名为 lf-schedule\nSetField | 域名 | lf-schedule\n\n# 选择第一个选项\nSelectOption | OPTIONS_1\n\n# 获取开始日期字段的值并校验其为2022-1-1\n${start_date}  GetFieldVal | 开始日期\nShould Be Equal As Strings  ${start_date}  2022-1-1\n\n# 获取结束日期字段的值并校验其为2023-1-1\n${end_date}  GetFieldVal | 结束日期\nShould Be Equal As Strings  ${end_date}  2023-1-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击 网络类型 右侧的无序列表 点击 普通（bridge）",
        "output": "\n    \n<thought>\n 首先，我们需要点击“网络类型”右侧的无序列表。可以使用`ClickElemToTheDirectionOf`关键字来实现，基准元素为“网络类型”，方向为right。而无序列表可用ul,input,select 等几类元素来兼容定位。接着，我们需要点击“普通（bridge）”，可以使用`Click`关键字，基准元素为前一步点击的无序列表。\n </thought>\n \n <code_block>\n # 点击网络类型右侧的无序列表\n ClickElemToTheDirectionOf | 网络类型 | right | ul,input,select\n \n # 点击无序列表中的普通（bridge）\n Click | 普通（bridge) | base=POPUP\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击下载，验证文件可以下载成功",
        "output": "<thought>\n为了完成“点击下载，验证文件可以下载成功”的任务，我需要以下步骤：\n1. 使用 `Click` 关键字点击包含“下载”文本的按钮或链接。\n2. 验证文件是否下载成功，这可能涉及到检查某个目录中是否存在预期的文件。由于Robot Framework没有内置关键字来直接检查文件下载，需要使用Evaluate执行Python代码来实现这个功能。\n</thought>\n\n<code_block>\n# 点击下载按钮或链接\nClick | 下载\n\n# 使用Python代码检查文件是否下载成功\n${file_exists}=  Evaluate  os.path.exists('/path/to/download/directory/filename.ext')  os\n\n# 校验文件是否存在\nShould Be True  ${file_exists}  # 确保文件存在以验证下载成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击文本为\"自然月\"的元素",
        "output": "<thought>\n需要点击文本为\"自然月\"的元素，可以直接使用`Click`关键字，通过设置文本为\"自然月\"，定位到对应的元素。\n</thought>\n\n<code_block>\n# 点击文本为\"自然月\"的元素\nClick | 自然月\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验所有的表格数据，商机报备状态这一栏是不是都是审核中。提示：可以先获取表格列的值，然后校验每个值都包含‘审核中’",
        "output": "<thought>\n首先，使用 `GetColValues` 获取表格中商机报备状态这一列的所有值，然后使用 `Should Contain` 校验每个值都包含‘审核中’。\n</thought>\n\n<code_block>\n# 获取表格中商机报备状态这一列的所有值\n@{status_values}  GetColValues | 商机报备状态\n\n# 校验每个值都包含‘审核中’\nFOR  ${status}  IN  @{status_values}\n    Should Contain  ${status}  审核中\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量 ${event_name}  ${text} 分别为 A 和 12",
        "output": "<thought>\n我们需要设置两个变量，${event_name}和${text}，分别为\"A\"和\"12\"。可以使用Robot Framework中的Set Variable关键字来完成这些变量的设置。\n</thought>\n\n<code_block>\n# 设置变量 ${event_name} 为 A\n${event_name}  Set Variable  A\n\n# 设置变量 ${text} 为 12\n${text}  Set Variable  12\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗里的通过，随后点击第二个class=arco-icon arco-icon-close，接着点击class包含arco-cascader-list-select元素下的title=string，最后点击第二个svg.arco-checkbox-mask-icon的元素，等待页面加载完成，如果存在选择登录的版本，点击行业通用",
        "output": "<thought>\n此任务主要包括几个步骤：\n1. 点击弹窗中的“通过”按钮。\n2. 点击第二个名为arco-icon arco-icon-close的class元素。\n3. 点击class包含arco-cascader-list-select下的title=string的元素。\n4. 点击第二个名为svg.arco-checkbox-mask-icon的元素。\n5. 等待页面加载完成。\n6. 如果存在选择登录的版本，则点击“行业通用”。\n\n关键字选择：\n- 使用`Click`关键字点击弹窗中的“通过”按钮。\n- 使用`ClickIcon`关键字点击第二个class=arco-icon arco-icon-close的元素。\n- 使用`ClickElem`关键字点击class包含arco-cascader-list-select元素下的title=string。\n- 使用`ClickElem`关键字点击第二个svg.arco-checkbox-mask-icon的元素。\n- 使用`WaitLoading`关键字等待页面加载完成。\n- 使用`IsAnyTextExisting`关键字判断选择登录的版本是否存在，然后使用条件语句执行“行业通用”点击动作。\n</thought>\n\n<code_block>\n# 点击弹窗中的“通过”\nClick | 通过 | base=POPUP\n\n# 点击第二个class=arco-icon arco-icon-close的元素\nClickIcon | arco-icon arco-icon-close | idx=1\n\n# 点击class包含arco-cascader-list-select元素下的title=string\nClickElem | [class*=arco-cascader-list-select][title='string']\n\n# 点击第二个svg.arco-checkbox-mask-icon的元素\nClickElem | svg.arco-checkbox-mask-icon:eq(1)\n\n# 等待页面加载完成\nWaitLoading\n\n# 如果存在“选择登录的版本”，就点击“行业通用”\n${exist}  IsAnyTextExisting | 选择登录的版本\nIF  ${exist}\n    Click | 行业通用\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击华为前面的勾选框,在编辑筛选下面输入XXX，判断收款计划下方存在：周期",
        "output": "<thought>\n对于这个场景，可以分成三个步骤来实现：\n1. 使用`ClickElemToTheDirectionOf`关键字，点击“华为”前面的勾选框。\n2. 使用`SetField`关键字，在“编辑筛选”下面输入“XXX”。\n3. 使用`CheckHasTextToTheDirectionOf`关键字，判断“收款计划”下方存在“周期”。\n</thought>\n\n<code_block>\n# 点击华为前面的勾选框\nClickElemToTheDirectionOf | 华为 | left | :checkbox\n\n# 在编辑筛选下面输入XXX\nSetField | 编辑筛选 | XXX \n\n# 判断收款计划下方存在：周期\nCheckHasTextToTheDirectionOf | 收款计划 | bottom | 周期\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击飞书右侧且placeholder为请输入登出地址的元素，然后输入https://baidu.com",
        "output": "<thought>\n为了完成这个操作，我们需要：\n1. 找到“飞书”文本的元素。\n2. 在该元素的右侧查找placeholder为“请输入登出地址”的输入框。\n3. 在找到的输入框中输入文本“https://baidu.com”。\n可以使用 `FindElemToTheDirectionOf` 查找右侧的输入框，再用 `FillArea` 输入内容。\n</thought>\n\n<code_block>\n# 查找飞书右侧placeholder为请输入登出地址的输入框\n${input_elem}  FindElemToTheDirectionOf | 飞书 | right | input[placeholder=\"请输入登出地址\"]\n\n# 在找到的输入框中输入https://baidu.com\nFillArea | ${input_elem} | https://baidu.com\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在id为'search'的输入框中输入\"商品B\"并点击回车",
        "output": "<thought>\n这个问题可以通过下述步骤解决：\n1. 使用FillArea关键字在id为'search'的input/textarea中输入搜索内容，selector为 [id=search], args为商品B\n2. 使用SendText关键字模拟键盘回车操作。\n</thought>\n\n<code_block>\n# 在id为'search'的input/textarea中输入\"商品B\"\nFillArea | [id=search] | 商品B\n\n# 模拟键盘回车操作\nSendText | ${KEY_ENTER}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将string去掉前后空格切割成列表并循环打印",
        "output": "<thought>\n这个任务要求将字符串去掉前后空格后，切割成列表然后循环打印。首先，我们可以使用Python内建的字符串方法来去掉前后空格，接着可以使用split方法将字符串切割成列表。最后，我们需要循环地打印列表中的每个元素。由于Robot Framework本身并没有直接的字符串处理关键字，但是提供了Evaluate关键字，可以执行Python代码，我们可借此来实现去除空格并分割的操作。对于打印操作，Robot Framework可以直接使用Log关键字。\n</thought>\n\n<code_block>\n# 定义字符串变量\n${input_string}=    Set Variable    示例字符串 前后有空格\n\n# 去掉前后空格并切割成列表\n@{string_list}=    Evaluate    ${input_string}.strip().split()\n\n# 循环打印列表中的每个元素\nFOR    ${element}    IN    @{string_list}\n    Log    ${element}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击005下面的数据tab，点击登录按钮，点击验证码授权，点击div包含aria-controls=arco-tabs-4-panel-1的元素",
        "output": "<thought>\n对于场景中的操作步骤，可以按照给出的顺序解析并使用适当的关键字进行实现：\n1. 需要点击\"005\"下方的\"数据\"tab，可以使用`ClickTextToTheDirectionOf`关键字来实现。\n2. 点击\"登录\"按钮，使用`Click`关键字。\n3. 点击\"验证码授权\"，使用`Click`关键字。\n4. 点击包含属性`aria-controls=arco-tabs-4-panel-1`的div元素，使用`ClickElem`关键字。\n</thought>\n\n<code_block>\n# 点击 “005” 下方的 “数据” tab\nClickTextToTheDirectionOf | 005 | bottom | 数据\n\n# 点击 “登录” 按钮\nClick | 登录\n\n# 点击 “验证码授权”\nClick | 验证码授权\n\n# 点击 div 包含 aria-controls=arco-tabs-4-panel-1 的元素\nClickElem | div[aria-controls='arco-tabs-4-panel-1']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 请输入密钥 所在的元素，输入 123",
        "output": "<thought>\n需要查找并点击文本为“请输入密钥”的元素，然后在该元素处输入“123”。可以使用`FindByText`获取该元素，然后结合`ClickElem`与`SendText`实现点击和输入。\n</thought>\n\n<code_block>\n# 查找文本为“请输入密钥”的元素\n${elem}  FindByText | 请输入密钥\n\n# 点击该元素\nClickElem | ${elem}\n\n# 输入密钥123\nSendText | 123\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击表格行 ‘自动化测试专用’ 中的更多小图标，然后点击重启，等待1s后检查这一行的任务状态列包含runnning",
        "output": "\n    \n<thought>\n 首先，需要点击表格行 '自动化测试专用' 中的更多icon。接着，点击重启。然后，等待1秒以确保操作生效。最后，检查这一行的任务状态列是否包含文本 'running'。\n </thought>\n \n <code_block>\n # 点击表格行 '自动化测试专用' 中的更多icon\n ClickIconOfRow | 自动化测试专用 | more\n \n # 点击重启\n Click | 重启\n \n # 等待1秒\n Sleep | 1s\n \n # 校验这一行的任务状态列包含 'running'\n CheckCellHas | 自动化测试专用 | 任务状态 | running\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 00下方的 30",
        "output": "<thought>\n为了点击文本\"00\"下方的文本\"30\"，我们可以使用ClickTextToTheDirectionOf关键字。这个关键字需要指定基准元素、方向和目标文本。基于题目要求，基准元素是文本\"00\"，方向是下方，所以使用\"bottom\"。需要确保如果存在多个\"30\"，应选择正确的idx。\n</thought>\n\n<code_block>\n# 点击 00 下方的 30\nClickTextToTheDirectionOf | 00 | bottom | 30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将${clean_desc}中的‘显著’和\\n去掉，然后打印打印${clean_desc}的值",
        "output": "<thought>\n为了去掉字符串中的特定字符并打印结果，我将使用Python的字符串操作功能。可以利用Robot Framework的Evaluate关键字来处理Python代码，将${clean_desc}中的‘显著’和\\n去掉\n</thought>\n\n<code_block>\n# 去掉特定字符并打印\n${cleaned_desc}    Evaluate    ${clean_desc}.replace('显著', '').replace('\\\\n', '')    re\nLog    ${cleaned_desc}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果text=${layer}且role=menuitem的元素存在就点击",
        "output": "<thought>\n首先需要判断具有文本${layer}且role属性为menuitem的元素是否存在，然后根据判断结果执行相应操作。可以使用IsAnyElemExisting来检查元素是否存在，然后用RF的IF语法进行条件判断。\n</thought>\n\n<code_block>\n# 判断具有文本${layer}且role属性为menuitem的元素是否存在\n${exist}  IsAnyElemExisting | [role='menuitem']:contains(${layer})\n\n# 如果存在该元素，就点击\nIF  ${exist}\n    ClickElem | [role='menuitem']:contains(${layer})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击搜索左边的元素，输入“【自动化测试专用】”，点击搜索，等待0.5s后，页面中包含收藏成功",
        "output": "\n    \n<thought>\n 首先，需要点击搜索左边的元素，可以使用`ClickElemToTheDirectionOf`关键字。然后在搜索框中输入“【自动化测试专用】”，可以用`SendText`关键字。接着点击搜索按钮，最后使用`Sleep`等待0.5秒，再用`WaitText`验证页面中包含“收藏成功”。\n </thought>\n \n <code_block>\n # 点击搜索左边的元素\n ClickElemToTheDirectionOf | 搜索 | left\n \n # 输入“【自动化测试专用】”\n SendText | 【自动化测试专用】\n \n # 点击搜索\n Click | 搜索\n \n # 等待0.5秒\n Sleep | 0.5s\n \n # 等待页面中包含“收藏成功”\n WaitText | 收藏成功\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击我接受",
        "output": "<thought>\n这个场景是点击一个文本为“我接受”的元素。根据提供的关键字，通过使用`Click`关键字并匹配文本内容可以解决这个问题。由于没有指定其他条件（例如是第几个元素、基准元素等），直接使用`Click | 我接受`可以实现需求。\n</thought>\n\n<code_block>\n# 点击文本“我接受”\nClick | 我接受\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“设置参数” 的关键字，接受 kwargs 参数, 作用是：对于每个 key, value，将字段key设置为对应的value",
        "output": "<thought>\n我们需要创建一个关键字“设置参数”，它接受一个kwargs字典。对于字典中的每个键值对，我们使用SetField关键字来设置字段的值。我们可以通过遍历kwargs来动态处理每个字段。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置参数\n    [Arguments]  &{kwargs}\n    FOR  ${key}  ${value}  IN  &{kwargs}\n        SetField  ${key}  ${value}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量name 等于 事件分析",
        "output": "<thought>\n此任务要求创建一个名为name的变量，并将其值设置为“事件分析”。可以使用RobotFramework的内置关键字Set Variable来完成此操作。\n</thought>\n\n<code_block>\n# 创建变量 name = 事件分析\n${name}  Set Variable  事件分析\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将经办组设置为：UI自动化测试组",
        "output": "<thought>\n 这个问题相对简单，需要使用SetField关键字去设置经办组这个字段为\"UI自动化测试组\"。\n </thought>\n \n <code_block>\n # 设置经办组为：UI自动化测试组\n SetField | 经办组 | UI自动化测试组\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 ‘日均有流水新主播成材率’ 下方的 span class包含card-main-value 元素，获取其文本",
        "output": "<thought>\n首先，需要查找基准文本‘日均有流水新主播成材率’。然后，使用FindElemToTheDirectionOf关键字在其下方定位到目标元素，其选择器为span[class*=card-main-value]。最后，使用GetElemText获取该元素的文本。\n</thought>\n\n<code_block>\n# 查找‘日均有流水新主播成材率’下方的目标元素\n${elem}  FindElemToTheDirectionOf | 日均有流水新主播成材率 | bottom | span[class*=card-main-value]\n\n# 获取该元素的文本\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击删除按钮 基准元素：内容包括 popconfirm-content 的class",
        "output": "<thought>\n要解决这个问题，我们需要点击一个删除按钮，该按钮位于一个具有特定class的基准元素中。首先，我们需要使用适当的选择器来定位该基准元素，即class中包含popconfirm-content的元素。然后在这个基准元素中寻找删除按钮并进行点击操作。可以使用Click关键字结合base参数来完成这个操作。\n</thought>\n\n<code_block>\n# 点击class包含popconfirm-content的基准元素中的删除按钮\nClick | 删除 | base=[class*=popconfirm-content]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 客户业务类型 包含 代理",
        "output": "<thought>\n为了校验 \"客户业务类型\" 包含 \"代理\" ，可以使用 `CheckFieldContains` 关键字，其中 `filed_name` 为 \"客户业务类型\"，`txt1` 为 \"代理\"。这个关键字可以直接检查指定字段内是否包含指定文本。\n</thought>\n\n<code_block>\n# 校验 \"客户业务类型\" 字段包含 \"代理\"\nCheckFieldContains | 客户业务类型 | 代理\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击确定",
        "output": "<thought>\n场景描述要求鼠标点击“确定”按钮。根据现有关键字，使用MClick关键字可以实现鼠标点击操作。由于没有复杂的选择器涉及，只需要直接点击“确定”文本即可。\n</thought>\n\n<code_block>\n# 鼠标点击“确定”按钮\nMClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格的第二行第三列",
        "output": "<thought>\n我们需要点击表格的第二行第二列中的任意元素。根据给定的关键字，适合用ClickElemOfCell关键字。这个关键字允许我们指定行号和列号，并点击单元格中的元素。由于要点击任意元素，我们可以使用默认的选择器*。\n</thought>\n\n<code_block>\n# 点击表格的第二行第二列中的任意元素\nClickElemOfCell | 2 | 3 | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格头“曝光数”列中的第一个小图标 ",
        "output": "<thought>\n我们需要在表格头行找到“曝光数”列，并点击该列中的第一个icon。对于表格头行的操作，需要使用`ClickIconOfCell`关键字。因为我们要点击的是表头，所以可以使用特殊值`HEAD`来表示行号。此外，列名为“曝光数”，并且我们要点击的icon是该列中的第一个。\n</thought>\n\n<code_block>\n# 点击表头“曝光数”列中的第一个icon\nClickIconOfCell | HEAD | 曝光数 | icon='' | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击确定，关闭弹窗",
        "output": "<thought>\n首先需要点击“确定”按钮，然后关闭弹窗。可以使用关键字Click来点击“确定”按钮，并指定base=POPUP来确保点击的是弹窗中的按钮。之后使用CloseNotifications来关闭弹窗。\n</thought>\n\n<code_block>\n# 点击弹窗中的确定按钮\nClick | 确定 | base=POPUP\n\n# 关闭弹窗\nCloseNotifications\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义全局变量 ${contract_type} 为 【禁用】自动化-托管-基础",
        "output": "<thought>\n为了定义全局变量 ${contract_type}，可以使用Robot Framework中的Set Global Variable关键字。这个关键字可以将变量设置为全局范围。我们将变量值设置为字符串 \"【禁用】自动化-托管-基础\"。\n</thought>\n\n<code_block>\n# 定义全局变量 contract_type\nSet Global Variable  ${contract_type}  【禁用】自动化-托管-基础\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 切换到新打开的那个窗口",
        "output": "<thought>\n 为了切换到新打开的窗口，可以使用提供的关键字`ToNewWindow`。这个关键字专门用于在多个窗口之间切换到最新打开的窗口。\n </thought>\n \n <code_block>\n # 切换到新打开的窗口\n ToNewWindow\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算一周之后的日期，格式为“2010-10-10 23:59:59”",
        "output": "<thought>\n首先，我们需要获取当前日期，然后使用Python的datetime.timedelta模块来增加7天。由于Robot Framework支持使用Evaluate关键字执行Python代码，我们可以使用这个功能实现时间计算。\n</thought>\n\n<code_block>\n# 获取当前日期并加上一周（7天）\n${one_week_later}  Evaluate  (datetime.datetime.now() + datetime.timedelta(days=7)).strftime('%Y-%m-%d %H:%M:%S')  datetime\nLog  ${one_week_later}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置数据连接名称xxx 鉴权方式:用户名密码,用户名xxx,密码xxx,连接方式JDBC,JDBC连接串xxx",
        "output": "<thought>\n在这个场景中，我们需要批量设置数据连接的多个字段。可以使用`BatchSetFields`来设置数据连接名称、鉴权方式、用户名、密码、连接方式，以及JDBC连接串。通过一次性的批量设置提高效率。\n</thought>\n\n<code_block>\n# 批量设置数据连接相关字段\nBatchSetFields  数据连接名称=xxx  鉴权方式=用户名密码  用户名=xxx  密码=xxx  连接方式=JDBC  JDBC连接串=xxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行关键字 ‘判断数据连接是否存在’ 参数为 ${数据连接名称}",
        "output": "<thought>\n此问题的解决思路非常直接，我们只需要直接调用已有关键字，并传入参数 ${数据连接名称}。既然关键字已经存在，我们无需关心它内部的实现，只需要传递正确的参数即可。\n</thought>\n\n<code_block>\n# 调用关键字 “判断数据连接是否存在”，参数为 ${数据连接名称}\n${ret} 判断数据连接是否存在 ${数据连接名称}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将任务开始时间设置为：当前时间\n \n ",
        "output": "<thought>\n 需要使用RF标准库中的Get Current Date获取当前时间，然后使用SetField关键字将其填入任务开始时间的字段中。\n </thought>\n \n <code_block>\n # 获取当前时间\n ${current_time}  Get Current Date | result_format=%Y-%m-%d %H:%M:%S\n \n # 设置任务开始时间为当前时间\n SetField | 任务开始时间 | ${current_time}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击/输入回车",
        "output": "<thought>\n根据描述，需要模拟按下回车键的操作。在Robot Framework中，可以使用`SendText`关键字并设置`enter=True`来实现这一点。\n</thought>\n\n<code_block>\n# 在当前位置输入回车\nSendText | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置事件指标”，接受参数 name, args, 主要作用是:\n# 1. 先判断span class包含FilterEvent__label且文本包含name的元素${elem1}是否存在（1s超时）,如果不存在就点击事件指标按钮，此过程最多进行4次\n# 2. 如果元素${elem1}已经存在，就向字段name中输入给定的一个或多个 args",
        "output": "<thought>\n我们需要创建一个新的关键字“设置事件指标”，这个关键字需要接受两个参数：name和args。首先，我们需要判断是否存在一个指定的span元素，该元素的类包含'FilterEvent__label'且文本包含name。我们使用FindElem关键字来查找这个元素，如果该元素不存在，我们就点击'事件指标'按钮，我们循环进行这个过程最多4次。如果在4次尝试后该元素仍不存在，我们就记录日志并退出。如果该元素存在，我们就使用SetField关键字将args输入到name字段中。\n</thought>\n\n<code_block>\n设置事件指标\n    [Arguments]  ${name}  @{args}\n    ${selector}  Set Variable  span[class*='FilterEvent__label']:contains(${name})\n    ${cnt}  Set Variable  0\n    FOR  ${i}  IN RANGE  4\n        ${existing}  IsElemExisting  ${selector}  timeout=1\n        Exit For Loop If  ${existing}\n        Click  事件指标\n        ${cnt}  Set Variable  ${cnt+1}\n    END\n    IF  ${cnt} < 4\n        SetField  ${name}  @{args}\n    ELSE\n        Log  经过4次循环目标元素仍不存在\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 class=text-center 且文本为：收获音浪 的元素的文本",
        "output": "<thought>\n此任务要求获取一个特定元素的文本，该元素的class为text-center，文本为“收获音浪”。我们可以使用FindElem关键字结合jquery选择器定位该元素，然后使用GetElemText关键字获取其文本。\n</thought>\n\n<code_block>\n# 查找class为text-center且文本为收获音浪的元素\n${elem}  FindElem | .text-center:contains(收获音浪)\n\n# 获取该元素的文本\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击App ID输入框 并输入值cli_a3ee609d383b9013",
        "output": "<thought>\n首先，我们需要识别元素类型是否是input或textarea，然后使用SetField关键字来输入值。由于没有提供更加精确的选择器，我们假设有唯一的name为App ID的字段。\n</thought>\n\n<code_block>\n# 在字段App ID中输入值cli_a3ee609d383b9013\nSetField | App ID | cli_a3ee609d383b9013\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击关闭小图标",
        "output": "<thought>\n查看到“点击关闭icon”这个需求，我们应当使用\"ClickIcon\"关键字来解决这个问题。\"ClickIcon\"关键字的第一个参数是图标的名称，因此我们将闭合图标的名称设置为'close'即可。\n</thought>\n\n<code_block>\n# 点击关闭icon\nClickIcon | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面是否存在“已配置过滤条件”，存在，则点击“配置过滤条件”，若没有，则点击“查看详情”",
        "output": "<thought>\n首先，我们需要判断页面上是否存在文本“已配置过滤条件”。如果存在，则点击“配置过滤条件”按钮；如果不存在，则点击“查看详情”按钮。我们可以使用关键字`IsAnyTextExisting`来检查文本是否存在，然后根据返回结果使用条件语句执行相应的点击操作。\n</thought>\n\n<code_block>\n# 检查页面是否存在文本“已配置过滤条件”\n${exist}  IsAnyTextExisting | 已配置过滤条件\n\n# 如果存在“已配置过滤条件”，则点击“配置过滤条件”，否则点击“查看详情”\nIF  $exist\n    Click  配置过滤条件\nELSE\n    Click  查看详情\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测Toast出现创建成功\n\n提示：就检查页面有 ‘创建成功’ 提示文案即可",
        "output": "<thought>\n该场景需要检测页面上是否出现了“创建成功”的提示文案，根据提供的关键字描述，可以使用`WaitText`等待文本出现，或者直接使用`CheckHasText`来检查页面是否包含该文本。\n</thought>\n\n<code_block>\n# 检查页面是否出现“创建成功”的提示文案\nCheckHasText | 创建成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面中没有弹出包含‘加载失败’的弹框，如果有，报出‘加载错误’异常。如果没有，跳出检测",
        "output": "<thought>\n为了检测页面中是否出现包含“加载失败”的弹窗，可以使用`IsAnyTextExisting`关键字检查“加载失败”文本是否存在于弹窗的范围内。如果存在，我们应该抛出一个异常，这可以通过Robot Framework的`Fail`关键字实现。否则，简单地跳过检查。\n</thought>\n\n<code_block>\n# 判断弹窗中是否包含“加载失败”文本\n${exist}  IsAnyTextExisting | 加载失败 | base=POPUP\n\n# 如果存在“加载失败”，则抛出异常\nIF  ${exist}\n    Fail  加载错误\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击服务端",
        "output": "<thought>\n此任务的目标是点击一个名为\"服务端\"的元素。我们可以直接使用关键字\"Click\"来实现这个目标。\n</thought>\n\n<code_block>\n# 点击服务端\nClick | 服务端\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 合同编号：合同组-AUTO个数，如果大于0个，点击第一个",
        "output": "<thought>\n首先，我们需要获取“合同编号：合同组-AUTO”出现的个数。为此，可以使用`GetElemCount`关键字来查找包含该文本的元素个数。如果个数大于0，则需要点击第一个这样的元素。我们可以使用`Click`关键字来实现这一操作。\n</thought>\n\n<code_block>\n# 获取包含\"合同编号：合同组-AUTO\"的元素个数\n${cnt}  GetElemCount  :contains(\"合同编号：合同组-AUTO\")\n\n# 如果个数大于0，就点击第一个\nIF  ${cnt} > 0\n    Click  合同编号：合同组-AUTO  idx=0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加商品按钮，然后在弹出的窗口中输入商品名称\"商品A\"，并点击确定",
        "output": "<thought>\n首先，我需要点击 \"添加商品\" 按钮，然后弹出的窗口中输入商品名称 \"商品A\"，最后点击 \"确定\"。这个场景可以分解为三个操作步骤，对应的可以使用 \"Click\"，\"SetField\"，和 \"Click\" 三个关键字来实现该操作。\n</thought>\n\n<code_block>\n# 点击添加商品按钮\nClick | 添加商品\n\n# 在弹出窗口中输入商品名称 商品A\nSetField | 商品名称 | 商品A | base=POPUP\n\n# 点击确定按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验第二个表中李四所在行的age列中包含18",
        "output": "<thought>\n根据需求，需要在第二个表中找到李四所在的行，然后检查age列中是否包含文本18。可以使用`CheckCellHas`关键字，该关键字允许我们指定表格、行和列，以及需要检查的文本。\n</thought>\n\n<code_block>\n# 校验第二个表中李四所在行的age列中包含18\nCheckCellHas  李四  age  18  tbl=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含arco-draggable的最后一个元素",
        "output": "<thought>\n在这个场景中，我们需要点击一个元素，其类名包含\"arco-draggable\"。由于我们需要点击其中的最后一个元素，可以使用`ClickElem`关键字结合jQuery选择器`:eq(-1)`来实现这一操作。\n</thought>\n\n<code_block>\n# 点击class包含arco-draggable的最后一个元素\nClickElem | [class*=arco-draggable]:eq(-1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击div 里的span 元素下的任务按钮",
        "output": "<thought>\n 需要根据给定的场景选择合适的关键字，使用FindElem来定位div里面的span元素，再通过选择span下的任务按钮。可以直接使用ClickElem来点击定位到的任务按钮。\n </thought>\n \n <code_block>\n # 查找div里的span元素下的任务按钮\n ${elem}  FindElem | div > span > button:contains(任务)\n \n # 点击任务按钮\n ClickElem | ${elem}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上角“制作图片”按钮，然后点击生成任务弹窗“确认”按钮，从 data/pkey1 读取内容，然后填写到姓名字段",
        "output": "<thought>\n思路是，先点击“制作图片”按钮，然后点击生成任务弹窗的“确认”按钮，读取 data/pkey1 的内容，然后填写到姓名字段。\n</thought>\n\n<code_block>\n# 点击右上角“制作图片”按钮\nClickTextToTheDirectionOf | SCREEN_CENTER | topRight | 制作图片\n\n# 点击生成任务弹窗的“确认”按钮\nClick | 确认 | base=POPUP\n\n# 从 data/pkey1 读取内容\n${content}   Get File  data/pkey1\n\n# 填写到姓名字段\nSetField | 姓名 | ${content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${elements}列表中的每一个都包含文本：新开",
        "output": "<thought>\n为了校验`${elements}`列表中的每一个都包含文本“新开”，我们需要遍历`${elements}`列表，并对每个元素使用`CheckHasText`关键字进行校验。由于`CheckHasText`关键字支持基准元素选择器，我们可以直接将`${element}`作为基准元素传入。\n\n具体步骤如下：\n1. 遍历`${elements}`列表。\n2. 对于每个`${element}`，使用`CheckHasText`关键字校验其包含文本“新开”。\n</thought>\n\n<code_block>\n# 遍历 `${elements}` 列表中的每一个元素\nFOR  ${element}  IN  @{elements}\n    # 校验每个元素包含文本“新开”\n    CheckHasText  新开  base=${element}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的‘删除账号’左边边的第1个小图标",
        "output": "<thought>\n首先，我们需要点击弹窗中的某个元素，因此可以使用以`base=POPUP`标识基准元素。因为需要点击“删除账号”左边的第一个icon，我们可以采用`ClickIconToTheDirectionOf`关键字，并指定方向为left。\n</thought>\n\n<code_block>\n# 点击弹窗中的‘删除账号’左边的第1个icon\nClickIconToTheDirectionOf | 删除账号 | left | idx=0 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对第三个 canvas 截图对比，相似度为 0.99，命名为：时间分析图表",
        "output": "<thought>\n首先，我们需要找到第三个canvas元素，可以用jquery选择器\"canvas:eq(2)\"来选取。然后，我们可以使用关键字ImageDiff来截取这个元素的图片，并和基准图进行比较，相似度为0.99。同时，我们需要将截图命名为“时间分析图表”。\n</thought>\n\n<code_block>\n# 找到第三个canvas元素并截图对比，相似度为0.99，命名为：时间分析图表\nImageDiff | selector=canvas:eq(2) | pic_name=时间分析图表 | sim=0.99\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取整个屏幕图片并对比, 相似度取 0.95",
        "output": "<thought>\n为了完成这个任务，我们需要使用ImageDiff关键字。对于全屏截图，selector参数可以为空。我们将相似度设置为0.95，因为这是任务中指定的要求。\n</thought>\n\n<code_block>\n# 全屏截图并对比，设置相似度为0.95\nImageDiff | sim=0.95\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "关闭弹窗",
        "output": "<thought>\n根据题目描述，我们需要关闭弹窗。我们可以使用\"CloseNotifications\"关键字来完成这个任务。这个关键字的作用就是关闭页面上的各种弹窗/通知/问卷/新手引导等提示。\n</thought>\n\n<code_block>\n# 关闭弹窗\nCloseNotifications\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“测试初始化” 的关键字，作用是：\n1. 创建全局变量 ‘主账号名’, 值为变量 USER\n2. 创建全局变量 ‘申请人用户名’，'申请人密码', 值分别为变量 SHENQIN_SUB_USER, SHENQIN_SUB_PASSWORD",
        "output": "<thought>\n首先，我们需要使用Robot Framework的内置关键字`Set Global Variable`来创建全局变量，并将对应变量的值传入。这里我们需要创建两个全局变量：`主账号名`和`申请人用户名`以及`申请人密码`。\n</thought>\n\n<code_block>\n*** Keywords ***\n测试初始化\n    # 设置全局变量‘主账号名’为变量USER的值\n    Set Global Variable  ${主账号名}  ${USER}\n    \n    # 设置全局变量‘申请人用户名’为变量SHENQIN_SUB_USER的值\n    Set Global Variable  ${申请人用户名}  ${SHENQIN_SUB_USER}\n    \n    # 设置全局变量‘申请人密码’为变量SHENQIN_SUB_PASSWORD的值\n    Set Global Variable  ${申请人密码}  ${SHENQIN_SUB_PASSWORD}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查弹出了列表",
        "output": "<thought>\n1. 题目要求检查是否有弹框弹出，这属于检查页面元素的存在性\n2. 查看提供的关键字列表，发现有两个相关关键字：\n   - `CheckHasElem` 可以检查元素是否存在\n   - `IsPopupExists` 专门用于检查弹窗是否存在\n3. `IsPopupExists` 更符合需求，因为它专门用于检查弹窗，且可以检查弹窗文本\n4. 由于题目只要求检查是否有弹框，不需要检查具体内容，所以使用不带text参数的版本\n</thought>\n\n<code_block>\n# 检查是否有弹框弹出\n${status}  IsPopupExists\nShould Be True  ${status}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择 YARN队列：root.default",
        "output": "<thought>\n首先需要选择一个名为“YARN队列”的字段，然后将其设置为“root.default”。可以使用SelectOptionForField关键字来实现。\n</thought>\n\n<code_block>\n# 设置YARN队列为root.default\nSelectOptionForField | YARN队列 | root.default\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到已完成并进行点击",
        "output": "<thought>\n要找到并点击文本为 \"已完成\" 的元素，可以直接使用 Click 关键字，因为通过 Click 关键字可以直接点击文本为指定内容的元素。此外，如果要先找到 \"已完成\" 元素再点击，也可以使用 FindByText 关键字配合 ClickElem 来实现，但在这个场景中是等效的，只需使用 Click 关键字即可实现要求。\n</thought>\n\n<code_block>\n# 直接点击文本为 \"已完成\" 的元素\nClick | 已完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面找到“管理中心”点击，等待3s，校验${status_code_list}列表内是否存在3",
        "output": "<thought>\n首先需要找到页面中的“管理中心”文本并点击，然后等待3秒以确保页面内容加载完成。接着，需要检查变量`${status_code_list}`中是否包含值3。可以使用`Click`进行点击操作，`Sleep`来实现等待时间，`Should Contain`来判断列表中是否包含指定的值。\n</thought>\n\n<code_block>\n# 点击管理中心\nClick  管理中心\n\n# 等待3秒让页面加载完成\nSleep  3s\n\n# 校验${status_code_list}列表内是否存在3\nShould Contain  ${status_code_list}  3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击弹窗中的 通过 文案",
        "output": "<thought>\n 首先，我们需要在弹窗中点击“通过”这个文本。根据给定的关键字说明，可以使用 `Click` 关键字，并且指定 `base=POPUP` 来表示这是在弹窗中操作。\n </thought>\n \n <code_block>\n # 点击弹窗中的通过\n Click | 通过 | base=POPUP\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含‘arco-btn-status-danger’元素",
        "output": "<thought>\n为了在RobotFramework中点击class包含‘arco-btn-status-danger’的元素，可以使用`ClickElem`关键字与合适的jQuery选择器组合来实现。选择器可以使用`class*=arco-btn-status-danger`来定位这样的元素。\n</thought>\n\n<code_block>\n# 点击class包含'arco-btn-status-danger'的元素\nClickElem | [class*='arco-btn-status-danger']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待两秒后使用新的标签页打开变量中的网址 FEISHU_ADMIN，打开后检查页面是否 存在 人事企业版配置  文本，如果不存在则重新打开该网址\n    ",
        "output": "<thought>\n首先需要等待两秒，然后在新的标签页中打开变量`FEISHU_ADMIN`中的URL。接着检查页面是否存在“人事企业版配置”文本。如果不存在，则重新打开该网址。需使用循环与条件判断来实现这一逻辑。\n</thought>\n\n<code_block>\n# 等待2秒\nSleep  2s\n\n# 打开新的标签页并访问FEISHU_ADMIN\nOpenUrl  ${FEISHU_ADMIN}\n\n# 开始循环\nFOR  ${index}  IN RANGE  3\n    # 检查页面是否存在“人事企业版配置”\n    ${exist}  IsAnyTextExisting  人事企业版配置\n    IF  ${exist}\n        # 如果存在，跳出循环\n        Exit For Loop\n    ELSE\n        # 如果不存在，重新打开网址\n        OpenUrl  ${FEISHU_ADMIN}\n        # 等待加载完成\n        WaitLoading  timeout=30\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class包含topActionBar 的元素中的第一个icon",
        "output": "<thought>\n要解决这个问题，我们需要：\n1. 定位包含特定class的元素作为基准(base)\n2. 点击该元素中的第一个icon\n\n分析过程：\n- 使用FindElem定位class包含topActionBar的元素\n- 使用ClickIcon关键字点击该元素中的第一个icon(idx=0)\n- 由于是第一个icon，不需要指定name参数\n</thought>\n\n<code_block>\n# 定位class包含topActionBar的元素\n${top_bar}  FindElem  [class*=topActionBar]\n\n# 点击该元素中的第一个icon\nClickIcon  base=${top_bar}  idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 构造一个多维列表",
        "output": "\n    \n<thought>\n 在RobotFramework中没有直接创建多维列表的关键字，因此我们可以通过Python代码来构造一个多维列表。使用Evaluate关键字执行Python代码可以达到这个目的。\n </thought>\n \n <code_block>\n # 使用Evaluate关键字构造一个多维列表\n ${multi_dim_list}=    Evaluate    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中拨测周期右边的按钮",
        "output": "<thought>\n我们要在弹窗中查找“拨测周期”右边的按钮，然后执行点击操作。由于没有明确的按钮名称，我们可以用通用的选择器 `button` 来定位这个按钮。通过使用 `ClickElemToTheDirectionOf` 关键字，我们可以指定基准文本“拨测周期”和方向 `right` 来准确找到目标按钮。\n</thought>\n\n<code_block>\n# 点击弹窗中拨测周期右边的按钮\nClickElemToTheDirectionOf | 拨测周期 | right | button | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击 商品管理、餐饮商品管理，创建值班号会话，确认界面中存在‘进行中会话’",
        "output": "<thought>\n要实现这个场景，可以依次使用ClickTextOneByOne来点击“商品管理”和“餐饮商品管理”，接着创建值班号会话，最后使用CheckHasText检查页面中是否存在“进行中会话”。具体步骤如下：\n1. 使用ClickTextOneByOne点击“商品管理”和“餐饮商品管理”。\n2. 根据提示，应该有一个步骤是“创建值班号会话”。假设通过一个按钮或功能来触发，可以设定为点击某个特定元素。\n3. 使用CheckHasText来确认界面中存在‘进行中会话’。\n</thought>\n\n<code_block>\n# 依次点击 商品管理、餐饮商品管理\nClickTextOneByOne | 商品管理 | 餐饮商品管理\n\n# 创建值班号会话 (假设是通过点击某个按钮实现)\nClickElem | button:contains(创建值班号会话)\n\n# 确认界面中存在进行中会话\nCheckHasText | 进行中会话\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取span的class包含 PeriodInputValue__value 的text",
        "output": "<thought>\n要获取span的class包含PeriodInputValue__value 的text，我们可以使用FindElem和GetElemText这两个关键字。首先，我们使用FindElem来查找此类span元素，然后使用GetElemText来获取其文本。\n</thought>\n\n<code_block>\n# 查找class包含PeriodInputValue__value的span元素\n${elem}  FindElem | span[class*='PeriodInputValue__value']\n\n# 获取元素${elem}的文本\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置主办单位负责人下面的证件类型为：身份证",
        "output": "<thought>\n根据问题描述，需要将“证件类型”字段设置为“身份证”，并且这个字段位于“主办单位负责人”附近。因此可以使用`SetField`关键字，通过指定`near`参数来实现。\n</thought>\n\n<code_block>\n# 设置主办单位负责人下方的证件类型为身份证\nSetField | 证件类型 | 身份证 | near=主办单位负责人\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将${desc1}的左侧4个字符去掉, 在当前输入光标中输入此值，判断页面上学校简述中包含于该值",
        "output": "<thought>\n首先，需要去掉${desc1}的左侧4个字符，这可以通过Python的字符串切片完成。接着，在当前光标位置输入处理后的字符串，这可以通过SendText关键字完成。最后，校验页面上学校简述中包含该字符串，可以使用CheckFieldContains关键字来实现。\n</thought>\n\n<code_block>\n# 去掉左侧4个字符并输入\n${desc_trimmed}  Evaluate  ${desc1}[4:]\nSendText  ${desc_trimmed}\n\n# 校验学校简述中包含处理后的字符串\nCheckFieldContains | 学校简述 | ${desc_trimmed}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class包含view-lines 的元素，然后读取文件 Library/data.py 的内容，并将其粘贴到光标处",
        "output": "<thought>\n首先，我们需要点击符合 class 包含 view-lines 的元素，可以使用 ClickElem 关键字。接着，我们需要读取文件 Library/data.py 的内容，使用 Get File 即可。最后，将读取的内容粘贴到当前光标处，可以使用 Paste 关键字。\n</thought>\n\n<code_block>\n# 点击 class 包含 view-lines 的元素\nClickElem | [class*=view-lines]\n\n# 读取 Library/data.py 文件内容\n${file_content} = Get File | Library/data.py\n\n# 将读取的文件内容粘贴到光标处\nPaste | ${EMPTY} | ${file_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "Policy多选下拉框选中Auto-GT-Code",
        "output": "<thought>\nPolicy多选下拉框选中Auto-GT-Code，其实就是设置Policy字段的值，选取关键字SetField来实现设置Policy字段的值为Auto-GT-Code。\n</thought>\n\n<code_block>\n# 设置Policy字段的值为Auto-GT-Code\nSetField | Policy | Auto-GT-Code\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证表格中角色名称列不包含管理员",
        "output": "<thought>\n为了验证表格中角色名称列不包含“管理员”这个文本，可以使用`CheckColNotHas`关键字。这个关键字可以针对指定的列进行检查，确保不包含特定的文本。\n</thought>\n\n<code_block>\n# 校验角色名称列不包含管理员\nCheckColNotHas | 角色名称 | 管理员\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向第一个class为time的div元素中输入：2024-04-01～2024-04-06",
        "output": "<thought>\n解决问题思路：首先，通过类名（class）为time的div元素确定唯一的元素，然后使用FillArea关键字将文本输入到这个元素中。\n</thought>\n\n<code_block>\n# 定位第一个class为time的div元素\n${selector}   Set Variable  div[class=time]:eq(0)\n\n# 向第一个class为time的div元素中输入2024-04-01～2024-04-06\nFillArea  |  ${selector}  |  2024-04-01～2024-04-06\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 当日大盘流水 的元素，然后找到其祖先中 文本包含 Revenue 的元素",
        "output": "<thought>\n首先需要查找文本为“当日大盘流水”的元素，然后找到其祖先中包含文本“Revenue”的元素。可以通过FindByText查找“当日大盘流水”元素，再使用FindParentElem查找其祖先中包含“Revenue”的元素。\n</thought>\n\n<code_block>\n# 查找文本为当日大盘流水的元素\n${elem}  FindByText | 当日大盘流水\n\n# 查找当日大盘流水元素的祖先中包含Revenue的元素\n${parent}  FindParentElem | ${elem} | :contains(Revenue)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传产品预览图片：${IMAGE}",
        "output": "<thought>\n解决问题思路：通过SetField关键字，我们可以将 \"产品预览\" 字段设置为所需的图片路径 ${IMAGE}。这个关键字将会自动检测关联的控件类型，并且如果它是上传控件，那么它就会自动上传图片。\n</thought>\n\n<code_block>\n# 上传产品预览图片\nSetField | 产品预览 | ${IMAGE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "从页面 cookie 中获取 session_id",
        "output": "<thought>\n为了解决从页面cookie中获取session_id的问题，我们可以利用SeleniumLibrary中的Get Cookie关键字。首先，我们将获取名为session_id的cookie信息，然后提取其value属性，以获取具体的session_id的值。\n</thought>\n\n<code_block>\n# 获取名为session_id的cookie的信息\n${cookie}  Get Cookie  session_id\n\n# 打印cookie的值\nLog  Cookie value: ${cookie.value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验发送到接口 /current/user 的最后一个 POST 请求中的 JSON 字段 response:header:content-type 为 application/json, response:body:email 包含 bytedance",
        "output": "<thought>\n首先，我们需要搜索接口请求，找到最后一个发送到 /current/user 的 POST 请求。然后，我们根据需要获取该请求的响应数据，特别是 JSON 字段 response:header:content-type 和 response:body:email。接着，需要校验 content-type 是否为 application/json 并验证 email 字段是否包含 bytedance。\n</thought>\n\n<code_block>\n# 搜索发送到 /current/user 的最后一个 POST 请求\n${resp_json}  Search Requests  /current/user  POST  last\n\n# 获取响应头中的 content-type\n${content_type}  GetValuesFromJson  ${resp_json}  response:header:content-type\n\n# 校验 content-type 为 application/json\nShould Be Equal As Strings  ${content_type}  application/json\n\n# 获取响应体中的 email\n${email}  GetValuesFromJson  ${resp_json}  response:body:email\n\n# 校验 email 包含 bytedance\nShould Contain  ${email}  bytedance\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取${elem}的checkbox状态",
        "output": "<thought>\n要获取一个元素的checkbox状态，可以使用提供的`IsCheckboxSelected`关键字。这个关键字可以接受元素对象作为参数(name_or_index_or_elem)，因此可以直接将${elem}传递给它。不需要额外的定位步骤，因为元素已经通过${elem}变量提供。这是最直接和高效的方法。\n</thought>\n\n<code_block>\n# 获取元素${elem}的checkbox状态\n${status}  IsCheckboxSelected  ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击更多小图标，点击详情，等待页面加载完成后，检测离线作业的表格包含“【自动化测试新建流式场景专用】”，和 “返回上一页”",
        "output": "<thought>\n 首先点击更多icon，然后点击详情按钮。等待页面加载完成后，检查离线作业的表格中包含“【自动化测试新建流式场景专用】”和“返回上一页”。使用关键字`ClickIcon`和`Click`来实现点击操作，`WaitLoading`来等待页面加载完成，使用`CheckTableHas`来验证表格内容。\n </thought>\n \n <code_block>\n # 点击更多icon\n ClickIcon | more\n \n # 点击详情\n Click | 详情\n \n # 等待页面加载完成\n WaitLoading\n \n # 校验离线作业表格中包含“【自动化测试新建流式场景专用】”\n CheckTableHas | 【自动化测试新建流式场景专用】 | tbl=离线作业\n \n # 校验离线作业表格中包含“返回上一页”\n CheckTableHas | 返回上一页 | tbl=离线作业\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问页面https://volc.com/datafinder/，如果页面中存在域名bytedance.net或byted.org报错",
        "output": "<thought>\n首先使用OpenUrl关键字访问给定的页面，然后使用IsAnyTextExisting关键字检查是否存在文本“bytedance.net”或“byted.org”。如果存在，则使用Log关键字记录“报错”信息。\n</thought>\n\n<code_block>\n# 访问指定页面\nOpenUrl | https://volc.com/datafinder/\n\n# 判断页面是否包含域名bytedance.net或byted.org\n${exist}  IsAnyTextExisting | bytedance.net | byted.org\n\n# 如果存在则记录报错\nIF  ${exist}\n    Log  报错\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向弹框中的表格第一行输入多个值：预付费、合同签署后、收到发票后、30、工作日、按比例、90，然后点击class不包含arco-link-disabled的“可视化”的按钮",
        "output": "<thought>\n需要使用FillRow关键字向弹框中的表格第一行输入多个值，然后使用ClickElem关键字选择并点击class不包含特定class名的“可视化”按钮。\n</thought>\n\n<code_block>\n# 在弹框中的表格第一行输入多个值\nFillRow | 1 | 预付费 | 合同签署后 | 收到发票后 | 30 | 工作日 | 按比例 | 90 | base=POPUP\n\n# 点击class不包含arco-link-disabled的“可视化”按钮\nClickElem | button:contains(可视化):not([class*=arco-link-disabled])\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将学生信息下方的性别设置为：woman",
        "output": "<thought>\n需要使用SetField关键字，通过near参数指定在\"学生信息\"下方的性别字段，然后将其设置为\"woman\"。\n</thought>\n\n<code_block>\n# 将学生信息下方的性别设置为：woman\nSetField | 性别 | woman | near=学生信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验当前页面URL中包含 /home",
        "output": "<thought>\n为了校验当前页面URL中包含 /home，可以使用IsURLContains关键字判断URL是否包含给定的文本。\n</thought>\n\n<code_block>\n# 校验当前页面URL中包含 /home\n${status}  IsURLContains | /home\nShould Be True  ${status}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到距离 ${filtered_elems}[0] 元素 x 轴方向的 -1 处",
        "output": "<thought>\n首先，我们需要找到 `${filtered_elems}[0]` 元素。由于 `${filtered_elems}[0]` 是一个已知的元素变量，可以直接使用 `MoToElem` 关键字进行操作。`MoToElem` 允许我们根据选择器移动到元素上，并通过参数 dx 和 dy 进行调整，因此可以将 dx 设置为 -1。\n</thought>\n\n<code_block>\n# 移动鼠标到 ${filtered_elems}[0] 元素 x 轴方向的 -1 处\nMoToElem | ${filtered_elems}[0] | dx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入订单号 7337568556879448127",
        "output": "<thought>\n对于输入订单号这种情形，可以使用SetField关键字，将订单号输入到相应的字段中。如果需要在光标处输入订单号，可以使用SendText关键字。假设没有更多信息，我选择使用SetField关键字。\n</thought>\n\n<code_block>\n# 输入订单号 7337568556879448127\nSetField | 订单号 | 7337568556879448127\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 class包含kjgmvP 的元素中输入：${engine_type} 和 ${default}",
        "output": "<thought>\n需要在指定class的元素中输入内容，适合使用FillArea关键字。应构建一个jquery选择器找到目标元素，并用FillArea输入${engine_type}和${default}。\n</thought>\n\n<code_block>\n# 在class包含kjgmvP的元素中输入：${engine_type} 和 ${default}\nFillArea | [class*=kjgmvP] | ${engine_type} | ${default}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击下一步，设置数据指标配置为：测试 test test，设置信息配置为：测试 test，点击提交",
        "output": "\n    \n<thought>\n 这个场景需要执行以下操作步骤：首先点击“下一步”，然后设置“数据指标配置”和“信息配置”两个字段的值，最后点击“提交”。我们可以依次使用`Click`、`SetField`、`BatchSetFields`和`Click`关键字来实现。\n </thought>\n \n <code_block>\n # 点击下一步\n Click | 下一步\n \n # 设置数据指标配置为“测试 test test”\n SetField | 数据指标配置 | 测试 test test\n \n # 批量设置信息配置为“测试 test”\n BatchSetFields | 信息配置=测试 test\n \n # 点击提交\n Click | 提交\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击 人气、流水、时长 并且每次点击等待1秒，校验页面中包含“已经和本机构合作”",
        "output": "<thought>\n为了实现这个场景，我们需要依次点击文本“人气”、“流水”、“时长”，每次点击后等待1秒，然后验证页面中包含文本“已经和本机构合作”。我们可以使用Click关键字来进行点击操作，使用Sleep关键字来等待1秒，最后使用CheckHasText关键字来进行文本校验。\n</thought>\n\n<code_block>\n# 点击人气并等待1秒\nClick | 人气\nSleep | 1s\n\n# 点击流水并等待1秒\nClick | 流水\nSleep | 1s\n\n# 点击时长并等待1秒\nClick | 时长\nSleep | 1s\n\n# 校验页面中包含“已经和本机构合作”\nCheckHasText | 已经和本机构合作\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验len(@{jixiao_info})-1大于5",
        "output": "<thought>\n1. 首先需要使用RF内置的`Get Length`关键字获取列表`@{jixiao_info}`的长度\n2. 然后需要将长度减1，可以使用`Evaluate`关键字执行Python表达式\n3. 最后使用RF的`Should Be True`关键字校验结果是否大于5\n4. 整个过程需要分步进行，先获取长度，再计算减1后的值，最后进行校验\n</thought>\n\n<code_block>\n# 获取列表长度\n${length}  Get Length  ${jixiao_info}\n\n# 计算长度减1\n${result}  Evaluate  ${length} - 1\n\n# 校验结果大于5\nShould Be True  ${result} > 5\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击Activate，检查页面包含：Next step，点击SLA for BytePlus CDN service，设置参数  input placeholder=\"请选择统计口径\" 为用户",
        "output": "<thought>\n首先，我们需要点击文本 \"Activate\"，这可以通过使用 Click 关键字来实现。接着，我们需要验证页面中是否包含 \"Next step\" 文本，这可以通过 CheckHasText 关键字完成。然后，我们点击文本 \"SLA for BytePlus CDN service\"，同样使用 Click 关键字。最后，我们设置名为 input 且具有 placeholder 属性 \"请选择统计口径\" 的输入框为 \"用户\"。这需要通过 SetField 或 FillArea 关键字实现，具体取决于页面元素的实现方式。\n</thought>\n\n<code_block>\n# 点击Activate\nClick | Activate\n\n# 检查页面包含：Next step\nCheckHasText | Next step\n\n# 点击SLA for BytePlus CDN service\nClick | SLA for BytePlus CDN service\n\n# 设置 input placeholder=\"请选择统计口径\" 为用户\nFillArea | input[placeholder='请选择统计口径'] | 用户\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 交易方风险加 上方 50px 处，点击，输入：500",
        "output": "<thought>\n这个问题需要先将鼠标移动到指定文本\"交易方风险加\"上方50px的位置，然后进行点击操作，最后在光标处输入\"500\"。为此，我将使用`MoTo`关键字来移动鼠标，使用`MClick`关键字来点击，最后使用`SendText`关键字来输入文本。\n</thought>\n\n<code_block>\n# 将鼠标移动到\"交易方风险加\"上方50px处\nMoTo | 交易方风险加 | dy=-50\n\n# 在当前位置点击\nMClick\n\n# 输入500\nSendText | 500\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 算数运算：1+1。提示可以用 Evaluate 调用 python",
        "output": "<thought>\n 为了执行算数运算1+1，可以使用RobotFramework的Evaluate关键字来调用Python代码进行计算。\n </thought>\n \n <code_block>\n # 使用 Evaluate 进行算数运算 1+1\n ${result}  Evaluate | 1 + 1\n Log | ${result}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击飞书右侧的筛选小图标",
        "output": "<thought>\n这个场景要求点击特定文本“飞书”右侧的筛选icon。我们可以使用提供的关键字ClickIconToTheDirectionOf来实现这个操作。首先需要确认基准元素“飞书”的存在，然后在它的右侧找到筛选icon并点击。根据关键字文档，需要给定基准文本、方向、icon名称以及其他必要参数。\n</thought>\n\n<code_block>\n# 点击飞书右侧的筛选icon\nClickIconToTheDirectionOf | 飞书 | right | filter\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置第${row}行的显示为：OFF",
        "output": "<thought>\n首先要确定如何设置特定行的显示值。根据提供的关键字列表，可以使用FillCell关键字来填写特定行和列中的值。假设“显示”为表格中的一列名称，可以根据行号和列名称来定位具体单元格，然后将其值设置为“OFF”。\n</thought>\n\n<code_block>\n# 设置第${row}行的“显示”列为“OFF”\nFillCell | ${row} | 显示 | OFF\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个class等于semi-icons semi-icons-caretdown semi-icons-small的元素",
        "output": "<thought>\n在这个场景中，我们需要点击第一个符合特定class选择器的元素。指定的类名是\"semi-icons semi-icons-caretdown semi-icons-small\"。我们可以使用RF提供的ClickElem关键字，并结合jQuery选择器来定位该元素。需要注意的是，由于jQuery选择器返回的是零基索引的元素，因此要点击第一个元素，我们需要使用:eq(0)。\n</thought>\n\n<code_block>\n# 点击第一个class等于semi-icons semi-icons-caretdown semi-icons-small的元素\nClickElem | [class=\"semi-icons semi-icons-caretdown semi-icons-small\"]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待接单按钮出现",
        "output": "<thought>\n首先等待页面加载完成，然后使用WaitElem关键字等待一个包含文本\"接单\"的按钮元素出现。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 等待接单按钮出现\nWaitElem | button:contains(接单)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选 Countries & Regions复选框下拉框中的 Azerbaijan。提示：这里就是要设置 ‘Countries & Regions’ 为给定的选项：Azerbaijan",
        "output": "<thought>\n为了完成此任务，我需要选择一个复选框选项。首先需要找到`Countries & Regions`字段，然后设置其选项为`Azerbaijan`。这可以通过`SelectOptionForField`关键字来完成。\n</thought>\n\n<code_block>\n# 选择 Countries & Regions 中的 Azerbaijan\nSelectOptionForField | Countries & Regions | Azerbaijan\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class为panel-content页面区域中的3705868001359298812",
        "output": "<thought>\n解决此问题的思路是使用Click关键字，其中txt参数为3705868001359298812，base参数为.panel-content。这样可以在class为panel-content的页面区域中寻找并点击3705868001359298812。\n</thought>\n\n<code_block>\n# 在class为panel-content页面区域中点击3705868001359298812\nClick | 3705868001359298812 | base=[class=panel-content]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成 5hour3min 后的时间，格式为：2024-11-11 05:06",
        "output": "<thought>\n这个问题我们可以使用RobotFramework 提供的日期/时间处理关键字来解决, \"Get Current Date\"可以获取当前时间，然后通过\"Add Time To Date\"将指定的时间\"5hour3min\"添加进去。\n</thought>\n\n\n<code_block>\n# 获取当前时间\n${current_time}  Get Current Date  result_format=%Y-%m-%d %H:%M\n\n# 添加\"5小时3分钟\"时间\n${new_time}  Add Time To Date  ${current_time}  5h 3min  result_format=%Y-%m-%d %H:%M\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 表格第一行中的 编辑 小图标",
        "output": "<thought>\n问题要求点击表格第一行中的编辑图标，可以使用`ClickIconOfRow`关键字。关键字需要指定行号、图标名以及表格标识。这里行号是1，图标名是编辑。\n</thought>\n\n<code_block>\n# 点击表格第一行中的编辑图标\nClickIconOfRow | 1 | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击立即部署，设置Step为1000秒，设置数据源为“自动化测试专用【请勿操作】”，设置请输入promQL语句进行查询为“test”，设置别名为“test”",
        "output": "<thought>\n 为了解决这个问题，我需要依次执行以下操作：\n 1. 点击“立即部署”按钮。\n 2. 设置“Step”为1000秒。\n 3. 设置“数据源”为“自动化测试专用【请勿操作】”。\n 4. 设置“请输入promQL语句进行查询”为“test”。\n 5. 设置“别名”为“test”。\n \n 我们可以使用以下关键字：\n - `Click` 用于点击“立即部署”。\n - `SetField` 用于设置“Step”、“数据源”、“请输入promQL语句进行查询”和“别名”。\n \n 我将依次使用这些关键字来实现需求。\n </thought>\n \n <code_block>\n # 点击立即部署按钮\n Click | 立即部署\n \n # 设置Step为1000秒\n SetField | Step | 1000秒\n \n # 设置数据源为自动化测试专用【请勿操作】\n SetField | 数据源 | 自动化测试专用【请勿操作】\n \n # 设置请输入promQL语句进行查询为test\n SetField | 请输入promQL语句进行查询 | test\n \n # 设置别名为test\n SetField | 别名 | test\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取input placeholder=结束日期的value",
        "output": "<thought>\n我们需要获取一个特定input元素的值，其属性是placeholder=\"结束日期\"。首先，我们可以使用`FindElem`来定位该input元素，然后使用`GetElemAttr`获取其value属性的值。\n</thought>\n\n<code_block>\n# 定位placeholder为结束日期的input元素\n${elem}  FindElem | input[placeholder=\"结束日期\"]\n\n# 获取上述元素的value属性\n${val}  GetElemAttr | ${elem} | value\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格内容",
        "output": "<thought>\n获取表格内容涉及到获取表格的行数，然后逐行获取每行的值。我们可以依次使用GetRowCount和GetRowValues关键字来实现。\n</thought>\n\n<code_block>\n# 获取表格的行数\n${row_count}  GetRowCount\n\n# 初始化一个空列表来存储表格内容\n@{table_content}  Create List\n\n# 遍历表格的每一行，获取行值并添加到内容列表中\nFOR  ${i}  IN RANGE  1  ${row_count}\n    @{row_values}  GetRowValues  ${i}\n    Append To List  ${table_content}  ${row_values}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个checkbox",
        "output": "<thought>\n对于点击第一个checkbox的操作，可以使用ClickElem关键字结合jquery选择器，通过索引选择第一个checkbox元素。\n</thought>\n\n<code_block>\n# 点击第一个checkbox\nClickElem | input[type='checkbox']:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待弹窗中出现 确定，并在请输入撤回原因处输入 ${reason}，点击确定，设置合同金额为多个值：收入类 固定总价 200 USD，最后判断${exist}为true则失败，否则打印日志",
        "output": "<thought>\n为了自动化完成此任务，我们需要等待弹窗中“确定”按钮的出现，然后在“请输入撤回原因”字段处输入变量`${reason}`的值。接下来，我们点击“确定”按钮。然后将字段“合同金额”设置为多个值“收入类 固定总价 200 USD”。最后，我们判断变量`${exist}`是否为true，如果是，则执行失败操作，否则打印日志。\n\n为了实现以上步骤，计划使用以下关键字：\n1. `WaitText`：在弹窗中等待“确定”文本出现。\n2. `SetPopupField`：在弹窗中设置“请输入撤回原因”字段。\n3. `Click`：点击弹窗中的“确定”。\n4. `SetField`：设置字段“合同金额”为多个值。\n5. `IF/ELSE`结构：用于判断变量`${exist}`是否为true，并执行相应操作。\n</thought>\n\n<code_block>\n# 等待弹窗中出现 确定\nWaitText  确定  base=POPUP\n\n# 在请输入撤回原因处输入 ${reason}\nSetPopupField  请输入撤回原因  ${reason}\n\n# 点击弹窗中的 确定\nClick  确定  base=POPUP\n\n# 设置合同金额的多个值\nSetField  合同金额  收入类  固定总价  200  USD\n\n# 判断${exist}为true则失败，否则打印日志\nIF  ${exist}\n    Fail  操作失败\nELSE\n    Log  操作成功\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将年龄设置为 25， ‘姓名’设置为 ‘李四’",
        "output": "<thought>\n这个任务需要将两个字段批量设置，因此可以使用`BatchSetFields`关键字来同时设置“年龄”和“姓名”字段。\n</thought>\n\n<code_block>\n# 将年龄设置为25，‘姓名’设置为‘李四’\nBatchSetFields  年龄=25  姓名=李四\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现因子修改，点击取消右侧的保存，如果出现请先为每个演出时间创建演出场次，点击好的，当出现身份证购买限制，身份证购买限制设置为限制2张",
        "output": "<thought>\n这个场景包含多个步骤，需要依次处理。首先等待“因子修改”文本出现，然后点击“取消”按钮右侧的“保存”。如果出现“请先为每个演出时间创建演出场次”，则点击“好的”。最后，如果看到“身份证购买限制”，需要将“身份证购买限制”设置为“限制2张”。我们会用到WaitText、ClickElemToTheDirectionOf、IsAnyTextExisting、Click、SetField等关键字。\n</thought>\n\n<code_block>\n# 等待页面出现“因子修改”\nWaitText | 因子修改\n\n# 点击“取消”右侧的“保存”\nClickElemToTheDirectionOf | 取消 | right | button:contains(保存)\n\n# 如果出现“请先为每个演出时间创建演出场次”，点击“好的”\n${exist}  IsAnyTextExisting | 请先为每个演出时间创建演出场次\nIF  $exist\n    Click  好的\nEND\n\n# 如果出现“身份证购买限制”，将其设置为“限制2张”\n${exist}  IsAnyTextExisting | 身份证购买限制\nIF  $exist\n    SetField | 身份证购买限制 | 限制2张\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 获取表格第一行的授权编号，并打印出来",
        "output": "<thought>\n 首先，我们需要获取第一行的授权编号。通过使用GetCellValue关键字，我们可以轻松地获取表格第一行的授权编号。然后我们可以使用内置的Log关键字将其打印出来。\n </thought>\n \n <code_block>\n # 获取第一行的授权编号\n ${auth_num} GetCellValue | 1 | 授权编号\n # 打印授权编号\n Log | ${auth_num}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“图片Diff” 的关键字，接受 location sim，作用是：当location等于全屏时，截取整个屏幕，设定相似度为sim。否则对location进行截图，设定相似度为sim",
        "output": "<thought>\n这个任务需要根据传入参数`location`来决定截图范围。如果`location`等于`全屏`，则对整个屏幕进行截图，并设定相似度为`sim`。否则，需要对给定的`location`进行截图，并设定相似度为`sim`。我们可以使用`ImageDiff`关键字来处理这两种情况。\n</thought>\n\n<code_block>\n*** Keywords ***\n图片Diff\n    [Arguments]  ${location}  ${sim}\n    \n    # 如果 location 是全屏\n    IF  \"${location}\" == \"全屏\"\n        # 截取全屏并设定相似度\n        ImageDiff  sim=${sim}\n    ELSE\n        # 否则，对 location 进行截图并设定相似度\n        ImageDiff  selector=${location}  sim=${sim}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标悬浮到testautotest_输出实时标签，然后点击弹出的删除",
        "output": "<thought>\n首先，鼠标需要悬浮到“testautotest_输出实时标签”文本上，然后点击弹出框中的“删除”文本。这个步骤可以分为两部分：第一部分是将鼠标移动到指定的文本上；第二部分是点击弹出框中的“删除”文本。\n\n对于第一个部分，可以使用 `MoTo` 关键字将鼠标移动到目标文本上。\n\n对于第二个部分，可以使用 `Click` 关键字并指定 `base` 为 `POPUP`，以表示点击弹出框中的“删除”文本。\n</thought>\n\n<code_block>\n# 移动鼠标到“testautotest_输出实时标签”\nMoTo | testautotest_输出实时标签\n\n# 点击弹出框中的“删除”\nClick | 删除 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "往请选择商机报备状态中选择创建中",
        "output": "<thought>\n在这个场景中，我们需要选择一个特定的选项“创建中”在名为“请选择商机报备状态”的字段中。可以使用SelectOptionForField关键字来实现这个操作。\n</thought>\n\n<code_block>\n# 选择字段“请选择商机报备状态”并设置为“创建中”\nSelectOptionForField | 请选择商机报备状态 | 创建中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面应该包含 hello",
        "output": "<thought>\n页面应该包含 hello，比较直接的思路就是使用CheckHasText关键字，它能够检查页面包含的文本。\n\n此外，我们也能用框架的内置关键字Should Contain，但是由于我这里以CheckHasText为准的原因是，此关键字是为本测试场景量身打造的，而Should Contain则是一个通用的字符串包含关键字，没有考虑到网页的因素，无法满足特定的需求。\n</thought>\n\n<code_block>\n# 校验页面包含文本 hello\nCheckHasText | hello\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "随机一个8位字符串，赋值给变量packeg_id",
        "output": "<thought>\n要生成一个8位长的随机字符串并赋值给变量`packeg_id`，可以使用`GenerateRandom`关键字。该关键字允许我们指定字符串的长度和字符集。在这里，我们可以使用`[LETTERS][NUMBERS]`来生成包含字母和数字的随机字符串。\n</thought>\n\n<code_block>\n# 生成8位随机字符串并赋值给变量packeg_id\n${packeg_id}  GenerateRandom  | 8 | [LETTERS][NUMBERS]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验是否有 测试商机年前封网 文案",
        "output": "<thought>\n要校验页面是否包含文本“测试商机年前封网”，可以使用`CheckHasText`关键字，该关键字用于校验页面是否包含指定的文本。此处只需检查整个页面的内容即可，因此不需要指定基准元素。\n</thought>\n\n<code_block>\n# 校验页面是否包含“测试商机年前封网”文案\nCheckHasText  测试商机年前封网\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个变量account，值为Wjtest_yd，快速切换账号 设置为此值",
        "output": "<thought>\n为了实现切换账号为指定的值，可以使用`Set Variable`来创建一个变量来保存账号信息。为了切换账号，首先需要找到对应的账号输入字段，并设置该字段为新账号值。可以使用`SetField`进行字段值的设置。\n</thought>\n\n<code_block>\n# 创建变量account，值为Wjtest_yd\n${account}  Set Variable  Wjtest_yd\n\n# 假设页面上有一个名为账号的字段，切换账号为${account}\nSetField | 账号 | ${account}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取class=item-NWCPQu区域的值",
        "output": "<thought>\n为了获取页面元素的值，我们首先需要定位到该元素。根据提供的场景描述，我们需要查找一个具有特定类(class)名称的元素。在这个情况下，我们可以使用FindElem关键字来查找具有class=item-NWCPQu的元素。然后，使用GetElemText关键字获取该元素的文本值。如果该元素的值需要通过字段来访问，可能需要使用GetFieldVal关键字。\n</thought>\n\n<code_block>\n# 查找具有class=item-NWCPQu的元素\n${elem}  FindElem | [class=item-NWCPQu]\n\n# 获取该元素的文本值\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 生成一个名为 pic 的变量，变量值为将 1、2、3、4 用 _ 分隔",
        "output": "<thought>\n 可以使用 RobotFramework 的 Set Variable 关键字来创建变量，并通过字符串连接来实现。\n </thought>\n \n <code_block>\n # 使用 Set Variable 生成 pic 变量\n ${pic}  Set Variable  1_2_3_4\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "想依次点击表格里的查看详情 如果 没有报错 就点击返回 如果有报错获取当前页面的url中的taskId={taskId} 追加到一个列表里 然后点击返回 继续访问",
        "output": "<thought>\n解决问题思路：\n1. 使用循环依次点击表格中的“查看详情”按钮。\n2. 使用TRY/EXCEPT结构来捕捉可能出现的错误。\n3. 如果没有报错，则点击“返回”。\n4. 如果有报错，获取当前页面的URL，并从中提取`taskId`。\n5. 将提取到的`taskId`追加到一个列表中。\n6. 点击“返回”后继续循环。\n\n关键字选择：\n- 使用`ClickTextOfRow`点击“查看详情”。\n- 使用IF/ELSE结构来判断是否有报错。\n- 使用`GetCurrentUrl`来获取当前页面URL。\n- 使用Evaluate执行Python代码从URL中提取`taskId`。\n- 使用`PageBack`模拟返回按钮。\n</thought>\n\n<code_block>\n# 声明一个列表，用于存储taskIds\n${taskIds}  Create List\n\n# 获取行数，以便循环\n${row_count}  GetRowCount | tbl=1\n\nFOR  ${row_index}  IN  Range  1  ${row_count}\n    TRY\n        # 点击表格行中的“查看详情”\n        ClickTextOfRow | ${row_index} | 查看详情 | tbl=1\n        \n        # 点击返回\n        Click | 返回\n\n    EXCEPT\n        # 获取当前页面的URL\n        ${url}  GetCurrentUrl\n        \n        # 使用Evaluate从URL中提取taskId\n        ${taskId}  Evaluate  re.search(r'taskId=([^&]+)', '${url}').group(1)  re\n        \n        # 将taskId追加到列表中\n        Append To List  ${taskIds}  ${taskId}\n        \n        # 点击返回\n        Click | 返回\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 将任务结束时间设置为：一天后\n \n ",
        "output": "<thought>\n 任务是设置任务结束时间为一天后。可以使用RF标准库中的`Get Current Date`获取当前日期，然后使用`Add Time To Date`增加一天。最后，使用`SetField`输入计算出的日期到`任务结束时间` 字段中\n </thought>\n \n <code_block>\n # 获取当前日期\n ${current_date}  Get Current Date | result_format=%Y-%m-%d\n \n # 增加一天\n ${end_date}  Add Time To Date | ${current_date} | 1 days | result_format=%Y-%m-%d\n \n # 输入任务结束时间\n SetField | 任务结束时间 | ${end_date}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算 start_date 和 end_date 两个日期之间相差的天数",
        "output": "<thought>\n要计算两个日期之间的天数差，可以使用Python中的datetime模块。具体来说，我们可以使用datetime的strptime方法将字符串转换为日期对象，然后相减获得天数差。我们需要使用Evaluate关键字来执行Python代码。\n</thought>\n\n<code_block>\n# 计算两个日期之间相差的天数\n${days_difference}    Evaluate    (datetime.datetime.strptime($end_date, '%Y-%m-%d') - datetime.datetime.strptime($start_date, '%Y-%m-%d')).days    modules=datetime\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击移动分组，点击元素class=\"arco-switch arco-switch-type-circle\"，等待2min，点击保存",
        "output": "<thought>\n根据给定的场景，我们需要执行以下步骤：\n1. 点击文本“移动分组”。\n2. 点击class为\"arco-switch arco-switch-type-circle\"的元素。\n3. 等待2分钟。\n4. 点击文本“保存”。\n\n我们将使用Click关键字来点击指定的文本，使用ClickElem关键字来点击指定class的元素，使用Sleep来等待指定时间。确保这些步骤按照顺序执行。\n</thought>\n\n<code_block>\n# 点击移动分组\nClick | 移动分组\n\n# 点击class为\"arco-switch arco-switch-type-circle\"的元素\nClickElem | [class=arco-switch arco-switch-type-circle]\n\n# 等待2分钟\nSleep | 2min\n\n# 点击保存\nClick | 保存\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在搜索中输入 xxx",
        "output": "<thought>\n在搜索框中输入xxx可以使用SetField关键字，这个关键字用来操作页面字段关联的控件区域，输入一个或者多个值到控件中。我们只需要传入name字段为搜索的字段名称，将args参数设为xxx即可。\n</thought>\n\n<code_block>\n# 在搜索框中输入 xxx\nSetField | 搜索 | xxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到姓名右侧",
        "output": "<thought>\n为了解决这个问题，我们需要使用MoTo关键字，因为它允许我们将鼠标移动到特定文本上。然后我们可以通过调整dx参数（表示横向偏移）来将鼠标移动到\"姓名\"文本的右侧。将dx设为正数可以实现向右的偏移。\n</thought>\n\n<code_block>\n# 鼠标移动到姓名右侧\nMoTo | 姓名 | dx=20\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“点击画布中文本” 的关键字，接受：text 参数，作用是：\n调用关键字 “ui click text of element by ocr” 参数为： canvas  text",
        "output": "<thought>\n我们需要创建一个名为“点击画布中的文本”的关键字，并使用传入的参数调用另一个关键字“ui click text of element by ocr”。这个过程包括定义关键字并通过Robot Framework的语法调用函数。\n</thought>\n\n<code_block>\n*** Keywords ***\n点击画布中的文本\n    [Arguments]  ${text}\n    ui click text of element by ocr    canvas    ${text}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：\"关闭弹窗\" 的关键词，如果页面出现文字\"你的试投计划效果出来啦\"就点击class为ovui-icon的页面区域，若没有出现就跳过",
        "output": "<thought>\n首先，应使用IsAnyTextExisting关键字检查是否有消息\"你的试投计划效果出来啦\"，然后使用Robot Framework的IF语法执行相应的操作。如果消息存在，则点击class为ovui-icon的元素，否则就跳过。\n</thought>\n\n<code_block>\n# 定义关键字 \"关闭弹窗\"\n关闭弹窗\n    # 检查是否出现 \"你的试投计划效果出来啦\"\n    ${exist}=  IsAnyTextExisting | 你的试投计划效果出来啦\n    # 如果消息存在，就点击 class 为 ovui-icon 的元素\n    IF  ${exist}\n        ClickElem | [class=ovui-icon]\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在请输入插件名称关键词中输入 ComfyUI-AngryNodes 并回车",
        "output": "\n<thought>\n在这个场景中，我们需要在一个名为\"请输入插件名称关键词\"的字段中输入文本\"ComfyUI-AngryNodes\"并且触发回车操作。根据给定的关键字描述，SetField 可以用来操作特定名称的字段并输入文本，同时可以通过 enter=True 参数来模拟回车按键。\n</thought>\n\n<code_block>\n# 在\"请输入插件名称关键词\"字段中输入\"ComfyUI-AngryNodes\"并回车\nSetField | 请输入插件名称关键词 | ComfyUI-AngryNodes | enter=True\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击处罚上方的决策",
        "output": "<thought>\n要实现“点击处罚上方的决策”这一操作，可以使用`ClickTextToTheDirectionOf`关键字。该关键字可以点击基准文本某个方向的目标文本。这里，我们将\"处罚\"作为基准文本，方向选择\"top\"代表上方，然后将\"决策\"作为目标文本。\n</thought>\n\n<code_block>\n# 点击处罚上方的决策\nClickTextToTheDirectionOf | 处罚 | top | 决策\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 将挂起原因设置为：等待用户答复",
        "output": "<thought>\n 首先，我们需要寻找页面中的“挂起原因”字段，然后使用SetField关键字将其设置为“等待用户答复”。\n </thought>\n \n <code_block>\n # 将挂起原因设置为：等待用户答复\n SetField | 挂起原因 | 等待用户答复\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击售卖延期左边的查看，界面出现 软件类咨询 文字",
        "output": "<thought>\n在这个场景中，需要点击“售卖延期”左边的“查看”按钮，然后验证界面上是否出现“软件类咨询”文字。可以使用ClickTextToTheDirectionOf关键字来点击目标“查看”按钮，基于“售卖延期”作为基准元素并朝向左侧寻找“查看”按钮。接着使用WaitText关键字等待“软件类咨询”文本的出现。\n</thought>\n\n<code_block>\n# 点击售卖延期左边的查看\nClickTextToTheDirectionOf | 售卖延期 | left | 查看\n\n# 等待页面上出现 软件类咨询 文本\nWaitText | 软件类咨询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中 右上角的关闭小图标",
        "output": "<thought>\n在这个场景中，我们需要点击弹窗中的右上角的关闭icon。根据关键字描述，应该使用ClickIconToTheDirectionOf关键字。基准元素可以是弹窗，它在此处用POPUP表示。我们要点击的是位于弹窗右上角的close图标。因此，基准元素设置为POPUP，方向设置为topRight，图标名称设置为close。\n</thought>\n\n<code_block>\n# 点击弹窗中右上角的关闭icon\nClickIconToTheDirectionOf | POPUP | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中第1个“加号”小图标",
        "output": "<thought>\n我们需要在弹窗中点击第一个“加号”icon。根据已有的关键字，应该使用`ClickIcon`，并且设置`base=POPUP`来限定范围在弹窗内。\n</thought>\n\n<code_block>\n# 点击弹窗中的第1个加号icon\nClickIcon | plus | idx=0 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的第一个“文件”小图标",
        "output": "<thought>\n我们需要在弹窗中点击第一个“文件”icon。可以使用`ClickIcon`关键字，并指定`base=POPUP`来定位到弹窗中的元素。因为我们点击的是第一个“文件”icon，所以`idx=0`。\n</thought>\n\n<code_block>\n# 点击弹窗中的第一个“文件”icon\nClickIcon | file | idx=0 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击基础信息旁边的监听 Tab",
        "output": "<thought>\n在这个场景中，我们需要点击一个靠近文本\"基础信息\"的\"监听\" Tab。可以使用Click关键字，并结合near参数来实现。通过指定near=基础信息，确保我们点击的是正确的\"监听\" Tab。\n</thought>\n\n<code_block>\n# 点击基础信息旁边的监听 Tab\nClick | 监听 | near=基础信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “提交”，出现弹窗后选择“以上均没有”按钮，再点击“补签合同”，再点击“提交”按钮，等待页面出现 “提交成功”，等待页面加载完成，超时时间为60s，在搜索合同中输入 ‘auto合同测试’ 并回车，最后点击${role_name}所在行的操作列的编辑",
        "output": "<thought>\n解决这个问题需要依次进行点击和操作。首先点击“提交”按钮，然后在弹窗中选择“以上均没有”，接着点击“补签合同”，再点击“提交”按钮。然后等待页面显示“提交成功”并等待页面加载完成，超时时间设置为60秒。接着在“搜索合同”中输入“auto合同测试”并回车。最后点击${role_name}所在行的操作列的编辑按钮。\n</thought>\n\n<code_block>\n# 点击提交按钮\nClick | 提交\n\n# 在弹窗中选择“以上均没有”按钮\nClick | 以上均没有 | base=POPUP\n\n# 点击补签合同\nClick | 补签合同\n\n# 再次点击提交按钮\nClick | 提交\n\n# 等待页面出现“提交成功”\nWaitText | 提交成功\n\n# 页面加载完成，超时时间为60秒\nWaitLoading | timeout=60\n\n# 在搜索合同中输入‘auto合同测试’并回车\nSetField | 搜索合同 | auto合同测试 | enter=True\n\n# 点击${role_name}所在行的操作列的编辑\nClickTextOfCell | ${role_name} | 操作 | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前日期前一天的日期，格式为\"2024-11-18\"，并存入参数data_time",
        "output": "<thought>\n为了解决这个问题，我们需要利用RF标准库中的日期时间处理关键字。首先，我们可以使用Get Current Date获取当前日期，然后使用Subtract Time From Date减去一天来得到前一天的日期。最后，使用Convert Date将日期格式化为所需的\"2024-11-18\"格式，并将结果存入参数data_time。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date\n\n# 减去一天以获得前一天的日期\n${previous_date}  Subtract Time From Date  ${current_date}  1 day\n\n# 将日期转换为指定格式\n${data_time}  Convert Date  ${previous_date}  result_format=%Y-%m-%d\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（uitest， 操作）中的移除",
        "output": "<thought>\n场景是需要点击表格中特定的单元格，所以可以使用关键字ClickTextOfCell. 参数row_name_or_id和col_name_or_id即对应的行名（uitest）和列名（操作),值对应的是移除.\n\n</thought>\n\n<code_block>\n# 点击\"uitest\"行\"操作\"列中的\"移除\"文本\nClickTextOfCell | uitest | 操作 | 移除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 Payer账号汇总 右边的第二个小图标",
        "output": "<thought>\n要解决这个问题，我们需要选择正确的关键字来点击弹窗中\"Payer账号汇总\"右边的第二个icon。根据关键字描述，`ClickIconToTheDirectionOf` 可以用于这种场景。我们将使用 `base=POPUP` 来指定这是弹窗中的操作。\n</thought>\n\n<code_block>\n# 点击弹窗中 'Payer账号汇总' 右边的第二个icon\nClickIconToTheDirectionOf | :contains(Payer账号汇总) | right | idx=1 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断元素 ${selector} 是否存在",
        "output": "<thought>\n根据需求，我们需要判断一个指定的元素是否存在。这可以通过使用关键字IsAnyElemExisting实现。\n</thought>\n\n<code_block>\n# 判断元素 ${selector} 是否存在\n${exist}  IsAnyElemExisting | ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "一级审批人下拉框输入account1并点击选择account1",
        "output": "<thought>\n首先，需要在“一级审批人”下拉框中输入文本`account1`。接着，需要选择该选项。我们可以使用`SetField`关键字来完成文本输入。随后，使用`SelectOption`关键字来进行选择操作。\n</thought>\n\n<code_block>\n# 在一级审批人下拉框中输入account1\nSetField | 一级审批人 | account1\n\n# 选择account1选项\nSelectOption | account1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 syd0219这个表格第一行的内容",
        "output": "<thought>\n要获取表格第一行的内容，可以使用GetRowValues关键字。这个关键字需要指定表格的行标识（可以是行号或行文本）和表格标识（tbl参数）。对于syd0219这个表格，我们需要获取第一行，因此row_name/id参数可以是1（表示第一行），tbl参数为syd0219。\n\n由于没有提到表格所在的基准元素（base参数），我们可以省略这个参数，使用默认值。\n</thought>\n\n<code_block>\n# 获取syd0219表格第一行的内容\n@{row_values}  GetRowValues  1  tbl=syd0219\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验class=bbb 且文案包含 甲方大爷 的区域中包含：乙方主体、姓名",
        "output": "<thought>\n1. 首先需要定位到class为bbb且包含\"甲方大爷\"文本的区域，这可以通过组合jQuery选择器和CheckHasText关键字实现\n2. 然后在该区域内校验包含\"乙方主体\"和\"姓名\"文本，需要将找到的区域作为base参数传递给CheckHasText\n3. 选择器构造：使用jQuery的:contains()选择器匹配包含特定文本的元素，结合class选择器\n4. 由于是校验同时包含两个文本，使用CheckHasText而不是CheckHasAnyText\n5. 需要先确保目标区域存在，再校验其内容\n</thought>\n\n<code_block>\n# 构造选择器定位class=bbb且包含\"甲方大爷\"的区域\n${target_area}  Set Variable  [class=bbb]:contains(\"甲方大爷\")\n\n# 在目标区域内校验包含\"乙方主体\"和\"姓名\"\nCheckHasText  乙方主体  姓名  base=${target_area}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 重新加载，点击重新加载，base弹窗",
        "output": "<thought>\n我们首先需要检测页面上是否存在“重新加载”文本。如果存在，则点击它，并且点击动作应该基于弹窗。我们可以使用IsAnyTextExisting来检查文本的存在性，然后使用Click关键字进行点击。\n</thought>\n\n<code_block>\n# 检查页面是否存在“重新加载”文本\n${exist}  IsAnyTextExisting | 重新加载\n\n# 如果文本存在，点击“重新加载”\nIF  ${exist}\n    Click  重新加载  | base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘类型’ 为ClickHouse，尝试点击 ‘高级配置’，然后在 ‘集群’ 中输入 rangers，并点击确定，然后等待确定按钮消失",
        "output": "<thought>\n首先，使用`SetField`关键字将‘类型’设置为ClickHouse。然后使用`ClickAny`关键字点击‘高级配置’，接着在‘集群’中输入rangers。最后，使用`Click`点击‘确定’，并使用`WaitTextDisappear`等待‘确定’按钮消失。\n</thought>\n\n<code_block>\n# 设置类型为ClickHouse\nSetField | 类型 | ClickHouse\n\n# 尝试点击高级配置\nClickAny | 高级配置\n\n# 在集群中输入rangers\nSetField | 集群 | rangers\n\n# 点击确定\nClick | 确定\n\n# 等待确定按钮消失\nWaitElemDisappear | button:contains(确定)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击：视频个播、语音聊天室、电台、虚拟、宫格聊天室、直播小玩法、游戏 等多个 class*=tabItem，每次点击后需要等页面加载完，然后获取 class*=tabContent 元素的文案，校验其长度 > 200，使用循环实现",
        "output": "<thought>\n依次点击多个class*=tabItem的元素，每次点击后等待页面加载完成，然后获取class*=tabContent的文案，校验其长度>200。使用循环来实现这些操作。\n</thought>\n\n<code_block>\n# 定义tabItems和tabContents选择器\n${tabItems}  Create List  视频个播  语音聊天室  电台  虚拟  宫格聊天室  直播小玩法  游戏\n${tabContentSelector}  Set Variable  [class*=tabContent]\n\n# 循环点击tabItems，每次点击后等待页面加载并校验tabContent的文案长度\nFOR  ${tabItem}  IN  @{tabItems}\n    # 点击tabItem\n    ClickElem  [class*=tabItem]:contains(${tabItem})\n\n    # 等待页面加载完成\n    WaitLoading\n\n    # 获取tabContent的文本\n    ${tabContent}  GetElemText  ${tabContentSelector}\n\n    # 校验tabContent的文本长度是否大于200\n    ${contentLength}  Evaluate  len(${tabContent})\n    Should Be True  ${contentLength} > 200\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 货款充值，将‘代金券面值’移动到视野内，在请输入金额的输入框中输入400，点击立即充值，点击确认充值",
        "output": "<thought>\n考虑使用Click关键字点击“货款充值”，然后使用MoveIntoView关键字将“代金券面值”移动到视野内。接着，使用SetField关键字在“请输入金额”字段中输入400。最后，依次使用ClickTextOneByOne关键字点击“立即充值”和“确认充值”。\n</thought>\n\n<code_block>\n# 点击货款充值\nClick | 货款充值\n\n# 将代金券面值移动到视野内\nMoveIntoView | :contains(代金券面值)\n\n# 在请输入金额中输入400\nSetField | 请输入金额 | 400\n\n# 依次点击立即充值和确认充值\nClickTextOneByOne | 立即充值 | 确认充值\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击底部的编辑按钮",
        "output": "<thought>\n为了点击底部的编辑按钮，我们可以使用 ClickTextToTheDirectionOf 关键字，并将基准元素设置为屏幕中心（SCREEN_CENTER）。方向设置为 bottom，然后选择文本为“编辑”的按钮。\n</thought>\n\n<code_block>\n# 点击屏幕底部的编辑按钮\nClickTextToTheDirectionOf | SCREEN_CENTER | bottom | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“修改${name}事件的展示名和描述为”，接受参数show_name和desc\n1. 向 ‘搜索事件名称’框中输入 name, 查询\n2. 点击  svg class包含arco-icon-plus-circle 的第2个元素\n3. 查找div class包含textAreaContainer的元素 ele\n4. 向元素 ele中输入 text内容，回车，\n5. 校验页面包含 ‘修改事件展示名成功’",
        "output": "<thought>\n解决这个问题需要按照给定的步骤进行操作。可以使用`SetField`和`ClickElem`等关键字来进行交互。首先是输入搜索关键词，然后点击指定元素。接下来查找特定元素后进行输入，最后检查成功信息。\n</thought>\n\n<code_block>\n*** Keywords ***\n修改${name}事件的展示名和描述为\n    [Arguments]  ${show_name}  ${desc}\n    \n    # Step 1: 向‘搜索事件名称’框中输入 name, 查询\n    SetField  搜索事件名称  ${name} | enter=True\n\n    # Step 2: 点击 svg class包含arco-icon-plus-circle 的第2个元素\n    ClickElem  svg[class*=arco-icon-plus-circle]:eq(1)\n\n    # Step 3: 查找 div class 包含 textAreaContainer 的元素 ele\n    ${ele}  FindElem  div[class*=textAreaContainer]\n\n    # Step 4: 向元素 ele 中输入 show_name 和 desc, 回车\n    FillArea  ${ele}  ${show_name}  ${desc} | enter=True\n\n    # Step 5: 校验页面包含 ‘修改事件展示名成功’\n    CheckHasText  修改事件展示名成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击卡片归还，点击人工还卡，输入卡号“100200300”，点击归还办公室input/textarea，选择“北京市-盈都大厦C座（测试）”，最后点击确定",
        "output": "<thought>\n解决问题思路：\n首先，通过调用Click或ClickTextOneByOne关键字点击\"卡片归还\"和\"人工还卡\"。然后，使用SetField关键字输入卡号\"100200300\"。接着，使用Click点击归还办公室，并使用SetField关键字设置归还办公室为\"北京市-盈都大厦C座（测试）\"。最后，再次使用Click关键字点击\"确定\"。\n</thought>\n\n<code_block>\n# 点击卡片归还和人工还卡\nClickTextOneByOne | 卡片归还 | 人工还卡\n\n# 输入卡号\nSetField | 卡号 | 100200300\n\n# 点击归还办公室\nClick | 归还办公室\n\n# 选择归还办公室\nSetField | 归还办公室 | 北京市-盈都大厦C座（测试）\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "1.打开浏览器访问主页·MAIN_PAGE\n2.解密·user,sub_user, password,然后将它们分别输入到·主账号名、子用户、和密码·字段中\n点击登录按钮",
        "output": "<thought>\n1. 首先需要使用OpenBrowser关键字打开浏览器并访问MAIN_PAGE\n2. 需要使用DecryptStr关键字解密user,sub_user和password三个加密字符串\n3. 使用SetField或BatchSetFields关键字将解密后的值填入对应的字段中\n4. 最后使用Click或ClickElem关键字点击登录按钮\n5. 考虑到需要填写多个字段，使用BatchSetFields会更简洁高效\n</thought>\n\n<code_block>\n# 打开浏览器访问主页\nOpenBrowser  ${MAIN_PAGE}\n\n# 解密账号密码\n${user}  DecryptStr  ${user}\n${sub_user}  DecryptStr  ${sub_user}  \n${password}  DecryptStr  ${password}\n\n# 批量设置账号密码字段\nBatchSetFields  主账号名=${user}  子用户=${sub_user}  密码=${password}\n\n# 点击登录按钮\nClick  登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 等待页面加载完成后，设置搜索Agent关键字为：“【自动化测试专用】”，等待0.5s后，检测页面中class=ste-card的元素至少要有一个",
        "output": "\n    \n<thought>\n 首先需要等待页面加载完成，可以使用`WaitLoading`关键字。然后使用`SetField`关键字设置搜索Agent的值。接下来使用`Sleep`关键字等待0.5秒。最后，使用`GetElemCount`关键字检查页面中class=ste-card的元素数量。\n </thought>\n \n <code_block>\n # 等待页面加载完成\n WaitLoading\n \n # 设置搜索Agent关键字为：“【自动化测试专用】”\n SetField | Agent | 【自动化测试专用】\n \n # 等待0.5秒\n Sleep | 0.5s\n \n # 检测页面中class=ste-card的元素至少有一个\n ${count}  GetElemCount | [class=ste-card]\n IF  ${count} < 1\n     Fail | 元素数量不足\n END\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class=arco-tree-node-title-text元素中的autotest_ui_规则",
        "output": "<thought>\n首先，需要在class为arco-tree-node-title-text的元素中找到文本为autotest_ui_规则的元素。这可以通过组合FindElem关键字和合适的jQuery选择器来实现。找到该元素后，使用ClickElem关键字进行点击。\n</thought>\n\n<code_block>\n# 查找class=arco-tree-node-title-text元素中的autotest_ui_规则\n${elem}  FindElem | [class=arco-tree-node-title-text]:contains(autotest_ui_规则)\n\n# 点击找到的元素\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击全端口模式右侧的元素，等待页面出现 签字 超时20，点击页面空白处，在光标位置输入快捷键 CTRL+X",
        "output": "<thought>\n首先需要找到全端口模式右侧的元素，然后点击它，这可用ClickElemToTheDirectionOf，并将selector设置为*。接下来，等待页面出现“签字”文本，超时时间为20秒。之后，点击页面空白处。最后，在当前光标位置输入快捷键 CTRL+X 可以使用 SeleniumLibrary 中的 Press Keys 关键字。\n</thought>\n\n<code_block>\n# 点击全端口模式右侧的任意元素\nClickElemToTheDirectionOf | 全端口模式 | right | *\n\n# 等待页面出现签字\nWaitText | 签字 | timeout=20\n\n# 点击页面空白处\nClickWhiteArea\n\n# 在光标位置输入快捷键 CTRL+X\nPress Keys | None | CTRL+X\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在本次修改库存免审立即生效，则点击确定",
        "output": "<thought>\n首先，我们需要判断页面上是否存在文本“本次修改库存免审立即生效”。如果该文本存在，我们需要点击“确定”按钮。为此，可以使用IsAnyTextExisting关键字判断文本是否存在，然后使用RF的IF语法来决定是否点击“确定”。\n</thought>\n\n<code_block>\n# 判断页面是否有文本“本次修改库存免审立即生效”\n${exist}  IsAnyTextExisting | 本次修改库存免审立即生效\n\n# 如果存在该文本，则点击“确定”\nIF  $exist\n    Click  确定\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建名为 '大屏URL' 的全局变量，其值为 MAIN_PAGE、VSCREEN_HOST、APPID 这三个变量相加",
        "output": "<thought>\n我们需要创建一个名为 \"大屏URL\" 的全局变量，其值是已知的三个变量 MAIN_PAGE、VSCREEN_HOST 和 APPID 的相加结果。考虑使用 BuiltIn 库中的 \"Set Global Variable\" 和 \"Catenate\" 关键字来完成这个任务。\n</thought>\n\n<code_block>\n# 使用已知变量 MAIN_PAGE, VSCREEN_HOST, APPID 生成全局变量 \"大屏URL\"\n${大屏URL}  Catenate  SEPARATOR=  ${MAIN_PAGE}  ${VSCREEN_HOST}  ${APPID}\nSet Global Variable  ${大屏URL}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击取消边上的确认下架",
        "output": "<thought>\n首先，我需要找到文本“取消”的位置，并点击其右边的文本“确认下架”。可以使用ClickTextToTheDirectionOf关键字来实现。\n</thought>\n\n<code_block>\n# 点击“取消”右边的“确认下架”\nClickTextToTheDirectionOf | 取消 | right | 确认下架\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 检查页面无报错",
        "output": "<thought>\n 为检查页面无报错，可以使用`CheckErrMsg`关键字来确认页面上没有异常提示。通过这个关键字，如果页面存在错误提示，它将会抛出异常。\n </thought>\n \n <code_block>\n # 检查页面是否存在错误提示\n CheckErrMsg\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取退还方式的值，断言等于现场退还",
        "output": "<thought>\n首先需要获取字段\"退还方式\"的值，然后断言该值等于\"现场退还\"。可以使用GetFieldVal关键字来获取字段值，再使用Should Be Equal As Strings关键字进行断言。\n</thought>\n\n<code_block>\n# 获取字段\"退还方式\"的值\n${val}  GetFieldVal | 退还方式\n\n# 断言获取的值等于\"现场退还\"\nShould Be Equal As Strings  ${val}  现场退还\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "商品名称设置为 UI-景区-园内套票-服务商-免审，点击商品名称右边的查询",
        "output": "<thought>\n首先需要设置商品名称为 \"UI-景区-园内套票-服务商-免审\"，可以使用关键字 `SetField`。然后需要点击商品名称右边的查询按钮，可以使用 `ClickTextToTheDirectionOf` 关键字来完成。\n</thought>\n\n<code_block>\n# 设置商品名称\nSetField | 商品名称 | UI-景区-园内套票-服务商-免审\n\n# 点击商品名称右边的查询\nClickTextToTheDirectionOf | 商品名称 | right | 查询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标停留在title为${experiment_name}的li标签位置",
        "output": "<thought>\n解决这个问题，我首先设置一个jquery选择器，匹配title为测试的li标签。然后我使用\"MoToElem\"关键字将鼠标移动到匹配的元素上。这样，鼠标就会停在title为${experiment_name}的li标签的位置。\n</thought>\n\n<code_block>\n# 定义一个jquery选择器，以匹配title为experiment_name的li标签\n${selector}=  Set Variable  li[title=\"${experiment_name}\"]\n\n# 将鼠标移动到匹配的li标签上\nMoToElem | ${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "附加说明方框输入 测试软件申请",
        "output": "<thought>\n解决问题思路\n\n此问题要求我们填入 \"测试软件申请\" 到一个叫附加说明的输入框字段。我们可以使用SetField关键字来填入这个值。\n</thought>\n\n<code_block>\n# 使用SetField关键字，填写附加说明的值为 测试软件申请\nSetField  | 附加说明 | 测试软件申请\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查属性更新成功",
        "output": "<thought>\n我的解决思路是，首先了解属性更新成功的表现，这可能表现为页面上出现某些文本或元素。然后利用Robot Framework的文本或元素校验关键字对这些项进行校验。如果页面上的表现与预期不符，那么测试就会失败，这表示属性更新操作未能成功。\n</thought>\n\n<code_block>\n# 假设属性更新成功后，页面上会出现\"属性更新成功\"这样的文本提示\nCheckHasText | 属性更新成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将 ${a}转换成整型",
        "output": "<thought>\n 由于没有直接的关键字可以将变量转换为整型，所以可以使用`Evaluate`关键字执行Python代码来进行转换。\n </thought>\n \n <code_block>\n # 将字符串变量转换为整型\n ${int_value}  Evaluate | int(${a})\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“执行组合插件校验看板时间”的关键字，作用是先点击请输入流水线名称，然后输入刷新看板完成时间后点击回车，等待页面加载完成后点击执行，等待1秒后点击请选择日期，等待1秒后点击今天，最后点击执行按钮，等待3秒后校验执行状态列为成功",
        "output": "<thought>\n为了解决这个问题，我们需要按照给定的操作步骤依次调用对应的关键字。在执行过程中，我们需要：\n1. 点击文本“请输入流水线名称”\n2. 输入“刷新看板完成时间”并回车\n3. 等待页面加载完成\n4. 点击文本“执行”\n5. 等待1秒\n6. 点击文本“请选择日期”\n7. 等待1秒\n8. 点击文本“今天”\n9. 点击执行按钮\n10. 等待3秒\n11. 校验执行状态列为“成功”\n\n关键字选择：\n- Click：用于点击文本\n- SendText：用于在光标处输入文本并回车\n- WaitLoading：等待页面加载完成\n- Sleep：用于等待指定时间\n- CheckColHas：用于校验表格列包含指定文本\n</thought>\n\n<code_block>\n*** Keywords ***\n执行组合插件校验看板时间\n    # 点击“请输入流水线名称”\n    Click  请输入流水线名称\n    \n    # 输入“刷新看板完成时间”并回车\n    SendText  刷新看板完成时间  enter=True\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 点击“执行”\n    Click  执行\n    \n    # 等待1秒\n    Sleep  1s\n    \n    # 点击“请选择日期”\n    Click  请选择日期\n    \n    # 等待1秒\n    Sleep  1s\n    \n    # 点击“今天”\n    Click  今天\n    \n    # 点击“执行”按钮\n    Click  执行\n    \n    # 等待3秒\n    Sleep  3s\n    \n    # 校验执行状态列为“成功”\n    CheckColHas  执行状态  成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在表格中随机选取一行 点击其中的 查看详情",
        "output": "<thought>\n解决问题思路：首先需要获取表格中的总行数，然后随机生成一个在总行数范围内的行号，最后在该行中点击“查看详情”。为此，我们使用GetRowCount关键字获取行数，ClickTextOfRow来点击目标行中的“查看详情”。\n</thought>\n\n<code_block>\n# 获取表格的总行数\n${row_count}  GetRowCount\n\n# 生成一个随机行号\n${random_row}  Evaluate  random.randint(1, ${row_count})  random\n\n# 在随机选取的行中点击“查看详情”\nClickTextOfRow | ${random_row} | 查看详情\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击应用场景左边的业务线，点击导出,等待1秒,检测页面是否出现“下载中,稍后请在消息中心查看结果”,如果出现则截图",
        "output": "<thought>\n在该场景中，我们需要完成几步操作：首先，点击应用场景左边的业务线，然后点击导出按钮。接着需要等待1秒，以确保点击后的状态更新。最后，我们需要检查页面上是否出现了包含“下载中,稍后请在消息中心查看结果”的文本，如果出现该文本，则进行截图操作。\n\n为此我们将使用以下关键字：\n1. `ClickTextToTheDirectionOf`：用于点击应用场景左边的业务线。\n2. `ClickTextOneByOne`：用于依次点击导出。\n3. `Sleep`：用于等待1秒。\n4. `IsAllTextExisting`：用于判断页面上是否存在指定文本。\n5. `Screenshot`：用于截图。\n\n我们需要注意的是，由于应用场景和业务线是相对位置，所以使用`ClickTextToTheDirectionOf`来完成点击操作，剩余的步骤可以直接根据文本内容进行操作。\n</thought>\n\n<code_block>\n# 点击应用场景左边的业务线\nClickTextToTheDirectionOf | 应用场景 | left | 业务线\n\n# 点击导出\nClickTextOneByOne | 导出\n\n# 等待1秒\nSleep | 1s\n\n# 检查页面是否包含文本“下载中,稍后请在消息中心查看结果”\n${exist} | IsAllTextExisting | 下载中 | 稍后请在消息中心查看结果\n\n# 如果文本存在，则截图\nIF | ${exist}\n    Screenshot\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "传第一个文件：data/cert_file.crt，然后上传第二个文件：data/cert_private_file.pem",
        "output": "<thought>\n为解决这个问题，我需要使用关键字UploadFile上传文件。因为题目中给出的文件路径是固定的，所以直接将路径作为参数传给UploadFile即可。第一个文件要上传到第一个上传控件，第二个文件上传到第二个上传控件，所以分别设置idx为0和1。idx是从0开始的，所以第一个控件对应的idx值为0，第二个控件对应的idx值为1。\n</thought>\n\n<code_block>\n# 上传第一个文件data/cert_file.crt\nUploadFile | data/cert_file.crt | idx=0\n\n# 上传第二个文件data/cert_private_file.pem\nUploadFile | data/cert_private_file.pem | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：新建第${i}组的事件属性，接受kwargs参数，主要逻辑是：\n1. 先判断第 i 个，class包含formContainer的元素ele是否存在，如果不存在就点击 '添加属性'，最多循环5次\n2. 如果ele已经存在，则对 kwargs 的每一个key和value 把元素 ele 中的字段key设置成对应的value",
        "output": "<thought>\n首先，我们需要判断第 i 个特定 class 的元素是否存在。如果不存在，需要点击\"添加属性\"按钮，最多尝试五次。然后，如果元素存在，我们对 kwargs 中的每个键值对，设置元素内相应字段的值。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建第${i}组的事件属性\n    [Arguments]  &{kwargs}\n    ${exist}   IsAnyElemExisting  [class*=formContainer]:eq(${i}-1)\n    FOR  ${counter}  IN RANGE  5\n        Exit For Loop If  ${exist}\n        Click  添加属性\n        ${exist} =  IsAnyElemExisting  [class*=formContainer]:eq(${i}-1)\n    END\n    IF  ${exist}\n        FOR  ${key}  ${value}  IN  &{kwargs}\n            SetField  ${key}  ${value}  base=[class*=formContainer]:eq(${i}-1)\n        END\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 弹窗中 “产品汇总”表 15列中 包含0.00 ",
        "output": "<thought>\n这个问题需要验证弹窗中的“产品汇总”表的第15列是否包含0.00。我们可以使用\"CheckColHas\"关键字来进行这个校验，其中tbl参数设为\"产品汇总\"，col_name_or_id设为15，@texts设为0.00，base设为\"POPUP\"来表示弹窗。\n</thought>\n\n<code_block>\n# 校验弹窗中的“产品汇总”表的15列包含0.00\nCheckColHas | 15 | 0.00 | tbl=产品汇总 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到class前缀为style__UILeft- 区域内 出现的第二个 ${search_value}文字，并点击它",
        "output": "<thought>\n首先，我们需要定位到class前缀为style__UILeft-的区域，然后在这个区域内找到第二个${search_value}文字。最后，我们可以使用Click关键字来点击这个元素。我们可以使用FindByText和ClickElem关键字来实现这个过程。\n</thought>\n\n<code_block>\n# 找到class前缀为style__UILeft-的区域\n${base_elem}  FindElem  | div[class^=style__UILeft-]\n\n# 在该区域内找到第二个${search_value}文字\n${target_elem}  FindByText  | ${search_value} | idx=1 | base=${base_elem}\n\n# 点击找到的元素\nClickElem | ${target_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验代金券类型为 通兑券",
        "output": "<thought>\n在这个场景中，我们需要验证页面上是否存在包含特定文本的字段。根据提示，我们需要确认页面上代金券类型是\"通兑券\"。这可以通过校验这个字段的内容来实现。\n\n我们可以使用`CheckFieldContains`关键字来验证名为\"代金券类型\"的字段是否包含\"通兑券\"文本。此关键字允许我们指定需要验证的字段的名称以及要检查的文本内容。\n</thought>\n\n<code_block>\n# 校验名为\"代金券类型\"的页面字段包含文本\"通兑券\"\nCheckFieldContains | 代金券类型 | 通兑券\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击feature状态右侧的开关",
        "output": "<thought>\n首先需要找到\"feature状态\"文本，然后点击其右侧的开关。可以使用 `ClickElemToTheDirectionOf` 关键字，基准元素为 \"feature状态\"，方向为 right，目标元素为代表开关的 jQuery 选择器。\n</thought>\n\n<code_block>\n# 点击feature状态右侧的开关\nClickElemToTheDirectionOf | feature状态 | right | [class*=switch]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验顾客实际需支付右侧存在 26元 若校验不通过不阻塞后面步骤",
        "output": "<thought>\n要求校验顾客实际需支付右侧存在文本“26元”，校验失败不阻塞后续步骤。可以使用 CheckHasTextToTheDirectionOf 进行校验，也可以结合 Robot Framework 的 `Run Keyword And Continue On Failure` 关键字来保证即便校验失败也不会阻塞后面的步骤。\n</thought>\n\n<code_block>\n# 校验顾客实际需支付右方有文本26元，校验失败不阻塞后续步骤\nRun Keyword And Continue On Failure  CheckHasTextToTheDirectionOf  顾客实际需支付  right  26元\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击张三所在表格行的分享icon",
        "output": "<thought>\n在“点击张三所在表格行的分享icon”这个场景中，根据描述，需要使用`ClickIconOfRow`关键字。该关键字用于点击某一表格行中的小图标。我们需要明确表格行的标识符（这里是“张三”）以及要点击的图标名称（“分享”），基于此信息来完成需求。\n</thought>\n\n<code_block>\n# 点击张三所在表格行的分享icon\nClickIconOfRow | 张三 | share\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${t_body}中第一个class=“arco-table-tr”的页面元素，包含：“选项 1”、“1”、“50%”",
        "output": "<thought>\n1. 首先需要定位到${t_body}中第一个class=\"arco-table-tr\"的元素，可以使用FindElem关键字结合jquery选择器\n2. 然后需要校验该元素包含三个指定的文本：\"选项 1\"、\"1\"、\"50%\"，可以使用CheckHasText关键字\n3. 由于CheckHasText需要指定base参数来限定查找范围，这里应该使用定位到的元素作为base\n4. 选择器应该使用\"[class=arco-table-tr]:eq(0)\"来获取第一个匹配元素\n</thought>\n\n<code_block>\n# 定位第一个class为arco-table-tr的元素\n${first_row}  FindElem  [class=arco-table-tr]:eq(0)  base=${t_body}\n\n# 校验该元素包含指定文本\nCheckHasText  选项 1  1  50%  base=${first_row}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到新建助推下方的助推详情并进行点击",
        "output": "<thought>\n分析步骤：\n\n1. 我们需要找到“新建助推”这个元素。假设该元素是唯一的或者可以通过某个选择器定位。\n2. 然后，我们需要查找“新建助推”下方的“助推详情”。根据提供的关键字描述，适合使用“FindTextToTheDirectionOf”来查找“新建助推”下方的“助推详情”。\n3. 找到“助推详情”后，需要对其进行点击操作。\n\n选择的关键字：\n- FindTextToTheDirectionOf：用于查找“新建助推”下方的“助推详情”。\n- ClickElem：用于点击找到的“助推详情”。\n</thought>\n\n<code_block>\n# 查找新建助推下方的助推详情\n${elem}  FindTextToTheDirectionOf | 新建助推 | bottom | 助推详情\n\n# 点击找到的助推详情\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认 流程记录 表格第一行，处理方式为 领取 ，处理内容为 说明: UI自动化-实物借用",
        "output": "# 校验\"流程记录\"表格的第一行的\"处理方式\"为\"领取\"\nCheckCellHas | 1 | 处理方式 | 领取 | tbl=流程记录\n\n# 校验\"流程记录\"表格的第一行的\"处理内容\"为\"说明: UI自动化-实物借用\"\nCheckCellHas | 1 | 处理内容 | 说明: UI自动化-实物借用 | tbl=流程记录"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格第一行的状态，为已完成",
        "output": "<thought>\n这个问题相对比较简单，直接使用关键字 CheckCellHas 就可以解决。首先，确定需要检查的表格行和列，然后将待检查的文本设置为“已完成”。\n</thought>\n\n<code_block>\n# 检查表格第一行的状态为已完成\nCheckCellHas | 1 | 状态 | 已完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表头行中的 checkbox",
        "output": "<thought>\n要点击表格表头行中的checkbox，我们可以使用ClickElemOfRow关键字，其中row_name_or_id=HEAD表示表头行。为了确保选择复选框，我们使用选择器:checkbox。\n</thought>\n\n<code_block>\n# 点击表头行中的checkbox\nClickElemOfRow | HEAD | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "求值  ${line_no} 减 1， 返回 ${index}",
        "output": "<thought>\n这个场景相对简单，可以直接使用`Evaluate`关键字，将`${line_no} - 1`作为表达式传入，求出结果之后赋值给`${index}`。\n</thought>\n\n<code_block>\n# 使用Evaluate关键字计算${line_no} - 1， 结果赋值给${index}\n${index}    Evaluate    ${line_no} - 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "#页面向下滚动",
        "output": "\n    \n<thought>\n 为了实现页面向下滚动，我们可以使用PageDown关键字。通过指定times参数，我们可以控制页面滚动的次数。对于这个简单的场景，只需要调用一次PageDown即可。\n </thought>\n \n <code_block>\n # 页面向下滚动1次\n PageDown | 1\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“请选择单个选项”这个表格第3行中的“查看详情”",
        "output": "<thought>\n1. 首先需要明确要操作的目标元素是表格中的特定行和特定文本\n2. 根据需求描述，表格名称是\"请选择单个选项\"，第3行中的\"查看详情\"文本需要被点击\n3. 查看提供的关键字，ClickTextOfRow适合这个场景，因为它可以点击表格行中的特定文本\n4. 参数设置：row_name_or_id=3(第3行)，text=查看详情，tbl=请选择单个选项\n5. 不需要base参数，因为表格不在弹窗中\n</thought>\n\n<code_block>\n# 点击\"请选择单个选项\"表格第3行中的\"查看详情\"\nClickTextOfRow | 3 | 查看详情 | tbl=请选择单个选项\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向第一个class包含ff-feature-variant的元素中的那个 “特征值” 字段中输入：xx",
        "output": "<thought>\n对于这个问题，我们需要在第一个class包含“ff-feature-variant”元素中的“特征值”字段中输入“xx”。我们可以分解为以下步骤：\n\n1. 使用jQuery选择器定位到class包含“ff-feature-variant”的第一个元素。\n2. 使用SetField关键字在该元素中的“特征值”字段中输入“xx”。\n\n需要注意的是，选择器对应的第一个元素应表示为:eq(0)。\n</thought>\n\n<code_block>\n# 定位到class包含“ff-feature-variant”的第一个元素，并在其中的“特征值”字段中输入“xx”\nSetField | 特征值 | xx | base=[class*=ff-feature-variant]:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${is_enter} 真则 点击xxx, 否则 点击 yyy",
        "output": "<thought>\n根据需求，我们需要判断 `${is_enter}` 是否为真。如果为真，则点击文本 \"xxx\"；否则，点击文本 \"yyy\"。可以使用 RF 的 IF/ELSE 语法来实现。\n</thought>\n\n<code_block>\n# 根据变量值点击不同的文本\nIF  ${is_enter}\n    Click  xxx\nELSE\n    Click  yyy\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "回退到上一个页面",
        "output": "<thought>\n为了能够回退到上一个页面，我们可以使用已提供的关键字 PageBack 来实现该功能。这个关键字将帮助我们在当前浏览器会话中返回到之前的页面，而不考虑其他窗口或浏览器实例。因此，对于此场景，PageBack 是最合适的选择。\n</thought>\n\n<code_block>\n# 回退到上一个页面\nPageBack\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对生效条件右侧输入项依次填入Tag_1051、近线层、10、因子执行失败率、10",
        "output": "<thought>\n根据题目描述，我们需要在同一个输入框中依次输入不同的值。我们可以使用RobotFramework的SetField关键字来完成这个任务。\n</thought>\n\n<code_block>\n# 对生效条件右侧输入项依次输入Tag_1051、近线层、10、因子执行失败率、10\nSetField | 生效条件 | Tag_1051 | 近线层 | 10 | 因子执行失败率 | 10\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 将变更结果设置为：成功",
        "output": "<thought>\n 解决问题思路：首先需要找到变更结果这个字段，然后使用 SetField 关键字将其设置为成功。\n </thought>\n \n <code_block>\n # 将变更结果设置为：成功\n SetField | 变更结果 | 成功\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把feishu_session变量放在全局变量中",
        "output": "<thought>\n在Robot Framework中，我们可以使用\"Set Global Variable\"关键词将变量设置为全局变量。这样，该变量就可以在整个测试套件中使用，而不仅仅是在单个测试用例或关键词中。这样我们就可以将feishu_session变量设置为全局变量。\n</thought>\n\n<code_block>\n# 设置全局变量 feishu_session\nSet Global Variable  ${feishu_session}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${domain} 后面 编辑",
        "output": "<thought>\n首先，我们需要点击一个特定元素 `${domain}` 后面的文本 `编辑`。为此，我们可以使用 `ClickTextToTheDirectionOf` 关键字。该关键字允许我们指定一个基准元素，然后在该基准元素的特定方向上点击目标文本。在这种情况下，基准元素是 `${domain}`，目标文本是 `编辑`，方向是 `right`。\n</thought>\n\n<code_block>\n# 点击 ${domain} 右边的 编辑\nClickTextToTheDirectionOf | ${domain} | right | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击空白位置，判断class为ovui-select__options:eq(1)下是否有7个class为ovui-option__content，有则跳过，无则报错",
        "output": "<thought>\n首先，我们需要找到空白区域，然后点击它。接下来，我们需要检查class为ovui-select__options:eq(1)内的class为ovui-option__content的元素数量。如果数量是7个，则不需要进一步操作；如果不是7个，则抛出错误。在解决方案中，我们可以使用ClickWhiteArea关键字点击空白处，然后使用GetElemCount关键字获取目标元素的数量。通过判断数量是否为7，决定是否抛出异常。\n</thought>\n\n<code_block>\n# 点击空白区域\nClickWhiteArea\n\n# 获取class为ovui-select__options:eq(1)下class为ovui-option__content的元素数量\n${count}  GetElemCount | [class=ovui-select__options]:eq(1) [class=ovui-option__content]\n\n# 判断元素数量是否为7\nIF  ${count} != 7\n    Fail  元素数量不为7，当前数量为${count}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "经办人 清空，经办组 选择 艳如测试组，点击弹框上的确定，点击 创建时间 上方右侧刷新按钮，点击 弹窗的 变更 按钮，点击 页面 右侧刷新按钮",
        "output": "<thought>\n首先需要解决的步骤是：\n\n1. 清空“经办人”字段，使用 `SetField`。\n2. 为“经办组”字段选择“艳如测试组”，使用 `SelectOptionForField`。\n3. 点击弹窗上的“确定”，使用 `Click` 和 `base=POPUP`。\n4. 点击“创建时间”上方的右侧刷新按钮，可以用 `ClickTextToTheDirectionOf`。\n5. 点击弹窗的“变更”按钮，使用 `Click` 和 `base=POPUP`。\n6. 点击页面右侧的刷新按钮，同样使用 `ClickTextToTheDirectionOf`。\n\n需要注意的是“方向”和“弹窗”的正确使用。\n</thought>\n\n<code_block>\n# 清空经办人字段\nSetField | 经办人 | ${KEY_BACKSPACE}\n\n# 选择经办组为“艳如测试组”\nSelectOptionForField | 经办组 | 艳如测试组\n\n# 点击弹框上的确定\nClick | 确定 | base=POPUP\n\n# 点击“创建时间”上方右侧刷新按钮\nClickTextToTheDirectionOf | 创建时间 | top | 刷新\n\n# 点击弹窗的变更按钮\nClick | 变更 | base=POPUP\n\n# 点击页面右侧的刷新按钮\nClickTextToTheDirectionOf | SCREEN_CENTER | right | 刷新\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用「校验实时监控趋势数据」关键字，其中第一个参数分别设置为 ：「带宽」、「流量」、「请求数」，第二、三参数为默认参数",
        "output": "<thought>\n首先，我们需要调用关键字「校验实时监控趋势数据」，并为第一个参数设置三种不同的值：「带宽」、「流量」和「请求数」。\n我们可以创建一个列表，包含我们想要设置的所有值，然后使用「FOR」循环遍历这个列表，每次遍历时调用关键字并将当前值设置为关键字的第一个参数。\n这样，我们就可以实现在一个测试中为同一个关键字设置不同的参数，并执行多次测试。\n</thought>\n\n<code_block>\n# 创建一个列表，包含我们想要设置的所有值\n@{params}  带宽  流量  请求数\n\n# 通过FOR循环，遍历这个列表\nFOR  ${param}  IN  @{params}\n    # 调用关键字「校验实时监控趋势数据」，并将当前值设置为第一个参数\n    校验实时监控趋势数据  ${param}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印 ${idx}",
        "output": "<thought>\n此场景需要输出一个已有变量，可以使用RF内置的Log关键字将变量值打印到日志中。\n</thought>\n\n<code_block>\n# 打印变量${idx}的值\nLog | ${idx}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在搜索框中输入李四",
        "output": "<thought>\n在搜索框中输入李四，可以通过使用SetField关键字来实现。我们假设搜索框的字段名为“搜索”，那么我们只需要向这个字段输入要搜索的名字即可。\n</thought>\n\n<code_block>\n# 在搜索框中输入李四\nSetField | 搜索 | 李四\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开链接：https://contract.feishu-pre.cn/task-center/todo//d177fa0a-745c-4368-9489-87233f477f70，进入id为sign的frame，点击证书管理指引，点击超链接CSR生成，退出frame",
        "output": "<thought>\n解决问题思路：\n1. 使用OpenUrl关键字打开指定链接。\n2. 使用ToFrame关键字切换到id为sign的iframe。\n3. 使用Click关键字点击“证书管理指引”文本。\n4. 使用Click关键字点击超链接“CSR生成”文本。\n5. 使用ExitFrame关键字退出iframe。\n</thought>\n\n<code_block>\n# 打开指定的链接\nOpenUrl | https://contract.feishu-pre.cn/task-center/todo//d177fa0a-745c-4368-9489-87233f477f70\n\n# 切换到id为sign的iframe\nToFrame | iframe[id='sign']\n\n# 点击“证书管理指引”文本\nClick | 证书管理指引\n\n# 点击超链接“CSR生成”\nClick | CSR生成\n\n# 退出iframe\nExitFrame\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成长度为3的中文名",
        "output": "<thought>\n为了生成长度为3的中文名，可以使用`GenerateRandom`关键字。对于中文字符，可以在chars参数中列出常用姓氏和名字字的集合。这里使用了中文字符作为chars参数的组成。\n</thought>\n\n<code_block>\n# 生成长度为3的中文名\n${chinese_name}  GenerateRandom  | 3 | 赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "清空[class*=dashboard-header-title]区域值",
        "output": "<thought>\n我们需要清空符合选择器[class*=dashboard-header-title]的区域值。可以使用FillArea关键字，将其填为一个特殊值 ${KEY_BACKSPACE}。\n</thought>\n\n<code_block>\n# 清空[class*=dashboard-header-title]区域值\nFillArea | [class*=dashboard-header-title] | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 id 为 a 的 button, 然后获取其文本",
        "output": "<thought>\n首先，我会使用FindElem关键字来查找id为a的button，然后使用GetElemText关键字来获取此元素的文本。\n</thought>\n\n<code_block>\n# 查找id为a的button\n${elem}  FindElem | button[id='a']\n\n# 获取该元素的文本\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行关键字：‘设置参数  请输入应用内成员=Aa  enter=True  pause=0.5’，如果关键字执行出错，就校验页面上包含 ‘暂无数据’",
        "output": "<thought>\n首先，需要尝试使用`SetField`关键字来设置值。如果执行出错，根据要求需要校验页面上是否包含“暂无数据”。可以通过捕获异常的方式来完成这个逻辑。\n</thought>\n\n<code_block>\n# 先尝试设置字段\nTRY\n    SetField | 请输入应用内成员 | Aa | enter=True | pause=0.5\nEXCEPT\n    # 如果出现错误，校验页面是否包含“暂无数据”\n    CheckHasText | 暂无数据\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个“打开数据源列表”关键字，操作逻辑是：打开浏览器，访问 DATASOURCE_PAGE",
        "output": "<thought>\n解决问题思路：我们需要打开浏览器并访问指定的数据源页面，使用OpenBrowser和OpenUrl关键字来实现。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开数据源列表\n    # 打开浏览器并访问数据源页面\n    OpenBrowser  ${DATASOURCE_PAGE} \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取变量 ${申请人用户名} 中 ‘@’ 前面的用户名部分，然后设置申请人为：${用户名}",
        "output": "<thought>\n为了获取变量 `${申请人用户名}` 中 '@' 前面的用户名部分，可以使用 Evaluate 执行 Python 代码提取该部分字符串。然后，使用 `SetField` 将提取的用户名设置为申请人。\n</thought>\n\n<code_block>\n# 提取用户名 '@' 前的部分，并设置为变量 ${用户名}\n${用户名}=    Evaluate    '${申请人用户名}'.split('@')[0]\n\n# 设置申请人为提取的用户名\nSetField    申请人    ${用户名}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问 http://10.56.226.2:33060/product/ecs/region:ecs+cn-velab-auto/dashboard",
        "output": "<thought>\n首先，我们需要访问指定的URL，这可以通过`OpenUrl`关键字实现。然后由于场景只要求访问特定页面，暂时不需要点击菜单或发送请求，因此只需实现访问URL的步骤。\n</thought>\n\n<code_block>\n# 访问指定的仪表盘页面\nOpenUrl | http://10.56.226.2:33060/product/ecs/region:ecs+cn-velab-auto/dashboard\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在请搜索添加责任人中输入tianyu_test并回车",
        "output": "<thought>\n为了在\"请搜索添加责任人\"中输入`tianyu_test`并回车，可使用`SetField`关键字。因为需要在一个特定字段中输入文本并回车，`SetField`适合这种操作。\n</thought>\n\n<code_block>\n# 在'请搜索添加责任人'中输入tianyu_test并回车\nSetField | 请搜索添加责任人 | tianyu_test | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击包含变量req的表格行中的class包含moreIcon的对象",
        "output": "<thought>\n点击包含变量req的表格行中的class包含moreIcon的对象可以分解为两个步骤，首先定位到包含变量req的表格行，然后点击该行中的class包含moreIcon的对象。我们可以使用ClickElemOfRow关键字来实现。\n</thought>\n\n<code_block>\n# 点击包含变量req的表格行中的class包含moreIcon的对象\nClickElemOfRow | ${req} | [class*=moreIcon]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果有名字为巨量的红色按钮，就点击提交",
        "output": "<thought>\n首先需要判断页面上是否存在名字为\"巨量\"的红色按钮。可以使用`IsAnyElemExisting`关键字结合jquery选择器来实现判断。假设红色按钮的颜色是通过class或style属性指定的，可以通过样式选择器来判断按钮的颜色。找到按钮后，再判断是否存在。如果存在，就点击名为\"提交\"的按钮。\n</thought>\n\n<code_block>\n# 定义一个选择器，文案为\"巨量\"且颜色为红色的按钮\n${exist}  IsAnyElemExisting  |  button[style*='red']:contains(巨量), button[class*='red']:contains(巨量)\n\n# 如果按钮存在，则点击提交\nIF  ${exist}\n    Click  提交\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写目标镜像版本：512，备注为：测试",
        "output": "<thought>\n我们需要在目标镜像区域批量填写两个字段：镜像版本和备注。关键字 `BatchSetFields` 可以满足我们的需求。我们可以在一个步骤中完成`镜像版本`和`备注`字段的填写。\n</thought>\n\n<code_block>\n# 批量设置镜像版本为512，备注为测试\nBatchSetFields  镜像版本=512  备注=测试\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对请求 url 中包含 feishu.cn/path/download, 且请求方式为 POST, 且请求体匹配 user.*xiaoli 的接口进行 mock，mock 数据存放在: https://mysite.net/mock1.json",
        "output": "<thought>\n对于这个场景，我们需要针对请求URL中包含`feishu.cn/path/download`且请求方法为`POST`的请求进行mock。请求体需要匹配正则表达式`user.*xiaoli`。我们要使用的关键字是`Start Mock`，它允许我们对符合条件的请求进行mock，使用指定的mock数据文件。在此场景中，我们的mock数据存储在`https://mysite.net/mock1.json`。实现时需要按照提供的条件填写`Start Mock`的参数。\n</thought>\n\n<code_block>\n# 对请求 url 中包含 feishu.cn/path/download, 且请求方式为 POST, 且请求体匹配 user.*xiaoli 的接口进行 mock\nStart Mock  feishu.cn/path/download  POST  user.*xiaoli  mock_data_path=https://mysite.net/mock1.json\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“清空订阅同事”的关键字，执行这个 curl，\ncurl 'https://desksharing.bytedance.com/#/shared/api/colleague/subscribe' \\\n--data-raw 'subscribed='",
        "output": "<thought>\n根据问题要求，需要创建一个名为“清空订阅同事”的关键字，并使用Robot Framework向指定的URL发送POST请求。由于需要发送`subscribed=`作为请求体，可以使用`UiSendRequest`关键字来实现发送请求。\n</thought>\n\n<code_block>\n清空订阅同事\n    # 向 https://xxx.yyy.zzz.com/#/shared/api/colleague/subscribe 发送 POST 请求, 请求体为 'subscribed='\n    ${resp_json}  UiSendRequest | POST | https://xxx.yyy.zzz.com/#/shared/api/colleague/subscribe | {\"subscribed\": \"\"}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待文本为新建的button出现，然后将鼠标移动到新建上，并点击新建任务",
        "output": "<thought>\n首先，我们需要等待页面上文本为“新建”的button出现。等待元素出现后，移动鼠标到“新建”文本上，然后点击“新建任务”。\n</thought>\n\n<code_block>\n# 等待页面上出现文本为“新建”的button\nWaitElem | button:contains(新建)\n\n# 移动鼠标到第一个“新建”文本上\nMoTo | 新建\n\n# 点击文本为“新建任务”的按钮\nClick | 新建任务\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "关闭浏览器",
        "output": "<thought>\n为了关闭浏览器，可以直接使用提供的关键字 `CloseBrowser`。因为没有其他复杂操作需要处理，这个关键字可以单独有效地完成任务。\n</thought>\n\n<code_block>\n# 关闭浏览器\nCloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到文本包含APL的td，将文本值赋值到 apl",
        "output": "<thought>\n首先，我们可以使用FindByText关键字找到文本包含APL的td元素。然后，我们可以使用Get Text关键字获取该元素的文本值并将其赋值给变量apl。注意，这里我们使用的是Robot Framework的内置关键字Get Text，它可以获取页面元素的文本值。\n</thought>\n\n<code_block>\n# 找到文本包含APL的td元素\n${elem}  FindByText | APL | tag=td\n\n# 获取元素的文本值并赋值给变量apl\n${apl}=  Get Text  ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验弹窗中包含冲突提示",
        "output": "<thought>\n1. 首先需要判断是否存在弹窗，可以使用IsPopupExists关键字\n2. 然后需要校验弹窗中包含\"冲突提示\"文本，可以使用CheckHasText关键字，并将base参数设为POPUP表示校验弹窗内容\n3. 由于题目要求\"弹窗\"文本不要出现在代码中，所以直接使用\"冲突提示\"作为校验文本\n4. 使用严格模式(strict=False)进行包含匹配，确保能匹配到包含\"冲突提示\"的文本\n</thought>\n\n<code_block>\n# 检查是否存在弹窗\n${status}  IsPopupExists\nShould Be True  ${status}  # 确保弹窗存在\n\n# 校验弹窗中包含\"冲突提示\"文本\nCheckHasText  冲突提示  base=POPUP  strict=False\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class=\"universe-icon switch-icon\" 的按钮\n点击完成后，检查页面是否存在 “欢迎使用飞书” 文本\n如果存在对应文本，就点击 type=\"checkbox\"的勾选框",
        "output": "<thought>\n首先，我们需要使用 `ClickElem` 关键字来点击具有特定 class 的按钮。然后，我们使用 `CheckHasText` 关键字来检查页面是否存在 “欢迎使用飞书” 文本。最后，通过 `IF` 语句判断文本是否存在，如果存在则点击 type 为 \"checkbox\" 的勾选框。\n</thought>\n\n<code_block>\n# 点击 class=\"universe-icon switch-icon\" 的按钮\nClickElem | [class=universe-icon switch-icon]\n\n# 检查页面是否存在 “欢迎使用飞书” 文本\n${exist}  IsAnyTextExisting | 欢迎使用飞书\n\n# 如果文本存在，点击 type=\"checkbox\" 的勾选框\nIF  ${exist}\n    ClickElem | input[type='checkbox']\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 获取元素class=arco-spin DataTableTableContent__tableSpin--fveUM的文本 ${text2}，并验证${text2}在页面出现了两次",
        "output": "<thought>\n 首先，我们需要获取指定元素的文本。可以使用`GetElemText`关键字来获取文本。然后，使用`GetPageText`获取整个页面文本，以便计算目标字符串的出现次数。最后，我们使用`Evaluate`关键字与Python代码来检查该字符串是否出现两次。\n </thought>\n \n <code_block>\n # 获取指定class的元素文本\n ${text2}  GetElemText | [class=arco-spin.DataTableTableContent__tableSpin--fveUM]\n \n # 获取页面文本\n ${page_text}  GetPageText\n \n # 验证目标文本在页面中出现两次\n ${count}  Evaluate | $page_text.count($text2)\n Should Be Equal As Numbers | ${count} | 2\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将元素${聚合信息}拖入到${聚合区域}中",
        "output": "<thought>\n需要使用DAndD关键字将元素${聚合信息}拖拽到元素${聚合区域}中。首先通过找到这两个元素的jquery选择器，然后使用DAndD关键字进行元素拖拽。\n</thought>\n\n<code_block>\n# 将${聚合信息}拖拽到${聚合区域}\nDAndD | ${聚合信息} | ${聚合区域}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 “删除办公平台” 的关键字，接受参数 name ，业务逻辑为：如果页面存在 name 就点击删除按钮，选中下拉列表里面的 name，然后点击确定",
        "output": "<thought>\n首先，需要判断页面上是否存在文本 name，使用 IsAnyTextExisting 关键字。然后，如果文本存在，就点击“删除”按钮，使用 Click 关键字。接着，在下拉列表中选择相应的 name 选项，可以使用 SelectOption 关键字。最后，点击“确定”按钮，使用 Click 关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n删除办公平台\n    [Arguments]  ${name}\n    \n    # 判断页面是否存在给定的 name\n    ${exist}  IsAnyTextExisting | ${name}\n    \n    # 如果存在，执行删除操作\n    IF  ${exist}\n        # 点击删除按钮\n        Click  删除\n        \n        # 选择下拉列表里的选项 name\n        SelectOption | ${name}\n        \n        # 点击确定\n        Click  确定\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 加速器类型右侧的文案",
        "output": "<thought>\n在这个场景中，我们需要获取'加速器类型'右侧的文案。根据提示，我们应该获取页面字段的值。可以使用GetFieldVal关键字来获取该值，因为它适用于获取字段对应的控件的值。需要注意的是，该关键字会根据字段名称在页面中查找相关的控件并返回它的值。\n</thought>\n\n<code_block>\n# 获取'加速器类型'字段的值\n${val}  GetFieldVal | 加速器类型\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开链接 ${MAIN_PAGE}",
        "output": "<thought>\n这个场景要求打开指定的链接。在RF中，可以使用OpenUrl关键字来打开一个页面。我们需要传递一个URL参数。这是一个很简单、直接的任务。\n</thought>\n\n<code_block>\n# 打开主页面\nOpenUrl | ${MAIN_PAGE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击id=\"status\"底下的全部    ",
        "output": "<thought>\n为了点击id为status的元素底下的文本\"全部\"，我们可以使用ClickTextToTheDirectionOf关键字。the_base参数为[id=status]，direction参数为bottom，text参数为全部。\n</thought>\n\n<code_block>\n# 点击id为status的元素底下的全部\nClickTextToTheDirectionOf | [id=status] | bottom | 全部\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击添加分群button",
        "output": "<thought>\n 在这个场景中，我们需要点击一个标记为“添加分群”的按钮。可以使用ClickElem关键字通过选择器选择button元素，并使用:contains选择器来匹配文本“添加分群”。因此，选择合适的选择器并使用ClickElem来实现这一点。\n </thought>\n \n <code_block>\n # 点击包含“添加分群”文本的按钮\n ClickElem | button:contains(添加分群)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索设备序列号 5CD422BB92 并搜索",
        "output": "<thought>\n1. 首先需要定位到\"搜索设备序列号\"的输入框，根据提示这是一个有名称的页面字段，可以使用`SetField`关键字\n2. 需要输入的序列号是\"5CD422BB92\"\n3. 输入完成后需要执行搜索操作，可以设置`enter=True`参数来模拟回车键搜索\n4. 由于没有提到弹窗或特殊位置，使用基本的`SetField`即可\n</thought>\n\n<code_block>\n# 在搜索设备序列号输入框中输入序列号并回车搜索\nSetField | 搜索设备序列号 | 5CD422BB92 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取去年的1.1-去年的12.31 格式展示为2024.01.01 - 2024.09.29",
        "output": "<thought>\n我们需要获取去年的1月1日和12月31日的日期，并格式化为\"YYYY.MM.DD\"的格式，然后用一个字符串展示出来。可以使用Python代码来获取去年的年份和日期。\n</thought>\n\n<code_block>\n# 使用Evaluate来获取去年1月1日和12月31日的日期，并格式化\n${last_year}   Evaluate  str(datetime.datetime.now().year - 1)\n${start_date}   Evaluate  \"${last_year}.01.01\"\n${end_date}   Evaluate  \"${last_year}.12.31\"\n\n# 将格式化的日期组合成一个字符串\n${date_range} =  Evaluate  \"${start_date} - ${end_date}\"\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算两个日期 start_date=2021-09-01， end_date=2021-09-10 之间相差多少天",
        "output": "<thought>\n我们需要计算两个指定日期之间的天数差。Robot Framework自身不直接支持日期差的计算，但我们可以使用Python结合Evaluate关键字来实现这一点。\n</thought>\n\n<code_block>\n# 使用Python计算两个日期之间的天数差，并记录下来\n${days_difference}  Evaluate  (datetime.strptime('2021-09-10', '%Y-%m-%d') - datetime.strptime('2021-09-01', '%Y-%m-%d')).days  modules=datetime\nLog  ${days_difference}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "刷新页面",
        "output": "<thought>\n要实现页面刷新的自动化测试，可以直接使用提供的关键字`RefreshPage`。\n</thought>\n\n<code_block>\n# 刷新当前页面\nRefreshPage\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击svg class包含MetaFloatDetail__icon第二个",
        "output": "<thought>\n 首先需要通过ClickElem关键字，使用jquery选择器定位到包含MetaFloatDetail__icon的svg class的第二个元素，并点击之。这里需要注意的是，在jquery中，索引是从0开始的，第二个元素对应的索引是1。\n </thought>\n \n <code_block>\n # 定位到包含MetaFloatDetail__icon的svg class的第二个元素并点击\n ClickElem | svg[class*='MetaFloatDetail__icon']:eq(1)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击我的申请单，检查页面存在 设备退还，点击第一个 设备退还，点击确定，base：class包括UIAttributeInfoDrawer-",
        "output": "<thought>\n首先需要点击文本\"我的申请单\"，然后检查页面上是否存在\"设备退还\"。接着，点击第一个出现的\"设备退还\"。最后，点击类名包含\"UIAttributeInfoDrawer-\"的元素中的文本\"确定\"。根据给定的关键字和说明，依次使用`Click`、`CheckHasText`、`Click`、`Click`来实现这些步骤。\n</thought>\n\n<code_block>\n# 点击文本 我的申请单\nClick | 我的申请单\n\n# 检查页面存在文本 设备退还\nCheckHasText | 设备退还\n\n# 点击第一个出现的 设备退还\nClick | 设备退还 | idx=0\n\n# 点击 class 包含 UIAttributeInfoDrawer- 的元素中的 确定\nClick | 确定 | base=[class*='UIAttributeInfoDrawer-']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "${reqTime}是%Y-%m-%d %H:%M:%S的字符串，转成时间戳",
        "output": "<thought>\n问题描述需要将日期字符串转换为时间戳。在Robot Framework中，日期和时间的转换可以通过内置关键字和一些Python代码来实现。由于现有的RF标准库中没有直接将日期时间字符串转换为时间戳的关键字，因此我们可以使用Evaluate关键字来执行Python代码完成转换。Python的`datetime`模块可以很方便地实现这个功能。\n</thought>\n\n<code_block>\n# 使用Python的datetime模块将日期字符串转换为时间戳\n${timestamp}    Evaluate   int(datetime.datetime.strptime('${reqTime}', '%Y-%m-%d %H:%M:%S').timestamp())  modules=datetime\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 缓存键值下的新增规则",
        "output": "<thought>\n 首先，我们需要确定\"缓存键值\"的元素，然后在其下方寻找\"新增规则\"的元素，然后点击它。我们可以使用\"ClickTextToTheDirectionOf\"关键字来实现这个操作。\n </thought>\n \n <code_block>\n # 点击 缓存键值下的新增规则\n ClickTextToTheDirectionOf | 缓存键值 | bottom | 新增规则\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前页面 URL，然后截取URL中 的网络位置部分并存储到domain中",
        "output": "<thought>\n要获取当前页面的URL，可以使用`GetCurrentUrl`关键字，然后使用Python的`urlparse`库解析该URL，并提取网络位置部分（即域名）。由于Robot Framework没有直接提供这个功能，可以利用`Evaluate`关键字在Python中执行相关操作。\n</thought>\n\n<code_block>\n# 获取当前页面URL\n${url}  GetCurrentUrl\n\n# 使用Python的urlparse库解析URL，并获取网络位置部分（域名）\n${domain}  Evaluate  urllib.parse.urlparse($url).netloc  modules=urllib\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到iframe",
        "output": "<thought>\n 为了解决切换到iframe的问题，我们可以使用关键字ToFrame，并提供适当的jQuery选择器。假设我们要切换到页面上的第一个iframe。\n </thought>\n \n <code_block>\n # 切换到第一个iframe\n ToFrame | iframe:eq(0)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行删除键10次",
        "output": "<thought>\n要在某个位置按删除键10次，可以使用`Press Keys`关键字直接模拟按键操作。此处需要发送BACKSPACE键10次，可以使用循环来重复执行`Press Keys`操作。\n</thought>\n\n<code_block>\n# 按删除键10次\nFOR    ${i}    IN RANGE    10\n    Press Keys    None    BACKSPACE\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个设置属性筛选条件关键字，接受 ${line_no}, @{config} 参数，分别表示组名和筛选条件配置，关键字会向组名${line_no}关联的字段中输入给定的一个或多个事件参数，\n请注意在输入前，需要先判断页面是否存在${line_no}，如果不存在就要点击对照组按钮，此过程最多循环3次，直到页面出现了文本${line_no}，才在${line_no}关联的字段中输入",
        "output": "<thought>\n这个任务主要涉及到两个关键功能，一个是设置属性筛选条件，另一个是判断页面上是否有某个元素。\n首先，我们需要在给定的组名字段中输入一系列的事件参数。这可以通过`SetField`关键字实现，这个关键字可以找到指定的字段，并在其中输入指定的值。\n其次，我们需要判断页面上是否存在指定的元素，如果不存在，就需点击对照组按钮，然后再次检查。这个过程可能需要多次重复，直到元素出现。这可以通过两个关键字来实现，一个是`IsAnyTextExisting`，用来检查文本是否存在，另一个是`Click`，用来点击按钮。\n由于这个过程可能需要多次重复，我们使用RobotFramework的FOR循环结构。在循环中，我们首先检查所需的元素是否存在，如果存在就退出循环，如果不存在就点击按钮然后再次检查。\n最后，我们用Exit For Loop If将检查结果和True进行比较，如果为True，则退出循环，否则继续。\n</thought>\n\n<code_block>\n设置属性筛选条件\n    [Arguments]  ${line_no}  @{config}\n    ${i}  Set Variable  0\n    FOR   ${i}  IN RANGE  0  3\n      ${exist}  IsAnyTextExisting | ${line_no} | timeout=3\n      Exit For Loop If  ${exist}\n      Click | 对照组\n      Sleep | 2s\n    END\n    SetField | ${line_no} | @{config}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${table_row} 等于1，则进入新页面新窗口，向指标组输入Cuped-业务核心指标-性能-2023/7/24后开启的实验可用(拆OS更准)",
        "output": "<thought>\n根据给定的条件，首先需要判断变量${table_row}是否等于1。若条件为真，则使用`ToNewWindow`关键字切换到新页面新窗口。接着，使用`SetField`关键字向指标组输入指定的文本内容：Cuped-业务核心指标-性能-2023/7/24后开启的实验可用(拆OS更准)。\n</thought>\n\n<code_block>\n# 判断 ${table_row} 是否为 1\nIF  \"${table_row}\" == \"1\"\n    # 切换到新窗口\n    ToNewWindow\n    # 在指标组中输入指定的文本\n    SetField  指标组  Cuped-业务核心指标-性能-2023/7/24后开启的实验可用(拆OS更准)\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "遍历页面上所有data-tabkey包含semiTab的元素并点击",
        "output": "<thought>\n首先，我们需要找到所有符合条件的元素，即data-tabkey包含semiTab的元素。我们可以使用FindElem关键字配合jQuery选择器来定位这些元素。查找到这些元素后，我们需要遍历它们，并对每一个元素执行点击操作。为此，我们可以使用Robot Framework的FOR循环结构来遍历这些元素，并使用ClickElem关键字来点击每一个元素。\n</thought>\n\n<code_block>\n# 查找所有data-tabkey包含semiTab的元素\n${elements}  FindElem  [data-tabkey*=semiTab]\n\n# 遍历找到的元素并点击\nFOR  ${elem}  IN  @{elements}\n  ClickElem  ${elem}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 获取明天的年-月-日。提示：可以使用 Get Current Date 完成",
        "output": "<thought>\n 在这个问题中，我需要获取明天的日期。Robot Framework 提供了一个内置关键字 \"Get Current Date\"，它可以用于获取当前日期。我可以通过设置increment参数为1天，来获取明天的日期。这个关键字返回的日期格式默认是 \"YYYYMMDD\"，我可以通过设置format参数为 \"%Y-%m-%d\" 来获取 \"YYYY-MM-DD\" 格式的日期。\n </thought>\n \n <code_block>\n # 获取明天的日期\n ${tomorrow} Get Current Date result_format=%Y-%m-%d increment=1 days\n # 打印明天的日期\n Log ${tomorrow}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个关键字“切换页数”，接受参数num，代表第几页。默认值为1。思路是使用定位title包含“Page”的div元素，并点击其中的：‘第 num 页’",
        "output": "<thought>\n为了解决这个问题，我们需要创建一个关键字“切换页数”，它接受一个参数num，表示要切换到的页码。默认值为1。我们将使用RF的Click关键字来模拟点击操作，以便导航到指定的页码。首先，我们需要查找到包含“Page”的div元素。为了实现这一点，我们可以使用FindElem关键字来定位这个div，然后在它的范围内，点击“第 num 页”，这需要在选择器中构建一个条件来选择正确的页码元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n切换页数\n    [Arguments]  ${num}=1\n    # 获取title包含Page的div元素\n    ${div_elem}  FindElem  div[title*='Page']\n    # 点击其中包含“第 num 页”的文本\n    Click  第 ${num} 页  base=${div_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 ‘数据类型’ 的表格头，将此元素向右滚动",
        "output": "<thought>\n我们需要查找一个表格头元素，文本为“数据类型”。可以使用`FindByText`关键字查找这个元素。找到该元素后，需要将其向右滚动。可以使用`ScrollLeftRight`关键字来实现滚动操作。\n</thought>\n\n<code_block>\n# 查找文本为‘数据类型’的表格头元素\n${elem}  FindByText | 数据类型 | tag=th\n\n# 将找到的元素向右滚动到80%处\nScrollLeftRight | ${elem} | 80%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面是否存在帮助中心，最多检查2s，如果存在，则点击页面上最后一个叉号",
        "output": "```\n<thought>\n第一步，使用“IsAllTextExisting”关键字检查页面是否存在文本“帮助中心”，此关键字会返回一个布尔值（True或False），我们可以将其存储在变量“exist”中；\n第二步，在一个RF的IF语句中使用变量“exist”，如果exist为True（即，“帮助中心”存在），则执行点击操作，点击页面上最后一个close icon。\n</thought>\n\n<code_block>\n# 检查页面是否存在\"帮助中心\"\n${exist}  IsAllTextExisting | 帮助中心 | timeout=2\n\n# 如果页面存在\"帮助中心\"，则点击页面上最后一个 close icon\nIF  ${exist}\n    ClickIcon | close | idx=-1\nEND\n</code_block>\n```"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果当前页面URL不包含 ‘bytedance’ 也不包含 ‘console’ 就输入 ‘账号’: ${user}, 密码： ${password}, 然后返回",
        "output": "<thought>\n首先，需要检查页面URL是否包含‘bytedance’或‘console’。如果两者都不包含，就在页面输入‘账号’和‘密码’。最后返回上一页面。\n</thought>\n\n<code_block>\n# 检查URL是否包含‘bytedance’或‘console’\n${bytedance}  IsURLContains  bytedance\n${console}  IsURLContains  console\n\n# 如果都不包含，则输入账号和密码，并返回上一页面\nIF  not ${bytedance} and not ${console}\n    # 输入‘账号’和‘密码’\n    BatchSetFields  账号=${user}  密码=${password}\n    # 返回上一页面\n    PageBack\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问主页：MAIN_PAGE，点击选择联系手机，点击选择手机号下面的 123****9124",
        "output": "<thought>\n根据提示，我们需要实现以下步骤：  \n1. 访问主页（MAIN_PAGE）。可以使用 `OpenUrl` 关键字来打开主页。  \n2. 点击选择\"联系手机\"。可以使用 `Click` 关键字直接点击\"联系手机\"文本。  \n3. 在点击\"联系手机\"后，点击选择\"联系手机\"选项下方的指定手机号\"123****9124\"。这个可以通过 `ClickTextToTheDirectionOf` 关键字，指定在\"联系手机\"下方点击对应号码。\n</thought>\n\n<code_block>\n# 访问主页\nOpenUrl | ${MAIN_PAGE}\n\n# 点击选择联系手机\nClick | 联系手机\n\n# 点击选择手机号下面的 123****9124\nClickTextToTheDirectionOf | 联系手机 | bottom | 123****9124\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二个class包含arco-select-view-value的元素",
        "output": "<thought>\n需要使用`ClickElem`关键字来点击第二个class包含`arco-select-view-value`的元素。可以通过使用jQuery选择器结合`:eq()`选择器来选择第二个元素。\n</thought>\n\n<code_block>\n# 点击第二个class包含arco-select-view-value的元素\nClickElem | [class*=arco-select-view-value]:eq(1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击取值1下方的第一个取值",
        "output": "<thought>\n我们需要点击 \"取值1\" 下方的第一个 \"取值\"。可以使用 `ClickTextToTheDirectionOf` 关键字来实现，这个关键字可以根据基准元素和方向定位目标文本。因为 \"取值\" 是文本，我们可以使用这个关键字，基准元素是 \"取值1\"，方向是 \"bottom\"，目标文本是 \"取值\"，并且指定 idx 为 0 表示第一个。\n</thought>\n\n<code_block>\n# 点击取值1下方的第一个取值\nClickTextToTheDirectionOf | 取值1 | bottom | 取值 | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面渲染完成，点击 提交至商家处理，校验页面弹框中存在 申请理由，设置申请理由为：物品破损，等待3s，点击提交，等出现‘提交成功’",
        "output": "<thought>\n首先，我们需要等待页面加载完成。然后，点击“提交至商家处理”按钮。接下来，检查弹出的对话框中是否有“申请理由”，并设置其值为“物品破损”。之后，等待3秒，再点击提交按钮，最后等待文本“提交成功”出现来确认操作的成功。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 点击“提交至商家处理”\nClick | 提交至商家处理\n\n# 校验弹窗中存在“申请理由”\nCheckHasText | 申请理由 | base=POPUP\n\n# 设置申请理由为“物品破损”\nSetField | 申请理由 | 物品破损 | base=POPUP\n\n# 等待3秒\nSleep | 3s\n\n# 点击提交按钮\nClick | 提交 | base=POPUP\n\n# 等待“提交成功”文本出现\nWaitText | 提交成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将视野移动至 库存数量",
        "output": "<thought>\n为了将元素移动到视野中，可以使用`MoveIntoView`关键字。这个关键字支持接收一个jQuery选择器作为参数，并自动将对应的元素滚动到浏览器视口内。在这里，我们需要将\"库存数量\"对应的元素移动到视野中，因此需要构建一个选择器来准确选择该文本。我们可以假设\"库存数量\"是某个元素的文本内容，因此可以考虑用包含该文本内容的选择器来实现。假设该文本直接在页面中显现，我们可以简单地使用文本选择器。\n</thought>\n\n<code_block>\n# 将\"库存数量\"文本元素移动到视野中\nMoveIntoView | :contains(\"库存数量\")\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二个弹框中的编辑按钮",
        "output": "<thought>\n对于这个场景，我们需要点击第二个弹框中的“编辑”按钮。可以使用Click关键字，并通过base参数指定操作的元素在弹框中。由于有多个弹框，我们将使用popup_index参数来指定是第二个弹框。\n</thought>\n\n<code_block>\n# 点击第二个弹框中的编辑按钮\nClick | 编辑 | base=POPUP | popup_index=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加数据源，向编辑器输入：autotest，向 role=\"dialog\"中 class=\"ud__input-input-wrap\"的输入框中输入Giraffe_add_parameter+当前时间是年月日时分秒。提示：向元素定位器给定的区域中输入用 FillArea",
        "output": "<thought>\n首先，使用`Click`关键字点击\"添加数据源\"。然后，使用`FillEditor`关键字向编辑器输入文本\"autotest\"。接下来，构建日期时间字符串，最后使用`FillArea`将\"Giraffe_add_parameter+当前时间\"输入到指定的输入框中。\n</thought>\n\n<code_block>\n# 点击添加数据源\nClick | 添加数据源\n\n# 向编辑器输入autotest\nFillEditor | autotest\n\n# 获取当前时间\n${current_time}  Get Current Date  result_format=%Y%m%d%H%M%S\n\n# 向指定输入框输入Giraffe_add_parameter+当前时间\nFillArea | [role=\"dialog\"] [class=ud__input-input-wrap] | Giraffe_add_parameter${current_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面是否存在 placeholder*=‘请选择’ 或 ‘选择属性’ 的元素",
        "output": "<thought>\n从问题描述来看，需要判断页面是否存在指定的元素。可以使用 `IsAnyElemExisting` 关键字，并通过jQuery选择器来查找 `placeholder` 包含 '请选择' 或 '选择属性' 的元素。\n</thought>\n\n<code_block>\n# 判断是否存在符合条件的元素\n${exist}  IsAnyElemExisting | [placeholder*='请选择'], [placeholder*='选择属性']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格第一行第一列的内容",
        "output": "<thought>\n分析需求：我们需要点击表格中第一行第一列的单元格内容。对于这个任务，可以使用ClickTextOfCell关键字，因为它允许我们通过行号和列号来定位单元格，并在其中点击指定文本。由于需求中没有特别指定要点击的文本，我们可以使用默认参数（即text=*），表示点击单元格中的任意文本。\n</thought>\n\n<code_block>\n# 点击第一行第一列单元格中的任意文本\nClickTextOfCell | 1 | 1 | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断${old_name}不等于${new_name}",
        "output": "<thought>\n可以使用RF的内置关键字来判断两个变量是否不相等，例如可以使用\"Should Not Be Equal As Strings\"关键字来完成这项任务。\n</thought>\n\n<code_block>\n# 判断${old_name} 不等于 ${new_name}\nShould Not Be Equal As Strings | ${old_name} | ${new_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发送到 /api/access 的所有 POST 请求，校验响应json中的 data:xxx:yyy:name 都是张三",
        "output": "<thought>\n首先，我需要搜索所有发送到 /api/access 的 POST 请求。这可以通过使用 \"Search Requests\" 关键字来实现，设置 URL 模式为 /api/access，方法为 POST，并选择模式为 all，这样可以获取所有相关请求的响应。接下来，我将遍历每个响应 JSON，使用 \"GetValuesFromJson\" 关键字提取出 data:xxx:yyy:name 的值，并校验其是否为 \"张三\"。这需要结合 \"Should Be Equal As Strings\" 关键字来进行验证。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 /api/access，且请求方式为 POST 的所有请求\n${all_responses}  Search Requests  /api/access  POST  all\n\n# 遍历所有响应，校验每个响应的 data:xxx:yyy:name 是否为 \"张三\"\nFOR  ${response}  IN  @{all_responses}\n    ${name}  GetValuesFromJson  ${response}  data:xxx:yyy:name\n    Should Be Equal As Strings  ${name}  张三\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘新建数据集’，如果页面存在 ‘新建数据集后前往编辑维度指标’ 就点击",
        "output": "<thought>\n首先需要点击文本\"新建数据集\"，然后使用关键字`IsAnyTextExisting`判断页面上是否存在\"新建数据集后前往编辑维度指标\"。如果存在，就点击该文本。\n</thought>\n\n<code_block>\n# 点击新建数据集\nClick | 新建数据集\n\n# 判断页面是否存在‘新建数据集后前往编辑维度指标’\n${exist}  IsAnyTextExisting | 新建数据集后前往编辑维度指标\n\n# 如果存在就点击该文本\nIF  $exist\n    Click | 新建数据集后前往编辑维度指标\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 ${line}  其值为 div.logic-wrapper-item div.arco-formily-item-control:eq(-1)",
        "output": "<thought>\n在这个任务中，我们需要创建一个变量，命名为${line}，其值为\"div.logic-wrapper-item div.arco-formily-item-control:eq(-1)\"。这里我们使用RF的内置关键字Set Variable来实现。\n</thought>\n\n<code_block>\n# 创建变量 ${line}，其值为 \"div.logic-wrapper-item div.arco-formily-item-control:eq(-1)\"\n${line}  Set Variable  div.logic-wrapper-item div.arco-formily-item-control:eq(-1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "断言表格中没有数据",
        "output": "<thought>\n问题中已经指出了要断言表格中没有数据，这就意味着我们需要对表格的行数进行检查。因此，这个问题的解决方案就是：我们可以通过“CheckRowCount”关键字来断言表格的行数为0来实现。这是因为如果表格中没有数据，则表格的行数应该为0。\n</thought>\n\n<code_block>\n# 断言表格中没有数据，即表格的行数应该为0\nCheckRowCount | 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置鉴权方式 用户名密码",
        "output": "<thought>\n需要使用SetField关键字来设置鉴权方式为\"用户名密码\"。可直接选择该字段并输入相应的值。\n</thought>\n\n<code_block>\n# 设置鉴权方式为用户名密码\nSetField | 鉴权方式 | 用户名密码\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 校验0.1%包含于${text1}",
        "output": "\n<thought>\n 为了验证文本\"0.1%\"是否包含在变量`${text1}`中，可以使用RF的`Should Contain`关键字。这个关键字用于验证一个字符串中是否包含另一个字符串。\n </thought>\n \n <code_block>\n # 校验${text1}包含\"0.1%\"\n Should Contain  ${text1}  0.1%\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 ‘选择属性’ 中输入：${paramname}",
        "output": "<thought>\n我们需要使用关键字`SetField`将`${paramname}`输入到名为`选择属性`的字段中。因为目标是特定字段，所以直接使用该关键字即可。\n</thought>\n\n<code_block>\n# 在‘选择属性’字段中输入`${paramname}`\nSetField | 选择属性 | ${paramname}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击返回场景任务管理，等待页面加载完成，设置任务名称为：【自动化测试新建流式场景专用】，等待页面加载完成",
        "output": "<thought>\n 首先需要点击“返回场景任务管理”文本按钮，使用`Click`关键字。接着，等待页面加载完成，使用`WaitLoading`关键字。然后设置任务名称为“自动化测试新建流式场景专用”，使用`SetField`关键字。最后，再次等待页面加载完成。\n </thought>\n \n <code_block>\n # 点击返回场景任务管理\n Click | 返回场景任务管理\n \n # 等待页面加载完成\n WaitLoading\n \n # 设置任务名称为【自动化测试新建流式场景专用】\n SetField | 任务名称 | 自动化测试新建流式场景专用\n \n # 等待页面加载完成\n WaitLoading\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 ${sub_username} 为真，就点击 子用户登录，然后输入主账号用户名 ${user_name}, 子用户 ${sub_username}, 密码 ${password}",
        "output": "<thought>\n首先，需要通过RF的if语法判断变量 ${sub_username} 是否为真。如果为真，执行一系列的关键字操作，点击 \"子用户登录\"，然后分别填充主账号用户名 ${user_name}, 子用户 ${sub_username}, 密码 ${password}。\n\n这样的步骤主要包括以下几个关键字：Click, SetField。其中，Click关键字用来执行点击\"子用户登录\"的操作，SetField关键字用来填充主账号用户名、子用户以及密码的操作。\n\n具体来说，可以首先使用Click关键字点击 \"子用户登录\"。然后使用SetField关键字，根据输入字段的名称（假设分别为 \"主账号用户名\"， \"子用户\" 和 \"密码\"）填充对应的值 ${user_name}，${sub_username} 和 ${password}。\n</thought>\n\n<code_block>\n# 判断 ${sub_username} 是否为真，如果为真，执行后续操作\nIF  ${sub_username}\n    # 点击 \"子用户登录\"\n    Click  子用户登录\n\n    # 输入主账号用户名 ${user_name}\n    SetField  主账号用户名  ${user_name}\n\n    # 输入子用户 ${sub_username}\n    SetField  子用户  ${sub_username}\n\n    # 输入密码 ${password}\n    SetField  密码  ${password}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器，访问 ${url}, 等页面加载完成后,输入用户名张三, 密码password，点击登录，等待 Welcome出现",
        "output": "<thought>\n首先使用OpenBrowser关键字打开浏览器并访问指定的${url}。然后使用WaitLoading等待页面加载完成。接下来，通过BatchSetFields批量输入用户名和密码。最后，点击登录按钮，并使用WaitText等待Welcome文本出现。\n</thought>\n\n<code_block>\n# 打开浏览器并访问指定URL\nOpenBrowser | ${url}\n\n# 等待页面加载完成\nWaitLoading\n\n# 输入用户名和密码\nBatchSetFields  用户名=张三  密码=password\n\n# 点击登录\nClick | 登录\n\n# 等待出现Welcome文本\nWaitText | Welcome\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查变量${val}是‘ios,中活(10-19)’",
        "output": "<thought>\n为了检查变量${val}是否是‘ios,中活(10-19)’，我们可以使用RF的Should Be Equal As Strings关键字，它用于校验两个字符串是否相等。通过这个关键字，我们可以比较变量${val}和目标字符串‘ios,中活(10-19)’。\n</thought>\n\n<code_block>\n# 检查变量${val}是否等于'ios,中活(10-19)'\nShould Be Equal As Strings  ${val}  ios,中活(10-19)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "返回上一个窗口",
        "output": "<thought>\n根据提示，我们需要实现\"返回上一个窗口\"的功能。分析可用关键字，发现有两个相关关键字：\n1. PageBack - 页面后退，这适用于浏览器历史记录中的后退\n2. ToPrevWindow - 切换到之前的窗口，这适用于多窗口场景\n\n由于需求明确是\"返回上一个窗口\"而不是页面后退，因此应该使用ToPrevWindow关键字。这个关键字专门用于处理多窗口切换的场景，完全符合需求。\n</thought>\n\n<code_block>\n# Switch to previous window\nToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击向左icon",
        "output": "<thought>\n要点击向左icon，根据提供的关键字，最合适的是使用`ClickIcon`关键字，因为它专门用于点击图标。需要指定图标的名称\"left\"或\"arrow-left\"等，但题目中只提到\"向左icon\"，所以假设图标名称为\"left\"。由于没有提到是第几个图标或需要基准元素，使用默认参数即可。\n</thought>\n\n<code_block>\n# 点击向左icon\nClickIcon  left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现 ‘快捷导航’ 或 ‘增长分析’",
        "output": "<thought>\n在这个场景中，我们需要等待页面上出现文本“快捷导航”或“增长分析”。可以使用`WaitText`关键字来实现这个功能，设置多个文本参数，关键字会等待其中任意一个出现在页面上。\n</thought>\n\n<code_block>\n# 等待页面出现‘快捷导航’或‘增长分析’\nWaitText | 快捷导航 | 增长分析\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到class为byted-input-wrapper byted-input-wrapper-size-md的span元素，并输入联联永创科技（成都）有限公司, 获取页面上 class包含delete的svg 数量, 并逐个点击\n\n提示：建议倒叙点击，因为点击后元素数量可能发生了变化",
        "output": "<thought>\n首先，我们需要找到元素class为`byted-input-wrapper byted-input-wrapper-size-md`的span，并在其关联的输入区域输入指定的公司名称。可以使用`FindElem`结合`FillArea`来实现这个功能。接下来的步骤是获取页面上所有class包含`delete`的svg元素数量。由于点击操作可能导致元素数量发生变化，因此我们需要倒序点击这些svg元素。我们可以借助`GetElemCount`来获取元素数量，然后通过一个循环结合`ClickElem`来实现倒序点击。\n</thought>\n\n<code_block>\n# 找到目标span元素及其关联的输入区域，并输入公司名称\n${elem}  FindElem | span[class='byted-input-wrapper byted-input-wrapper-size-md']\nFillArea | ${elem} | 联联永创科技（成都）有限公司\n\n# 获取class包含delete的svg元素的数量\n${svg_count}  GetElemCount | svg[class*='delete']\n\n# 倒序点击所有匹配的svg元素\nFOR  ${i}  IN RANGE  ${svg_count} -1  -1  -1\n    ClickElem | svg[class*='delete']:eq(${i})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找并点击 placeholder 为请选择属性的元素",
        "output": "<thought>\n解决问题思路：要找到placeholder为请选择属性的元素，首先需要通过input标签来确定元素的位置，然后通过RF的关键字进行元素的查找和点击操作。\n</thought>\n\n<code_block>\n# 查找 placeholder 为请选择属性的元素\n${elem}  FindElem  | input[placeholder='请选择属性']\n\n# 点击元素\nClickElem  |  ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取“评价人次”的右边的元素的文案",
        "output": "<thought>\n要获取“评价人次”右边元素的文案，我们可以使用FindElemToTheDirectionOf关键字来定位到“评价人次”这个基准元素右边的目标元素。然后，使用GetElemText关键字获取该元素的文本内容。\n</thought>\n\n<code_block>\n# 查找“评价人次”右边的元素\n${elem}  FindElemToTheDirectionOf | 评价人次 | right\n\n# 获取该元素的文本内容\n${val}  GetElemText | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 返回之前的页面，页面加载完成后，设置接入名称为：【自动化测试专用】，设置负责人为：zhangxiaoyu.613，点击查询，页面加载完毕后，校验表格包含“【自动化测试专用】”",
        "output": "\n    \n<thought>\n 首先需要返回之前的页面，然后等待页面加载完成。接着使用`SetField`关键字设置接入名称和负责人。完成后点击查询按钮，再次等待页面加载完成。最后，使用`CheckTableHas`关键字校验表格中包含“【自动化测试专用】”。\n </thought>\n \n <code_block>\n # 返回到之前的页面\n PageBack\n \n # 等待页面加载完成\n WaitLoading\n \n # 设置接入名称为【自动化测试专用】\n SetField | 接入名称 | 自动化测试专用\n \n # 设置负责人为 zhangxiaoyu.613\n SetField | 负责人 | zhangxiaoyu.613\n \n # 点击查询按钮\n Click | 查询\n \n # 等待页面加载完成\n WaitLoading\n \n # 校验表格包含【自动化测试专用】\n CheckTableHas | 自动化测试专用\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 次日 右侧的 个",
        "output": "<thought>\n在这个场景中，我们需要点击“次日”右侧的“个”。这意味着我们要使用 ClickTextToTheDirectionOf 关键字，因为我们要在“次日”这个文本的右边找一个文本“个”进行点击。需要确保选择 idx=0，因为默认情况下，我们希望点击第一个找到的符合条件的元素。\n</thought>\n\n<code_block>\n# 点击 次日 右侧的 个\nClickTextToTheDirectionOf | 次日 | right | 个 | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘事件110’ 后面的高级设置，然后在规则组列表右侧输入“前置策略”",
        "output": "<thought>\n首先需要点击后面的高级设置，这可以通过调用ClickTextToTheDirectionOf关键字实现，将'事件110'作为基准元素，设置方向为'right'，设置文本为'高级设置'。\n然后需要在规则组列表右侧输入'前置策略'，这可以通过调用SetField关键字实现，字段为规则组列表，输入文本为'前置策略'。\n</thought>\n\n<code_block>\n# 点击'事件110'后面的高级设置\nClickTextToTheDirectionOf | 事件110 | right | 高级设置\n\n# 在规则组列表右侧输入'前置策略'\nSetField | 规则组列表 | 前置策略 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“新建交互” 的关键字，接受参数 trigger_name 表示触发的事件名，逻辑是：\n1. 点击 “交互”，等待0.5s\n2. 点击 “新建交互”，0.5s后，在 div data-testid=\"FloatLayer:body\" 的元素中输入 trigger_name",
        "output": "<thought>\n1. 使用`Click`关键字点击“交互”。\n2. 使用`Sleep`等待0.5秒。\n3. 使用`Click`关键字点击“新建交互”。\n4. 再次使用`Sleep`等待0.5秒。\n5. 使用`FillArea`在特定选择器的元素中输入参数`trigger_name`。\n</thought>\n\n<code_block>\n*** Keywords ***\n新建交互\n    [Arguments]  ${trigger_name}\n    \n    # 点击交互并等待\n    Click  交互\n    Sleep  0.5s\n    \n    # 点击新建交互并等待\n    Click  新建交互\n    Sleep  0.5s\n    \n    # 在指定元素中输入触发事件名\n    FillArea  div[data-testid=\"FloatLayer:body\"]  ${trigger_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 ‘节点类型’ 的值，校验其中同时包含 IDC 和 LM",
        "output": "<thought>\n首先，我们需要获取字段‘节点类型’的值。可以使用关键字GetFieldVal来获取指定字段的值。然后，我们需要校验获得的值同时包含文本 IDC 和 LM。可以使用RF的Should系列校验关键字来实现这个文本校验。\n</thought>\n\n<code_block>\n# 获取字段‘节点类型’的值\n${node_type_value}  GetFieldVal  节点类型\n\n# 校验‘节点类型’的值同时包含文本 IDC 和 LM\nShould Contain  ${node_type_value}  IDC\nShould Contain  ${node_type_value}  LM\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "不做任何操作",
        "output": "<thought>\n对于这个场景，没有任何操作需要执行。根据给定的提示“不做任何操作”，我们可以直接使用Robot Framework的BuiltIn库中的\"No Operation\"关键字，该关键字不会执行任何实际操作，仅仅作为一个占位符。\n</thought>\n\n<code_block>\n# 无操作\nNo Operation\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将字符串a和b和c用分隔符；拼接",
        "output": "<thought>\n我们需要将字符串a、b和c用分隔符“；”拼接起来。可以使用RF的`Catenate`关键字指定分隔符来实现。\n</thought>\n\n<code_block>\n# 使用Catenate将字符串a、b和c用“；”分隔符拼接\n${result}  Catenate  SEPARATOR=;  a  b  c\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选中表格第一行第一列",
        "output": "<thought>\n要选中表格的第一行第一列，我们要使用选择或点击类的关键字。根据给出的关键字说明，SelectTableRow 用于选择或选中表格行。由于只需选中第一行，且没有特别指定表格的名称，可以直接使用 SelectTableRow 关键字选择第一行。\n</thought>\n\n<code_block>\n# 选择表格中的第一行\nSelectTableRow | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断是否存在  手机号验证 按钮，如果存在就输入 ${CODE_ONLINE}，不存在则继续执行代码",
        "output": "<thought>\n首先，使用 `IsAnyElemExisting` 来检查页面上是否存在 \"手机号验证\" 按钮。如果按钮存在，在其后输入 `${CODE_ONLINE}`。如果不存在，则继续执行接下来的代码。\n</thought>\n\n<code_block>\n# 判断是否存在手机号验证按钮\n${exist}  IsAnyElemExisting | button:contains('手机号验证')\n\n# 如果存在手机号验证按钮\nIF  $exist\n    # 输入 ${CODE_ONLINE} 到当前激活的位置\n    SendText  ${CODE_ONLINE}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 表格 只有 1 列，且列名称为：“账务账期”\n\n提示：可获取表头行的值，校验值的个数为 1，且第一项为 账务账期",
        "output": "<thought>\n首先需要获取表头行的值，然后检查值的数量是否为1，再校验该值是否为“账务账期”。\n</thought>\n\n<code_block>\n# 获取表头行的值\n@{header_values}  GetRowValues  HEAD\n\n# 校验表头行的值数量为1\n${length}  Evaluate  len($header_values) \nShould Be Equal As Numbers  ${length}  1\n\n# 校验表头行的第一个值为“账务账期”\nShould Be Equal As Strings  ${header_values[0]}  账务账期\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "滑动到“服务评价”并点击",
        "output": "<thought>\n首先需要将“服务评价”文本滚动到视野内，可以使用MoveIntoView关键字。完成后，用Click关键字点击“服务评价”文本。\n</thought>\n\n<code_block>\n# 滚动到“服务评价”文本元素\nMoveIntoView | :contains(服务评价)\n\n# 点击“服务评价”文本\nClick | 服务评价\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面显示V2或者V3",
        "output": "<thought>\n这个问题可以通过使用关键字 \"WaitText\" 来解决，因为它可以在指定的超时时间内等待页面上出现任一文本。\n</thought>\n\n<code_block>\n# 等待页面存在V2或者V3\nWaitText | V2 | V3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击保存小图标，检测页面出现“成功”。",
        "output": "<thought>\n要实现点击保存icon并检测页面显示“成功”，可以使用ClickIcon关键字点击保存图标，然后使用WaitText关键字等待“成功”文本出现。\n</thought>\n\n<code_block>\n# 点击保存icon\nClickIcon | save\n\n# 等待页面出现“成功”文本\nWaitText | 成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击重命名，向 value属性为 doubao-pro 的元素中输入 ‘自动化Agent测试’，然后回车",
        "output": "<thought>\n首先需要使用Click关键字点击文本“重命名”，然后通过FillArea关键字选择基于jQuery选择器表示的元素输入值“自动化Agent测试”，最后在输入后通过SendText 输入回车。\n</thought>\n\n<code_block>\n# 点击重命名\nClick | 重命名\n\n# 输入 '自动化Agent测试' 到属性为 value='doubao-pro' 的元素中，并回车\nFillArea | [value='doubao-pro'] | 自动化Agent测试\nSendText | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择弹框中的 “vol-k4ucf0m15yft6h3wsc34”选项，点击 弹窗中 确定 按钮，校验白屏",
        "output": "<thought>\n根据描述的操作步骤，需要在弹窗中选择指定的选项，然后点击确认按钮，最后校验是否出现白屏。我们可以使用`SelectOption`和`Click`关键字来选择选项并点击确认按钮，最后使用`CheckWhiteScreen`来校验白屏。\n</thought>\n\n<code_block>\n# 选择弹窗中的指定选项\nSelectOption | vol-k4ucf0m15yft6h3wsc34 | base=POPUP\n\n# 点击弹窗中的确定按钮\nClick | 确定 | base=POPUP\n\n# 校验页面是否出现白屏\nCheckWhiteScreen\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断变量MAIN_PAGE是否包含projects, 如果包含，则路径为 /datafinder/api/v1/projects/${id},否则路径为/datafinder/api/v1/${id}",
        "output": "<thought>\n首先，我们需要判断变量MAIN_PAGE是否存在，然后检查其是否包含“projects”这个词。根据判断结果，我们需要构建不同的路径。\n</thought>\n\n<code_block>\n# 检查变量MAIN_PAGE是否存在\n${exist}  IsVarExisting | MAIN_PAGE\n\n# 如果存在，检查是否包含\"projects\"\nIF  ${exist}\n    ${status}  Evaluate  'projects' in \"${MAIN_PAGE}\"\n    # 如果包含，构建第一种路径\n    IF  ${status}\n        ${path}  Set Variable  /datafinder/api/v1/projects/${id}\n    ELSE\n        # 如果不包含，构建第二种路径\n        ${path}  Set Variable  /datafinder/api/v1/${id}\n    END\nELSE\n    # 无可用关键字\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格操作里的删除",
        "output": "<thought>\n该操作涉及到点击表格操作列中的“删除”按钮。我们可以使用`ClickTextOfCell`关键字来点击单元格中的文本。假设表格的列名为‘操作’，我们需要在操作列中点击“删除”按钮。\n</thought>\n\n<code_block>\n# 点击表格第一行的操作列中的删除\nClickTextOfCell | 1 | 操作 | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送一个请求：curl 'https://console.volcengine.com/datatag/api/v1/app/573522/tag/tag_31231' \\\n-X 'DELETE'",
        "output": "<thought>\n这个问题要求使用RobotFramework通过HTTP DELETE方法向指定的URL发送请求。可以使用给定关键字UiSendRequest执行这一操作。无需请求体和请求头。\n</thought>\n\n<code_block>\n# 发送DELETE请求到指定URL\n${resp_json}  UiSendRequest | DELETE | https://console.volcengine.com/datatag/api/v1/app/573522/tag/tag_31231\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认表格只有 4 行数据",
        "output": "<thought>\n这个问题要求我们校验表格的行数是否为4。Robot Framework有一个内置关键字\"CheckRowCount\"，可以满足这个需求。我们需要给这个关键字传2个参数，一个是期望的行数，这里是4，另一个是表格的名称或编号。在这个问题中，并没有指定表格的名称或编号，所以我们默认使用1，表示第一个表格。\n</thought>\n\n<code_block>\n# 校验第一个表格只有4行数据\nCheckRowCount | 4 | tbl=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击请选择资产型号，输入 123，选择 “钱柜 123321”",
        "output": "<thought>\n首先，点击文本\"请选择资产型号\"。然后在文本框中输入\"123\"。接着选择选项“钱柜 123321”。这个过程可以通过分步骤使用Click, SendText, 和SelectOption等关键字实现。\n</thought>\n\n<code_block>\n# 点击“请选择资产型号”\nClick | 请选择资产型号\n\n# 输入123\nSendText | 123\n\n# 选择“钱柜 123321”\nSelectOption | 钱柜 123321\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击操作按钮，切换到新开的弹窗，如果有前往新版文字则点击，没有则跳过，设置 管理原为：1158268，设置 是否生成Hive为:是，设置 规则编码为：Giraffe_add_rule+当前时间是年月日时分秒",
        "output": "<thought>\n解决问题的关键是按照顺序执行以下几个步骤：\n1. 点击操作按钮。\n2. 切换到新打开的弹窗。\n3. 判断“前往新版”文本是否存在并决定是否点击。\n4. 使用批量设置功能设置不同字段的值。需要生成当前时间并格式化为所需格式。\n5. 使用RobotFramework的内置关键字和自定义关键字组合实现需求。\n</thought>\n\n<code_block>\n# 点击操作按钮\nClick | 操作\n\n# 切换到新窗口\nToNewWindow\n\n# 判断是否存在“前往新版”并点击\n${exist}  IsAnyTextExisting | 前往新版\nIF  ${exist}\n    Click | 前往新版\nEND\n\n# 获取当前时间\n${current_time}  Get Current Date  result_format=%Y%m%d%H%M%S\n\n# 批量设置字段\nBatchSetFields  管理原=1158268  是否生成Hive=是  规则编码=Giraffe_add_rule${current_time}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面包含中至少两个文本为name的元素",
        "output": "<thought>\n首先，我们需要找到页面中所有文本为name的元素。然后，我们可以使用`GetElemCount`关键字来获取这些元素的数量，接着使用`Should Be True`关键字来校验数量是否大于等于2。\n</thought>\n\n<code_block>\n# 查找文本为name的元素\n${name_elems}  FindByText  name\n\n# 获取元素个数\n${count}  GetElemCount  ${name_elems}\n\n# 校验至少有两个name元素\nShould Be True  ${count} >= 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面不存在报告计算中",
        "output": "<thought>\n要检查页面中不存在特定文本“报告计算中”，可以使用`CheckNotHasText`关键字。该关键字用于验证页面不包含指定的一个或多个文本内容。在这里，我们仅需验证一个文本。\n</thought>\n\n<code_block>\n# 校验页面不包含“报告计算中”\nCheckNotHasText | 报告计算中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“添加过程事件” 的关键字，接受 name 参数，逻辑为：\n1. 点击 ‘+过程事件’，0.2s后，向最后一个 class包含AttributionProcessEvent__container 的元素中输入 name",
        "output": "<thought>\n要实现这个逻辑，首先需要点击文本“+过程事件”，然后等待0.2秒，再向最后一个 class 包含 \"AttributionProcessEvent__container\" 的元素中输入 name。\n\n步骤如下：\n1. 使用 `Click` 关键字点击 “+过程事件”。\n2. 使用 `Sleep` 关键字等待0.2秒。\n3. 使用 `FillArea` 关键字向最后一个 class 包含 \"AttributionProcessEvent__container\" 的元素中输入 name，选择器为 \"[class*=AttributionProcessEvent__container]:eq(-1)\"。\n\n接下来编写关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加过程事件\n    [Arguments]  ${name}\n    # 点击 “+过程事件”\n    Click  +过程事件\n    # 等待 0.2秒\n    Sleep  0.2s\n    # 向最后一个 class 包含 \"AttributionProcessEvent__container\" 的元素中输入 name\n    FillArea  [class*=AttributionProcessEvent__container]:eq(-1)  ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 页面下拉完全可见class为overview-trend-com-wrapper的页面区域\n ",
        "output": "<thought>\n 为了使页面下拉到class为overview-trend-com-wrapper的页面区域完全可见，我可以使用MoveIntoView关键字。首先需要通过jquery选择器找到该元素，以便将其传递给MoveIntoView关键字。根据规则，选择器可以用.class来选择对应的元素。\n </thought>\n \n <code_block>\n # 将class为overview-trend-com-wrapper的元素移动到视野内\n MoveIntoView | [class=overview-trend-com-wrapper]\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "去掉${val}中的空格",
        "output": "<thought>\n去掉字符串中的空格可以使用Python的字符串处理函数。由于没有合适的RF关键字，我们可以使用Evaluate来执行Python代码。\n</thought>\n\n<code_block>\n# 去掉字符串中的空格\n${result}    Evaluate    $val.replace(\" \", \"\")\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验弹窗中“客户信息”表 第5行 姓名列：张晓",
        "output": "<thought>\n需要校验弹窗中\"客户信息\"表 第5行 姓名列中的文本为\"张晓\"，可以使用`CheckCellHas`关键字并指定`base`为`POPUP`表示弹窗中的表格。应选择第5行、姓名列进行检查。\n</thought>\n\n<code_block>\n# 校验弹窗中“客户信息”表 第5行 姓名列：张晓\nCheckCellHas  5  姓名  张晓  tbl=客户信息  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 “费用明细”表 中 第2行第11列 包含“%”",
        "output": "<thought>\n为了校验“费用明细”表中第2行第11列是否包含“%”，我们可以使用CheckCellHas关键字。这个关键字可以直接用于检查特定单元格中是否存在指定文本。我们需要指定表格名称、行号和列号，然后提供要检查的文本“%”。\n</thought>\n\n<code_block>\n# 校验“费用明细”表中第2行第11列包含“%”\nCheckCellHas | 2 | 11 | % | tbl=费用明细\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取id为a的元素截图中的文本",
        "output": "<thought>\n我们需要获取id为a的元素截图中的文本。可以使用关键字GetElemScreenshotText | [id=a]来实现。\n</thought>\n\n<code_block>\n# 获取id为a的元素截图中的文本\n${txt}  GetElemScreenshotText | [id=a]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断 用户分群 是否能上下滚动",
        "output": "<thought>\n为了判断“用户分群”是否可以上下滚动，我们需要使用RF提供的IsScrollable关键字。该关键字允许我们检查一个元素在指定方向（x或y轴）上是否可以滚动。在这个场景中，我们只需检查y轴的滚动能力。如果\"用户分群\"是文本，我们可以选择一个其相对方向的元素或其本身作为基准，然后使用IsScrollable进行判断。\n</thought>\n\n<code_block>\n# 检查包含“用户分群”的元素是否可以纵向滚动\n${status}  IsScrollable | :contains(用户分群) | direction=y\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果第一行的状态为运行中，则xxx,否则yyy",
        "output": "<thought>\n首先，需要判断第一行的状态是否为\"运行中\"，可以使用`IsCellContainsText`关键字来实现。接着，根据判断结果进行分支处理，如果状态为\"运行中\"，则执行xxx操作；否则，执行yyy操作。\n</thought>\n\n<code_block>\n# 判断第一行状态列是否包含\"运行中\"\n${status}  IsCellContainsText | 1 | 状态 | 运行中\n\n# 根据状态执行不同操作\nIF  ${status}\n    # xxx操作\n    # Example: ClickTextOfCell | 1 | 操作 | xxx\n    Log  xxx操作\nELSE\n    # yyy操作\n    # Example: ClickTextOfCell | 1 | 操作 | yyy\n    Log  yyy操作\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为“打开${table_name}图表的更多操作”的关键字，逻辑为：\n# 1. 查找 class包含arco-card-header-title 且文本为 table_name 的元素 ele\n# 2. 点击ele 右侧的元素",
        "output": "<thought>\n1. 使用 `FindElem` 查找文本为 `table_name` 且 class 包含 `arco-card-header-title` 的元素。\n2. 利用 `ClickElemToTheDirectionOf` 点击上述元素右侧的元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开${table_name}图表的更多操作\n    # 查找 class 包含 arco-card-header-title 且文本为 table_name 的元素\n    ${ele}  FindElem  [class*=arco-card-header-title]:contains(${table_name})\n\n    # 点击 ele 右侧的元素\n    ClickElemToTheDirectionOf  ${ele}  right\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择 ‘编辑’ 选项",
        "output": "<thought>\n选择文本为\"编辑\"的选项可以直接使用`SelectOption`关键字。该关键字可以直接选择所需的选项，无需额外参数。\n</thought>\n\n<code_block>\n# 选择编辑选项\nSelectOption | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向第二个表格第一行输入：SSD",
        "output": "<thought>\n根据任务要求，需要向第二个表格中的第一行输入\"SSD\"。可以通过使用`FillRow`关键字完成。因为是第二个表格，所以需要指定`tbl=2`。`FillRow`可以接受行号以及要填入的值，因此可以直接填写。\n</thought>\n\n<code_block>\n# 向第二个表格第一行输入：SSD\nFillRow | 1 | SSD | tbl=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验当前页面中只有一个class=${card_dom}的元素，并且它的内容包含${search_info['template_name']}",
        "output": "<thought>\n1. 首先需要校验页面中只有一个class为${card_dom}的元素，可以使用GetElemCount获取元素数量并校验\n2. 然后需要校验该元素内容包含${search_info['template_name']}，可以使用GetElemText获取元素文本并校验\n3. 由于需要复用元素选择器，可以先定义变量存储选择器\n4. 使用Should Be Equal As Numbers校验数量为1\n5. 使用Should Contain校验文本包含关系\n</thought>\n\n<code_block>\n# 定义元素选择器变量\n${card_selector}  Set Variable  [class=${card_dom}]\n\n# 校验只有一个class=${card_dom}的元素\n${count}  GetElemCount  ${card_selector}\nShould Be Equal As Numbers  ${count}  1\n\n# 校验元素内容包含模板名称\n${elem_text}  GetElemText  ${card_selector}\nShould Contain  ${elem_text}  ${search_info['template_name']}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果 args 中的第一个参数为 ‘用户依次做过’ , 就要先把 ${target} 元素设置为 ‘用户依次做过’，然后计算 args 总长度 n, 点击 n-1次 ‘后续行为’",
        "output": "<thought>\n首先需要检查`args`的第一个参数是否为‘用户依次做过’，如果是，则设置${target}元素值为‘用户依次做过’。接着计算`args`的总长度n，并点击‘后续行为’n-1次。\n</thought>\n\n<code_block>\n# 如果 args 第一个参数为 ‘用户依次做过’\nIF  \"${args[0]}\" == \"用户依次做过\"\n    # 设置 ${target} 的值为 ‘用户依次做过’\n    SetField  ${target}  用户依次做过\n    # 计算 args 总长度 n\n    ${n}  Evaluate  len(${args})\n    # 点击 n-1 次 ‘后续行为’\n    FOR  ${i}  IN RANGE  1  ${n}\n        Click  后续行为\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置活动时间为：2024/12/30 ~ 2024/12/31，设置投放时间为：01:00 ~ 08:00",
        "output": "<thought>\n设置“活动时间”和“投放时间”需要分别在两个字段中填写两个不同的时间区间。可以使用`SetField`关键字来设置这些字段的值。根据问题描述，先设置“活动时间”为“2024/12/30 ~ 2024/12/31”，然后将“投放时间”设置为“01:00 ~ 08:00”。\n</thought>\n\n<code_block>\n# 设置活动时间为2024/12/30 ~ 2024/12/31\nSetField | 活动时间 | 2024/12/30 ~ 2024/12/31\n\n# 设置投放时间为01:00 ~ 08:00\nSetField | 投放时间 | 01:00 ~ 08:00\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格第一列的内容，校验他们任意包含 1-1  1-2和1-3",
        "output": "<thought>\n此问题需要获取表格第一列的内容，然后校验其任意包含 \"1-1\", \"1-2\" 和 \"1-3\"。首先使用`GetColValues`获取第一列的值，然后使用RF的Should系列关键字进行校验。\n</thought>\n\n<code_block>\n# 获取表格第一列的内容\n@{first_col_values}  GetColValues | 1\n\n# 校验第一列的任意内容包含 \"1-1\", \"1-2\" 和 \"1-3\"\nShould Contain Any  ${first_col_values}  1-1  1-2  1-3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "再切换回原窗口",
        "output": "<thought>\n为了解决这个问题，我们需要在新窗口和原窗口之间进行切换。这可以通过使用“ToPrevWindow”关键字来实现，该关键字用于切换回之前的窗口。\n</thought>\n\n<code_block>\n# 切换回原窗口\nToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验${data1}内包含[\"2024-04-13\",\"z\",0,1,11,\"9\"]",
        "output": "<thought>\n首先，需要校验${data1}是否包含给定的值。我们可以使用Robot Framework的内置关键字“Should Contain”来实现。这个关键字会检查给定的列表是否包含特定的值。我们需要循环遍历目标列表中所有的元素，并对每个元素应用“Should Contain”关键字。\n</thought>\n\n<code_block>\n# 创建一个列表包含所有需要检查的值\n${checkItems}=  Create List  2024-04-13  z  0  1  11  9\n\nFOR  ${item}  IN  @{checkItems}\n    # 对每一个值，检查${data1}是否包含它\n    Should Contain  ${data1}  ${item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class=\"mobile-input-phone\" ，输入的手机号是变量 PHONE_ONLINE，点击 type=\"checkbox\" ，点击文本 下一步 按钮",
        "output": "<thought>\n首先，需要点击 class 为 \"mobile-input-phone\" 的元素，可以使用 `ClickElem` 关键字。然后，输入手机号，手机号存储在变量 `PHONE_ONLINE` 中，可以使用 `SendText` 关键字。接下来，点击类型为 \"checkbox\" 的元素，可以使用 `ClickElem` 关键字。最后，点击文本为 \"下一步\" 的按钮，可以使用 `Click` 关键字。\n</thought>\n\n<code_block>\n# 点击 class=\"mobile-input-phone\" 的输入框\nClickElem | [class=mobile-input-phone]\n\n# 输入手机号，使用变量 PHONE_ONLINE\nSendText | ${PHONE_ONLINE}\n\n# 点击 type=\"checkbox\" 的复选框\nClickElem | input[type=\"checkbox\"]\n\n# 点击文本 \"下一步\" 按钮\nClick | 下一步\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格的表头行中的 checkbox",
        "output": "<thought>\n要点击表格的表头行中的 checkbox，可以使用 ClickElemOfRow 关键字，row_name_or_id 使用特殊值 HEAD 表示表头行，selector 选择 checkbox 元素。\n</thought>\n\n<code_block>\n# 点击表格的表头行中的 checkbox\nClickElemOfRow | HEAD | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 GIRAFFE_PLAN_NAME 包含字符串 ‘冒烟’，就打印 xx",
        "output": "<thought>\n首先，我们需要确保变量GIRAFFE_PLAN_NAME存在，然后我们需要判断这个变量是否包含字符串'冒烟'。我们可以使用RobotFramework的Evaluate关键字来处理这个字符串包含的判断。这个关键字可以执行Python代码和函数，并返回结果。我们将使用Python的in操作符来判断是否包含字符串。如果包含，那么我们就打印xx。我们需要使用RobotFramework的IF/ELSE关键字来实现这个逻辑判断。\n</thought>\n\n<code_block>\n# 首先检查变量GIRAFFE_PLAN_NAME是否存在\n${exist}  IsVarExisting | GIRAFFE_PLAN_NAME\n# 通过IF/ELSE判断，如果存在，继续进行下一步操作\nIF  ${exist}\n    # 使用Evaluate关键字执行Python代码，判断GIRAFFE_PLAN_NAME是否包含'冒烟'\n    ${contains}   Evaluate  '冒烟' in $GIRAFFE_PLAN_NAME\n    # 如果包含，就打印xx\n    IF  ${contains}\n        Log  xx\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选 ‘名称’ 复选框",
        "output": "<thought>\n根据要求，使用CheckBoxOn关键字来勾选名为‘名称’的复选框。\n</thought>\n\n<code_block>\n# 勾选 ‘名称’ 复选框\nCheckBoxOn | 名称\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 ui_ 开头的随机参数，参数名为：dashboard_name，其中字符均为小写",
        "output": "<thought>\n根据要求，我们需要生成一个以 \"ui_\" 开头的随机字符串，并且这个字符串的字符均为小写。可以使用给定的关键字 GenerateRandomWithPrefix 来生成该字符串。我们需要设置前缀为 \"ui_\"，并确保生成的随机字符串长度合适且只包含小写字符。\n</thought>\n\n<code_block>\n# 生成以 \"ui_\" 开头的随机小写字符串，长度为18（因为前缀 \"ui_\" 占3个字符）\n${dashboard_name}  GenerateRandomWithPrefix  | ui_ | 18 | [LOWER]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断元素A是否存在，如果不存在，就点击元素B",
        "output": "<thought>\n首先，需要判断元素A是否存在。可以使用`IsAnyElemExisting`关键字。若不存在，则需要点击元素B，可以使用`ClickElem`关键字。\n</thought>\n\n<code_block>\n# 判断元素A是否存在\n${exist}  IsAnyElemExisting  | ${A}\n\n# 如果元素A不存在，点击元素B\nIF  not $exist\n    ClickElem  ${B}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "回退页面，点击表格包含“自动化测试专用”的那一行的图标，点击大盘，切换到新的窗口，校验页面url包含grafana",
        "output": "<thought>\n任务是回退到上一个页面，识别表格中内容包含“自动化测试专用”的行，点击该行中的图标，然后点击“大盘”。之后需要切换到新窗口并校验URL包含“grafana”。可以按以下步骤完成：\n\n1. 使用`PageBack`返回到上一页面。\n2. 使用`ClickIconOfRow`点击包含“自动化测试专用”的行中的图标。\n3. 使用`Click`点击“大盘”。\n4. 使用`ToNewWindow`切换到新的窗口。\n5. 使用`WaitURLContainsAny`校验URL包含“grafana”。\n</thought>\n\n<code_block>\n# 回退到上一个页面\nPageBack\n\n# 点击包含“自动化测试专用”的行中的图标\nClickIconOfRow  | 自动化测试专用\n\n# 点击“大盘”\nClick  | 大盘\n\n# 切换到新窗口\nToNewWindow\n\n# 校验URL包含“grafana”\nWaitURLContainsAny  | grafana\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格的列数，校验列数小于等于1",
        "output": "<thought>\n要获取表格的列数，可以先获取第一行的单元格数量。然后使用内置关键字校验列数是否小于等于1。\n</thought>\n\n<code_block>\n# 获取表格第一行的值\n@{first_row_values}  GetRowValues | 1\n\n# 获取列数\n${col_count}  Evaluate  len(${first_row_values})\n\n# 校验列数小于等于1\nShould Be True  ${col_count} <= 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 1.打开浏览器，打开网址https://fin-pre.bytedance.net/revenue/#/linglong/autoRevenue\n  # 2.点击“新增规则”\n  # 3.点击“确定”",
        "output": "<thought>\n 首先需要使用OpenBrowser关键字打开浏览器，并访问指定的URL。接下来，使用Click关键字点击“新增规则”按钮，最后再次使用Click关键字点击“确定”按钮。\n </thought>\n \n <code_block>\n # 打开指定的网址\n OpenBrowser | https://fin-pre.bytedance.net/revenue/#/linglong/autoRevenue\n \n # 点击“新增规则”\n Click | 新增规则\n \n # 点击“确定”\n Click | 确定\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 cookies",
        "output": "<thought>\n要获取cookies，最直接的方法是使用SeleniumLibrary提供的`Get Cookies`关键字。这个关键字会返回当前页面的所有cookies。\n</thought>\n\n<code_block>\n# 获取当前页面的所有cookies\n${cookies}  Get Cookies\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 配置优化，点击 配置模板。提示：依次点击",
        "output": "<thought>\n这个场景要求依次点击 \"配置优化\" 和 \"配置模板\"。可以使用 `ClickTextOneByOne` 关键字来实现。\n</thought>\n\n<code_block>\n# 依次点击 配置优化 和 配置模板\nClickTextOneByOne | 配置优化 | 配置模板\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击多云调度，检验页面无报错，依次点击第2个class为ovui-select__options中的优质素材、搬运素材",
        "output": "<thought>\n首先点击文本\"多云调度\"。然后，验证页面上没有任何错误信息。最后，在第二个class为ovui-select__options的元素中，依次点击文本为\"优质素材\"和\"搬运素材\"的元素。\n</thought>\n\n<code_block>\n# 点击多云调度\nClick | 多云调度\n\n# 检查页面无异常提示\nCheckErrMsg\n\n# 获取第2个class为ovui-select__options中的优质素材并点击\nClickElem | [class=ovui-select__options]:eq(1) :contains(优质素材):eq(1)\n\n# 获取第2个class为ovui-select__options中的搬运素材并点击\nClickElem | [class=ovui-select__options]:eq(1) :contains(搬运素材)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 项目 default，点击 “请输入实例名称”并输入文本“vol-3vv88b6371588vi2bxmy”，校验表格 “实例ID/名称”列包含“i-3vv88b6371588vi2bxmy”",
        "output": "<thought>\n首先，我们需要设置项目为\"default\"。然后，点击“请输入实例名称”字段，并输入文本“vol-3vv88b6371588vi2bxmy”。最后，校验表格“实例ID/名称”列是否包含文本“i-3vv88b6371588vi2bxmy”。为此，我们可以使用SetField关键字设置项目，Click关键字点击文本输入框，SendText关键字输入文本，并使用CheckColHas关键字校验表格中的文本。\n</thought>\n\n<code_block>\n# 设置项目为default\nSetField | 项目 | default\n\n# 点击“请输入实例名称”字段\nClick | 请输入实例名称\n\n# 输入文本“vol-3vv88b6371588vi2bxmy”\nSendText | vol-3vv88b6371588vi2bxmy\n\n# 校验表格“实例ID/名称”列包含“i-3vv88b6371588vi2bxmy”\nCheckColHas | 实例ID/名称 | i-3vv88b6371588vi2bxmy\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成",
        "output": "<thought>\n对于等待页面加载完成，可以使用`WaitLoading`关键字。根据题目要求，我们不需要传递特定的参数，使用默认的超时时间即可。\n</thought>\n\n<code_block>\n# 等待页面加载完成，使用默认超时时间\nWaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为'新增订阅报表-项目'的关键字，接受参数：报表名称，接收邮箱，报表类型，关联资源，参数默认值均为${EMPTY}，逻辑如下：\n # 1. 设置 报表名称为：报表名称\n # 2. 设置 接收邮箱为：接收邮箱\n # 3. 设置 报表类型为：报表类型\n # 4. 设置 关联资源为：关联资源\n # 5. 等待页面加载完成\n # 6. 设置 请输入域名为：域名\n # 7. 勾选 过滤域名\n # 8. 勾选 报表内容为：边缘统计下方的 流量，回源统计下方的 带宽，业务分析下方的 TOP URL\n # 9. 点击 弹窗内 右下角完成",
        "output": "<thought>\n 为实现该自动化测试，我将依次使用以下关键字：\n 1. 使用`SetField`设置报表名称、接收邮箱、报表类型、关联资源、域名。\n 2. 使用`WaitLoading`等待页面加载完成。\n 3. 使用`CheckBoxOn`勾选过滤域名及报表内容选项。\n 4. 使用`Click`点击弹窗内完成按钮。\n </thought>\n \n <code_block>\n 新增订阅报表-项目\n  [Arguments]  ${报表名称}=${EMPTY}  ${接收邮箱}=${EMPTY}  ${报表类型}=${EMPTY}  ${关联资源}=${EMPTY}  ${域名}=${EMPTY}\n  \n  # 设置报表名称\n  SetField  报表名称  ${报表名称}\n  \n  # 设置接收邮箱\n  SetField  接收邮箱  ${接收邮箱}\n  \n  # 设置报表类型\n  SetField  报表类型  ${报表类型}\n  \n  # 设置关联资源\n  SetField  关联资源  ${关联资源}\n  \n  # 等待页面加载完成\n  WaitLoading\n  \n  # 设置请输入域名\n  SetField  请输入域名  ${域名}\n  \n  # 勾选过滤域名\n  CheckBoxOn  过滤域名\n  \n  # 勾选流量、带宽和TOP URL\n  CheckBoxOn  流量  near=边缘统计\n  CheckBoxOn  带宽  near=回源统计\n  CheckBoxOn  TOP URL  near=业务分析\n  \n  # 点击弹窗内完成\n  Click  完成  base=POPUP\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 登录凭证 为：密钥对",
        "output": "<thought>\n要设置登录凭证为“密钥对”，可以使用`SetField`关键字。该关键字可以填写表单中的字段值。假设“登录凭证”是一个可被定位的字段，我们可以直接用`SetField`关键字来操作这个字段并设置其值为“密钥对”。\n</thought>\n\n<code_block>\n# 设置登录凭证为密钥对\nSetField | 登录凭证 | 密钥对\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对请求 url 中包含 feishu.cn/monitor, 且请求方式为 PUT, 且请求体匹配 appid.*129 的接口停止 mock",
        "output": "<thought>\n在这个场景中，我们需要停止一个请求体匹配正则表达式 \"appid.*129\" 的 PUT 请求对 \"feishu.cn/monitor\" 接口的 mock。可用 Stop Mock 关键字，它允许我们指定 path、method 和可选的 req_body_pattern 来停止 mock。在这种情况下，我们可以使用这个关键字来实现。\n</thought>\n\n<code_block>\n# 停止对请求 url 中包含 feishu.cn/monitor，且请求方式为 PUT，且请求体匹配 appid.*129 的接口的 mock\nStop Mock  feishu.cn/monitor  PUT  appid.*129\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果idtype中包含user_unique_id 则点击user_unique_id，或idtype中包含device_id,则点击device_id，或idtype中包含web_id，则点击web_id，或idtype中不包含ssid则点击ssid",
        "output": "# 如果变量${idtype}中包含user_unique_id 则点击user_unique_id\n${exist}  Evaluate  'user_unique_id' in \"${idtype}\"\nIF  $exist\n    Click  user_unique_id\nEND\n\n# 或idtype中包含device_id,则点击device_id\n${exist}  Evaluate  'device_id' in \"${idtype}\nIF  $exist\n    Click  device_id\nEND\n\n# 或idtype中包含web_id，则点击web_id\n${exist}  Evaluate  'web_id' in \"${idtype}\"\nIF  $exist\n    Click  web_id\nEND\n\n# 或idtype中不包含ssid则点击ssid\n${exist}  Evaluate  'ssid' not in \"${idtype}\"\nIF  $exist\n    Click  ssid\nEND"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置「区域」下拉框为「全部区域」",
        "output": "<thought>\n首先，根据题目要求，需要将「区域」下拉框设置为「全部区域」。本质上这是一个选择操作，可以通过SetField关键字来实现。在这个关键字中，name参数应设为「区域」，@args参数应设为「全部区域」，因为我们需要将该字段设置为「全部区域」的值。\n</thought>\n\n<code_block>\n# 设置「区域」下拉框为「全部区域」\nSetField | 区域 | 全部区域\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 ‘每条条数切换’ 的关键字，参数 num 表示每页多少条，默认为 10，作用是，点击 aria-label=“页码” 的元素；然后点击 num 条/页",
        "output": "<thought>\n首先，应该定位到 aria-label 为“页码”的元素并点击。接着，需要点击“num 条/页”这个选项。这里可以使用 `ClickElem` 来点击目标元素。由于 num 是一个参数，应该在关键字中使用变量来表示选择器中的文本内容。\n</thought>\n\n<code_block>\n*** Keywords ***\n每条条数切换\n    [Arguments]  ${num}=10\n    # 点击页码元素\n    ClickElem | [aria-label='页码']\n    \n    # 点击 num 条/页\n    Click | ${num} 条/页\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送一个接口请求，拿到响应中的 data 字段，然后检验其中的 size > 13, data中的 auth_data 字段的第一个列表项中的 name 字段包含 xxx, 请求信息如下：curl 'https://dataleap-api.console.volcengine.com/cn-beijing/security-api/api/v1/privileges/obtained?cluster=cn-beijing&limit=20&keyword=&auth_type=person,team,user_group&ds=las&offset=0&sort_field=expire_time&sort_order=asc' \\\n--compressed",
        "output": "# 发送请求并获取响应JSON\n${resp_json}  UiSendRequest | GET | https://xxx.yyy.zzz.com/cn-beijing/security-api/api/v1/privileges/obtained?cluster=cn-beijing&limit=20&keyword=&auth_type=person,team,user_group&ds=las&offset=0&sort_field=expire_time&sort_order=asc\n\n# 从响应JSON中获取 data 字段\n${data}=  Set Variable  ${resp_json[\"data\"]}\n\n# 检验 data 的 size 大于 13\nShould Be True  ${data[\"size\"]} > 13\n\n# 获取 data 中的 auth_data 字段的第一个列表项中的 name 字段\n${name}=  Set Variable  ${data[\"auth_data\"][0][\"name\"]}\n\n# 检验 name 字段包含 \"xxx\"\nShould Contain  ${name}  xxx"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取变量 ${elem} 中第一个 div ",
        "output": "<thought>\n我们需要找到变量 `${elem}` 中的第一个 `div` 元素。可以使用 `FindElem` 关键字结合适当的选择器来实现。选择器格式可以是 `${elem} div:eq(0)`，表示在 `${elem}` 下的第一个 `div`。\n</thought>\n\n<code_block>\n# 查找第一个div\n${div_elem}  FindElem  | ${elem} div:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索客户账号ID 2100044470",
        "output": "<thought>\n我们需要在搜索客户账号ID的输入区域中输入“2100044470”。可以使用`SetField`或`SendText`关键字来完成这个任务。如果搜索字段是有名称的，可以使用`SetField`关键字；如果需要在光标激活的位置输入，可以使用`SendText`关键字。在这种情况下，假设搜索框是一个有名称的字段。\n</thought>\n\n<code_block>\n# 输入客户账号ID 2100044470 到搜索框\nSetField | 搜索客户账号ID | 2100044470\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${task_name}这一行，最右侧的小图标",
        "output": "<thought>\n为了实现点击`${task_name}`这一行最右侧的icon，我们需要使用`ClickIconOfRow`关键字。这个关键字允许我们在特定的表格行中点击指定的小图标。根据提示，我们关注的是`${task_name}`这行，并且需要点击最右侧的icon。因此，使用`idx=-1`来表示行中最后一个icon。另外，我们需要确保`${task_name}`正确地标识了目标行。\n</thought>\n\n<code_block>\n# 点击${task_name}所在行最右侧的icon\nClickIconOfRow | ${task_name} | idx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义一个变量 Contract 并赋值为 ${Contract_No}，在搜索合同编号中输入${Contract}",
        "output": "<thought>\n首先，需要定义一个变量 `Contract` 并赋值为 `${Contract_No}`。然后，在输入字段中使用此变量。可以使用 `Set Variable` 来定义变量，接着使用 `SetField` 在搜索合同编号字段中输入该变量的值。\n</thought>\n\n<code_block>\n# 定义变量 Contract 并赋值为 ${Contract_No}\n${Contract}  Set Variable  ${Contract_No}\n\n# 在搜索合同编号中输入 ${Contract}\nSetField | 搜索合同编号 | ${Contract}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "循环@{checked_list}长度这么多次",
        "output": "<thought>\n1. 问题要求循环执行与列表长度相同的次数，这可以通过RobotFramework的FOR循环结构实现\n2. 使用`Get Length`关键字获取列表长度\n3. 使用`FOR`循环配合`IN RANGE`来创建指定次数的循环\n4. 由于是循环列表长度次数，可以直接使用列表变量本身作为循环范围\n</thought>\n\n<code_block>\n# 循环执行与checked_list列表长度相同的次数\nFOR  ${item}  IN  @{checked_list}\n    # 循环体内容\n    Log  ${item}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击体重表中小李那一行年龄列的单元格，向其中输入27",
        "output": "<thought>\n首先，我们需要找到小李所在的表格行，然后找到年龄列的单元格。我们可以使用关键字FillCell，它接收表格行和列的名称或者ID，并且可以设置其值。在这个例子中，行的名字是\"小李\"，列的名字是\"年龄\"，我们想要设置的值是27。\n</thought>\n\n<code_block>\n# 在体重表中的小李那一行 year 列的单元格中输入 27\nFillCell | 小李 | 年龄 | 27 | tbl=体重表\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "表格下方的分页数据，点击第四页，一般表格的页码都是class包含pagination-item的元素，且内部有文案表示页码号",
        "output": "<thought>\n在这个场景中，我们希望点击表格下方分页数据的第四页。根据提示，页码是通过class包含pagination-item的元素来标识的，并且每个页码元素内部包含页码号的文本。我们可以通过`ClickElem`关键字来实现这个功能，选择器需要包含页码类和目标页码文本。为了点击第四页，我们还需要找到正确的选择器来准确选择第四个页码。\n</thought>\n\n<code_block>\n# 点击表格下方表示第四页的元素\nClickElem | [class*=pagination-item]:textMatch(4)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的确认",
        "output": "<thought>\n根据任务描述，需要在弹窗中点击“确认”按钮。因此，可以使用Click关键字，并将base参数设为POPUP来指定是在弹窗中进行操作。\n</thought>\n\n<code_block>\n# 点击弹窗中的确认按钮\nClick | 确认 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发送的 /xxx/yyy 的最后一个 delete 请求，响应的 json 中 response:body:success 应该是 OK",
        "output": "<thought>\n首先，我们需要使用 `Search Requests` 关键字来搜索请求 URL 中包含 `/xxx/yyy` 并且请求方法为 DELETE 的最后一个请求。接下来，我们使用 `GetValuesFromJson` 关键字从响应的 JSON 中获取 `response:body:success` 的值，并验证它是否等于 \"OK\"。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 /xxx/yyy, 且请求方式为 DELETE 的最后一个请求\n${resp_json}  Search Requests  /xxx/yyy  DELETE  last\n\n# 获取响应 json 中的 response:body:success\n${success_value}  GetValuesFromJson  ${resp_json}  response:body:success\n\n# 校验 response:body:success 应该是 OK\nShould Be Equal As Strings  ${success_value}  OK\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查资源类型右侧的选择器里的文本是空的",
        "output": "<thought>\n为了检查资源类型右侧的选择器里的文本是否为空，首先需要获取这个字段的当前值。可以使用`GetFieldVal`关键字来获取字段值，然后使用`Should Be Empty`关键字来校验获取到的值是否为空。\n</thought>\n\n<code_block>\n# 获取资源类型字段的值\n${value}=  GetFieldVal  资源类型\n\n# 校验资源类型字段的值为空\nShould Be Empty  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 ‘添加标签’ 的关键字，接受变长参数 args, 作用是：\n1. args 的长度除以2的到 count，然后点击 count 次 ‘添加标签’\n2. 把所有的 args 填写到 ‘标签’ 字段中",
        "output": "<thought>\n首先，我们可以使用RobotFramework的内置关键字\"Get Length\"来获取args的长度，并将长度除以2获得count。然后，我们可以使用\"Repeat Keyword\"关键字重复点击添加标签。最后，我们只需要使用\"SetField\"关键字将所有的args一次性填充到标签字段中即可，因为SetField可以接受一个或多个值。\n</thought>\n\n<code_block>\n添加标签\n    [Arguments]  @{args}\n    # 计算args长度除以2的值，即需要重复点击“添加标签”的次数\n    ${length}=  Get Length  ${args}    \n    ${count}=  Evaluate  ${length} / 2  \n    # 重复点击“添加标签”\n    Repeat Keyword  ${count}  Click  添加标签\n    # 填充所有args到标签字段\n    SetField  标签  @{arg}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面文本：印章类型的个数，赋值给变量a",
        "output": "<thought>\n为了获取页面上印章类型的个数，我们需要找到包含“印章类型”文本的元素，然后使用GetElemCount关键字获取元素个数。首先可以通过FindByText关键字定位包含“印章类型”文本的元素。接着，使用GetElemCount获取这些元素的数量并将结果赋值给变量a。\n</thought>\n\n<code_block>\n# 查找包含“印章类型”文本的元素\n${elem}  FindByText | 印章类型\n\n# 获取印章类型元素的个数并赋值给变量a\n${a}  GetElemCount | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在[placeholder:请选择]输入指标卡基础",
        "output": "<thought>\n要在指定的输入框中输入文本，需要使用`SetField`关键字。根据问题，需要在占位符为“请选择”的输入框中输入“指标卡基础”。通常RF中没有直接根据占位符选择元素的关键字，因此需要构造一个合适的选择器。假设可以通过基于占位符的选择器来定位该输入框。\n</thought>\n\n<code_block>\n# 输入指标卡基础到占位符为‘请选择’的输入框\nFillArea | input[placeholder='请选择'] | 指标卡基础\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "寻找 class=\"rol\"的 div 的元素并判断是否存在",
        "output": "<thought>\n首先，我会使用关键字FindElem，输入选择器 `div[class='rol']` 来定位这个元素。然后，我会用IsVarExisting关键字来判断该元素是否存在。\n</thought>\n\n<code_block>\n# 使用FindElem关键字寻找class=\"rol\"的div元素\n${elem}  FindElem | div[class='rol']\n\n# 使用IsVarExisting关键字判断元素是否存在\n${exist}  IsVarExisting | ${elem}\n\n# 打印元素存在状态\nLog  ${exist}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 断言工单状态为 处理中。提示：需要先获取字段的值，然后判断",
        "output": "<thought>\n首先需要获取工单状态字段的值，可以使用GetFieldVal关键字获取。然后使用Should Be Equal As Strings关键字来断言字段值是否为\"处理中\"。\n</thought>\n\n<code_block>\n# 获取工单状态字段的值\n${status}  GetFieldVal | 工单状态\n\n# 断言工单状态为处理中\nShould Be Equal As Strings | ${status} | 处理中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个叫 查询客户信息 的关键字，接收参数 text、value，作用是向第一个 class 含有 index-module__table-format-filter 或 index-module__searchItem 区域中输入多个值：text、value",
        "output": "<thought>\n为了实现查询客户信息的关键字，接收两个参数text和value，我们需要在页面中找到第一个class包含`index-module__table-format-filter`或`index-module__searchItem`的区域，并向该区域输入这两个值。根据提供的关键字列表，`FillArea`关键字可以根据jquery选择器在指定的区域输入多个值。我们可以利用该关键字来完成任务。需要注意的是，jQuery选择器中`:eq(0)`表示选择第一个元素。\n</thought>\n\n<code_block>\n*** Keywords ***\n查询客户信息\n    [Arguments]  ${text}  ${value}\n    # 在第一个 class 含有 index-module__table-format-filter 或 index-module__searchItem 区域中输入参数\n    ${selector}  Set Variable  [class*=index-module__table-format-filter]:eq(0), [class*=index-module__searchItem]:eq(0)\n    FillArea  ${selector}  ${text}  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面存在“批量主播拉新”或“规模素人孵化”，并且打印日志",
        "output": "<thought>\n为了检查页面中是否存在“批量主播拉新”或“规模素人孵化”这两个文本中的至少一个，我们可以使用关键字`IsAnyTextExisting`。该关键字会返回一个布尔值，指示文本是否存在。然后，我们可以使用RF的内置IF语句来判断该布尔值并打印相应的日志。\n</thought>\n\n<code_block>\n# 判断页面是否存在“批量主播拉新”或“规模素人孵化”\n${exist}  IsAnyTextExisting | 批量主播拉新 | 规模素人孵化\n\n# 如果存在，则打印日志\nIF  ${exist}\n    Log  页面存在批量主播拉新或规模素人孵化\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“获取CSRF请求头” 的关键字，作用是，找到 name为csrf_token的 input 元素，获取其 value 值，然后返回一个 dict 对象，{'X-Csrf-Token': value}",
        "output": "<thought>\n我们需要找到name为csrf_token的input元素，然后获取其value属性值。使用`FindElem`关键字找到元素，再用`GetElemAttr`获取value。最后返回一个包含此值的字典。\n</thought>\n\n<code_block>\n*** Keywords ***\n获取CSRF请求头\n    # 查找name为csrf_token的input元素\n    ${csrf_elem}  FindElem  input[name=\"csrf_token\"]\n    \n    # 获取其value属性值\n    ${csrf_value}  GetElemAttr  ${csrf_elem}  value\n    \n    # 返回dict对象\n    ${csrf_header}  Evaluate  {'X-Csrf-Token': '${csrf_value}'}\n    [Return]  ${csrf_header}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字登录用户，\n主要完成：\n点击input包含name=\"Identity\"的元素上，输入用户名zhangli_mail，\n点击input包含type=\"password\"的元素上，然后输入密码123456，点击“登录”\n等待页面出现 ‘快捷导航’",
        "output": "<thought>\n需要依次执行步骤：点击用户名输入框并输入用户名，点击密码输入框并输入密码，点击“登录”按钮，最后等待“快捷导航”文本出现。\n</thought>\n\n<code_block>\n# 定义关键字 '登录用户'\n*** Keywords ***\n登录用户\n    # 点击用户名输入框并输入用户名\n    ClickElem | input[name=\"Identity\"]\n    SendText | zhangli_mail\n\n    # 点击密码输入框并输入密码\n    ClickElem | input[type=\"password\"]\n    SendText | 123456\n\n    # 点击 '登录' 按钮\n    Click | 登录\n\n    # 等待页面上出现 '快捷导航'\n    WaitText | 快捷导航\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面上表格行数为 1",
        "output": "<thought>\n要校验页面上表格行数为1，我们需要使用 `CheckRowCount` 关键字。这个关键字接受两个参数：行数和基准元素。本例中基准元素为默认的空值。\n\n思路：\n1. 使用 `CheckRowCount` 校验表格行数为 1\n</thought>\n\n<code_block>\n# 校验表格行数为 1\nCheckRowCount | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击运维监控，点击告警应急，点击表格第一行的详情，鼠标指向 内置加速区域 右边的 问号 图标",
        "output": "<thought>\n为了解决这个场景，我需要依次点击和操作几个元素。\n1. 使用`Click`关键字点击“运维监控”。\n2. 使用`Click`关键字点击“告警应急”。\n3. 使用`ClickTextOfRow`点击表格第一行的“详情”。\n4. 最后，需要使用`MoveToIconToTheDirectionOf`关键字将鼠标移动到“内置加速区域”右边的“问号”icon上。\n</thought>\n\n<code_block>\n# 点击运维监控\nClick | 运维监控\n\n# 点击告警应急\nClick | 告警应急\n\n# 点击表格第一行的详情\nClickTextOfRow | 1 | 详情\n\n# 移动到内置加速区域右边的问号图标\nMoveToIconToTheDirectionOf | 内置加速区域 | right | question\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "配件类型 选择 UI自动化添加类型",
        "output": "<thought>\n为了解决这个问题，我首先需要确保我在正确的字段中输入了正确的值。因此，我选择了SetField关键字，因为它可以让我在特定的字段里输入值。在本例中，我需要在“配件类型”字段中输入“UI自动化添加类型”，所以我选择了这个关键字以便将这个值输入进去。\n</thought>\n\n<code_block>\n# 设置配件类型为\"UI自动化添加类型\"\nSetField | 配件类型 | UI自动化添加类型\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 src 带有 mouse.png 的  img 元素",
        "output": "<thought>\n根据问题描述，我们的任务是点击一个 img 元素，它的 src 属性值包含 mouse.png。这个任务可以通过使用 RF 的 \"ClickElem\" 关键字来完成。\"ClickElem\" 关键字可以让我们通过指定一个 jquery 选择器来模拟点击一个元素。关于选择器，我们可以使用 \"img[src*='mouse.png']\" 来选择 src 属性值包含 mouse.png 的 img 元素，其中 \"*\" 表示包含。\n</thought>\n\n<code_block>\n# 点击 src 带有 mouse.png 的  img 元素\nClickElem  |  img[src*='mouse.png']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击Create Function左边的图标，点击左上角的返回图标，点击是否强制下线右侧按钮，上传文件：file.txt",
        "output": "<thought>\n要完成场景中描述的操作，我们依次需要执行以下操作：\n1. 首先，点击\"Create Function\"左边的icon。\n2. 然后，点击屏幕左上角的返回icon。\n3. 接着，点击\"是否强制下线\"右侧的按钮。\n4. 最后，上传文件“file.txt”。\n\n- \"Create Function\"左边的icon可以使用`ClickIconToTheDirectionOf`关键字。\n- 左上角的返回icon可以通过`ClickIconToTheDirectionOf`相对于屏幕中心的定位。\n- \"是否强制下线\"右侧的按钮可以使用`ClickElemToTheDirectionOf`关键字。\n- 上传文件直接使用`UploadFile`关键字。\n\n</thought>\n\n<code_block>\n# 点击“Create Function”左边的icon\nClickIconToTheDirectionOf | Create Function | left\n\n# 点击屏幕左上角的返回icon\nClickIconToTheDirectionOf | SCREEN_CENTER | topLeft | back\n\n# 点击“是否强制下线”右侧的按钮\nClickElemToTheDirectionOf | 是否强制下线 | right | button\n\n# 上传文件file.txt\nUploadFile | file.txt\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "读取并打印文件 byte-test.key 的内容。提示，可以用 OperatingSystem 库中的 Get File",
        "output": "<thought>\n为了读取并打印文件内容，我们可以使用RobotFramework中的OperatingSystem库提供的关键字Get File来读取文件，然后使用BuiltIn库中的Log关键字打印内容。\n</thought>\n\n<code_block>\n# 读取文件 byte-test.key 的内容\n${file_content}    Get File    byte-test.key\n\n# 打印文件内容\nLog    ${file_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找包含 ‘邀请同事’ 的 label 元素",
        "output": "<thought>\n这个任务的目标是查找包含文本‘邀请同事’的label元素。按照提供的关键字描述，应该使用FindByText关键字，因为这个关键字可以通过提供的文本返回相应的元素。我们可以在FindByText中传入'邀请同事'文本，指定HTML标签为label。\n</thought>\n\n<code_block>\n# 查找包含‘邀请同事’的label元素\n${elem}  FindByText | 邀请同事 | tag=label\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “关闭浏览器” 的关键字，作用就是把浏览器关闭",
        "output": "<thought>\n这个任务可以直接使用CloseBrowser关键字来实现，因为它专门用于关闭浏览器。考虑到需求只要求关闭浏览器，不需要进行错误检测，因此使用默认参数即可。\n</thought>\n\n<code_block>\n*** Keywords ***\n关闭浏览器\n    # 调用关键字以关闭浏览器\n    CloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置活动名称为my活动，活动时间为“2024年12月20日15:00”，“2024年12月20日15:30”，直播账号为3059263117461530",
        "output": "<thought>\n为了设置活动名称、活动时间和直播账号，我将使用BatchSetFields关键字，同时结合指定的格式为活动时间设置正确的值。\n</thought>\n\n<code_block>\n# 设置活动信息\nBatchSetFields  活动名称=my活动  活动时间=2024-12-20 15:00 ～ 2024-12-20 15:30  直播账号=3059263117461530\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击菜单名称 输入回归菜单01",
        "output": "\n    \n<thought>\n 需要使用Click关键字点击文本“菜单名称”，然后使用SendText关键字输入文本“回归菜单01”。\n </thought>\n \n <code_block>\n # 点击菜单名称\n Click | 菜单名称\n \n # 输入回归菜单01\n SendText | 回归菜单01\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“用户细查输入uuid并查询”，接受参数uuid，逻辑是：\n#1.在class包含arco-input arco-input-size-large的元素中输入给定的参数uuid\n#2.点击class包含arco-icon arco-icon-search的元素\n#3.等待页面出现文案“最近基本信息”",
        "output": "<thought>\n首先需要在指定的class元素中输入uuid，使用`FillArea`关键字。然后点击指定class的搜索图标，使用`ClickElem`关键字。最后等待页面出现“最近基本信息”文案，使用`WaitText`关键字。\n</thought>\n\n<code_block>\n*** Keywords ***\n用户细查输入uuid并查询\n    [Arguments]  ${uuid}\n    \n    # 在包含arco-input arco-input-size-large的元素中输入uuid\n    FillArea  div[class*=\"arco-input arco-input-size-large\"]  ${uuid}\n    \n    # 点击包含arco-icon arco-icon-search的元素\n    ClickElem  div[class*=\"arco-icon arco-icon-search\"]\n    \n    # 等待页面出现文案“最近基本信息”\n    WaitText  最近基本信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置${field}为”，接受变长参数 args，作用是向字段field中输入给定的一个或多个参数",
        "output": "<thought>\n根据题目要求，我们需要编写一个关键字，“设置${field}为”，此关键字接受变长参数 args，旨在向字段field中输入一个或多个给定参数。这个关键字可以使用 \"SetField\" 这个内置关键字来实现。我们可以将 \"${field}\" 和 \"@{args}\" 作为 \"SetField\" 的参数。\n</thought>\n\n<code_block>\n设置${field}为\n    [Arguments]  ${field}  @{args}\n    SetField  |  ${field}  |  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置关联属性为  打开",
        "output": "<thought>\n根据问题描述，需要在页面上设置一个名为“关联属性”的字段为“打开”。可以使用SetField关键字完成此任务。\n</thought>\n\n<code_block>\n# 设置关联属性为 打开\nSetField | 关联属性 | 打开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格 ‘创建日期’ 列的内容依次为：'2024-09', '2024-08', '2024-07', '2024-06'\n\n提示：可以循环获取表格前 N 行的 ‘创建日期’ 列所在单元格的内容，进行校验",
        "output": "<thought>\n首先，我们需要获取目标表格中‘创建日期’列的所有内容。为此，可以使用GetColValues关键字获取整列数据。然后，我们可以逐一校验每行的数据是否与期望值相符。由于涉及到顺序校验，可以使用RF的FOR循环特性，逐行检查与预期的列表进行比较。\n</thought>\n\n<code_block>\n# 定义预期的日期列表\n@{expected_dates}  Create List  2024-09  2024-08  2024-07  2024-06\n\n# 获取‘创建日期’列的所有值\n@{actual_dates}  GetColValues  创建日期\n\n# 校验实际数据与预期数据是否匹配\nFOR  ${index}  IN RANGE  0  ${len(expected_dates)}\n    # 这里 actual_dates 数组的 index + 1是因为表格列值中的第一个是列头文本，从第二个开始才是真正的值\n    Should Be Equal As Strings   ${actual_dates}[${index+1}]   ${expected_dates}[${index}]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名字为 “填写表单” 的关键字，接受 kwargs 参数，作用是将 kwargs 中的每一个 key:value 对都填写到页面上，其中 key 是字段名，value 是字段值",
        "output": "<thought>\n 我们需要创建一个关键字“填写表单”，该关键字接受一个字典形式的参数 `kwargs`。对于字典中的每一个键值对，将键作为字段名，值作为字段值，使用 SetField 关键字将值填入相应的字段中。可以通过循环遍历 `kwargs` 来实现这一点。\n </thought>\n \n <code_block>\n 填写表单\n  [Arguments]  ${kwargs}\n  # 遍历字典中的每一个键值对\n  FOR  ${key}  ${value}  IN  &{kwargs}\n  # 将值填入对应字段\n  SetField | ${key} | ${value}\n  END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面滑动到第四个data-auto-id为card-content的区域全部显示出来",
        "output": "<thought>\n为了将第四个data-auto-id为card-content的元素移动到视野内，我需要首先定位到该元素。基于jQuery选择器，我可以使用:eq(3)来选择第四个匹配的元素。然后，使用MoveIntoView关键字来确保该元素出现在视野中。\n</thought>\n\n<code_block>\n# 查找第四个data-auto-id为card-content的元素\n${elem}  FindElem | [data-auto-id=\"card-content\"]:eq(3)\n\n# 将元素移动到视野内\nMoveIntoView | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "断言执行关键字 ‘ui check alert contains any  didMountAction’ 会失败",
        "output": "<thought>\n要断言执行关键字 'ui check alert contains any didMountAction' 会失败，我们可以使用 `Run Keyword And Expect Error` 关键字来捕获错误，然后校验发生错误的过程。具体来说，我们将执行 'ui check alert contains any didMountAction' 并期望它引发错误。\n\n使用 `Run Keyword And Expect Error` 关键字可以捕获预期会失败的关键字，并检查它是否确实抛出了错误。我们不需要具体校验警告的文本内容是否符合预期，只需断言执行会失败。\n\n所以我们的解决思路如下：\n1. 使用 `Run Keyword And Expect Error` 关键字。\n2. 执行 `ui check alert contains any didMountAction` 关键字并捕获任何错误。\n3. 输出断言执行关键字会失败的结果。\n</thought>\n\n<code_block>\n# 断言执行关键字 'ui check alert contains any didMountAction' 会失败\nRun Keyword And Expect Error  *  ui check alert contains any  didMountAction\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置标签为：xx  yy  zz  ww",
        "output": "<thought>\n这个问题比较简单，只需要用SetField关键字进行设置即可，因为我们需要设置的是标签，所以name设为\"标签\"，将\"xx\",\"yy\",\"zz\"和\"ww\"作为参数进行传递。\n</thought>\n\n<code_block>\n# 设置标签为：xx  yy  zz  ww\nSetField | 标签 | xx | yy | zz | ww\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “计费模式”\n选择 弹窗 “包年包月”\n点击“确定”按钮",
        "output": "<thought>\n首先点击“计费模式”文本，然后选择弹窗中的“包年包月”，最后点击弹窗中的“确定”按钮。可以使用Click、SelectOption、Click关键字。\n</thought>\n\n<code_block>\n# 点击“计费模式”\nClick | 计费模式\n\n# 选择弹窗中的“包年包月”\nSelectOption | 包年包月 | base=POPUP\n\n# 点击弹窗中的“确定”按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "读取 variables.yaml 文件的内容，从中获取 DB_NAME 字段的值",
        "output": "<thought>\n在这个场景中，我们需要读取一个YAML文件`variables.yaml`，并获取其中的字段`DB_NAME`的值。在Robot Framework中，通常会使用`YAMLLibrary`来处理YAML文件。然而，由于目前我们没有提供合适的内建或自定义关键字，我们可以使用Python代码的执行来读取YAML文件并提取所需字段。这可以通过`Evaluate`来执行Python代码完成。\n</thought>\n\n<code_block>\n# 从YAML文件中获取`DB_NAME`字段的值\n&{yaml_data}  Evaluate  yaml.safe_load(open('variables.yaml'))  modules=yaml\n${db_name}  Set Variable  ${yaml_data['DB_NAME']}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "验证${name}同一行存在“每日跟随上游同步”，然后点击与${name}在表格同一行第7列的编辑",
        "output": "<thought>\n思路：首先，由于${name}同一行存在“每日跟随上游同步”的条件是验证性质的，我们可以使用 'IsRowContainsText' 关键字来实现。然后，我们使用'ClickTextOfCell'关键字来点击${name}所在行的第7列的'编辑'。这是因为该关键字可以通过行名和列号定位到具体的单元格文本并执行点击操作。\n</thought>\n\n\n<code_block>\n# 验证${name}同一行存在“每日跟随上游同步”\n${result}=  IsRowContainsText | ${name} | 每日跟随上游同步\nShould Be True  ${result}\n\n# 点击与${name}在表格同一行第7列的编辑\nClickTextOfCell  |  ${name}  |  7  |  编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向automation_ssdtnmnwph>进组人均右侧的输入框输入显著上涨",
        "output": "<thought>\n首先需要找出基准元素automation_ssdtnmnwph>进组人均，然后找到其右侧的input/textarea元素，最后向该元素中输入显著上涨。通过关键字FindElemToTheDirectionOf找到右侧的input/textarea元素，再使用FillArea向该元素输入内容。\n</thought>\n\n<code_block>\n# 查找automation_ssdtnmnwph>进组人均右侧的input/textarea元素\n${input_elem}  FindElemToTheDirectionOf | automation_ssdtnmnwph>进组人均 | right | input, textarea\n\n# 向查找到的元素中输入显著上涨\nFillArea | ${input_elem} | 显著上涨\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行关键字 来客登录，等待页面加载，校验页面存在‘查看’、‘复制并创建’的按钮，点击 草稿箱 左边的 待商家审核，校验页面存在 UI自动化-足疗按摩-团购-BD创建-免审",
        "output": "<thought>\n我们需要用到以下几个关键字：\n1. 使用关键字调用来客登录。\n2. 使用 `WaitLoading` 等待页面加载完成。\n3. 使用 `CheckHasAnyText` 校验页面存在“查看”和“复制并创建”。\n4. 使用 `ClickTextToTheDirectionOf` 点击“草稿箱”左边的“待商家审核”。\n5. 使用 `CheckHasText` 校验页面存在“UI自动化-足疗按摩-团购-BD创建-免审”。\n</thought>\n\n<code_block>\n# 调用 '来客登录'\n来客登录\n\n# 等待页面加载完成\nWaitLoading\n\n# 校验页面存在“查看”和“复制并创建”\nCheckHasAnyText | 查看 | 复制并创建\n\n# 点击“草稿箱”左边的“待商家审核”\nClickTextToTheDirectionOf | 草稿箱 | left | 待商家审核\n\n# 校验页面存在“UI自动化-足疗按摩-团购-BD创建-免审”\nCheckHasText | UI自动化-足疗按摩-团购-BD创建-免审\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击「China's ISPs」右边的元素，并勾选「China Telecom」",
        "output": "<thought>\n由于这个任务需要点击\"China's ISPs\"右边的元素，我们可以使用关键字\"ClickElemToTheDirectionOf\"实现。然后勾选\"China Telecom\"，我们可以用\"CheckBoxOn\"关键字实现。\n</thought>\n\n<code_block>\n# 点击「China's ISPs」右边的元素\nClickElemToTheDirectionOf | China's ISPs | right \n\n# 勾选「China Telecom」\nCheckBoxOn | China Telecom\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "不勾选 全选，设置 弹窗中 “账务账期”为“2024-08~2024-09”，点击 弹窗中 确定 按钮",
        "output": "<thought>\n首先，根据场景描述，我们需要执行三个操作：1. 取消勾选“全选”复选框；2. 设置弹窗中“账务账期”为“2024-08~2024-09”；3. 点击弹窗中的“确定”按钮。\n\n对于第一个操作，可使用`CheckBoxOff`关键字来取消勾选复选框。\n\n第二个操作需要使用`SetField`关键字，指定弹窗中的“账务账期”进行设置。\n\n第三个操作可以使用`Click`关键字，指定基于弹窗的“确定”按钮进行点击。\n</thought>\n\n<code_block>\n# 取消勾选“全选”复选框\nCheckBoxOff | 全选\n\n# 设置弹窗中“账务账期”为“2024-08~2024-09”\nSetField | 账务账期 | 2024-08~2024-09 | base=POPUP\n\n# 点击弹窗中的“确定”按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对包含事件详情的区域向下滚动 50%",
        "output": "<thought>\n首先需要找到包含文本“事件详情”的元素，可以使用`FindByText`关键字。找到该元素后，可以使用`ScrollUpDown`关键字对该元素进行滚动。需要注意的是，滚动关键字不需要额外指定滚动的方向，因为它的设计就是为了对元素进行上下滚动，因此只需指定滚动的百分比即可。\n</thought>\n\n<code_block>\n# 查找包含事件详情的元素\n${elem}  FindByText | 事件详情\n\n# 对包含事件详情的元素向下滚动 50%\nScrollUpDown | ${elem} | 50%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表头\"展示名\"列的筛选框",
        "output": "<thought>\n需要选择表格头中\"展示名\"列的筛选框。可以使用`ClickElem`关键字，通过选择器`th:contains(展示名) input[type='checkbox']`来实现。\n</thought>\n\n<code_block>\n# 点击表格头\"展示名\"列的筛选框\nClickElem | th:contains(展示名) input[type='checkbox']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${IP}是192.168.9.96 ，页面应该包含 \"leiyu.pm-100-dppublic105勿删\"",
        "output": "<thought>\n首先需要判断变量${IP}是否等于192.168.9.96。如果条件成立，则检查页面是否包含文本 \"leiyu.pm-100-dppublic105勿删\"。 通过CheckHasText关键字进行文本校验。\n</thought>\n\n<code_block>\n# 判断变量${IP}是否为192.168.9.96\nIF  \"${IP}\" == \"192.168.9.96\"\n    # 校验页面是否包含文本 \"leiyu.pm-100-dppublic105勿删\"\n    CheckHasText  leiyu.pm-100-dppublic105勿删\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印 ‘属性名’ 表格的，第一个行的内容",
        "output": "<thought>\n要获取‘属性名’表格第一行的内容，可以使用GetRowValues关键字，该关键字返回行的所有值作为列表。我们需要指定表格名称和行号。\n</thought>\n\n<code_block>\n# 获取属性名表格第一行的值\n@{first_row_values}  GetRowValues | 1 | tbl=属性名\n\n# 打印第一行的内容\nLog Many | @{first_row_values}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向下滚动",
        "output": "<thought>\n对于“向下滚动”这一要求，首先考虑使用RobotFramework的PageDown关键字。该关键字实现页面滚动，可以设置滚动的次数。默认情况下，PageDown滚动一次既能满足要求。\n</thought>\n\n<code_block>\n# 向下滚动1次\nPageDown | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击操作右下方的编辑",
        "output": "<thought>\n对于此场景，我们需要使用ClickTextToTheDirectionOf关键字。基准元素为“操作”，方向为“bottomRight”，目标文本为“编辑”。因此，我们的任务是点击“操作”右下方的“编辑”文本。\n</thought>\n\n<code_block>\n# 点击操作右下方的编辑\nClickTextToTheDirectionOf | 操作 | bottomRight | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “关闭浏览器” 的关键字，接受 exclude 参数，作用是：先校验页面是否有错误，在exclude中的都不算错误，然后关闭浏览器",
        "output": "<thought>\n需要检查页面的错误信息，并排除exclude参数中指定的错误，然后关闭浏览器。可以使用`CheckErrExclude`来排除指定错误，然后用`CloseBrowser`关闭浏览器。\n</thought>\n\n<code_block>\n*** Keywords ***\n关闭浏览器\n    [Arguments]  ${exclude}\n    # 校验错误并排除exclude中的内容\n    CheckErrExclude  ${exclude}\n    # 关闭浏览器\n    CloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗的 账务账期 右边的 小图标",
        "output": "<thought>\n在这个测试场景中，我们需要点击弹窗中的\"账务账期\"文本右边的图标。这个场景可以通过使用\"ClickIconToTheDirectionOf\"关键字来解决。该关键字需要提供基准元素，也就是我们的\"账务账期\"文本，同时需要提供方向，也就是\"right\"。由于图标没有特定的名称，我们可以留空。\n</thought>\n\n<code_block>\n# 点击弹窗中的\"账务账期\"文本右边的图标\nClickIconToTheDirectionOf | 账务账期 | right | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写实验名称，前缀为 ‘高优插入-支持TT推荐大反转实验父子实验流程 - 测试服务端0402’，后缀为当前日期",
        "output": "<thought>\n解决问题思路\n\n根据题目要求，需要填写实验名称的前缀和后缀。前缀是给出的常量字符串，后缀是当前日期。\n\n首先，我们需要获取当前日期，这可以通过Robot Framework的内置关键字“Get Current Date”来实现。其次，我们需要将前缀、后缀拼接起来，得到完整的实验名称并填入。这可以通过内置关键字“Set Variable”和“Catnate”来实现。\n\n具体步骤如下：\n1. 使用关键字“Get Current Date”，以“YYYYMMDD”的格式获取当前日期并赋值给变量“${date}”\n2. 定义前缀字符串，并赋值给变量“${prefix}”\n3. 使用关键字“Catenate”，将前缀和日期拼接起来，并赋值给变量“${experiment_name}”\n4. 使用关键字“SetField”，将变量“${experiment_name}”的值填入\"实验名称\"字段\n</thought>\n\n<code_block>\n# 获取当前日期\n${date}=  Get Current Date  result_format=%Y%m%d\n\n# 定义前缀字符串\n${prefix}=  Set Variable  高优插入-支持TT推荐大反转实验父子实验流程 - 测试服务端0402\n\n# 将前缀和日期拼接起来，得到实验名称\n${experiment_name}=  Catenate  SEPARATOR=  ${prefix}  ${date}\n\n# 填入实验名称\nSetField  实验名称  ${experiment_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第五个class=\"semi2-button-content\"的元素，随后点击viewBox=\"0 0 24 24\"的元素，点击变更配置下方的中型，最后找到并点击 placeholder 为「请输入」的 input 元素，设置其 value为 292",
        "output": "<thought>\n首先，根据需求，应该依次使用ClickElem来点击第5个选择器为`.semi2-button-content`的元素。接着需要找到并点击选择器为`[viewBox=\"0 0 24 24\"]`的元素。然后需要使用ClickTextToTheDirectionOf来点击“变更配置”下方的“中型”文本。最后，使用FindElem结合选择器查找占位符为“请输入”的input元素，并使用FillArea为其设置值292。\n</thought>\n\n<code_block>\n# 点击第五个class为semi2-button-content的元素\nClickElem | [class=semi2-button-content]:eq(4)\n\n# 点击viewBox为\"0 0 24 24\"的元素\nClickElem | [viewBox=\"0 0 24 24\"]\n\n# 点击“变更配置”下方的“中型”\nClickTextToTheDirectionOf | 变更配置 | bottom | 中型\n\n# 查找placeholder为「请输入」的input元素并设置其值为292\n${input_elem}  FindElem | input[placeholder='请输入']\nFillArea | ${input_elem} | 292\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "描述输入 ${desc}，规则名称和英文名称也输入${trigger_name}变量",
        "output": "<thought>\n使用BatchSetFields关键字可以批量设置多个页面字段，因此可以将描述、规则名称和英文名称都放在一个BatchSetFields中，并将变量${desc}和${trigger_name}传入关键字中。\n</thought>\n\n<code_block>\n# 批量设置描述、规则名称和英文名称\nBatchSetFields  描述=${desc}  规则名称=${trigger_name}  英文名称=${trigger_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二个class包含arco-input-size-small的元素，并输入${layer_child_name}",
        "output": "<thought>\n需要选取ClickElem关键字来点击第二个class包含arco-input-size-small的元素，再使用SetField关键字输入${layer_child_name}。\n</thought>\n\n<code_block>\n# 点击第二个class包含arco-input-size-small的元素\nClickElem | [class*=arco-input-size-small]:eq(1)\n\n# 输入变量${layer_child_name}\nSendText | ${layer_child_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找class包含A, id=D, 文本为OK的span",
        "output": "<thought>\n需要使用FindElem关键字查找符合条件的元素，因为条件中包含class, id和文本要求，可以使用jquery选择器来实现。\n</thought>\n\n<code_block>\n# 查找class包含A, id=D, 文本为OK的span\n${elem}  FindElem | span[class*=A][id=D]:contains(OK)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个主账号登录关键字，接受${DLADMIN}，  ${DLADMIN_PWD}参数 ,关键字先打开url${HOST},点击请输入用户名输入账号，再点击请输入登录密码输入密码然后点击立即登录，等待页面出现大数据研发治理套件，即登录成功",
        "output": "<thought>\n首先，打开指定的URL，然后依次点击并输入用户名和密码。接着点击登录按钮，并等待特定页面文本出现确认登录成功。使用`OpenUrl`打开页面，`SetField`输入用户名和密码，`Click`实现点击操作，`WaitText`等待页面上出现目标文本。\n</thought>\n\n<code_block>\n*** Keywords ***\n主账号登录\n    [Arguments]  ${DLADMIN}  ${DLADMIN_PWD}\n    \n    # 打开指定的URL\n    OpenUrl  ${HOST}\n    \n    # 输入用户名\n    Click  请输入用户名\n    SendText  ${DLADMIN}\n    \n    # 输入密码\n    Click  请输入登录密码\n    SendText  ${DLADMIN_PWD}\n    \n    # 点击立即登录\n    Click  立即登录\n    \n    # 等待登录成功后的页面文字出现\n    WaitText  大数据研发治理套件\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${should_visit_page}不是False，则访问${main_page}",
        "output": "<thought>\n首先需要判断变量${should_visit_page}是否不等于False，若条件满足则使用OpenUrl关键字访问${main_page}。RF的IF语法可以直接用于条件判断。\n</thought>\n\n<code_block>\n# 判断是否需要访问页面\nIF  \"${should_visit_page}\" != \"False\"\n    # 访问主页面\n    OpenUrl  ${main_page}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${domain} 操作 下方 更多 图标按钮",
        "output": "<thought>\n根据需求，需要点击 `${domain} 操作` 下方的 `更多` icon 按钮。我们可以使用 `ClickIconToTheDirectionOf` 关键字来实现这个操作，其中 `the_base` 是 `${domain} 操作`，`direction` 是 `bottom`，`icon` 是 `more`。\n</thought>\n\n<code_block>\n# 点击 `${domain} 操作` 下方的 `更多` icon 按钮\nClickIconToTheDirectionOf | ${domain} 操作 | bottom | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“设置待归因事件”，接受 group_name, args 参数，主要作用是：\n1. 将group_name映射成index, 映射关系为：A:0, B:1, C:2, D:3, E:4, F:5\n2. 找到第index个div class包含AttributionTouchPointEvent__container的元素elem1，向其中输入一个或多个 args",
        "output": "<thought>\n首先，需要将 group_name 映射到相应的 index。接着，使用该 index 查找指定的 div 元素，并使用 FillArea 向其中输入 args。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置待归因事件\n    [Arguments]  ${group_name}  @{args}\n    # 创建映射关系字典\n    ${group_index_map}  Create Dictionary  A=0  B=1  C=2  D=3  E=4  F=5\n    # 从字典中获取相应的index\n    ${index}  Get From Dictionary  ${group_index_map}  ${group_name}\n    # 创建选择器以查找目标元素\n    ${selector}  Set Variable  div[class*=AttributionTouchPointEvent__container]:eq(${index})\n    # 填入args到选择器指定的元素\n    FillArea  ${selector}  @{args}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待loading结束，设置投放时间为：2024/12/21～2024/12/21，点击确定或确认",
        "output": "<thought>\n首先需等待页面加载完成，可使用`WaitLoading`关键字。接着，使用`SetField`关键字设置投放时间。最后，通过尝试点击“确定”或“确认”按钮，可使用`ClickAny`关键字。\n</thought>\n\n<code_block>\n# 等待加载完成\nWaitLoading\n\n# 设置投放时间为 2024/12/21～2024/12/21\nSetField | 投放时间 | 2024/12/21～2024/12/21\n\n# 点击“确定”或“确认”\nClickAny | 确定 | 确认\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 ‘库存数量’ 字段的值，校验他为 空，然后向此字段中输入：300，点击下一步，等加载好页面后，进行全屏截图对比",
        "output": "<thought>\n首先获取“库存数量”字段的值，并校验它为空。然后向该字段输入值300。接下来点击“下一步”按钮，并等待页面加载完成。最后进行全屏截图并与基准图进行对比。\n</thought>\n\n<code_block>\n# 获取库存数量字段的值\n${val}  GetFieldVal | 库存数量\n\n# 校验库存数量字段为空\nShould Be Equal As Strings  ${val}  ''\n\n# 向库存数量字段输入300\nSetField | 库存数量 | 300\n\n# 点击下一步\nClick | 下一步\n\n# 等待页面加载完成\nWaitLoading\n\n# 进行全屏截图对比\nImageDiff\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击提交，等待申请单号出现，并记录申请单号字段的值为 变量 req",
        "output": "<thought>\n首先，我需要点击提交按钮。这可以通过使用“Click”关键字来实现，文本字段设置为\"提交\"。\n然后，我需要等待申请单号出现在页面上。这可以通过使用“WaitText”关键字来实现，只需要将文本字段设置为\"申请单号\"。\n最后，我需要获取申请单号字段的值并将其赋值给变量req。这可以通过使用“GetFieldVal”关键字来实现，只需将字段名设置为\"申请单号\"。\n</thought>\n\n<code_block>\n# 点击提交按钮\nClick  | 提交\n\n# 等待申请单号出现在页面上\nWaitText | 申请单号 \n\n# 获取申请单号的值并赋值给变量req\n${req}  GetFieldVal | 申请单号 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 共享钱包，点击弹窗中的立即体验，输入转账金额：600，点击确认，通过弹窗右上角的叉号关闭弹窗 ",
        "output": "<thought>\n为了解决这个问题，我们需要依次执行以下操作：\n1. 使用 `Click` 关键字点击 \"共享钱包\"。\n2. 使用 `Click` 关键字点击弹窗中的 \"立即体验\"，指定 `base=POPUP` 表示在弹窗中查找。\n3. 使用 `SetPopupField` 关键字在弹窗的金额输入字段中输入 \"600\"。\n4. 使用 `Click` 关键字点击弹窗中的 \"确认\"，同样需要指定 `base=POPUP`。\n5. 使用 `ClickIcon` 关键字点击弹窗右上角的关闭小图标 \"close\"，并指定基准 `base=POPUP`。\n</thought>\n\n<code_block>\n# 点击共享钱包\nClick | 共享钱包\n\n# 点击弹窗中的立即体验\nClick | 立即体验 | base=POPUP\n\n# 输入转账金额 600\nSetPopupField | 金额 | 600\n\n# 点击弹窗中的确认\nClick | 确认 | base=POPUP\n\n# 通过弹窗右上角的close icon关闭弹窗\nClickIcon | close | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘明细列表’ 右边的 ‘按月’，然后选择 ‘按周’",
        "output": "<thought>\n我们需要使用`ClickTextToTheDirectionOf`关键字来实现点击某个文本右边的另一个文本。首先，点击‘明细列表’右边的‘按月’，然后选择选项‘按周’。`SelectOption`关键字可以用于选择一个选项。\n</thought>\n\n<code_block>\n# 点击 '明细列表' 右边的 '按月'\nClickTextToTheDirectionOf | 明细列表 | right | 按月\n\n# 选择 '按周'\nSelectOption | 按周\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘访问类型’ 为 ‘只读’，‘有效期’ 为 ‘1天’",
        "output": "<thought>\n根据描述，我们需要使用`BatchSetFields`关键字来同时设置\"访问类型\"和\"有效期\"两个字段的值。这样可以简化代码，并提高可读性和维护性。\n</thought>\n\n<code_block>\n# 批量设置字段：访问类型为只读，有效期为1天\nBatchSetFields  访问类型=只读  有效期=1天\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数量后面的编辑, 输入 100",
        "output": "<thought>\n在这个问题中，我们首先需要找到“数量”后面的“编辑”文本，然后点击它。这样就可以将焦点移动到输入框中。然后，我们可以使用“SendText”关键字将输入设置为“100”。这个关键字允许我们直接在当前光标位置输入某些文本。\n这个问题需要用到的关键字有两个，分别为“ClickTextToTheDirectionOf”和“SendText”。“ClickTextToTheDirectionOf”关键字允许我们点击某个文本相对于给出位置的元素或文本，而“SendText”关键字允许我们在当前光标位置输入文本。\n</thought>\n\n<code_block>\n# 点击数量后面的编辑\nClickTextToTheDirectionOf  | 数量 | right | 编辑\n\n# 输入100\nSendText  | 100    \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“添加自定义产品”的关键字，接受参数keyword，业务逻辑为：如果 添加自定义产品 按钮没有置灰展示，就点击添加自定义产品，keyword中有一系列key和value ，将每一个value值输入key字段中，然后点击保存基本信息，检查名为类型的列名中包含 自定义、唯一键的列名中包含 CDP、产品名称-中文中包含 客户数据平台",
        "output": "<thought>\n要实现这个任务，我们需要创建一个关键字“添加自定义产品”，接受一个参数keyword。首先，我们需要判断“添加自定义产品”按钮是否置灰，如果没有置灰，则点击该按钮。接着，根据keyword中的key和value，将每个value输入到对应的key字段中。最后，点击保存基本信息，并检查表格中列名为“类型”的列是否包含文本“自定义”，列名为“唯一键”的列是否包含“CDP”，列名为“产品名称-中文”的列是否包含“客户数据平台”。为此，我们需要用到以下关键字：`IsAnyElemExisting`、`Click`、`SetField`、`CheckColHas`。\n</thought>\n\n<code_block>\n*** Keywords ***\n添加自定义产品\n    [Arguments]  &{keyword}\n\n    # 判断 添加自定义产品 按钮是否未置灰\n    ${exist}  IsAnyElemExisting  button:contains(添加自定义产品):not([disabled])\n    IF  ${exist}\n        # 点击 添加自定义产品 按钮\n        Click  添加自定义产品\n\n        # 遍历keyword中的键值对，并填入对应字段\n        FOR  ${key}  ${value}  IN  &{keyword}\n            SetField  ${key}  ${value}\n        END\n\n        # 点击 保存基本信息\n        Click  保存基本信息\n\n        # 检查表格列中的文本\n        CheckColHas  类型  自定义\n        CheckColHas  唯一键  CDP\n        CheckColHas  产品名称-中文  客户数据平台\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查表格的所有行的 授权编号 列的值 和${LisnNo}一致",
        "output": "<thought>\n首先，可以通过关键字 GetRowCount 获取表格的行数，然后通过循环来获取每行中的“授权编号”列的值，然后使用 RF 的内置关键字 Should Be Equal As Strings 来验证获取的值和${LisnNo}是否一致。\n</thought>\n\n<code_block>\n# 获取表格行数\n${rows}  GetRowCount\n# 使用 FOR 循环遍历每一行\nFOR  ${i}  IN RANGE  1  ${rows}+1\n    # 获取每一行的列的值\n    ${val}  GetCellValue  ${i}  授权编号\n    # 验证获取的值和${LisnNo}是否一致\n    Should Be Equal As Strings  ${val}  ${LisnNo}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取今天日期",
        "output": "<thought>\n解决问题思路：RF标准库提供了获取当前日期的关键字。使用`Get Current Date`可以获取今天的日期，并通过格式化字符串来输出年/月/日格式。\n</thought>\n\n<code_block>\n# 获取今天的日期并格式化为年/月/日\n${today}  Get Current Date  result_format=%Y/%m/%d\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在${elem} 元素里输入 '线上经营': 10%，输入‘线下经营’: 5%",
        "output": "<thought>\n使用SetField关键字在指定元素${elem}中输入对应的字段和值。在${elem}元素中输入'线上经营'和'线下经营'的值。为每个字段使用base参数指定元素为${elem}即可。\n</thought>\n\n<code_block>\n# 在${elem} 元素里输入线上经营 10%\nSetField | 线上经营 | 10% | base=${elem}\n\n# 在${elem} 元素里输入线下经营 5%\nSetField | 线下经营 | 5% | base=${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在搜索框中输入adv。假设搜索框是一个文本包含‘搜索’的输入控件",
        "output": "<thought>\n我们要在一个文本包含‘搜索’的输入控件中输入文本“adv”。可以使用`SetField`关键字，并利用`near`参数来确定靠近“搜索”的字段。\n</thought>\n\n<code_block>\n# 在靠近“搜索”的地方输入adv\nSetField | 搜索 | adv | near=搜索\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择表格行：esc.large",
        "output": "<thought>\n在表格中查找并选择包含文本esc.large的行\n</thought>\n\n<code_block>\n# 选择表格行：esc.large\nSelectTableRow | esc.large\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器地址：https://p-vconsole.bytedance.net/auth/login?redirectURI=%2Fpartner%2F",
        "output": "<thought>\n我们需要使用OpenBrowser关键字打开一个指定的URL。在这个场景中，我们需要打开浏览器并访问给定的登录页面地址。可以使用OpenBrowser关键字并传入url参数来实现该功能。\n</thought>\n\n<code_block>\n# 打开浏览器并访问指定的登录页面\nOpenBrowser | https://p-vconsole.bytedance.net/auth/login?redirectURI=%2Fpartner%2F\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“下载分群数据” 的关键字，接受参数：name（默认值为1）, id_type, file_format, count 参数，id_type, file_format, count 的默认值均为空，操作逻辑为：\n1. 点击 name 所在表格行中的 ‘更多’ icon，然后点击 ‘下载’\n2. 将 ID类型设置为 id_type, 文件格式设置为 file_format， 导出ID数量 设置为 count\n3. 点击确定\n4. 校验页面无错误提示",
        "output": "<thought>\n要实现这个自动化流程，可以按以下步骤来：\n1. 使用 `ClickIconOfRow` 点击 name 所在行的 '更多' 图标。\n2. 使用 `Click` 点击 '下载'。\n3. 使用 `SetField` 设置 ID类型、文件格式和导出ID数量。\n4. 使用 `Click` 点击 '确定'。\n5. 使用 `CheckErrMsg` 校验页面无错误提示。\n</thought>\n\n<code_block>\n*** Keywords ***\n下载分群数据\n    [Arguments]  ${name}=1  ${id_type}=  ${file_format}=  ${count}=\n\n    # 点击 name 所在行的 '更多' icon\n    ClickIconOfRow  ${name}  more\n    \n    # 点击 '下载'\n    Click  下载\n\n    # 设置 ID类型\n    SetField  ID类型  ${id_type}\n    \n    # 设置 文件格式\n    SetField  文件格式  ${file_format}\n\n    # 设置 导出ID数量\n    SetField  导出ID数量  ${count}\n\n    # 点击 '确定'\n    Click  确定\n\n    # 校验页面无错误提示\n    CheckErrMsg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断 更新时间 的值是否为 2025-04-19～2025-05-07",
        "output": "<thought>\n首先，我们需要使用适当的关键字来获取 \"更新时间\" 字段的值。通过 `GetFieldVal` 关键字获取该字段的值。然后，我们将需要的日期范围与获取值进行比较，判断是否匹配。考虑使用内置 `Evaluate` 关键字执行 Python 代码进行日期范围匹配，并返回布尔值。若匹配成功，记录日志；若不匹配，根据需要记录错误或采取其他措施。\n</thought>\n\n<code_block>\n# 获取更新时间字段的值\n${updated_date_range}  GetFieldVal  更新时间\n\n# 使用Python代码进行日期范围比较\n${is_match}  Evaluate  '2025-04-19～2025-05-07' == '${updated_date_range}'\n\n# 判断是否匹配\nIF  ${is_match}\n    Log  日期匹配成功\nELSE\n    Log  日期不匹配\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取浏览器打开的窗口个数，检查窗口个数是否为1",
        "output": "<thought>\n要获取浏览器打开的窗口个数，我们可以使用SeleniumLibrary中的`Get Window Handles`关键字来获取所有窗口的句柄，然后通过`Get Length`关键字来计算这些句柄的个数。\n</thought>\n\n<code_block>\n# 获取浏览器窗口句柄的个数\n${window_handles}  Get Window Handles\n${window_count}  Get Length | ${window_handles}\n\n# 校验窗口个数是否为1\nShould Be Equal As Strings  ${window_count}  1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第一行的工单编号字段，点击 ‘操作’，点击请选择合同二级类型，勾选报告人，设置 输入配置名称搜索 为：${ip_name_black}",
        "output": "<thought>\n要完成这些操作，我们需要逐步进行。首先，根据任务要求，我们需要点击表格的第一行中\"工单编号\"字段。然后，我们将点击页面上的\"操作\"。接下来，我们选择并点击\"合同二级类型\"的选项。之后，我们需要勾选\"报告人\"这个选项。最后，输入\"${ip_name_black}\"到\"配置名称搜索\"字段。\n\n以下是我们可以使用的关键字：\n1. 使用`ClickTextOfCell`来点击表格中指定单元格的\"工单编号\"。\n2. 使用`Click`来点击\"操作\"。\n3. 使用`Click`来点击并选择\"合同二级类型\"。\n4. 使用`CheckBoxOn`来勾选\"报告人\"。\n5. 使用`SetField`来输入\"配置名称搜索\"。\n\n这些步骤确保了我们按顺序进行每个操作。现在，我们将这些步骤转换为代码。\n</thought>\n\n<code_block>\n# 点击表格第一行的工单编号字段\nClickTextOfCell | 1 | 工单编号\n\n# 点击 ‘操作’\nClick | 操作\n\n# 点击请选择合同二级类型\nClick | 请选择合同二级类型\n\n# 勾选报告人\nCheckBoxOn | 报告人\n\n# 设置 输入配置名称搜索 为：${ip_name_black}\nSetField | 配置名称搜索 | ${ip_name_black}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把${date_range1}和${val1} 转化为可比较的 再判断${date_range1}和 ${val1} 内容一致",
        "output": "<thought>\n首先需要将`${date_range1}`和`${val1}`转化为可比较的字符串。对于这个任务，可以使用Robot Framework的内置关键字`Should Be Equal As Strings`，确保两者内容一致。\n</thought>\n\n<code_block>\n# 将${date_range1}和${val1}转化为可比较的字符串，并判断内容一致\nShould Be Equal As Strings  ${date_range1}  ${val1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“前往升级”的关键字，逻辑如下：\n1、点击前往升级\n2、等待页面加载完成\n3、验证页面中存在套餐更配\n4、点击套餐更配左边的icon",
        "output": "<thought>\n为了实现这个关键字，我们需要分几个步骤完成：\n1. 使用`Click`关键字点击“前往升级”。\n2. 使用`WaitLoading`关键字等待页面加载完成。\n3. 使用`CheckHasText`关键字验证页面是否包含“套餐更配”。\n4. 使用`ClickIconToTheDirectionOf`关键字点击“套餐更配”左边的icon。\n</thought>\n\n<code_block>\n*** Keywords ***\n前往升级\n    # 点击文本为“前往升级”的按钮\n    Click  前往升级\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 验证页面中是否存在“套餐更配”\n    CheckHasText  套餐更配\n    \n    # 点击“套餐更配”左边的icon\n    ClickIconToTheDirectionOf  套餐更配  left\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到文本 页面1 上",
        "output": "<thought>\n对于这个场景，我们需要将鼠标移动到文本“页面1”上，使用MoTo关键字是最合适的。参数txt设置为“页面1”。\n</thought>\n\n<code_block>\n# 鼠标移动到文本 页面1 上\nMoTo | 页面1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找所有class = item label的元素，检验其文本不等于0，且不等于'-'，最后校验页面不包含 list_content",
        "output": "<thought>\n首先需要使用`FindElem`关键字查找到所有符合条件的元素，然后逐个检查元素的文本是否不等于\"0\"和\"-\"，对于这类校验，RF内置的Should系列关键字，使用`CheckNotHasText`关键字校验页面不包含指定文本。\n</thought>\n\n<code_block>\n# 查找所有class为item label的元素\n${elements}  FindElem  [class=\"item label\"]\n\n# 遍历每个元素，检验其文本\nFOR  ${element}  IN  @{elements}\n    ${text}  GetElemText  ${element}\n    Should Not Be Equal As Strings  ${text}  0\n    Should Not Be Equal As Strings  ${text}  -\nEND\n\n# 校验页面不包含list_content\nCheckNotHasText  list_content\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置请选择开始日期为当前时间的五分钟后，请选择结束日期为当前时间的十分钟后",
        "output": "<thought>\n我们需要使用“Add Time To Date”关键字来计算当前时间之后的五分钟和十分钟的日期时间。首先，我们会获取当前时间，然后分别添加五分钟和十分钟得到所需的开始日期和结束日期。接下来，我们将使用“SetField”关键字来设置“请选择开始日期”和“请选择结束日期”字段。\n</thought>\n\n<code_block>\n# 获取当前日期时间\n${current_date}  Get Current Date\n\n# 计算五分钟后的日期时间\n${start_date}  Add Time To Date  ${current_date}  5 minutes  result_format=%Y-%m-%d %H:%M:%S\n\n# 计算十分钟后的日期时间\n${end_date}  Add Time To Date  ${current_date}  10 minutes  result_format=%Y-%m-%d %H:%M:%S\n\n# 设置“请选择开始日期”为五分钟后的日期时间\nSetField  请选择开始日期  ${start_date}\n\n# 设置“请选择结束日期”为十分钟后的日期时间\nSetField  请选择结束日期  ${end_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "读取文件 common.robot 中的所有内容，然后写入 localstorage 中 content字段",
        "output": "<thought>\n我们需要读取文件内容，可以使用内置关键字来读取文件，然后使用LocalStorageSetItem关键字将内容写入localStorage。步骤如下：1. 使用内置关键字读取文件内容。2. 使用LocalStorageSetItem将读取的内容存入localStorage。\n</thought>\n\n<code_block>\n# 使用内置关键字读取文件内容\n${content}  Get File  common.robot\n\n# 将读取的内容写入localStorage中的content字段\nLocalStorageSetItem  content  ${content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传第三个文件${file}",
        "output": "<thought>\n要上传第三个文件，我们可以使用`UploadFile`关键字，该关键字允许通过索引（idx）指定要操作的文件上传控件。因为要上传第三个文件，我们将idx设置为2。\n</thought>\n\n<code_block>\n# 上传第三个文件\nUploadFile | ${file} | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 查看日志主题 关键字，接受参数 topic_name参数，业务逻辑如下\n# 1、点击 日志主题 名称为 topic_name 左侧的日志ID\n# 2、检查当前页面基本信息包含 主题名称 主题ID 日志类型 投递区域 存储时长 采集字段 采样率 投递域名查看日志主题",
        "output": "<thought>\n为了实现这个业务逻辑，我需要先编写一个自定义的Robot Framework关键字`查看日志主题`，它接受一个参数`topic_name`。首先，我需要点击日志主题名称`topic_name`左侧的日志ID按钮，我可以使用`ClickTextToTheDirectionOf`关键字实现这一点。接下来，我需要检查当前页面是否包含指定的基本信息文本，通过使用`CheckHasText`关键字来验证页面内容。\n</thought>\n\n<code_block>\n*** Keywords ***\n查看日志主题\n    [Arguments]  ${topic_name}\n    # 点击日志主题名称 '${topic_name}' 左侧的日志ID\n    ClickTextToTheDirectionOf  ${topic_name}  left  日志ID\n    \n    # 检查页面是否包含指定的基本信息\n    CheckHasText  主题名称  主题ID  日志类型  投递区域  存储时长  采集字段  采样率  投递域名查看日志主题\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将分辨率设置为 4000 * 2000",
        "output": "<thought>\n为了设置浏览器窗口的分辨率，我们可以使用提供的关键字`SetWindowSize`，直接设置宽度和高度为给定的数字。\n</thought>\n\n<code_block>\n# 设置浏览器尺寸为 4000 x 2000\nSetWindowSize | 4000 | 2000\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "经办人设置为空值，手续费设置为100，鼠标hover添加区间，点击确定添加，校验弹框中包含 ‘添加了一条记录’。提示：将字段设置为空，就是清空字段",
        "output": "<thought>\n首先需要将“经办人”字段清空，然后将“手续费”设置为100。接下来需要将鼠标移动到“添加区间”上方来触发可能的效果，再点击“确定添加”按钮。最后，校验弹窗中是否包含文本“添加了一条记录”。\n</thought>\n\n<code_block>\n# 清空经办人字段\nSetField | 经办人 | ${KEY_BACKSPACE}\n\n# 设置手续费为100\nSetField | 手续费 | 100\n\n# 鼠标hover到添加区间\nMoTo | 添加区间\n\n# 点击确定添加\nClick | 确定添加\n\n# 校验弹窗中包含‘添加了一条记录’\nCheckHasText | 添加了一条记录 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 将class名为oc-promotion-data-overview-content的页面区域保存为基准图，命名为推广管理通投广告数据概览，相似度为0.95",
        "output": "<thought>\n 我们需要使用ImageDiff关键字来截取特定页面区域的图片，并将其与基准图进行对比。首先，我们需要使用jQuery选择器选择class名为oc-promotion-data-overview-content的元素。根据RF规则，选择器可以直接使用[class=oc-promotion-data-overview-content]。然后我们将此区域保存为基准图，命名为\"推广管理通投广告数据概览\"，相似度设置为0.95。\n </thought>\n \n <code_block>\n # 将class为oc-promotion-data-overview-content的区域保存为基准图，并命名为推广管理通投广告数据概览，相似度为0.95\n ImageDiff | [class=oc-promotion-data-overview-content] | pic_name=推广管理通投广告数据概览 | sim=0.95\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“查看${name}成分分析”，主要作用是：向选择属性字段中输入name",
        "output": "<thought>\n首先需要在名为选择属性的字段中输入变量参数${name}。根据任务描述，应该使用SetField关键字来实现该操作。\n</thought>\n\n<code_block>\n查看${name}成分分析\n    # 在选择属性字段中输入${name}\n    SetField  选择属性  ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表头单元格 TTL 中的 icon",
        "output": "<thought>\n首先，我们需要点击表头单元格中的元素，使用的关键字是 `ClickIconOfCell` 或 `ClickElemOfCell`。题目要求点击的是图标，因此我们选择 `ClickIconOfCell`。由于表头行在关键字中可以用 `HEAD` 表示，我们需要指定列名为 `TTL`，并点击该列中的图标。\n</thought>\n\n<code_block>\n# 点击表头单元格 TTL 中的图标\nClickIconOfCell | HEAD | TTL\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待出现 批量上传多个合同文件，关闭当前窗口",
        "output": "<thought>\n在此场景中，需要等待页面上出现“批量上传多个合同文件”文本，然后执行关闭当前窗口的操作。根据给定的关键字列表，首先使用`WaitText`来等待指定文本出现，之后使用`Close Window`来关闭当前浏览器窗口。\n</thought>\n\n<code_block>\n# 等待页面上出现“批量上传多个合同文件”\nWaitText | 批量上传多个合同文件\n\n# 关闭当前窗口\nClose Window\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${metric_group} 之前的复选框",
        "output": "<thought>\n任务是点击一个在特定文本之前的复选框，可以使用 `ClickElemToTheDirectionOf` 关键字来实现。因为目标是基于 `${metric_group}` 文本的左方向找一个复选框。\n</thought>\n\n<code_block>\n# 点击 ${metric_group} 左边的复选框\nClickElemToTheDirectionOf | ${metric_group} | left | [type='checkbox']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取表格中所有列的行数，校验${row_count} = 1，最后截取整个屏幕图片并对比, 相似度取 0.95",
        "output": "<thought>\n为了解决这个问题，首先需要获取表格中所有列的行数，可以使用`GetRowCount`关键字。接下来，使用内置的`Should Be Equal As Numbers`关键字来验证行数是否等于1。最后，需要截取整个屏幕的图片，并使用`ImageDiff`关键字进行对比，设置相似度为0.95。\n</thought>\n\n<code_block>\n# 获取表格行数\n${row_count}  GetRowCount\n\n# 校验行数等于1\nShould Be Equal As Numbers  ${row_count}  1\n\n# 截取并对比屏幕图片，相似度0.95\nImageDiff  | sim=0.95\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "计算 第一行第4列的日期 和 第一行第6列的日期相差几天",
        "output": "<thought>\n首先，需要从表格第一行的第4列和第6列获取日期值。可以使用GetCellValue关键字来获取这两个单元格的值。然后，使用Subtract Date From Date关键字计算这两个日期之间的差异，以秒为单位。最后，使用Evaluate关键字将秒数转换为天数，并取绝对值。\n</thought>\n\n<code_block>\n# 获取第一行第4列的日期\n${date1}  GetCellValue | 1 | 4\n\n# 获取第一行第6列的日期\n${date2}  GetCellValue | 1 | 6\n\n# 计算日期差，结果为秒数\n${difference_in_seconds}  Subtract Date From Date | ${date1} | ${date2}\n\n# 将秒数转换为天数并取绝对值\n${difference_in_days}  Evaluate | abs(${difference_in_seconds} / 86400)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断 ${text}=${text1}",
        "output": "<thought>\n通过判断两个变量 `${text}` 和 `${text1}` 是否相等，可以使用Robot Framework内置的 `Should Be Equal` 关键字来完成。该关键字能够直接比较两个值并在不相等时抛出异常，从而使测试失败。\n</thought>\n\n<code_block>\n# 判断两个变量是否相等\nShould Be Equal  ${text}  ${text1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “创建合同”，随后点击 “上传单个合同文件”",
        "output": "<thought>\n首先，我们需要点击文本“创建合同”，可以使用`Click`关键字。然后，点击文本“上传单个合同文件”，同样使用`Click`关键字。两个操作是顺序进行的，因此可以使用`ClickTextOneByOne`关键字来简化代码。\n</thought>\n\n<code_block>\n# 顺序点击“创建合同”和“上传单个合同文件”\nClickTextOneByOne | 创建合同 | 上传单个合同文件\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 表格第一行 依次为:2024-09、2024-09、2024-09、Doooo",
        "output": "<thought>\n要校验表格第一行每个单元格的内容，最有效的方法是使用CheckCellHas关键字逐个校验每个单元格的内容。根据提示信息，我们需要校验的内容是第一行的四个单元格，内容分别是：2024-09、2024-09、2024-09、Doooo。我们将分别使用CheckCellHas来校验每个单元格的内容。\n</thought>\n\n<code_block>\n# 校验表格第一行第一个单元格包含2024-09\nCheckCellHas | 1 | 1 | 2024-09\n\n# 校验表格第一行第二个单元格包含2024-09\nCheckCellHas | 1 | 2 | 2024-09\n\n# 校验表格第一行第三个单元格包含2024-09\nCheckCellHas | 1 | 3 | 2024-09\n\n# 校验表格第一行第四个单元格包含Doooo\nCheckCellHas | 1 | 4 | Doooo\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击Custom Error Pages下边的 Add Rule按钮",
        "output": "<thought>\n根据描述，需要点击 \"Custom Error Pages\" 下边的 \"Add Rule\" 按钮。可以使用ClickTextToTheDirectionOf关键字来实现这个操作。\n\n首先，定位 \"Custom Error Pages\" 这个文本，然后在其下方查找并点击 \"Add Rule\" 按钮。\n</thought>\n\n<code_block>\n# 点击 Custom Error Pages 下方的 Add Rule 按钮\nClickTextToTheDirectionOf | Custom Error Pages | bottom | Add Rule\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个 For 循环，每次打印一个随机的姓名",
        "output": "<thought>\n要解决这个问题，我们需要用到几个关键字，首先是\"Generate Random String\"，我们可以用它来生成随机的字符串。然后，我们需要一个For循环，可以使用\"For\"关键字。每次循环中，我们可以用\"Log\"关键字来输出生成的随机字符串。\n</thought>\n\n<code_block>\n# 设置要循环的次数\n${times}=  set variable  10\n# 设置可以用来生成姓名的字符\n${chars}=  set variable  赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚\n\nFOR  ${i}  IN RANGE  ${times}\n    # 每次生成一个随机姓名，姓名长度设置为2\n    ${name}=  GenerateRandom  | 2 | ${chars}\n    # 打印生成的随机姓名\n    Log  ${name}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面存在 ${create_user_1}[name]，欢迎回来 文案",
        "output": "<thought>\n为了校验页面存在 `${create_user_1}[name]` 和 \"欢迎回来\" 文案，可以使用 `CheckHasText` 关键字，同时传入这两个文本进行校验。\n</thought>\n\n<code_block>\n# 校验页面同时包含 ${create_user_1}[name] 和 \"欢迎回来\"\nCheckHasText  ${create_user_1}[name]  欢迎回来\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "进入第一个iframe",
        "output": "<thought>\n我们需要切换到页面上的第一个iframe。在这里可以使用`ToFrame`关键字，并选择第一个iframe。根据jquery的选择器语法，第一个元素可以用`iframe:eq(0)`来表示。\n</thought>\n\n<code_block>\n# 切换到第一个iframe\nToFrame | iframe:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "把 ${elem} 元素的字符串时间转换成时间戳数字格式",
        "output": "<thought>\n首先，我们需要获取元素的文本内容，然后将其转换为时间戳格式。可以使用`Get Text`关键字获取文本内容，再使用`Convert Date`关键字将字符串时间转换为时间戳。\n</thought>\n\n<code_block>\n# 获取元素的文本内容\n${time_string}  Get Text  ${elem}\n\n# 将字符串时间转换为时间戳\n${timestamp}  Convert Date  ${time_string}  result_format=epoch\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击新建workflow，向下划动至完全可见class为ad-data-trend-container的页面区域",
        "output": "<thought>\n首先，我们需要点击“新建workflow”按钮。可以使用 `Click` 关键字来实现此操作。接下来，我们要移动到一个特定的页面元素，以便它完全可见。对于这个操作，可以使用 `MoveIntoView` 关键字，通过选择器来定位 class 为 `ad-data-trend-container` 的元素。\n</thought>\n\n<code_block>\n# 点击新建workflow\nClick | 新建workflow\n\n# 向下滑动至完全可见class为ad-data-trend-container的页面区域\nMoveIntoView | [class=ad-data-trend-container]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取元素 ${elem} 的空间位置",
        "output": "<thought>\n要获取元素 ${elem} 的空间位置，我们可以利用 RF 库提供的 `PrintElemRect` 关键字。该关键字可以获取和打印给定元素的空间尺寸和位置信息。\n</thought>\n\n<code_block>\n# 打印元素 ${elem} 的空间位置\nPrintElemRect | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击列表第一行第一列的勾选框，点击购买PTR记录，在弹框中点击‘图片 2.0’按钮",
        "output": "<thought>\n首先，点击列表第一行第一列的勾选框，可以使用ClickElemOfCell对第一行第一列单元格中的勾选框进行操作。接下来，点击“购买PTR记录”，可以使用Click关键字。最后，在弹框中点击‘图片 2.0’按钮，可以使用Click关键字并指定在弹窗中操作。\n</thought>\n\n<code_block>\n# 点击列表第一行第一列的勾选框\nClickElemOfCell | 1 | 1 | :checkbox\n\n# 点击购买PTR记录\nClick | 购买PTR记录\n\n# 在弹窗中点击‘图片 2.0’按钮\nClick | 图片 2.0 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击工单编号",
        "output": "<thought>\n 需要点击文本为“工单编号”的元素，使用Click关键字来完成此操作。\n </thought>\n \n <code_block>\n # 点击文本为工单编号的元素\n Click | 工单编号\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "双击‘登录’，然后等待页面不再包含：‘密码登录’",
        "output": "\n<thought>\n首先，需要使用DClick关键字双击“登录”按钮。然后，使用WaitTextDisappear关键字等待“密码登录”文本消失。\n</thought>\n\n<code_block>\n# 双击‘登录’按钮\nDClick | 登录\n\n# 等待‘密码登录’文案消失\nWaitTextDisappear | 密码登录\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：输入查询 的关键字，接受 label、val 参数，val的默认值为空值，作用是找到input输入框 placeholder 含有 label 的输入内容，然后填入 val 值。如果 lable 含有时间类型组件，参数支持 开始时间 和 结束时间 两个参数， 然后点击查询，等待页面加载完成",
        "output": "<thought>\n为了实现这个功能，我们需要实现以下步骤：\n1. 查找页面上任何 placeholder 含有 `label` 的 input 或 textarea 元素。\n2. 如果 `label` 包含时间类型组件，我们需要处理传入的 `开始时间` 和 `结束时间` 参数，并将其输入到相应的字段中。\n3. 如果 `label` 不包含时间类型组件，则直接在找到的元素中输入 `val` 值。\n4. 点击查询按钮。\n5. 等待页面加载完成。\n\n我们将使用 `FindElem` 来定位元素，通过 `FillArea` 来输入值。根据 `label` 是否包含时间类型组件，决定输入的内容。最后，使用 `Click` 和 `WaitLoading` 来触发查询并等待页面加载完成。\n</thought>\n\n<code_block>\n*** Keywords ***\n输入查询\n    [Arguments]  ${label}  ${val}=${EMPTY}\n\n    # 如果 label 包含时间类型组件\n    IF  '时间' in '${label}'\n        # 输入开始时间和结束时间\n        ${start_input}  FindElem | input[placeholder*='${label}'][placeholder*='开始']\n        FillArea  ${start_input}  ${val}[0]\n\n        ${end_input}  FindElem | input[placeholder*='${label}'][placeholder*='结束']\n        FillArea  ${end_input}  ${val}[1]\n    ELSE\n        # 查找并输入值到普通输入框\n        ${input_elem}  FindElem | input[placeholder*='${label}'], textarea[placeholder*='${label}']\n        FillArea  ${input_elem}  ${val}\n    END\n\n    # 点击查询按钮\n    Click  查询\n\n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一行第2列的单元格\n向这个单元格中输入：预算科目_A0",
        "output": "<thought>\n在这个任务中，我们需要首先点击表格中的一个特定单元格——第一行的第二列。然后，在这个单元格中输入文本“预算科目_A0”。首先我们会使用`ClickElemOfCell`来点击指定的单元格，接下来我们会使用`FillCell`来向单元格中输入指定内容。\n</thought>\n\n<code_block>\n# 点击第一行第二列的单元格\nClickElemOfCell | 1 | 2\n\n# 在刚刚点击的单元格中输入：预算科目_A0\nFillCell | 1 | 2 | 预算科目_A0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击aaa所在行的编辑按钮",
        "output": "<thought>\n此场景需要在表格中找到文本“aaa”所在的行，并点击该行中的\"编辑\"按钮。我们可以使用关键字“ClickTextOfRow”来实现这个操作。首先我们需要提供文本\"aaa\"作为行标识，然后提供\"编辑\"作为需要点击的元素。\n</thought>\n\n<code_block>\n# 找到文本\"aaa\"所在的行，点击该行的\"编辑\"按钮\nClickTextOfRow | aaa | 编辑 | tbl=1 \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等页面加载好后，在搜索分群中输入 ‘auto分群’ 并回车, 然后点击 auto分群 右边的更多icon，然后点击弹层中的删除",
        "output": "<thought>\n这是一个操作页面元素的场景，我们可以选择使用以下几种关键字： \n1. WaitLoading关键字用于等待页面加载完成。\n2. SetField关键字用于输入'auto分群'并回车。\n3. ClickIconToTheDirectionOf关键字用于点击 auto分群 右边的更多icon。\n4. Click关键字用于点击删除。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 在搜索分群中输入 'auto分群'并回车\nSetField | 搜索分群 | auto分群 | enter=True\n\n# 点击 auto分群 右边的更多icon\nClickIconToTheDirectionOf | auto分群 | right | more\n\n# 点击弹层中的删除\nClick | 删除 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到 iframe  然后 设置 状态 为：计算成功",
        "output": "<thought>\n首先需要切换到指定的iframe，然后使用SetField关键字设置状态字段的值为“计算成功”。\n</thought>\n\n<code_block>\n# 进入第一个iframe\nToFrame | iframe:eq(0)\n\n# 设置状态为“计算成功”\nSetField | 状态 | 计算成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择 Byteplus Pte. Ltd.，校验 存在 “All content cannot be excluded”",
        "output": "<thought>\n该场景要求选择一个选项并验证页面包含特定文本。根据提供的关键字，可以使用SelectOption选择“Byteplus Pte. Ltd.”，然后使用CheckHasText验证页面包含“All content cannot be excluded”。\n</thought>\n\n<code_block>\n# 选择Byteplus Pte. Ltd.\nSelectOption | Byteplus Pte. Ltd.\n\n# 校验页面包含“All content cannot be excluded”\nCheckHasText | All content cannot be excluded\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面顶部第一个下拉框，并选择服务商控制台",
        "output": "<thought>\n首先点击页面顶部第一个下拉框，然后选择服务商控制台选项。\n</thought>\n\n<code_block>\n# 点击页面顶部第一个下拉框，假设下拉框为 input或select\nClickElemToTheDirectionOf | SCREEN_CENTER | top | input:eq(0),select:eq(0)\n\n# 选择服务商控制台\nSelectOption | 服务商控制台\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击树形单选 base：class包括 select__list__item",
        "output": "<thought>\n解决问题思路: 根据给定的场景，需要点击树形单选按钮，基地元素base是class包含select__list__item的元素。可以通过ClickElem关键字使用jquery选择器来选择包含select__list__item的元素，并点击树形单选按钮。\n</thought>\n\n<code_block>\n# 点击class包含select__list__item中的树形单选按钮\nClickElem | [class*=select__list__item] :contains(树形单选)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找class为feature-weight_target__label的元素",
        "output": "<thought>\n要查找class为feature-weight_target__label的元素，可以使用FindElem关键字。我们需要一个基于class选择器的jQuery选择器，因此选择器将是`[class=feature-weight_target__label]`。\n</thought>\n\n<code_block>\n# 查找class为feature-weight_target__label的元素\n${elem}  FindElem | [class=feature-weight_target__label]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“任务组视图”右侧的\"input\"元素，选择【任务名称】，然后设置【搜索任务名称】为：test",
        "output": "<thought>\n首先，我们需要点击“任务组视图”右侧的\"input\"元素。可以使用`ClickElemToTheDirectionOf`关键字，以“任务组视图”为基准，选择它右侧的\"input\"元素。接下来，我们需要选择【任务名称】，这可以通过`SelectOption`关键字实现。最后，设置【搜索任务名称】为“test”，可以使用`SetField`关键字。\n</thought>\n\n<code_block>\n# 点击“任务组视图”右侧的input元素\nClickElemToTheDirectionOf | 任务组视图 | right | input\n\n# 选择任务名称\nSelectOption | 任务名称\n\n# 设置搜索任务名称为test\nSetField | 搜索任务名称 | test\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“验证搜索为空”，接受参数 args 业务逻辑是：\n1.点击 class包含arco-input arco-input-size-small的元素\n2.向这个元素输入参数\n3.检验页面应该包含“搜索为空”的文本",
        "output": "<thought>\n为了完成“验证搜索为空”的关键字，首先需要识别和点击指定类的输入框，然后将参数输入该输入框，最后检查页面是否包含“搜索为空”文本。使用`ClickElem`来点击输入框，使用`SendText`输入参数，使用`CheckHasText`进行文本验证。\n</thought>\n\n<code_block>\n验证搜索为空\n    [Arguments]  ${args}\n    # 定位并点击输入框\n    ClickElem  div[class*=\"arco-input arco-input-size-small\"]\n    # 输入参数\n    SendText  ${args}\n    # 验证页面包含“搜索为空”文本\n    CheckHasText  搜索为空\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入主账号：‘veStack_iaas’, 密码：‘Roo’, 点击登录",
        "output": "<thought>\n我们需要批量设置两个字段：主账号和密码，然后点击登录。可以使用`BatchSetFields`关键字设置主账号和密码，使用`Click`关键字点击登录。\n</thought>\n\n<code_block>\n# 批量设置主账号和密码\nBatchSetFields  主账号=veStack_iaas  密码=Roo\n\n# 点击登录\nClick  登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 ‘Cookies登录’ 的关键字，接受 cookie_file 参数, 默认值 COOKIE_FILE，作用如下：\n# 1. 打开浏览器\n# 2. 向页面 ${MAIN_PAGE} 中注入 cookie\n# 3. 访问页面 ${MAIN_PAGE}",
        "output": "<thought>\n要实现“Cookies登录”关键字，我们需要处理以下步骤：\n1. 打开浏览器。\n2. 在浏览器中打开指定的URL，并注入cookie。\n3. 访问指定的URL。\n\n我们可以使用`OpenBrowser`关键字来实现打开浏览器并注入cookie的功能，`OpenUrl`关键字用于访问页面。由于`OpenBrowser`关键字提供了`cookie_file`参数，我们可以直接利用这个功能来注入cookie。\n\n组合这些需求，我们可以编写出最终实现的RF代码。\n</thought>\n\n<code_block>\n*** Keywords ***\nCookies登录\n    [Arguments]  ${cookie_file}=COOKIE_FILE\n    # 使用cookie_file参数打开浏览器并注入cookie\n    OpenBrowser  ${MAIN_PAGE}  cookie_file=${cookie_file}\n    \n    # 访问主页面\n    OpenUrl  ${MAIN_PAGE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到[class*=avatar]上点击退出登录",
        "output": "<thought>\n我们需要先移动到类名包含avatar的元素上，然后再执行点击操作。基于可用的关键字，我们可以通过`MoToElem`移动到目标元素上，然后使用`ClickElem`执行点击操作。\n</thought>\n\n<code_block>\n# 移动到类名包含avatar的元素上\nMoToElem | [class*=avatar]\n\n# 点击退出登录\nClickElem | button:contains(退出登录)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘请选择集群’ 为 ‘Dataleap-Hadoop安全模式集群’",
        "output": "<thought>\n要设置字段‘请选择集群’为‘Dataleap-Hadoop安全模式集群’，可以使用`SelectOptionForField`关键字，指定字段名称和选项即可完成。\n</thought>\n\n<code_block>\n# 设置‘请选择集群’为‘Dataleap-Hadoop安全模式集群’\nSelectOptionForField | 请选择集群 | Dataleap-Hadoop安全模式集群\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的 全球（不含中国内地）",
        "output": "\n<thought>\n这个场景要求在弹窗中点击一个特定的文本\"全球（不含中国内地）\"。为了实现这一点，我们可以使用Click关键字，并且将base参数设置为POPUP以指定这是一个弹窗中的操作。\n</thought>\n\n<code_block>\n# 点击弹窗中的 全球（不含中国内地）\nClick | 全球（不含中国内地） | base=POPUP\n</code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击空白处，点击重命名，输入：名称1，鼠标移动到新会话右边的图标，判断 ${video_id} 日期时间(2022-09-22 11:12:13格式)在 ${video_id1}之后",
        "output": "<thought>\n首先，点击空白处可以使用`ClickWhiteArea`关键字。然后，点击“重命名”文本，使用`Click`。接着，在相关字段中输入\"名称1\"，可以用`SetField`。鼠标移动到“新会话”右边的icon，使用`MoveToIconToTheDirectionOf`。最后，使用`Should Be True`比较日期时间字符串。\n</thought>\n\n<code_block>\n# 点击空白处\nClickWhiteArea\n\n# 点击重命名\nClick | 重命名\n\n# 输入“名称1”\nSetField | 名称 | 名称1\n\n# 鼠标移动到新会话右边的icon\nMoveToIconToTheDirectionOf | 新会话 | right | icon\n\n# 断言 ${video_id} 日期时间在 ${video_id1}之后\nShould Be True  ${video_id} > ${video_id1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "取表格第一行申请时间 ，赋值为 apply_time",
        "output": "```\n<thought>\n要获取表格第一行的申请时间，需要使用GetCellValue关键字。假设申请时间所在的列名为“申请时间”，首先获取第一行的申请时间值并存储在变量apply_time中。\n</thought>\n\n<code_block>\n# 获取第一行申请时间列的值\n${apply_time}  GetCellValue | 1 | 申请时间\n</code_block>\n```"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "尝试点击文本txt1、txt2",
        "output": "<thought>\n考虑使用`ClickAny`关键字，该关键字可以尝试点击多个文本选项中的任意一个，这里可以直接使用该关键字尝试点击文本txt1或txt2。\n</thought>\n\n<code_block>\n# 尝试点击文本txt1或txt2中的任意一个\nClickAny | txt1 | txt2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面 “合同名称”下方输入框 不等于 “请输入”\n填写 合同说明 为 “自动化测试”\n设置 收支类型 为 “支出类”，计价方式 为 “固定总价”， 向合同总额中输入多个值：0.01、CNY",
        "output": "<thought>\n首先需要校验“合同名称”下方的输入框中不为“请输入”，可以使用CheckFieldContains结合条件判断。然后，使用SetField填写合同说明为“自动化测试”。接着使用BatchSetFields设置“收支类型”和“计价方式”。最后，使用FillArea向合同总额中输入多个值。\n</thought>\n\n<code_block>\n# 校验“合同名称”下方输入框不等于“请输入”\n${value}  GetFieldVal | 合同名称\nShould Not Be Equal As Strings  ${value}  请输入\n\n# 填写合同说明为“自动化测试”\nSetField | 合同说明 | 自动化测试\n\n# 设置“收支类型”为“支出类”，计价方式为“固定总价”\nBatchSetFields  收支类型=支出类  计价方式=固定总价\n\n# 向合同总额中输入多个值：0.01、CNY\nFillArea | 合同总额 | 0.01 | CNY\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待300ms\n如果页面存在含有class为okee-lp-modal-show的元素\n有的话就点击 元素上的关闭按钮\n没有的话就不需要管",
        "output": "<thought>\n首先，我会使用Sleep关键字等待300毫秒。然后使用IsAnyElemExisting检查是否存在class为okee-lp-modal-show的元素。如果存在，则查找并点击该元素中的关闭按钮。如果不存在，则不做任何操作。\n</thought>\n\n<code_block>\n# 等待300毫秒\nSleep  300ms\n\n# 检查是否存在class为okee-lp-modal-show的元素\n${exist}  IsAnyElemExisting | [class=\"okee-lp-modal-show\"]\n\n# 如果存在，则点击关闭按钮\nIF  ${exist}\n    Click | 关闭 | base=[class=\"okee-lp-modal-show\"]\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "取消退款原因 选择下拉框的第2个选项",
        "output": "<thought>\n在这个场景中，我们需要选择一个下拉框的选项。根据给出的关键字，我们可以使用`SelectOptionForField`来选择特定字段的选项。因为没有给出字段名称，假设字段名称是“取消退款原因”，我们要选择该下拉框的第2个选项，可以使用特殊值`OPTIONS_2`。所以使用`SelectOptionForField | 取消退款原因 | OPTIONS_2`。\n</thought>\n\n<code_block>\n# 选择取消退款原因下拉框的第2个选项\nSelectOptionForField | 取消退款原因 | OPTIONS_2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为:\"设置okr表格截止日期\"的关键字,接受 \"日期筛选\",\"默认值\",\"自定义日期\",默认值分别为on,自定义,2020-03-01,作用是:\n1.如果日期筛选不为空,则执行（如果日期筛选为on，设置展示日期筛选checkbox的状态为勾选；否则，设置展示日期筛选checkbox的状态为不勾选）的逻辑。\n2.如果默认值不为空，则点击默认值的radiobutton\n3.如果自定义日期不为空，设置自定义后的日期框值为自定义日期",
        "output": "设置okr表格截止日期\n    [Arguments]  ${日期筛选}=on  ${默认值}=自定义  ${自定义日期}=2020-03-01\n    # 如果日期筛选不为空\n    IF  \"${日期筛选}\" != \"\"\n        # 如果日期筛选为on\n        IF  \"${日期筛选}\" == \"on\"\n            CheckBoxOn | 展示日期筛选\n        ELSE\n            CheckBoxOff | 展示日期筛选\n        END\n    END\n    # 如果默认值不为空\n    IF  \"${默认值}\" != \"\"\n        Click | ${默认值}\n    END\n    # 如果自定义日期不为空\n    IF  \"${自定义日期}\" != \"\"\n        SetField | 自定义日期 | ${自定义日期}\n    END"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 xxx 字段的值",
        "output": "<thought>\n对于获取字段值的任务，我们可以使用`GetFieldVal`关键字来获取给定字段的值。需要关注的是字段名称应从输入中提取，并正确传递给关键字。\n</thought>\n\n<code_block>\n# 获取字段xxx的值\n${val}  GetFieldVal | xxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘参与预览计算的数据量’ 为 全量数据",
        "output": "<thought>\n需要将“参与预览计算的数据量”设置为“全量数据”。可以使用`SetField`关键字，因为它是用于向特定页面字段中填写数据的关键字。\n</thought>\n\n<code_block>\n# 设置参与预览计算的数据量为全量数据\nSetField | 参与预览计算的数据量 | 全量数据\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入「头部名称」为：_world，然后对 role 包含「dialog」的弹窗截图，并和「测试图片」对比",
        "output": "<thought>\n首先，使用SetField关键字输入「头部名称」为：_world。然后，使用ElemScreenshot关键字截取role包含「dialog」的弹窗图片，这里的弹窗选择器是div[role*=dialog]。最后，使用ImageDiff关键字对截取的图片和「测试图片」进行对比。\n</thought>\n\n<code_block>\n# 输入「头部名称」为：_world\nSetField | 头部名称 | _world\n\n# 截取role包含「dialog」的弹窗图片\nElemScreenshot | div[role*=dialog]\n\n# 对截取的图片和「测试图片」进行对比\nImageDiff | div[role*=dialog] | pic_name=测试图片\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 admin 行中的 下载 icon",
        "output": "<thought>\n任务要求在表格中找到包含文本\"admin\"的行，并点击该行中的\"下载\"图标。基于问题描述，我们可以使用`ClickIconOfRow`关键字，指定`row_name_or_id=admin`，`icon=download`来实现。\n</thought>\n\n<code_block>\n# 点击 admin 行中的 下载 icon\nClickIconOfRow | admin | download\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击规则信息",
        "output": "<thought>\n 要点击文本“规则信息”，可以使用Click关键字，因为文本匹配正好符合要求。考虑到没有其他相似文本，直接使用Click即可。\n </thought>\n \n <code_block>\n # 点击规则信息\n Click | 规则信息\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "为数据库字段填上下拉框的第一个值",
        "output": "<thought>\n首先，我们需要找到下拉框中的第一个选项，然后将这个选项的值填充到数据库字段中。在这里，我们可以使用SetField关键字来达到这个目的。由于特殊值OPTIONS_1代表下拉框中的第一个选项，我们可以直接使用这个特殊值来选择要填充的值。然后，我们只需要将这个值设置为数据库字段即可。\n</thought>\n\n<code_block>\n# 根据下拉框的第一个选项，设置数据库字段\nSetField | 数据库字段 | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用 abc 关键字，参数为 name  value",
        "output": "<thought>\n我们需要调用自定义关键字 `abc`，并传递参数 `name` 和 `value`。由于没有其他信息需要处理，直接执行关键字即可。\n</thought>\n\n<code_block>\n# 调用关键字 abc，参数为 name 和 value\nabc  name  value\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击awfeaew该行的编辑",
        "output": "<thought>\n要点击表格中awfeaew这一行的'编辑'，我们可以使用`ClickTextOfRow`或`ClickElemOfRow`关键字。因为要点击\"编辑\"，可以直接使用`ClickTextOfRow`，指定awfeaew行和编辑文本。\n</thought>\n\n<code_block>\n# 点击awfeaew所在行的编辑\nClickTextOfRow | awfeaew | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现 ‘上线审核方式’ 1s后，将 ‘上线审核方式’ 设置为 直接上线",
        "output": "<thought>\n需要使用`WaitText`关键字等待文本“上线审核方式”出现，然后用`Sleep`等待1秒，最后使用`SetField`关键字将“上线审核方式”设置为“直接上线”。\n</thought>\n\n<code_block>\n# 等待出现“上线审核方式”\nWaitText | 上线审核方式\n\n# 等待1秒\nSleep | 1s\n\n# 设置“上线审核方式”为“直接上线”\nSetField | 上线审核方式 | 直接上线\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "取class含有product-name__id的span的内容，并从其中取出由一连串5个以上数字组成的id",
        "output": "<thought>\n为了实现这个需求，需要首先找到包含特定class的span元素，然后获取其文本内容。接着，我们可以使用正则表达式从文本中提取出一串5个以上的数字。Robot Framework中没有直接支持正则匹配的关键字，因此需要使用`Evaluate`关键字来执行Python代码进行这个操作。\n</thought>\n\n<code_block>\n# 查找class包含product-name__id的span\n${elem}  FindElem | span[class*=product-name__id]\n\n# 获取该元素的文本内容\n${text}  Get Text | ${elem}\n\n# 使用正则表达式提取一串5个以上数字组成的id\n${id}  Evaluate | re.search(r'\\\\d{5,}', '''${text}''').group() | re\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "注释：兼容某些接口未返回，完成协商不可点击情况，逻辑为：鼠标点击 完成协商 ，如果弹窗中出现 确定 按钮，则结束循环，否则等待5s继续循环，最多3次循环，如果3次循环后还是没有出现，则刷新页面，继续上述步骤，刷新页面仅刷新1次",
        "output": "<thought>\n我们先通过鼠标点击“完成协商”，然后检查弹窗中是否出现“确定”按钮，最多进行3次循环，如果在这些循环中确定按钮没有出现，则刷新页面后再重复上述步骤。我们将使用`MClick`来点击“完成协商”，`WaitText`来等待“确定”按钮的出现。在每次循环中，我们会等待5秒，然后再次尝试点击。如果在3次循环内找不到“确定”按钮，我们将使用`RefreshPage`刷新页面并再试一次。\n</thought>\n\n<code_block>\n# 定义一个循环执行的关键字\nFOR  ${i}  IN RANGE  2\n    FOR  ${j}  IN RANGE  3\n        # 鼠标点击 完成协商\n        MClick  完成协商\n        \n        # 等待弹窗中 确定 按钮出现，超时时间为5秒\n        ${exist}  IsAnyTextExisting | 确定 | base=POPUP\n        \n        # 如果 确定 按钮出现则跳出内层循环\n        IF  ${exist}\n            Exit For Loop\n        END\n        \n        # 等待5秒\n        Sleep  5s\n    END\n    \n    # 如果找不到 确定 按钮，刷新页面\n    IF  not ${exist}\n        RefreshPage\n    ELSE\n        # 如果找到了 确定 按钮，跳出外层循环\n        Exit For Loop\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为 “用户登录” 的关键字，主要逻辑如下：\n # 1. 打开浏览器访问 LOGIN_URL, 等页面出现success后，接着访问 MAIN_PAGE",
        "output": "<thought>\n 首先需要打开浏览器并访问LOGIN_URL，然后等待页面上的文本“success”出现。接着访问MAIN_PAGE。\n </thought>\n \n <code_block>\n 用户登录\n  # 打开浏览器并访问LOGIN_URL\n  OpenBrowser | ${LOGIN_URL}\n  \n  # 等待页面出现“success”\n  WaitText | success\n  \n  # 访问MAIN_PAGE\n  OpenUrl | ${MAIN_PAGE}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写页面字段  高权限用户=hlt  高权限用户密码=Hltspwd6!  确认密码=Hltspwd6!",
        "output": "<thought>\n这个问题的解决思路很清楚，我需要填写一些字段，包括\"高权限用户\"、\"高权限用户密码\"和\"确认密码\"。BatchSetFields关键字正好可以满足这个需求。这个关键字接受一个字典参数，字典的键是字段名，值是要设置的值\n</thought>\n\n<code_block>\n# 使用BatchSetFields关键字填写字段\nBatchSetFields | 高权限用户=hlt | 高权限用户密码=Hltspwd6! | 确认密码=Hltspwd6!\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到第一个输入框，输入1111",
        "output": "<thought>\n为了找到第一个input或textarea元素并输入\"1111\"，我们可以使用`FindElem`关键字来定位符合条件的元素。由于我们需要定位第一个元素，使用`:eq(0)`选择器。然后可以使用`SendText`关键字将文本输入到此元素中。\n</thought>\n\n<code_block>\n# 查找第一个input或textarea元素\n${elem}  FindElem | input:eq(0), textarea:eq(0)\n\n# 点击激活此输入元素，然后向找到的第一个元素输入1111\nClick Element | ${elem}\nSendText | 1111\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截屏并对比，相似度取 1",
        "output": "<thought>\n为了解决此问题，我们将使用ImageDiff关键字进行截屏并与基准图进行比较。由于没有提供特定的selector，因此默认情况下将进行全屏截图。相似度要求为1。\n</thought>\n\n<code_block>\n# 全屏截图并与基准图对比，相似度为1\nImageDiff | sim=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "退还原因 输入 UI自动化测试",
        "output": "<thought>\n为了解决所述问题，首先需要定位到“退还原因”的输入框，然后使用“SetField”关键字将“UI自动化测试”作为输入。这个关键字会自动查找名为“退还原因”的字段，并填入指定的值。\n\n主要思路：\n1. 使用“SetField”关键字，字段名设为“退还原因”。\n2. 使用“UI自动化测试”作为输入值。\n</thought>\n\n<code_block>\n# 定位到\"退还原因\"输入框并输入\"UI自动化测试\"\nSetField | 退还原因 | UI自动化测试\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘月账单概览’表 第1行的 “撤回”",
        "output": "<thought>\n首先，场景要求点击表格第1行的“撤回”文本。因此可以使用`ClickTextOfRow`关键字，它能在表格的指定行中点击指定文本。这里只需指定表格行号为1，文本为“撤回”。\n</thought>\n\n<code_block>\n# 点击‘月账单概览’表第1行的“撤回”\nClickTextOfRow | 1 | 撤回 | tbl=月账单概览\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 资产编号为 变量assetId 的表格行，包含 闲置中、已入库、捐赠",
        "output": "<thought>\n需要使用 CheckRowHas 关键字校验指定表格行是否包含给定文本。首先，需要通过资产编号 assetId 确定要检查的表格行。\n</thought>\n\n<code_block>\n# 校验资产编号为变量assetId的表格行同时包含 \"闲置中\"、\"已入库\"、\"捐赠\"\nCheckRowHas | ${assetId} | 闲置中 | 已入库 | 捐赠\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 向 ‘申请列表’ 这个表格的第一行中输入多个值：电脑、台式机",
        "output": "<thought>\n这个任务要求在‘申请列表’表格的第一行中输入多个值。可以使用FillRow关键字来完成这一操作。首先需要指定要操作的表格以及行号，然后依次输入值。\n</thought>\n\n<code_block>\n# 在‘申请列表’表格的第一行输入电脑、台式机\nFillRow | 1 | 电脑 | 台式机 | tbl=申请列表\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断是否有弹窗",
        "output": "<thought>\n我们可以通过检查页面上是否存在特定的弹窗元素来判断是否有弹窗。我们可以使用IsAnyElemExisting关键字来判断这些元素是否存在，弹框可用特殊的选择器 POPUP 来表示。\n</thought>\n\n<code_block>\n# 弹窗元素的选择器为 POPUP\n${exist}  IsAnyElemExisting | POPUP\n\n# 如果弹窗存在，打印“弹窗存在”\nIF  $exist\n    Log  弹窗存在\nELSE\n    Log  弹窗不存在\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到 placeholder 为「请输入」的 input 元素，设置其 value 为「AUTOTSET」，点击提交，跳转到新窗口，点击操作栏第一个按钮",
        "output": "<thought>\n我们需要在页面中找到一个输入框，其placeholder属性为“请输入”，然后将其值设置为“AUTOTSET”。接着点击提交按钮。完成后，我们需要切换到新窗口，并点击表格中操作栏的第一个按钮。这个任务可以按如下步骤分解：\n\n1. 使用`FindElem`找到placeholder为“请输入”的输入框元素。\n2. 使用`FillArea`或`SetField`将找到的输入框设置为“AUTOTSET”。\n3. 使用`Click`或`ClickElem`点击提交按钮。\n4. 使用`ToNewWindow`切换到新窗口。\n5. 使用`ClickElemOfCell`点击操作栏中的第一个按钮。\n</thought>\n\n<code_block>\n# 找到placeholder为「请输入」的input框\n${input_elem}  FindElem | input[placeholder='请输入']\n\n# 填写input框的值为AUTOTSET\nFillArea | ${input_elem} | AUTOTSET\n\n# 点击提交按钮\nClick | 提交\n\n# 切换到新窗口\nToNewWindow\n\n# 点击表格操作栏中第一行的第一个按钮\nClickElemOfCell | 1 | 操作 | button:eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击更多小图标，点击分享，页面中包含“复制分享链接成功”，粘贴板上内容包含“/chatops/chatllm?action=quickChat”",
        "output": "\n    \n<thought>\n 首先，我们需要点击“更多”icon，接着点击“分享”按钮。然后验证页面中是否包含“复制分享链接成功”的文本，最后检查剪贴板内容是否包含指定的链接路径。使用`ClickIcon`和`Click`进行点击操作，`GetCopied`获取剪贴板内容，最后使用`Should Contain`来断言。\n </thought>\n \n <code_block>\n # 点击更多icon\n ClickIcon | more\n \n # 点击分享\n Click | 分享\n \n # 验证页面中包含“复制分享链接成功”\n Wait Until Page Contains | 复制分享链接成功\n \n # 获取剪贴板内容\n ${clipboard_content}  GetCopied\n \n # 验证剪贴板内容包含指定路径\n Should Contain | ${clipboard_content} | /chatops/chatllm?action=quickChat\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 <span class=\"arco-tabs-header-title-text\">任务\n \n ",
        "output": "<thought>\n 为了解决这个问题，我们需要使用`ClickElem`关键字来点击指定的HTML元素。给定的元素是一个`span`，并且有一个类`arco-tabs-header-title-text`，文本是`任务`。我们可以使用jQuery选择器来定位这个元素。\n </thought>\n \n <code_block>\n # 点击具有类名“arco-tabs-header-title-text”的span元素，其文本为“任务”\n ClickElem | span.arco-tabs-header-title-text:contains(任务)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向弹框中输入：旗开得胜",
        "output": "在这个场景中，我们的目标是在弹框中输入文本“旗开得胜”。根据提供的关键字说明，当我们需要将一系列值输入到弹框中，而未指定具体的字段名或区域选择器时，可以使用`FillPopup`关键字。因此在此场景中，使用`FillPopup`关键字是最合适的选择。\n</thought>\n\n<code_block>\n# 在弹框中输入“旗开得胜”\nFillPopup 旗开得胜\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索请求 url 中包含 feishu.cn/path/download, 且请求方式为 PUT 的所有请求",
        "output": "<thought>\n我们需要搜索请求 URL 中包含 feishu.cn/path/download，且请求方式为 PUT 的所有请求。根据问题描述，应该使用 `Search Requests` 关键字，并将 mode 参数设置为 `all`。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 feishu.cn/path/download, 且请求方式为 PUT 的所有请求\n${resp_json}  Search Requests  feishu.cn/path/download  PUT  all\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 文章标题输入回归测试文章通知",
        "output": "\n    \n<thought>\n 需要将文本“回归测试文章通知”输入到名为“文章标题”的字段中，并在输入后模拟按下回车键。可以使用SetField关键字，并将enter参数设置为True。\n </thought>\n \n <code_block>\n # 输入文章标题并回车\n SetField | 文章标题 | 回归测试文章通知 | enter=True\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击向下小图标，设置表格第一行的“当前值”列输入：test",
        "output": "<thought>\n 首先，使用`ClickIcon`关键字点击向下的icon。假设icon的名字是“down”。然后使用`FillCell`关键字在表格的第一行和“当前值”列中输入“test”。\n </thought>\n \n <code_block>\n # 点击向下icon\n ClickIcon | down\n \n # 设置表格第一行的“当前值”列输入：test\n FillCell | 1 | 当前值 | test\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 Enter the split item name 并输入 -",
        "output": "<thought>\n首先需要点击文本\"Enter the split item name\"，然后在光标处输入\"-\"。可以使用Click关键字点击文本，然后使用SendText关键字输入\"-\"\n</thought>\n\n<code_block>\n# 点击 \"Enter the split item name\"\nClick | Enter the split item name\n\n# 输入 \"-\"\nSendText | -\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 签约形式 为 电子签约，设置 印章类型 为 公章，设置 盖章方数量 为 多方，设置 先盖章方 为 我方，",
        "output": "<thought>\n该场景涉及设置多个页面字段的值，使用BatchSetFields关键字可以一次性设置多个字段，因此最为合适。\n</thought>\n\n<code_block>\n# 设置签约形式、印章类型、盖章方数量和先盖章方\nBatchSetFields  签约形式=电子签约  印章类型=公章  盖章方数量=多方  先盖章方=我方\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "返回前一个页面",
        "output": "<thought>\n解决问题思路：根据任务需求，返回到前一个页面。可以使用PageBack关键字实现页面后退操作。\n</thought>\n\n<code_block>\n# 返回到前一个页面\nPageBack\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取合同组详情下方的 合同编号字段值",
        "output": "<thought>\n要获取合同组详情下方的合同编号字段值，首先需要找到“合同组详情”这个基准元素，然后在其下方查找合同编号字段。可以使用`GetFieldVal`关键字来获取字段值。需要使用方向定位的关键字来确保我们找到正确的“合同编号”字段。\n</thought>\n\n<code_block>\n# 查找“合同组详情”下方的合同编号字段的值\n${val}  GetFieldVal | 合同编号 | near=合同组详情\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查txt中不包含${报警通知卡片-内容预览}",
        "output": "<thought>\n要检查一个文本变量${txt}中不包含另一个文本变量${报警通知卡片-内容预览}，可以使用Robot Framework内置的Should Not Contain关键字。这个关键字专门用于验证一个字符串不包含另一个字符串。\n\n由于${txt}和${报警通知卡片-内容预览}都是变量，直接使用Should Not Contain关键字即可完成验证\n</thought>\n\n<code_block>\n# 检查${txt}中不包含${报警通知卡片-内容预览}\nShould Not Contain  ${txt}  ${报警通知卡片-内容预览}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 验证 CAB评估 文案出现",
        "output": "<thought>\n 要验证页面上是否出现“CAB评估”文案，可以使用`CheckHasText`关键字来校验页面包含这个文本。\n </thought>\n \n <code_block>\n # 校验页面出现CAB评估文案\n CheckHasText | CAB评估\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 点击“看板中英文配置”后面的按钮",
        "output": "\n    \n<thought>\n 首先需要定位“看板中英文配置”的文本，然后点击它右边的按钮。可以使用`ClickElemToTheDirectionOf`关键字，基准元素是“看板中英文配置”，方向是right，目标是按钮元素。\n </thought>\n \n <code_block>\n # 点击“看板中英文配置”右边的按钮\n ClickElemToTheDirectionOf | 看板中英文配置 | right | button\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开主页 MAIN_PAGE",
        "output": "<thought>\n为了实现这个测试场景，我们需要使用“OpenUrl”关键字。这个关键字可以接收一个URL作为参数，并会打开这个网页。\n我们需要把主页的URL存到一个变量中，我们可以命名为“MAIN_PAGE”，然后在OpenUrl关键字中引用这个变量。\n</thought>\n\n<code_block>\n# 打开主页\nOpenUrl | ${MAIN_PAGE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "去除${URL}空格",
        "output": "<thought>\n要去除${URL}中的空格，可以使用Robot Framework内置的字符串操作关键字。具体来说，可以使用Replace String关键字来替换空格字符。\n</thought>\n\n<code_block>\n# 去除${URL}中的空格\n${URL_Without_Spaces}  Replace String  ${URL}  ${SPACE}  ${EMPTY}\n\n# 打印去除空格后的URL\nLog  ${URL_Without_Spaces}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击最后一个 ‘新增响应’ 然后选择 ‘单击’",
        "output": "<thought>\n首先需要点击最后一个“新增响应”。根据描述，可以使用`Click`关键字，并设置`idx=-1`来点击最后一个匹配的文本。接下来，选择“单击”，使用`SelectOption`关键字进行选择。\n</thought>\n\n<code_block>\n# 点击最后一个新增响应\nClick | 新增响应 | idx=-1\n\n# 选择单击\nSelectOption | 单击\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个手机号码正则表达式",
        "output": "<thought>\n使用正则表达式识别手机号码的格式。正则表达式可以直接通过设置变量来完成\n</thought>\n\n<code_block>\n# 定义手机号码正则表达式\n${phone_regex}   Set Variable  ^1[3-9]\\\\d{9}$\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 HSTS 设置 下面的 子域名 设置为：应用",
        "output": "<thought>\n在这个场景中，我们需要在HSTS设置下面的子域名字段中输入“应用”。可以使用SetField关键字。这个关键字需要三个参数：“name”，“@args”和“near”。\"name\"代表我们要设置的字段名，\"@args\"代表我们要输入的值，\"near\"代表操作靠近哪个文本附近。因此，我们需要将\"name\"设置为\"子域名\"，\"@args\"设置为\"应用\"，并将\"near\"设置为\"HSTS设置\"。\n</thought>\n\n<code_block>\n# 在HSTS设置下面的子域名字段中输入“应用”\nSetField | 子域名 | 应用 | near=HSTS设置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验合同名称字段的值为：XXX",
        "output": "<thought>\n为了校验合同名称字段的值为“XXX”，可以使用关键字`CheckFieldContains`，因为我们需要验证特定字段包含指定的文本。假设字段名称为“合同名称”。\n</thought>\n\n<code_block>\n# 校验合同名称字段的值为：XXX\nCheckFieldContains | 合同名称 | XXX\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击 “提交”  “确定”\n校验： 页面出现 合同详情 、 审批中 字样",
        "output": "<thought>\n首先需要依次点击“提交”和“确定”按钮，可以使用ClickTextOneByOne关键字。接着校验页面是否包含“合同详情”和“审批中”字样，可以使用CheckHasText关键字。\n</thought>\n\n<code_block>\n# 依次点击“提交”和“确定”\nClickTextOneByOne | 提交 | 确定\n\n# 校验页面出现“合同详情”和“审批中”\nCheckHasText | 合同详情 | 审批中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${name} 表格行中的 更新 icon",
        "output": "<thought>\n首先，我们需要识别用户要执行的操作：点击一个表格行中的图标。针对这种需求，可以使用 `ClickIconOfRow` 关键字。该关键字允许我们在指定的表格行中点击特定的图标。通过使用 `${name}` 作为行的标识符，配置必要的参数即可实现目标。\n</thought>\n\n<code_block>\n# 点击 ${name} 表格行中的 更新 icon\nClickIconOfRow | ${name} | update\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 第1个Payer账号 Doooo|WtestRZA",
        "output": "<thought>\n需要将Payer字段的第一个实例设置为“Doooo|WtestRZA”。可以使用SetField关键字，并指定idx=0。\n</thought>\n\n<code_block>\n# 设置第1个Payer账号为“Doooo|WtestRZA”\nSetField | Payer | Doooo|WtestRZA | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class含有base-version-select的div,并且点击后弹出的下拉框中选择v3这个选项",
        "output": "<thought>\n1. 首先需要点击class包含base-version-select的div元素，可以使用ClickElem关键字\n2. 点击后会弹出下拉框，需要在弹窗(POPUP)中选择v3选项，可以使用SelectOption关键字并指定base=POPUP\n3. 由于是下拉框选择操作，使用SelectOption比Click更合适\n4. 需要注意jquery选择器的写法，class选择器使用[class*=base-version-select]\n</thought>\n\n<code_block>\n# 点击class包含base-version-select的div\nClickElem | div[class*=base-version-select]\n\n# 在弹窗中选择v3选项\nSelectOption | v3 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量 ${start-date}  ${end-date} 分别为 2023-12-11 和 2024-01-11",
        "output": "<thought>\n需要处理两个日期的变量设置。可以使用Set Variable关键字来定义这两个日期变量。\n</thought>\n\n<code_block>\n# 设置变量 start-date 为 2023-12-11\n${start-date}  Set Variable  2023-12-11\n\n# 设置变量 end-date 为 2024-01-11\n${end-date}  Set Variable  2024-01-11\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class=c-m-cform-section 的最后一个输入框，并填写 付款条件说明备注填写-关联合同-ui自动化-多个付款条件",
        "output": "<thought>\n1. 首先需要定位到class为c-m-cform-section的最后一个框，可以使用jQuery选择器`[class=c-m-cform-section]:eq(-1)`\n2. 然后需要在该元素中填写指定的文本内容，可以使用FillArea关键字\n3. 由于是直接操作元素而不是通过字段名，FillArea比SetField更合适\n4. 需要先点击该元素确保获得焦点，再填写内容\n</thought>\n\n<code_block>\n# 点击最后一个c-m-cform-section元素\nClickElem | [class=c-m-cform-section]:eq(-1)\n\n# 在点击的元素中填写指定文本\nFillArea | [class=c-m-cform-section]:eq(-1) | 付款条件说明备注填写-关联合同-ui自动化-多个付款条件\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "安装产品选择DataFinder",
        "output": "<thought>\n在这个场景中，需要选择一个特定的选项“DataFinder”。我可以使用`SelectOptionForField`关键字来实现该功能，因为它允许我们在指定字段（这里是'安装产品'）中选择特定的选项。\n</thought>\n\n<code_block>\n# 选择‘安装产品’为DataFinder\nSelectOptionForField | 安装产品 | DataFinder\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹框中 ‘化妆品名称’ 下面的第二个 input，输入欧莱雅",
        "output": "<thought>\n在弹窗中找到‘化妆品名称’下方的第二个input框，然后输入“欧莱雅”。我们可以使用`FindElemToTheDirectionOf`关键字来查找该input元素，并使用`FillArea`关键字输入文本。\n</thought>\n\n<code_block>\n# 查找‘化妆品名称’下方的第二个input元素\n${elem}  FindElemToTheDirectionOf | 化妆品名称 | bottom | input | idx=1 | base=POPUP\n\n# 在找到的元素中输入‘欧莱雅’\nFillArea | ${elem} | 欧莱雅\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找页面上 ‘请输入’ 文案的个数",
        "output": "<thought>\n首先需要找到文本为“请输入”的元素，然后统计其个数。可以使用FindByText关键字查找所有“请输入”文本的元素，并返回其个数。\n</thought>\n\n<code_block>\n# 查找所有文本为“请输入”的元素，并统计其个数\n${elements}  FindByText  请输入\n${count}  Evaluate  len(${elements})  # 计算找到的元素个数\nLog  输入框数量为：${count}  # 输出个数\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 打开浏览器访问：https://sso.bytedance.com, 然后关闭浏览器",
        "output": "<thought>\n 在这个场景中，我们需要使用`OpenBrowser`关键字来打开浏览器并访问指定的URL，然后使用`CloseBrowser`关键字来关闭浏览器。\n </thought>\n \n <code_block>\n # 打开浏览器并访问 https://sso.bytedance.com\n OpenBrowser | https://sso.bytedance.com\n \n # 关闭浏览器\n CloseBrowser\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置测试套件变量：${规则标签-全类型}, 其值为 ${name}",
        "output": "<thought>\n这个任务涉及设置一个测试套件变量，可以使用`Set Suite Variable`关键字，这个关键字允许我们在测试套件范围内设置一个变量。根据分析，需要将变量`${规则标签-全类型}`设置为`${name}`。\n</thought>\n\n<code_block>\n# 设置测试套件变量\nSet Suite Variable  ${规则标签-全类型}  ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到第一个查看详情附近的svg元素",
        "output": "<thought>\n基于问题，我们需要查找一个文本为“查看详情”的元素，然后定位其附近的svg元素。可以使用FindByText查找到第一个“查看详情”的元素，再利用FindNearElem定位其旁边的svg元素。\n</thought>\n\n<code_block>\n# 查找文本为“查看详情”的元素\n${detail_elem}  FindByText | 查看详情\n\n# 找到 ${detail_elem} 附近的 svg 元素\n${svg_elem}  FindNearElem | ${detail_elem} | svg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击图片生成按钮，点击描述，\n输入文字“apples”，点击立即生成",
        "output": "<thought>\n首先分析需求，我们需要在网页上依次进行几步操作。首先是点击一个名为“图片生成”的按钮，然后点击“描述”文本，接着输入“apples”这个文本，最后点击“立即生成”按钮。根据这些步骤，我们需要使用多个关键字来实现功能。\n\n1. 点击“图片生成”按钮：使用`Click`关键字来实现。\n2. 点击“描述”文本：同样使用`Click`关键字来实现。\n3. 输入文字“apples”：由于是向光标处输入文本，用`SendText`。\n4. 点击“立即生成”按钮：再次使用`Click`关键字。\n\n通过这些分析，我们可以得出解决方案。\n</thought>\n\n<code_block>\n# 点击图片生成按钮\nClick | 图片生成\n\n# 点击描述\nClick | 描述\n\n# 输入文字 \"apples\"\nSendText | apples\n\n# 点击立即生成\nClick | 立即生成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到原窗口",
        "output": "<thought>\n为了解决切换到原窗口的问题，主要使用`ToPrevWindow`关键字，该关键字可以帮助我们直接切换回之前的窗口。\n</thought>\n\n<code_block>\n# 切换回之前的窗口\nToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建列表变量 args 里面包含3个值，a,b,c",
        "output": "<thought>\n为了创建一个包含3个值（a, b, c）的列表变量，我们可以使用Robot Framework的内建关键字\"Create List\"。这个关键字允许我们逐个添加列表项。\n</thought>\n\n<code_block>\n# 创建列表变量 args 含值 a, b, c\n@{args}  Create List  a  b  c\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在关键词搜索中输入 ${表} 并回车",
        "output": "<thought>\n在这个场景中，关键字搜索可能是一个文本输入框，因此我们可以使用`SetField`关键字来进行输入，并设置`enter=True`来模拟回车动作。需要传入变量`${表}`作为输入值即可。\n</thought>\n\n<code_block>\n# 在关键词搜索中输入 ${表} 并回车\nSetField | 关键词搜索 | ${表} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置商品明细表格第一行的税率为：1%",
        "output": "<thought>\n为了解决这个问题，我需要使用FillCell关键字，因为我们需要设置表格中特定单元格的值。我们知道需要设置的表格是商品明细，目标是第一行的税率列。使用FillCell关键字可以指定行号和列名或列号来实现。根据需求，直接设置第一行税率列的值为1%。\n</thought>\n\n<code_block>\n# 设置商品明细第一行的税率为1%\nFillCell | 1 | 税率 | 1% | tbl=商品明细\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用 「新增实例」关键字\n在 实例ID筛选框中设置 返回的实例ID",
        "output": "<thought>\n为了实现这个场景，我们需要先调用一个名为「新增实例」的关键字，该关键字应该返回一个实例ID，然后将这个实例ID设置在一个名为“实例ID”的字段中。在RobotFramework中，我们可以通过直接调用关键字并保存返回值来实现第一步，然后使用SetField关键字将这个返回的实例ID填入指定的输入框。\n</thought>\n\n<code_block>\n# 调用新增实例关键字并获取返回的实例ID\n${实例ID}  新增实例\n\n# 在实例ID筛选框中设置返回的实例ID\nSetField  实例ID  ${实例ID}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认current_url里包含preOrderNumbers=BO7441136887537909804&return_url=/TrafficRoute/dns/publiczone/ptr",
        "output": "<thought>\n在这个问题中，我们需要校验页面URL是否包含特定的查询参数：`preOrderNumbers=BO7441136887537909804&return_url=/TrafficRoute/dns/publiczone/ptr`。Robot Framework的自定义关键字`WaitURLContainsAll`可以用来等待页面URL同时包含多个文本。我们可以使用这个关键字来解决问题。首先，我们需要将上述查询参数拆分为多个字符串参数，然后使用`WaitURLContainsAll`关键字进行校验。\n</thought>\n\n<code_block>\n# 使用 WaitURLContainsAll 校验 URL 同时包含多个字符串\nWaitURLContainsAll  preOrderNumbers\\=BO7441136887537909804  return_url\\=/TrafficRoute/dns/publiczone/ptr\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送如下请求，其中 instance_id 为变量 ${clipboard_content}，请从返回的 json 响应中，获取 text 字段的值，并校验页面上包含此值\ncurl 'https://v-vconsole.bytedance.net/api/top/certificate_service/cn-north-1/2021-06-01/GetParentInstance?instance_id=cert-2c6986fb19424311a20e49c39804a388' \\\n-H 'accept: application/json, text/plain, */*' \\\n-H 'x-csrf-token: 835c4e1485aaf204481b78ac58299b99' \\\n-H 'x-upstream: volcano'",
        "output": "<thought>\n首先，我会使用关键字 UiSendRequest 发送 GET 请求，并设置请求头 'x-upstream: volcano'，同时在 URL 中动态传入变量 ${clipboard_content} 作为 instance_id 参数。然后，通过关键字 GetValuesFromJson 获取响应中的 text 字段。最后，通过关键字 CheckHasText 判断页面上是否包含此值。\n</thought>\n\n<code_block>\n# 发送HTTP GET请求\n${resp_json}  UiSendRequest | GET | https://xxx.yyy.zzz.com/api/top/certificate_service/cn-north-1/2021-06-01/GetParentInstance?instance_id=${clipboard_content} | ${None} | {\"accept\": \"application/json, text/plain, */*\", \"x-upstream\": \"volcano\"}\n\n# 从返回的json响应中获取text字段的值\n${text_value}  GetValuesFromJson | ${resp_json} | text\n\n# 校验页面上包含此值\nCheckHasText | ${text_value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中的 产品汇总 右边的第二个小图标",
        "output": "<thought>\n我们可以使用`ClickIconToTheDirectionOf`关键字来解决这个问题。基准元素是\"产品汇总\"，方向是\"right\"，我们需要点击右边的第二个icon，同时要注意这是在弹窗中，所以base参数要设置为POPUP。\n</thought>\n\n<code_block>\n# 点击弹窗中 产品汇总 右边的第二个icon\nClickIconToTheDirectionOf | :contains(产品汇总) | right | idx=1 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建列表 args, 值为：页面访问  应用退出  ai-copilot-line",
        "output": "<thought>\n首先，我们需要创建一个列表`args`，包含指定的三个值。我们可以利用Python代码来创建这个列表。使用`Evaluate`关键字来执行Python代码进行列表创建。\n</thought>\n\n<code_block>\n# 创建列表 args，包含指定值\n@{args}  Evaluate  ['页面访问', '应用退出', 'ai-copilot-line']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取33分钟后的时间，格式为：年-月-日 时:分:秒",
        "output": "<thought>\n我们需要使用RobotFramework内置的时间处理关键字。首先通过`Get Current Date`来获取当前时间，并使用increment参数向日期增加33分钟。格式化输出时间时直接在`Get Current Date`中使用指定的格式即可。\n</thought>\n\n<code_block>\n# 获取当前时间并增加33分钟\n${time_after_33_min}  Get Current Date  increment=33 minutes  result_format=%Y-%m-%d %H:%M:%S\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“上报数据”，参数为 body, 地址为：https://mcs.ctobsnssdk.com/v2/event/json, 方法：POST ，header:Content-Type：application/json,X-MCS-AppKey：22af9aed03b00b0fbcf0c717f609ea08",
        "output": "<thought>\n我们需要创建一个关键字“上报数据”，接受一个参数body。然后使用“UiSendRequest”关键字向指定的URL发送POST请求，同时添加必要的请求头。\n</thought>\n\n<code_block>\n上报数据\n    [Arguments]  ${body}\n    ${resp_json}  UiSendRequest | POST | https://mcs.ctobsnssdk.com/v2/event/json | ${body} | {\"Content-Type\": \"application/json\", \"X-MCS-AppKey\": \"22af9aed03b00b0fbcf0c717f609ea08\"}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击内容助推、点击页面右侧的助推详情",
        "output": "<thought>\n针对场景中给出的操作步骤，首先需要点击文本“内容助推”。这是一个简单的文本点击操作，可以使用`Click`关键字来实现。接下来，需要点击页面右侧的\"助推详情\"。为了定位\"助推详情\"，我们可以假定它位于基准位置的某一方向。因此，可以使用`ClickTextToTheDirectionOf`这个关键字来实现。基准位置选择为屏幕中心(SCREEN_CENTER)的右侧。\n</thought>\n\n<code_block>\n# 点击“内容助推”文本\nClick | 内容助推\n\n# 点击页面右侧的“助推详情”\nClickTextToTheDirectionOf | SCREEN_CENTER | right | 助推详情\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹窗中的“导出内容”为：完整表格 ",
        "output": "<thought>\n在弹窗中设置“导出内容”为“完整表格”，我们需要使用SetField关键字，将字段名设置为“导出内容”，值设置为“完整表格”，并且需要指定基准元素为弹窗，所以base参数应设置为POPUP。\n</thought>\n\n<code_block>\n# 在弹窗中设置“导出内容”为“完整表格”\nSetField | 导出内容 | 完整表格 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘达人数据’，等页面加载好后，鼠标移动到 ‘自定义时间’ 上点击",
        "output": "<thought>\n首先，使用 `Click` 关键字点击文本 ‘达人数据’。接着，使用 `WaitLoading` 等待页面加载完成。最后，使用 `MoTo` 将鼠标移动到 ‘自定义时间’ 上并点击。\n</thought>\n\n<code_block>\n# 点击‘达人数据’\nClick | 达人数据\n\n# 等待页面加载完成\nWaitLoading\n\n# 移动到‘自定义时间’并点击\nMoTo | 自定义时间\nMClick\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "先点击用户头像，然后再点击退出登录",
        "output": "<thought>\n先点击用户头像，使用ClickElem关键字，然后再点击退出登录，使用Click关键字\n</thought>\n\n<code_block>\n# 点击用户头像\nClickElem | [class*=avatar]\n\n# 点击退出登录\nClick | 退出登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用关键字 ‘事件名称字符串’ 将其返回值填写到姓名字段中",
        "output": "<thought>\n首先，调用关键字 '事件名称字符串' 并使用 RF 提供的变量存储其返回值。然后，使用 'SetField' 关键字将此返回值填入 '姓名' 字段。\n</thought>\n\n<code_block>\n# 调用关键字 '事件名称字符串' 并存储返回值\n${eventName}  事件名称字符串\n\n# 将返回值填入 '姓名' 字段\nSetField  |  姓名  |  ${eventName}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成一个关键字，名为 mac地址生成，按照xx:xx:xx:xx:xx:xx 格式生成mac地址并返回",
        "output": "<thought>\n要生成MAC地址，需要使用到RF的字符串库中的 \"Generate Random String\" 关键字，这个关键字可以随机生成字符串，MAC地址是由6组16进制数构成，每组占两个字符，因此我们需要在关键字中生成6次16进制的随机字符串，再将这些字符串通过\":\"连接起来形成MAC地址。\n</thought>\n\n<code_block>\n# 关键字：生成MAC地址\nmac地址生成\n    # 生成一组MAC地址，由6组16进制数组成\n    ${mac_part1}  GenerateRandomString  2  [NUMBERS]abcdef\n    ${mac_part2}  GenerateRandomString  2  [NUMBERS]abcdef\n    ${mac_part3}  GenerateRandomString  2  [NUMBERS]abcdef\n    ${mac_part4}  GenerateRandomString  2  [NUMBERS]abcdef\n    ${mac_part5}  GenerateRandomString  2  [NUMBERS]abcdef\n    ${mac_part6}  GenerateRandomString  2  [NUMBERS]abcdef\n    ${mac_addr} =  Set Variable  ${mac_part1}:${mac_part2}:${mac_part3}:${mac_part4}:${mac_part5}:${mac_part6}\n    # 返回MAC地址\n    [Return]  ${mac_addr}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为：“填写寻源结果” 的关键字，接受 src 参数，操作逻辑是：\n# 1. 设置寻源结果为：src\n# 2. 如果页面存在 ‘寻源结果已失效’ 就点击暂不处理",
        "output": "<thought>\n1. 使用SetField设置“寻源结果”为给定的参数src。\n2. 使用IsAnyTextExisting判断页面上是否存在“寻源结果已失效”。\n3. 如果存在，则使用Click点击“暂不处理”。\n</thought>\n\n<code_block>\n*** Keywords ***\n填写寻源结果\n    [Arguments]  ${src}\n    # 设置寻源结果为src\n    SetField  寻源结果  ${src}\n\n    # 判断页面是否存在“寻源结果已失效”\n    ${exist}  IsAnyTextExisting  寻源结果已失效\n\n    # 如果存在“寻源结果已失效”，则点击“暂不处理”\n    IF  ${exist}\n        Click  暂不处理\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将检测URL地址输入框中填入${Tester首页URL}",
        "output": "<thought>\n为了将文本输入到URL地址的input/textarea中，我们可以使用`SetField`关键字。如果字段没有名称，但我们知道它的选择器，我们可以使用`FillArea`关键字来定位和操作该字段。我们需要确认字段是input还是textarea类型，并根据需求选择合适的关键字。假设我们要在一个input字段中输入URL。\n</thought>\n\n<code_block>\n# 将URL输入到名为检测URL地址的input字段中\nSetField | 检测URL地址 | ${Tester首页URL}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "包括switch-checked的class中 启用申请人不可编辑 多少个，如果有大于0，则点击启用申请人不可编辑",
        "output": "<thought>\n首先需要通过`GetElemCount`关键字获取class中包含`switch-checked`并且包含`启用申请人不可编辑`的元素个数。如果个数大于0，则点击`启用申请人不可编辑`。可以使用`Click`关键字完成这个操作。\n</thought>\n\n<code_block>\n# 获取包含switch-checked类并且包含启用申请人不可编辑的元素个数\n${cnt}  GetElemCount | [class*=switch-checked]:contains(启用申请人不可编辑)\n\n# 如果cnt大于0，则点击启用申请人不可编辑\nIF  ${cnt} > 0\n    Click  启用申请人不可编辑\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击密码登录，输入密码：Aa，勾选 “已阅读并同意用户协议和隐私条款”，点击登录",
        "output": "<thought>\n为了完成这个场景，首先需要点击“密码登录”按钮，然后使用`SetField`输入密码“Aa”，接着使用`CheckBoxOn`勾选“已阅读并同意用户协议和隐私条款”复选框，最后点击“登录”按钮。\n</thought>\n\n<code_block>\n# 点击密码登录\nClick | 密码登录\n\n# 输入密码“Aa”\nSetField | 密码 | Aa\n\n# 勾选“已阅读并同意用户协议和隐私条款”\nCheckBoxOn | 已阅读并同意用户协议和隐私条款\n\n# 点击登录\nClick | 登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“阶段2”的下一个按钮",
        "output": "<thought>\n为了解决这个问题，我需要找到“阶段2”文本，然后点击其后面的按钮。可以使用`ClickElemToTheDirectionOf`关键字来实现。因为要求点击的是后一个按钮，因此我应该选择right方向，并使用选择器来定位按钮元素。\n</thought>\n\n<code_block>\n# 点击“阶段2”右边的按钮\nClickElemToTheDirectionOf | 阶段2 | right | button\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "先点击 (3, 4) 这个单元格，然后向这个单元格中输入：888",
        "output": "<thought>\n根据给定的场景，我需要先点击表格中指定的单元格 (3, 4)，然后在该单元格中输入值888。我将使用 `ClickElemOfCell` 关键字来点击特定的单元格，然后使用 `FillCell` 关键字来输入值。\n</thought>\n\n<code_block>\n# 点击第3行第4列的单元格\nClickElemOfCell | 3 | 4\n\n# 在第3行第4列的单元格中输入888\nFillCell | 3 | 4 | 888\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测页面是否白屏",
        "output": "<thought>\n因为我们要检查页面是否白屏，我们可以使用内置关键字CheckWhiteScreen来解决这个问题，该关键字会主动检查页面是否白屏，如果白屏则主动抛出异常。\n</thought>\n\n<code_block>\n# 检查页面是否白屏\nCheckWhiteScreen\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入文本 ${DEPLOY_MACHINE}",
        "output": "<thought>\n场景要求输入文本 `${DEPLOY_MACHINE}`，由于输入文本是动态变量，因此我们需要使用 `SendText` 关键字在光标激活位置输入该文本。我们还需确保上下文中有光标激活的位置。综合来看，本场景应使用 `SendText` 关键字，并确保 `enter` 参数为 False。\n</thought>\n\n<code_block>\n# 在光标激活位置输入动态变量 ${DEPLOY_MACHINE}\nSendText | ${DEPLOY_MACHINE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将鼠标移动到新打开的页面，其实就是切换到新窗口",
        "output": "<thought>\n这个问题中我们需要将鼠标移动到新打开的页面，其实就是切换到新窗口，要实现这个操作，我们需要使用“ToNewWindow”这个关键字，它可以帮助我们切换到新打开的浏览器窗口。\n</thought>\n\n<code_block>\n# 切换到新打开的窗口\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：关闭帮助中心弹窗，\n主要完成：检查页面是否存在帮助中心，如果存在，则点击页面上最后一个叉号",
        "output": "<thought>\n选择使用IsAnyElemExisting关键字来检查是否存在帮助中心文本，如果存在则使用ClickIcon关键字来点击最后一个close icon。\n</thought>\n\n<code_block>\n关闭帮助中心弹窗\n    # 检查页面是否存在帮助中心\n    ${exist}  IsAnyTextExisting  帮助中心\n    # 如果存在，则点击最后一个close icon\n    IF  ${exist}\n        ClickIcon  close  idx=-1\n    END \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打印页面上前 3 个 canvas 的尺寸信息",
        "output": "<thought>\n首先，我需要获取页面上所有的canvas元素，然后分别获取前三个canvas元素的位置信息。在jQuery中，可以通过:eq(index)来选择特定的元素，因此可以使用PrintElemRect关键字来打印每个canvas的尺寸信息。\n</thought>\n\n<code_block>\n# 获取并打印前3个canvas的尺寸信息\nPrintElemRect | canvas:eq(0)\nPrintElemRect | canvas:eq(1)\nPrintElemRect | canvas:eq(2)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“事件筛选不包含”，接受参数args，主要作用是：\n# 1.点击class包含arco-select-view-value的元素，点击class包含arco-select-view-value的元素的第二个子元素\n# 2.点击class包含RealtimeBehaviorFilter的元素，并勾选给定的一个或多个 args\n3.收起弹窗",
        "output": "<thought>\n解决问题思路：\n\n1. 使用 `ClickElem` 点击第一个 `class` 包含 `arco-select-view-value` 的元素。\n2. 使用 `ClickElem` 点击其第二个后代元素。\n3. 再次使用 `ClickElem` 点击第一个 `class` 包含 `RealtimeBehaviorFilter` 的元素。\n4. 使用 `CheckBoxOn` 勾选每一个 `args` 中给定的文本。\n5. 使用 `ClickWhiteArea` 收起弹窗。\n</thought>\n\n<code_block>\n*** Keywords ***\n事件筛选不包含\n    [Arguments]  ${args}\n    # 点击第一个 class 包含 arco-select-view-value 的元素\n    ClickElem  [class*=arco-select-view-value]\n\n    # 点击第二个后代元素\n    ClickElem  [class*=arco-select-view-value] :eq(1)\n\n    # 点击 class 包含 RealtimeBehaviorFilter 的元素\n    ClickElem  [class*=RealtimeBehaviorFilter]\n\n    # 勾选给定的一个或多个 args\n    FOR  ${arg}  IN  @{args}\n        CheckBoxOn  ${arg}\n    END\n\n    # 收起弹窗\n    ClickWhiteArea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“用户登录并访问大屏页面” 的关键字，接受参数user, password, url，默认值分别为变量：ADMIN_ACCOUNT、ADMIN_PASSWORD 和 大屏URL，\n关键字作用是：\n打开浏览器访问给定的 url，然后输入账号和密码，点击登录，并等待页面URL中不再包含 login 或 auth",
        "output": "<thought>\n首先分析这个场景所需的步骤：\n\n1. 打开浏览器并访问给定的 URL。\n2. 输入账号和密码。\n3. 点击登录按钮。\n4. 等待页面 URL 中不再包含 \"login\" 或 \"auth\"。\n\n根据这些步骤，我会选择以下关键字：\n- `OpenBrowser`：打开浏览器并访问 URL。\n- `BatchSetFields`：批量填写账号和密码字段。\n- `Click`：点击登录按钮。\n- `WaitURLNotContains`：等待 URL 不包含 \"login\" 或 \"auth\"。\n\n接着，创建一个自定义关键字 `用户登录并访问大屏页面`，该关键字接受三个参数 `user`、`password` 和 `url`，并为它们设置默认值。\n</thought>\n\n<code_block>\n*** Keywords ***\n用户登录并访问大屏页面\n    [Arguments]  ${user}=${ADMIN_ACCOUNT}  ${password}=${ADMIN_PASSWORD}  ${url}=${大屏URL}\n    # 打开浏览器并访问给定的 URL\n    OpenBrowser  ${url}\n    # 批量填写账号和密码字段\n    BatchSetFields  账号=${user}  密码=${password}\n    # 点击登录按钮\n    Click  登录\n    # 等待 URL 不再包含 \"login\" 或 \"auth\"\n    WaitURLNotContains  login  auth\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击全部功能，然后点击网络资产，最后点击 AP",
        "output": "<thought>\n通过场景描述，这是一个连续的点击操作，可以通过 `ClickTextOneByOne` 来实现。依次点击\"全部功能\"、\"网络资产\"、\"AP\"，该关键字适合这种顺序点击操作。\n</thought>\n\n<code_block>\n# 依次点击 全部功能, 网络资产, AP\nClickTextOneByOne | 全部功能 | 网络资产 | AP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择规格为小型，校验包含【支持升降配，降配规格前请先将业务调整到不超过目标规格限制，规格限制参考文档】文字",
        "output": "<thought>\n为了解决这个问题，我们需要以下步骤：\n1. 使用`SelectOptionForField`选择规格为“小型”。\n2. 使用`CheckHasText`确认页面包含指定的文字内容。\n这两个步骤确保我们首先将规格设为“小型”并验证页面上是否正确显示提示信息。\n</thought>\n\n<code_block>\n# 选择规格为小型\nSelectOptionForField | 规格 | 小型\n\n# 校验包含指定的提示信息\nCheckHasText | 支持升降配，降配规格前请先将业务调整到不超过目标规格限制，规格限制参考文档\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到新窗口，等待页面加载完成，向搜索框输入uitest 回车，点击App左侧的arco-radio-mask",
        "output": "<thought>\n对于这个测试场景，首先需要切换到新窗口，这可以通过`ToNewWindow`关键字实现。接着，需要等待页面加载完成，可以用`WaitLoading`来确保页面彻底加载。在搜索框中输入`uitest`并回车，可以使用`SetField`关键字，其中`enter=True`用于模拟回车操作。最后，点击‘App’左侧的特定class的元素，可以使用`ClickElemToTheDirectionOf`关键字，指定‘App’为基准元素，方向为`left`，选择器为`[class*=arco-radio-mask]`。\n</thought>\n\n<code_block>\n# 切换到新窗口\nToNewWindow\n\n# 等待页面加载完成\nWaitLoading\n\n# 在搜索框中输入uitest并回车\nSetField | 搜索 | uitest | enter=True\n\n# 点击 'App' 左侧的 class 包含 arco-radio-mask 的元素\nClickElemToTheDirectionOf | App | left | [class*=arco-radio-mask]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“等待标签人数计算完毕”的关键字；接受参数：name,操作逻辑为：\n查看当前页面是否包含：“计算中”，若有，就等待5s后刷新页面，等待页面加载好，重复此过程，最多15次，若没有就结束",
        "output": "<thought>\n首先，使用`IsAnyTextExisting`判断页面是否包含“计算中”。如果存在，使用`Sleep`等待5秒，然后调用`RefreshPage`刷新页面，再用`WaitLoading`等待页面加载完成。通过循环重复这个过程，直到“计算中”不存在或者达到最大尝试次数（15次）。\n</thought>\n\n<code_block>\n*** Keywords ***\n等待标签人数计算完毕\n    [Arguments]  ${name}\n    ${attempts}  Set Variable  0\n    FOR  ${INDEX}  IN RANGE  15\n       ${exist}  IsAnyTextExisting  计算中\n       IF  ${exist}\n           Sleep  5s\n           RefreshPage\n           WaitLoading  timeout=30\n           ${attempts}  Set Variable  ${INDEX}\n       ELSE\n           Exit For Loop\n       END\n    Log  检查完成，共尝试了${attempts}次\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面元素 ${elem} 的位置信息",
        "output": "<thought>\n为了获取元素的位置信息，我们需要使用PrintElemRect关键字，这个关键字能够打印出元素的空间尺寸/位置等信息。在这里，我们所需要的只是位置信息，所以我们只关注位置相关的输出。\n</thought>\n\n<code_block>\n# 使用PrintElemRect来获取元素的位置信息\nPrintElemRect | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "要求：使用 python 将形如 2023/1/1 格式的日期转换成带有前导 0 的格式：2023/01/01",
        "output": "<thought>\n解决问题思路：对于日期格式转换，可以使用Python的datetime库来处理。通过Evaluate关键字执行Python代码，将日期字符串转换为datetime对象，然后格式化输出为带前导0的格式。这种情况下，我们可以使用strftime方法来实现。\n</thought>\n\n<code_block>\n# 使用Python代码将日期转换为带前导0的格式\n${formatted_date}  Evaluate  datetime.datetime.strptime('2023/1/1', '%Y/%m/%d').strftime('%Y/%m/%d')  modules=datetime\nLog  ${formatted_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ${url} 包含 /home",
        "output": "<thought>\n解决问题思路：通过RF的内置关键字 \"Should Contain\" 对字符串进行断言判断，检查 ${url} 是否包含 \"/home\"。\n</thought>\n\n<code_block>\n# 校验 ${url} 包含 /home\nShould Contain  ${url}  /home\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第二个placeholder=请输入属性名称或属性值，并输入app_version，回车",
        "output": "<thought>\n为了实现点击第二个带有placeholder=\"请输入属性名称或属性值\"的输入框，并输入文本\"app_version\"后回车，我将使用关键字ClickElem来定位该输入框。由于是第二个输入框，使用:eq(1)来指定。然后使用SetField来输入文本并回车。\n</thought>\n\n<code_block>\n# 点击第二个placeholder=请输入属性名称或属性值的输入框\nClickElem | [placeholder='请输入属性名称或属性值']:eq(1)\n\n# 输入app_version并回车\nSendText | app_version | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个设置事件指标关键字，接受 ${name}, @{config} 参数，分别表示事件名称和事件配置，关键字会向事件名字段中输入给定的一个或多个事件参数",
        "output": "<thought>\n解决问题的思路是使用\"SetField\"关键字，它能一次性为一个字段设置多个值。在这个案例中，我们可以使用\"SetField\"关键字将事件参数作为值输入到事件名字段中。${name} 参数是字段名，而 @{config} 参数是一个列表，包含了我们想要输入到字段中的一个或多个值。\n</thought>\n\n<code_block>\n设置事件指标\n    [Arguments]  ${name}  @{config}\n    SetField  |  ${name}  |  @{config}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "读取文件 Resources/Dorado/emr-hsql语句 的内容，然后将其填写到编辑器中",
        "output": "<thought>\n首先需要读取目标文件的内容，然后使用`FillEditor`关键字将读取的内容填写到指定的编辑器中。\n</thought>\n\n<code_block>\n# 读取文件内容\n${file_content}=  Get File  Resources/Dorado/emr-hsql语句\n\n# 填写内容到编辑器\nFillEditor  ${file_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（3，2）",
        "output": "<thought>\n在这个场景中，我们需要点击特定的表格单元格。给出的提示为“点击单元格（3，2）”，这意味着我们需要在一个表格中，点击位于第3行和第2列的单元格。可以使用`ClickTextOfCell`或`ClickElemOfCell`关键字来精确点击这个单元格。由于没有指定要点击的具体文本或元素，我们可以使用默认的通配符参数来点击该单元格中的任意文本或元素。选择这个方法是因为它能够直接定位目标单元格，满足场景要求。\n</thought>\n\n<code_block>\n# 点击第3行，第2列中的任意元素\nClickElemOfCell | 3 | 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断第一个tr标签下包含文本主体1。提示：其实就是判断该元素存在",
        "output": "<thought>\n我们需要检查第一个`tr`标签下是否含有文本\"主体1\"。可以使用`FindElem`关键字来定位第一个`tr`标签，并通过`:contains`选择器进行文本匹配。\n</thought>\n\n<code_block>\n# 查找第一个tr标签并检查其包含文本\"主体1\"\n${elem}  FindElem | tr:eq(0):contains(主体1)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击添加数据集，表单Dataset Name输入testDataset，Description输入testDescription",
        "output": "<thought>\n这是一个需要依次点击和填写表单的场景。可以使用`Click`关键字点击“添加数据集”按钮，然后使用`BatchSetFields`批量填写表单中的“Dataset Name”和“Description”字段。\n</thought>\n\n<code_block>\n# 点击添加数据集\nClick | 添加数据集\n\n# 批量填写Dataset Name和Description\nBatchSetFields | Dataset Name=testDataset | Description=testDescription\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 删除 小图标",
        "output": "<thought>\n要点击\"删除\"图标，可以使用`ClickIcon`关键字。因为要求点击删除icon，所以直接指定name为delete，并设置idx为0以选择第一个图标。\n</thought>\n\n<code_block>\n# 点击删除图标\nClickIcon | delete | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格中nxZDpTv行的删除",
        "output": "<thought>\n要在表格中点击nxZDpTv所在行的删除，我们可以使用ClickTextOfRow关键字。这个关键字允许我们指定行的标识（nxZDpTv），以及我们要点击的文本（删除）。\n</thought>\n\n<code_block>\n# 点击表格中nxZDpTv所在行的删除\nClickTextOfRow | nxZDpTv | 删除\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格 “请选择单个选项” 的第一行包含：“选项 1”、“1”、“50%”",
        "output": "<thought>\n1. 首先需要明确要校验的是表格\"请选择单个选项\"的第一行内容\n2. 根据需求，需要校验该行同时包含三个文本：\"选项 1\"、\"1\"、\"50%\"\n3. 查看可用关键字，发现CheckRowHas正好可以满足这个需求，它可以校验指定行包含多个文本\n4. 表格名称为\"请选择单个选项\"，行号为1(第一行)，需要校验的文本为\"选项 1\"、\"1\"、\"50%\"\n5. 不需要指定base参数，因为不是弹窗中的表格\n</thought>\n\n<code_block>\n# 校验表格第一行包含指定文本\nCheckRowHas | 1 | 选项 1 | 1 | 50% | tbl=请选择单个选项\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的付款账号右边的delete小图标 ",
        "output": "<thought>\n要点击弹窗中的“付款账号”右边的delete图标，可以使用`ClickIconToTheDirectionOf`关键字。需要指定基准元素是弹窗中的文本“付款账号”，方向为右，图标名称为delete。因为“付款账号”在弹窗中，所以需要设置base=POPUP。\n</thought>\n\n<code_block>\n# 点击弹窗中的付款账号右边的delete图标\nClickIconToTheDirectionOf | :contains(付款账号) | right | delete | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找包含文本“项目接入测试实验-”或者“test experiment for app access-”的div元素",
        "output": "<thought>\n使用FindByText关键字，可以根据文本查找元素。在此场景中，需要查找包含文本“项目接入测试实验-”或者“test experiment for app access-”的div元素，因此选择FindByText关键字，并传递多个文本参数。\n</thought>\n\n<code_block>\n# 查找包含文本“项目接入测试实验-”或者“test experiment for app access-”的div元素\n${elem}  FindByText | 项目接入测试实验- | test experiment for app access- | tag=div\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "按回车键",
        "output": "<thought>\n为了按回车键，我们可以使用SendText关键字来模拟按下回车键。SendText关键字有一个可选参数enter，当设置为True时，它会在操作后按下回车键。\n</thought>\n\n<code_block>\n# 按回车键\nSendText | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击我的任务，点击第2个复制图标，验证 已复制 文案出现，之后如果页面有class为close svelte-rbapkb的则点击，没有跳过",
        "output": "<thought>\n首先，我需要点击“我的任务”，然后点击第二个复制icon。接下来，验证“已复制”文案是否出现。最后，判断页面是否存在class为close svelte-rbapkb的元素，如果存在则点击，否则跳过。\n</thought>\n\n<code_block>\n# 点击我的任务\nClick | 我的任务\n\n# 点击第二个复制icon\nClickIcon | copy | idx=1\n\n# 验证“已复制”文案出现\nWaitText | 已复制\n\n# 判断class为close svelte-rbapkb的元素是否存在，如果存在则点击\n${exist}  IsAnyElemExisting | [class='close svelte-rbapkb']\nIF  ${exist}\n    ClickElem | [class='close svelte-rbapkb']\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${result}该行的删除按钮",
        "output": "<thought>\n首先，我需要根据“${result}”选择表格中的行，然后在这一行中找到“删除”按钮并点击。可以使用`ClickElemOfRow`关键字来实现这一操作。在这里，需要通过行内容`${result}`选择对应行，并传入“删除”按钮的选择器。\n</thought>\n\n<code_block>\n# 点击${result}所在表格行的删除按钮\nClickElemOfRow | ${result} | button:contains(删除)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：查询 的关键字，接受 text、val 参数，val的默认值为空值，作用是找到input输入框 placeholder 含有 text 的输入内容，然后填入 val 值。如果没找到元素，text后面一个的input输入框。  然后点击查询，等待页面加载完成",
        "output": "<thought>\n我们需要创建一个名为“查询”的关键字，它接收两个参数：text和val。首先，我们要找到一个input或textarea，其placeholder属性包含给定的text。如果找不到这样的元素，则需要找text之后的第一个input或textarea。然后在找到的元素中输入val的值。最后，我们点击“查询”按钮，并等待页面加载完成。可以使用以下关键字：IsAnyElemExisting用于检查元素是否存在，FindElemToTheDirectionOf用于查找text后面的输入区域，FillArea用于填写查找到的输入控件，Click用于点击“查询”按钮，WaitLoading用于等待页面加载完成。\n</thought>\n\n<code_block>\n*** Keywords ***\n查询\n    [Arguments]  ${text}  ${val}=\n\n    # 检查是否存在 placeholder 包含 ${text} 的 input 或 textarea\n    ${exist}  IsAnyElemExisting  input[placeholder*=\"${text}\"], textarea[placeholder*=\"${text}\"]\n    \n    # 如果存在，则在该元素中填入 ${val}\n    IF  ${exist}\n        ${elem}  FindElem  input[placeholder*=\"${text}\"], textarea[placeholder*=\"${text}\"]\n        FillArea  ${elem}  ${val}\n    ELSE\n        # 如果不存在，查找 ${text} 后面的第一个 input 或 textarea，并在该元素中填入 ${val}\n        ${elem}  FindElemToTheDirectionOf  ${text}  right  input, textarea\n        FillArea  ${elem}  ${val}\n    END\n\n    # 点击查询按钮\n    Click  查询\n\n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截取当前页面的所有内容进行图像对比，并命名为：template_preview",
        "output": "<thought>\n这个场景需要截取当前页面的全屏截图，并与基准图进行对比。根据关键字描述，ImageDiff关键字可以完成这个任务，当selector参数为空时表示全屏截图。我们需要指定pic_name参数为\"template_preview\"来命名截图。相似度参数sim可以省略，使用默认值0.99。\n</thought>\n\n<code_block>\n# 截取全屏截图并与基准图对比，命名为template_preview\nImageDiff    pic_name=template_preview\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 data-before 包含‘描述想要生成的图片’ 的区域，然后输入：一只打太极的小狗",
        "output": "<thought>\n首先需要点击一个区域，这个区域的`data-before`属性包含‘描述想要生成的图片’。可以使用`ClickElem`关键字配合jQuery选择器来定位该元素并点击。然后，在该区域输入文本‘一只打太极的小狗’。由于没有指定字段名，因此可以使用`SendText`关键字在光标处输入文本。\n</thought>\n\n<code_block>\n# 点击 data-before 包含‘描述想要生成的图片’的区域\nClickElem | [data-before*='描述想要生成的图片']\n\n# 在光标处输入文本：一只打太极的小狗\nSendText | 一只打太极的小狗\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为‘删除自定义错误页面1’的关键字，接受参数：index ，默认为 0，逻辑如下：\n# 1. 点击 id 为 CustomErrorPage 元素中 第 index 个 删除 按钮\n# 2. 点击弹窗中的确定",
        "output": "<thought>\n要完成这个任务，首先需要根据提供的index参数找到特定的删除按钮，并点击它。然后，需要在弹出窗口中点击确定按钮。为了实现这一目标，可以使用ClickElem关键字来选择jQuery选择器中id为CustomErrorPage的元素中的第index个删除按钮。接着，使用Click关键字在弹出窗口中点击确定。\n</thought>\n\n<code_block>\n*** Keywords ***\n删除自定义错误页面1\n    [Arguments]  ${index}=0\n\n    # 点击 id 为 CustomErrorPage 元素中 第 ${index} 个 删除 按钮\n    ClickElem  [id=CustomErrorPage] button:contains(删除):eq(${index})\n\n    # 点击弹窗中的确定\n    Click  确定  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向输入关键词中输入：coral_auto_hive_em_table，点击搜索",
        "output": "<thought>\n解决问题思路：首先使用SetField关键字输入关键词，然后使用Click关键字点击搜索按钮。\n</thought>\n\n<code_block>\n# 输入coral_auto_hive_em_table关键词\nSetField | 输入关键词 | coral_auto_hive_em_table\n\n# 点击搜索按钮\nClick | 搜索\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${是否成功}为：成功，则检测页面存在 提交成功！，如果为：失败，则检测页面存在 Invalid URL in request",
        "output": "<thought>\n首先需要判断变量`${是否成功}`的值，然后根据其值选择不同的校验逻辑。如果值为\"成功\"，则校验页面包含文本\"提交成功！\"。如果值为\"失败\"，则校验页面包含文本\"Invalid URL in request\"。可以使用`CheckHasText`关键字来实现文本的校验。\n</thought>\n\n<code_block>\n# 判断是否成功\nIF  \"${是否成功}\" == \"成功\"\n    # 检查页面是否包含“提交成功！”\n    CheckHasText  提交成功！\nELSE IF  \"${是否成功}\" == \"失败\"\n    # 检查页面是否包含“Invalid URL in request”\n    CheckHasText  Invalid URL in request\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“设置分群时间段” 的关键字，接受 type, period 参数， period 默认为空，逻辑是：\n向 class*=CohortCreateRulePeriod__container的区域中填写 type 和 peroid",
        "output": "<thought>\n要实现“设置分群时间段” 关键字，我们需要向 class 包含 CohortCreateRulePeriod__container 的区域中填写 type 和 period。根据指示，FillArea 关键字是用于操作页面上 jquery 选择器代表的控件区域，因此我们可以使用 FillArea 关键字来完成此任务。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置分群时间段\n    [Arguments]  ${type}  ${period}=\n\n    # 在 class 包含 CohortCreateRulePeriod__container 的区域中填写 type 和 period\n    FillArea  [class*=CohortCreateRulePeriod__container]  ${type}  ${period}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 切换到新打开的窗口",
        "output": "<thought>\n 对于切换到新打开的窗口的操作，RobotFramework 提供了专门的关键字 ToNewWindow。直接调用这个关键字就可以完成任务。\n </thought>\n \n <code_block>\n # 切换到新打开的窗口\n ToNewWindow\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "使用 OCR 方式获取 “姓名” 字段的值",
        "output": "<thought>\n在这个问题中，我们需要使用OCR的方式获取姓名字段的值，所以我们可以直接使用RF库中的GetFieldVal关键字来解决这个问题，并将OCR参数设置为True。\n</thought>\n\n<code_block>\n# 使用OCR方式获取姓名字段的值\n${val}  GetFieldVal | 姓名 | ocr=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送我这个请求，你需要把 cycle_id 换成变量 ${cycle}，然后校验响应中的env_name字段中包含：490每日测试环境\n    curl 'https://cloudapi.bytedance.net/faas/services/ttwy2i/invoke/query_devops_transaction_task' \\\n  -H 'accept: application/json' \\\n  -H 'accept-language: zh-CN,zh;q=0.9' \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: application/json;charset=UTF-8' \\\n  -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36' \\\n  --data-raw '{\"current\":1,\"pageSize\":10,\"sorter\":{},\"filter\":{},\"page\":1,\"limit\":10,\"cycle_id\":\"662b45af81205e002c5a028f\",\"trigger\":\"cycle\"}'",
        "output": "<thought>\n首先，我们需要解析给出的curl命令，找出请求方法，请求URL，请求头和请求体。然后我们需要将其中的cycle_id的值替换为我们自定义的变量${cycle}。然后我们需要发送这个请求，并获取响应。最后我们需要验证响应中的env_name字段是否包含\"490每日测试环境\"。\n</thought>\n\n<code_block>\n# 设置请求url\n${url}  Set Variable  https://xxx.yyy.zzz.com/faas/services/ttwy2i/invoke/query_devops_transaction_task\n\n# 设置请求头\n${headers}  Set Variable  {\"accept\": \"application/json\", \"content-type\": \"application/json;charset=UTF-8\"}\n\n# 设置请求体，并将cycle_id的值替换为自定义变量${cycle}\n${body}  Set Variable  {\"current\":1,\"pageSize\":10,\"sorter\":{},\"filter\":{},\"page\":1,\"limit\":10,\"cycle_id\":\"${cycle}\",\"trigger\":\"cycle\"}\n\n# 发送POST请求\n${resp_json}  UiSendRequest | POST | ${url} | ${body} | ${headers}\n\n# 从响应中获取env_name字段的值\n${value}  GetValuesFromJson | ${resp_json} | env_name\n\n# 验证env_name字段的值是否包含\"490每日测试环境\"\nShould Contain  ${value}  490每日测试环境\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选表格中第五行的方框进行批量删除",
        "output": "<thought>\n 根据问题描述，我们需要勾选表格中第五行的复选框。这可以通过使用ClickElemOfRow关键字来实现，其中row_name_or_id设置为5，selector设置为\":checkbox\"，表示要点击的是复选框元素。\n </thought>\n \n <code_block>\n # 勾选表格中第五行的复选框\n ClickElemOfRow | 5 | :checkbox\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击订单管理\n等待页面加载完成\n输入订单号 7322576859361839148\n点击查询\n点击 列表里的 查看详情按钮\n等待页面加载完成\n点击佣金设置\n点击table里的第一条数据中的设置佣金按钮\n查找到class含有 okee-lp-modal-show 的元素",
        "output": "<thought>\n首先需要点击“订单管理”文本，然后等待页面加载完成。在页面中输入订单号，并点击“查询”按钮。在查询结果列表中找到“查看详情”按钮并点击，等待加载完成后，寻找并点击“佣金设置”文本。接下来，在表格中的第一条数据找到“设置佣金”按钮并点击。最后，查找class包含“okee-lp-modal-show”的元素。\n</thought>\n\n<code_block>\n# 点击订单管理\nClick | 订单管理\n\n# 等待页面加载完成\nWaitLoading\n\n# 输入订单号 7322576859361839148\nSetField | 订单号 | 7322576859361839148\n\n# 点击查询\nClick | 查询\n\n# 列表里的 查看详情按钮\nClick | 查看详情\n\n# 等待页面加载完成\nWaitLoading\n\n# 点击佣金设置\nClick | 佣金设置\n\n# 点击table里的第一条数据中的设置佣金按钮\nClickTextOfRow | 1 | 设置佣金\n\n# 查找到class含有 okee-lp-modal-show 的元素\n${elem}  FindElem | [class*=okee-lp-modal-show]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认列表中第一行 领用单号 列的值，和${ApplyOrder}一致",
        "output": "<thought>\n先获取列表中第一行\"领用单号\"列的值，并校验它与${ApplyOrder}是否相等。\n</thought>\n\n<code_block>\n# 获取列表中第一行\"领用单号\"列的值\n${val}  GetCellValue | 1 | 领用单号\n\n# 校验列表中第一行\"领用单号\"列的值与${ApplyOrder}是否相等\nShould Be Equal As Strings  ${val}  ${ApplyOrder}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class包含FilterExpressionsForm__container的元素中输入：注册时间、在今天和、过去、1、之内",
        "output": "<thought>\n首先要在指定的页面元素中输入多个值。由于涉及基于class的选择器，可以使用FillArea关键字来实现。确定选择器为`div[class*=FilterExpressionsForm__container]`。然后使用FillArea关键字依次输入指定的值。\n</thought>\n\n<code_block>\n# 在class包含FilterExpressionsForm__container的元素中依次输入注册时间、在今天和、过去、1、之内\nFillArea | div[class*=FilterExpressionsForm__container] | 注册时间 | 在今天和 | 过去 | 1 | 之内\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面是否有2个“配置过滤条件”，若有，则点击第一个“配置过滤条件”，若没有，则点击第一个“查看详情”",
        "output": "<thought>\n首先，我需要检查页面上是否有两个“配置过滤条件”。如果有两个，那么就点击第一个“配置过滤条件”。如果没有两个，那么就点击第一个“查看详情”。\n我将使用`GetElemCount`来获取“配置过滤条件”的数量。然后使用条件判断`IF`来决定点击哪个文本。\n</thought>\n\n<code_block>\n# 获取“配置过滤条件”的数量\n${count}  GetElemCount  :contains(配置过滤条件)\n\n# 判断数量是否等于2\nIF  ${count} == 2\n    # 点击第一个“配置过滤条件”\n    Click  配置过滤条件  idx=0\nELSE\n    # 点击第一个“查看详情”\n    Click  查看详情  idx=0\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 商品管理下面的餐饮商品管理",
        "output": "<thought>\n这个测试任务要求点击“商品管理”下面的“餐饮商品管理”。可以使用`ClickTextToTheDirectionOf`关键字，选择“商品管理”作为基准元素，然后在基准元素的下方寻找“餐饮商品管理”进行点击。\n</thought>\n\n<code_block>\n# 点击商品管理下面的餐饮商品管理\nClickTextToTheDirectionOf | 商品管理 | bottom | 餐饮商品管理\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击业务BP负责人下方输入框，输入凤银洁，选择下拉值",
        "output": "<thought>\n在这个场景中，我们需要先点击一个特定输入框或文本区域，然后输入名字“凤银洁”，最后选择相应的下拉值。首先可以通过定位文本“业务BP负责人”下方的input或textarea元素进行点击，接着在该输入框中输入文本“凤银洁”，最后选择下拉列表中的一个值。我们可以使用`FindElemToTheDirectionOf`来查找元素，然后用`FillArea`输入文本，最后使用`SelectOption`选择下拉值。具体步骤如下：\n</thought>\n\n<code_block>\n# 查找\"业务BP负责人\"下方的输入框\n${input_elem}  FindElemToTheDirectionOf | 业务BP负责人 | bottom | input,textarea\n\n# 在找到的输入框中输入\"凤银洁\"\nFillArea | ${input_elem} | 凤银洁\n\n# 选择下拉选项（假设需要选择第一个选项）\nSelectOption | OPTIONS_1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "起一个变量名，含义为短期融资利率",
        "output": "<thought>\n为了定义一个变量，表示短期融资利率，我们可以使用Robot Framework中的`Set Variable`关键字。变量命名应简洁明了，例如：`${ShortTermInterestRate}`。\n</thought>\n\n<code_block>\n# 定义变量短期融资利率\n${ShortTermInterestRate}  Set Variable  0.05\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 class包含 abc 的元素的 style 属性，校验这属性中包含 red，然后向包含 auto_test_xx 这个文本的表格行中的学校（列）中输入：树人，点击确定。\n提示：表格行和列已锁定具体单元格，是要向单元格中输入",
        "output": "<thought>\n首先使用`FindElem`获取class包含`abc`的元素，并使用`GetElemAttr`获取其`style`属性。然后使用`Should Contain`校验属性中包含`red`。接下来，使用`FillCell`向包含`auto_test_xx`文本的表格行的学校列中输入`树人`，最后使用`Click`点击`确定`按钮。\n</thought>\n\n<code_block>\n# 获取 class 包含 abc 的元素的 style 属性\n${style}  GetElemAttr | [class*=abc] | style\n\n# 校验 style 属性中包含 red\nShould Contain  ${style}  red\n\n# 向包含 auto_test_xx 的表格行中的学校列输入：树人\nFillCell | auto_test_xx | 学校 | 树人\n\n# 点击确定\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“邮箱登录” 的关键字，接受 email, password, url 参数, 默认值分别为全局变量 EMAIL, PASSWORD, LOGIN_URL，作用是：\n1. 打开浏览器，访问 url, 等页面加载完成后，输入邮箱，密码，然后勾选 ‘我已阅读’，最后点击登录\n2. 等待页面包含文本：首页",
        "output": "<thought>\n1. 使用`OpenBrowser`关键字打开浏览器并访问给定的url。\n2. 使用`WaitLoading`等待页面加载完成。\n3. 使用`BatchSetFields`填写邮箱和密码。\n4. 使用`CheckBoxOn`勾选“我已阅读”复选框。\n5. 使用`Click`点击登录按钮。\n6. 使用`WaitText`等待页面包含文本“首页”。\n</thought>\n\n<code_block>\n*** Keywords ***\n邮箱登录\n    [Arguments]  ${email}=${EMAIL}  ${password}=${PASSWORD}  ${url}=${LOGIN_URL}\n    \n    # 打开浏览器并访问URL\n    OpenBrowser  ${url}\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 输入邮箱和密码\n    BatchSetFields  邮箱=${email}  密码=${password}\n    \n    # 勾选‘我已阅读’\n    CheckBoxOn  我已阅读\n    \n    # 点击登录\n    Click  登录\n    \n    # 等待页面包含“首页”\n    WaitText  首页\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数据查询",
        "output": "<thought>\n这个问题相对简单，只需要点击文本“数据查询”。用Click关键字即可实现。\n</thought>\n\n<code_block>\n# 点击文本 \"数据查询\"\nClick | 数据查询\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成后，点击发现Agent智能体，校验class=custom-radio-auto的元素中是否有doubao-pro",
        "output": "<thought>\n首先，使用`WaitLoading`关键字等待页面加载完成。接下来，使用`Click`关键字点击“发现Agent智能体”。然后，使用`CheckHasElem`关键字检查class为`custom-radio-auto`的元素中是否存在文本`doubao-pro`。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 点击发现Agent智能体\nClick | 发现Agent智能体\n\n# 校验class=custom-radio-auto的元素中是否有doubao-pro\nCheckHasElem | [class=custom-radio-auto]:contains(doubao-pro)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 弹窗中 “产品汇总”表 13列中 不包含0.00 、15列中 不包含0.00",
        "output": "<thought>\n需要使用CheckColNotHas关键字来校验弹窗中的表格。首先，校验第13列不包含“0.00”，然后校验第15列不包含“0.00”。由于是弹窗中的表格，需要指定base为POPUP。\n</thought>\n\n<code_block>\n# 校验弹窗中“产品汇总”表第13列不包含0.00\nCheckColNotHas | 13 | 0.00 | tbl=产品汇总 | base=POPUP\n\n# 校验弹窗中“产品汇总”表第15列不包含0.00\nCheckColNotHas | 15 | 0.00 | tbl=产品汇总 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切换到当前iframe页面，点击插件资产，点击 查看，校验页面不存在：下载失败",
        "output": "<thought>\n首先需要切换到当前的iframe页面，这可以通过使用ToFrame关键字完成。然后，使用Click关键字点击名为“插件资产”的文本。接下来，再次使用Click关键字点击“查看”文本。最后，使用CheckNotHasText关键字验证页面上是否不存在“下载失败”文本。\n</thought>\n\n<code_block>\n# 进入当前iframe\nToFrame | iframe:eq(0)\n\n# 点击 插件资产\nClick | 插件资产\n\n# 点击 查看\nClick | 查看\n\n# 校验页面不存在 下载失败\nCheckNotHasText | 下载失败\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "滑动页面，直到页面透出「资源包」文案, 其实就是将文本为 「资源包」 的元素滑动到视野内",
        "output": "<thought>\n我将使用的关键字是\"MoveIntoView\"。我将选择此关键字是因为根据给定的场景，我需要滑动页面，直到我看到\"资源包\"这个文案，这正是\"MoveIntoView\"关键字的作用。\n</thought>\n\n<code_block>\n# 查找文本为「资源包」的元素\n${elem}  FindByText | 资源包\n\n# 将元素滑动到视野内\nMoveIntoView | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在class为arco-icon-close的按钮，点击它，可能有一个或者多个",
        "output": "<thought>\n首先，我们需要判断页面上是否存在class为arco-icon-close的元素。如果存在，我们需要获取这些元素的数量，然后对这些元素进行倒序遍历并点击每一个元素。这样做是为了防止在点击一个元素后，页面元素结构改变而导致未能正确点击所有目标元素。\n</thought>\n\n<code_block>\n# 找到class为arco-icon-close的按钮个数\n${count}  GetElemCount  [class=arco-icon-close]\n\n# 如果存在至少一个按钮\nIF  ${count} > 0\n    # 遍历所有按钮，注意倒序遍历\n    FOR  ${index}  IN RANGE  ${count - 1}  -1  -1\n        # 依次点击每一个class为arco-icon-close的按钮\n        ClickElem  [class=arco-icon-close]:eq(${index})\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 去掉${time1} 的日期部分，其中 time1 是类似 2026-08-31 15:23:45 格式的字符串",
        "output": "<thought>\n 在这个场景中，我需要去掉时间字符串的日期部分，只保留时间部分。Robot Framework 的内置库中并没有直接提供这种操作的关键字，因此需要使用一些基本的字符串操作来实现。我会使用 Split String 关键字，该关键字可以将字符串从指定的分隔符处切分为一个列表，然后通过 Get From List 关键字获取列表中的第二个元素，即时间部分。\n </thought>\n \n <code_block>\n # 使用空格作为分隔符，切分字符串\n ${time_parts}= Split String ${time1} ${SPACE}\n # 获取切分后的列表中的第二个元素，即时间部分\n ${time_only}= Get From List ${time_parts} 1\n Log To Console ${time_only}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击DNS状态右侧的筛选小图标，点击弹窗中的正常 点击确定",
        "output": "<thought>\n在这个任务中，我们需要首先点击“DNS状态”右侧的筛选icon图标，然后在弹窗中点击“正常”并最后点击“确定”。为了实现这个过程，可以使用以下关键字：\n\n1. `ClickIconToTheDirectionOf` 来点击 “DNS状态” 右侧的筛选icon。\n2. `Click` 来点击弹窗中的“正常”。\n3. `Click` 来点击弹窗中的“确定”。\n\n特别需要注意的是，在选择icon时，我们使用右侧方向选择筛选icon，而在弹窗中点击“正常”和“确定”时，我们会将它们的基准元素设置为`POPUP`。\n</thought>\n\n<code_block>\n# 点击“DNS状态”右侧的筛选icon\nClickIconToTheDirectionOf | DNS状态 | right | filter\n\n# 点击弹窗中的“正常”\nClick | 正常 | base=POPUP\n\n# 点击弹窗中的“确定”\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 ‘实例状态’ 上，然后点击最后一个 ‘停止’，然后点击确定",
        "output": "<thought>\n首先，鼠标移动到文本“实例状态”上。然后，点击最后一个文本“停止”，接着点击文本“确定”。为此，我们可以依次使用 `MoTo`、`Click` 和 `Click` 关键字来完成这些操作。\n</thought>\n\n<code_block>\n# 移动到文本 '实例状态' 上\nMoTo | 实例状态\n\n# 点击最后一个 '停止'\nClick | 停止 | idx=-1\n\n# 点击 '确定'\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建变量 x = 5",
        "output": "<thought>\n首先，我们需要使用RobotFramework提供的关键字来创建一个变量，并将其值设为5。在RobotFramework中，Set Variable关键字可以用来设置变量值。我们将使用这个关键字来实现任务。\n</thought>\n\n<code_block>\n# 创建变量 x 并赋值为 5\n${x}  Set Variable  5\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在‘指标搜索’输入‘直播体裁puUwTLX1’回车",
        "output": "<thought>\n需要在指定名称的字段中输入文本，并且按下回车键。因此可以使用`SetField`关键字来完成此任务。需要设置参数`enter=True`以模拟回车操作。\n</thought>\n\n<code_block>\n# 在‘指标搜索’输入‘直播体裁puUwTLX1’回车\nSetField | 指标搜索 | 直播体裁puUwTLX1 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置单元格（4，字段类型）为int",
        "output": "<thought>\n通过查看关键字列表，我们可以看到 \"FillCell\" 关键词可以实现目标，它允许我们指定一个单元格并设置其值。在这个例子中，我们将使用这个关键词将（4，字段类型）单元格设为int。\n</thought>\n\n<code_block>\n# 设置单元格（4，字段类型）为int\nFillCell | 4 | 字段类型 | int\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“打开分群计算方式窗口”，逻辑是：\n#1.点击class包含FilterCohortSnapshot__text的元素",
        "output": "<thought>\n这是一个简单的场景，只需要使用FindElem关键字获取class包含FilterCohortSnapshot__text的元素，然后使用clickElem关键字点击该元素即可。\n</thought>\n\n<code_block>\n*** Keywords ***\n打开分群计算方式窗口\n    ${elem}  FindElem   | [class*=FilterCohortSnapshot__text]\n    ClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将字符串a和b拼接",
        "output": "<thought>\n为了将字符串a和b拼接，应该使用Robot Framework中内置的`Catenate`关键字。通过指定分隔符，可以将多个字符串连接在一起。在这个例子中，不需要使用分隔符，因此可以直接使用默认的空分隔符。\n</thought>\n\n<code_block>\n# 使用Catenate关键字将字符串a和b拼接\n${result}  Catenate  SEPARATOR=  ${a}  ${b}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击进入用户管理页面",
        "output": "<thought>\n要进入用户管理页面，通常需要通过导航菜单进行点击操作。假设“用户管理”在系统的导航菜单中，我们可以使用ClickMenu关键字来实现这一操作。\n</thought>\n\n<code_block>\n# 点击导航栏中“用户管理”\nClickMenu | 用户管理\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如何检查到页面中有「重新加载组件」的文本，让用例失败",
        "output": "<thought>\n我们可以使用`CheckHasText`来验证页面中是否包含特定文本「重新加载组件」。如果存在该文本，则用例失败。为了实现这种逻辑，可以使用Built-In库中的`Fail`关键字。\n</thought>\n\n<code_block>\n# 校验页面中包含文本「重新加载组件」，如果存在则用例失败\n${exist}  IsAllTextExisting  重新加载组件\nIF  ${exist}\n    Fail  检测到页面中有「重新加载组件」\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "访问 COZE_PRO",
        "output": "<thought>\n为了访问COZE_PRO，我们需要使用OpenUrl关键字并传入相应的URL。根据可用关键字，直接使用OpenUrl关键字打开指定的URL即可完成任务。\n</thought>\n\n<code_block>\n# 访问COZE_PRO\nOpenUrl | ${COZE_PRO}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在对方信息输入框中输入 ${party_name} 进行搜索",
        "output": "<thought>\n要在\"对方信息\"输入框中输入`${party_name}`进行搜索，我们需要使用`SetField`关键字，因为它能够向指定名称的输入框中填写值。我们需要设置`enter=True`来确保输入完成后触发搜索操作。\n</thought>\n\n<code_block>\n# 在‘对方信息’输入框中输入${party_name}进行搜索\nSetField | 对方信息 | ${party_name} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击选中 鹏程前方的 选择框，如果页面弹出请确认就点击，否则就跳过",
        "output": "<thought>\n首先，使用 `CheckBoxOn` 关键字勾选靠近“鹏程”的复选框。然后，使用 `IsAnyTextExisting` 判断页面是否出现“请确认”。如果存在，就点击“请确认”；如果不存在，则跳过。\n</thought>\n\n<code_block>\n# 勾选“鹏程”前方的复选框\nCheckBoxOn | 鹏程\n\n# 判断页面是否出现“请确认”\n${exist}  IsAnyTextExisting | 请确认\n\n# 如果存在“请确认”，则点击\nIF  $exist\n    Click  请确认\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向placeholder为请输入手机号的input中输入18612338557，把秒数a 转换为天数b，然后输入到登录时长中",
        "output": "<thought>\n要完成此任务，我们需要执行两个操作。首先，我们要在页面上找到具有特定占位符的输入字段，并向其输入电话号码。其次，我们需要将秒数转换为天数，然后将结果输入到另一个指定字段中。在Robot Framework中，通常可以使用`SetField`关键字来填写指定的字段。对于将秒数转换为天数，可以使用`Evaluate`关键字来执行Python代码完成此计算。\n</thought>\n\n<code_block>\n# 在placeholder为请输入手机号的input中输入18612338557\nSetField | [placeholder='请输入手机号'] | 18612338557\n\n# 将秒数a转换为天数b\n${b}=  Evaluate  ${a} / (60 * 60 * 24)\n\n# 输入转换结果到登录时长中\nSetField | 登录时长 | ${b}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量 ${x} 设置为套件级别的变量",
        "output": "<thought>\n要将变量设置为套件级别的变量，可以使用RF提供的“Set Suite Variable”关键字。这样，在整个套件中的任何地方都可以访问这个变量。\n</thought>\n\n<code_block>\n# 将变量 ${x} 设置为套件级别的变量\nSet Suite Variable  ${x}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 测试环境验证结果 设置为：通过，将 需要中断 设置为：否，将 工作流操作 设置为：仅创建，断言页面包含“主任务UI自动化测试区域”",
        "output": "<thought>\n要求批量设置多个字段值和验证页面包含特定文本。可以使用`BatchSetFields`关键字来设置字段。然后使用`CheckHasText`来验证页面包含指定文本。\n</thought>\n\n<code_block>\n# 批量设置字段值\nBatchSetFields  测试环境验证结果=通过  需要中断=否  工作流操作=仅创建\n\n# 断言页面包含指定文本\nCheckHasText  主任务UI自动化测试区域\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "对 class 包含 h-full relative的元素截图对比，命名为 “曲线图1”",
        "output": "<thought>\n为了完成这个任务，我需要找到class包含\"h-full relative\"的元素。可以使用FindElem来查找这个元素。然后，使用ImageDiff关键字对找到的元素进行截图并与基准图进行对比。这次截图应命名为“曲线图1”。\n</thought>\n\n<code_block>\n# 查找class包含h-full relative的元素\n${elem}  FindElem | [class*=\"h-full relative\"]\n\n# 截取 ${elem} 的图片，命名为：曲线图1，并和基准图对比\nImageDiff | ${elem} | pic_name=曲线图1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在右侧抽屉浮层中 设置 合同需求人 为 何寅\n\n提示：浮层就是弹窗",
        "output": "<thought>\n根据提示，浮层等同于弹窗，因此我们将使用SetField关键字，并将基准元素设置为POPUP。我们需要设置字段“合同需求人”的值为“何寅”。\n</thought>\n\n<code_block>\n# 设置浮层中的合同需求人为何寅\nSetField | 合同需求人 | 何寅 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击前往告警配置。点击购买加量包，点击续费，等待 创建订单中 消失",
        "output": "<thought>\n在这个场景中，首先我们需要依次点击几个特定的文本按钮：前往告警配置、购买加量包、续费。这些操作可以使用`Click`关键字完成。最后，我们需要等待一个特定文本“创建订单中”消失，可以使用`WaitTextDisappear`关键字。确保每个操作顺序执行。\n</thought>\n\n<code_block>\n# 点击前往告警配置\nClick | 前往告警配置\n\n# 点击购买加量包\nClick | 购买加量包\n\n# 点击续费\nClick | 续费\n\n# 等待 创建订单中 消失\nWaitTextDisappear | 创建订单中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "变量${content}中包含bytedance.net或byted.org就报错",
        "output": "<thought>\n解决问题思路：需要判断变量`${content}`是否包含字符串`bytedance.net`或`byted.org`。可使用Robot Framework的`IF`条件来实现对文本的判断。\n</thought>\n\n<code_block>\n# 检查content是否包含bytedance.net或byted.org\n${contains_bytedance}  Evaluate  'bytedance.net' in $content or 'byted.org' in $content\n\n# 如果包含就报错\nIF  ${contains_bytedance}\n    Fail  内容包含不允许的字符串\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置重复通知间隔为1000，设置 重复字段判断条件 为 id，设置 生效时间 为 周一｜周二，设置 是否配置关联主机信息 为 开，设置 请选择关联主机的IP字段 为 id，设置 告警推送bmq集群 为 bmq_boe_test2，设置 告警推送bmq集群topic 为 byteseer_test",
        "output": "\n<thought>\n 首先，我们需要使用`SetField`关键字来设置一些字段的值，包括“重复通知间隔”、“重复字段判断条件”、“生效时间”、“是否配置关联主机信息”、“请选择关联主机的IP字段”、“告警推送bmq集群”、“告警推送bmq集群topic”。这些字段值都可以直接通过`SetField`指定。\n </thought>\n \n <code_block>\n # 设置重复通知间隔为1000\n SetField | 重复通知间隔 | 1000\n \n # 设置重复字段判断条件为id\n SetField | 重复字段判断条件 | id\n \n # 设置生效时间为周一｜周二\n SetField | 生效时间 | 周一｜周二\n \n # 设置是否配置关联主机信息为开\n SetField | 是否配置关联主机信息 | 开\n \n # 设置请选择关联主机的IP字段为id\n SetField | 请选择关联主机的IP字段 | id\n \n # 设置告警推送bmq集群为bmq_boe_test2\n SetField | 告警推送bmq集群 | bmq_boe_test2\n \n # 设置告警推送bmq集群topic为byteseer_test\n SetField | 告警推送bmq集群topic | byteseer_test\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "编写一个名为“随机mac地址”的关键字，生产一个符合mac格式要求的随机mac地址并返回",
        "output": "<thought>\n要生成随机MAC地址，需要生成12个字符的字符串，取值范围为0-9数字和a-f字母。然后通过插入冒号形成MAC地址格式。\n</thought>\n\n<code_block>\n随机mac地址\n    # 生成12位16进制数\n    ${mac}  GenerateRandom  | 12 | [NUMBERS]abcdef\n\n    # 格式化为MAC地址\n    ${mac}  Set Variable  ${mac[0:2]}:${mac[2:4]}:${mac[4:6]}:${mac[6:8]}:${mac[8:10]}:${mac[10:12]}\n\n    # 返回MAC地址\n    [Return]  ${mac}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面出现点击查看，则点击，判断页面存在已关联域名",
        "output": "<thought>\n首先，我们需要检测页面上是否存在文本\"点击查看\"。如果它存在，我们将点击该文本。之后，我们需要检查页面上是否存在\"已关联域名\"文本。为实现第一步，我们可以使用`IsAnyTextExisting`关键字来判断\"点击查看\"是否存在，然后根据结果使用`Click`关键字进行点击操作。对于第二步，使用`CheckHasText`关键字即可判断\"已关联域名\"是否在页面上。\n</thought>\n\n<code_block>\n# 检查页面上是否存在\"点击查看\"\n${exist}  IsAnyTextExisting | 点击查看\n\n# 如果\"点击查看\"存在，点击该文本\nIF  $exist\n    Click  点击查看\n\n    # 校验页面上存在\"已关联域名\"\n    CheckHasText  已关联域名\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取 请输入签字 有几个，如果大于 2 个就点击下一步",
        "output": "<thought>\n首先，我们需要使用`GetElemCount`关键字获取\"请输入签字\"的文本元素数量。然后，我们可以使用RF的内置条件结构`IF/ELSE`来判断获取的数量是否大于2。如果大于2，则点击\"下一步\"按钮，使用`Click`关键字。\n</thought>\n\n<code_block>\n# 获取“请输入签字”文本元素的数量\n${cnt}  GetElemCount | :contains(请输入签字)\n\n# 如果数量大于2，点击“下一步”\nIF  ${cnt} > 2\n    Click  下一步\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “账号密码登录” 的关键字，接受参数 url, phone, passwd, 默认值分别为变量 MAIN_PAGE, SUPER_ADMIN_USER，SUPER_ADMIN_PASSWORD，操作逻辑是:\n# 1. 打开浏览器访问 url, 点击密码登录\n# 2. 输入手机号、密码，点击登录，最后等待‘密码登录’ 文案消失",
        "output": "<thought>\n我们需要编写一个名为“账号密码登录”的关键字，接受三个参数。步骤如下：\n1. 使用 `OpenBrowser` 关键字打开浏览器，并访问给定的 `url`。\n2. 使用 `Click` 关键字点击“密码登录”按钮。\n3. 使用 `SetField` 关键字输入手机号和密码。\n4. 使用 `Click` 关键字点击“登录”按钮。\n5. 使用 `WaitTextDisappear` 关键字等待“密码登录”文案消失。\n\n我们将使用默认值 `MAIN_PAGE`, `SUPER_ADMIN_USER` 和 `SUPER_ADMIN_PASSWORD` 为参数 url, phone 和 passwd。\n</thought>\n\n<code_block>\n*** Keywords ***\n账号密码登录\n    [Arguments]  ${url}=${MAIN_PAGE}  ${phone}=${SUPER_ADMIN_USER}  ${passwd}=${SUPER_ADMIN_PASSWORD}\n    # 打开浏览器并访问url\n    OpenBrowser  ${url}\n    \n    # 点击密码登录\n    Click  密码登录\n    \n    # 输入手机号和密码\n    SetField  手机号  ${phone}\n    SetField  密码  ${passwd}\n    \n    # 点击登录\n    Click  登录\n    \n    # 等待“密码登录”文案消失\n    WaitTextDisappear  密码登录\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待界面7秒，点击“提交”按钮，点击弹窗中“确定”按钮，校验 操作下方存在删除小图标，然后点击 操作下方的删除小图标，校验页面是存在向导式",
        "output": "<thought>\n首先，我们需要在界面上等待7秒，然后点击“提交”按钮。接下来，我们需要在弹窗中点击“确定”按钮。此后，我们要校验“操作”文本下方存在“删除”这个icon。找到并点击它。最终，我们要校验页面上是否存在“向导式”文本。\n</thought>\n\n<code_block>\n# 等待界面7秒\nSleep | 7s\n\n# 点击“提交”按钮\nClick | 提交\n\n# 点击弹窗中“确定”按钮\nClick | 确定 | base=POPUP\n\n# 校验“操作”下方存在“删除”icon\nCheckHasIconToTheDirectionOf | 操作 | bottom | delete\n\n# 点击“操作”下方的“删除”icon\nClickIconToTheDirectionOf | 操作 | bottom | delete\n\n# 校验页面存在“向导式”\nCheckHasText | 向导式\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “请输入订单号/账单号” 并 输入文本“Order2894000005866170242”，校验表格有 4 条数据，并且表格 “订单号/账单号”列所有行都为 Order2894000005866170242",
        "output": "<thought>\n该任务需要先点击一个输入字段，然后输入一个文本。在这之后，我们需要校验表格的行数，以及表格中特定列的所有值。可以使用以下步骤和关键字：\n1. 使用SetField关键字，点击并输入指定文本。\n2. 使用CheckRowCount关键字，校验表格的行数。\n3. 使用GetColValues关键字，获取特定列的所有值。\n4. 使用Should Be Equal As Strings关键字，校验每一行的值。\n\n我们将逐步完成这些操作。\n</thought>\n\n<code_block>\n# 点击“请输入订单号/账单号”并输入文本“Order2894000005866170242”\nSetField | 请输入订单号/账单号 | Order2894000005866170242\n\n# 校验表格有4条数据\nCheckRowCount | 4\n\n# 获取“订单号/账单号”列所有行值\n@{order_values}  GetColValues | 订单号/账单号\n\n# 校验“订单号/账单号”列所有行值都为 Order2894000005866170242\nFOR  ${order_value}  IN  @{order_values}\n    Should Be Equal As Strings  ${order_value}  Order2894000005866170242\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开https://life.douyin.com/h5/seckill/list，点击创建秒杀，找到placeholder是商品名称的input，点击然后输入234",
        "output": "<thought>\n在这个场景中，我需要完成以下步骤：\n1. 打开指定的URL。\n2. 点击页面上的“创建秒杀”按钮。\n3. 找到placeholder为“商品名称”的输入框。\n4. 点击该输入框，然后输入“234”。\n\n首先使用`OpenUrl`关键字打开页面，然后使用`Click`关键字点击“创建秒杀”按钮。接着，使用`FindElem`关键字找到placeholder为“商品名称”的input栏，最后使用`FillArea`关键字完成输入操作。\n</thought>\n\n<code_block>\n# 打开指定的URL\nOpenUrl | https://life.douyin.com/h5/seckill/list\n\n# 点击“创建秒杀”按钮\nClick | 创建秒杀\n\n# 找到placeholder为“商品名称”的input并输入234\n${input_elem}  FindElem | input[placeholder='商品名称']\nFillArea | ${input_elem} | 234\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 span 文本匹配 ‘自定义’ 或 ‘自定义时间’ 或 ‘自定义日期’ 的元素",
        "output": "<thought>\n需要使用FindByText关键字查找文本为‘自定义’、‘自定义时间’、‘自定义日期’之一的span元素。\n</thought>\n\n<code_block>\n# 查找文本为‘自定义’或‘自定义时间’或‘自定义日期’的span元素\n${elem}  FindByText | 自定义 | 自定义时间 | 自定义日期 | tag=span \n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击一个text等于23时的div,精确等于",
        "output": "<thought>\n需要点击text等于23时的div，可以使用ClickElem关键字，通过jquery选择器来定位该元素。因为要求text精确等于23，可以使用:textMatch伪选择器结合:eq选择器来选择第一个匹配的元素。\n</thought>\n\n<code_block>\n# 点击text精确等于23的div\nClickElem | div:textMatch(23):eq(0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "拼接New Annotation Task 和${CURRENT_DATE}，更新到Suite variable ${TASK_NAME} 中",
        "output": "<thought>\n首先，我们需要将字符串 \"New Annotation Task\" 和变量 ${CURRENT_DATE} 拼接在一起。可以使用机器人框架的内置关键字 Catenate 来实现这一点。然后将结果更新到 Suite variable ${TASK_NAME} 中。\n</thought>\n\n<code_block>\n# 使用Catenate关键字进行字符串拼接\n${TASK_NAME}  Catenate  SEPARATOR=  New Annotation Task  ${CURRENT_DATE}\n\n# 将拼接结果更新到Suite variable ${TASK_NAME}\nSet Suite Variable  ${TASK_NAME}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为‘设置自定义错误页面’的关键字，接受参数：状态，异常状态码，重定向方式，目标地址 参数，逻辑如下：\n# 1. 设置 自定义错误页面 的状态为：状态\n# 2. 如果 状态 为：开启，则：\n# 2.1  点击 id 为 CustomErrorPage 元素中 新增规则 按钮\n# 2.2 调用 设置自定义错误页面 关键字，设置参数：异常状态码，重定向方式，目标地址\n# 2.3 点击弹窗中的确定",
        "output": "<thought>\n1. 使用 `SetField` 设置 `自定义错误页面` 的状态为传入的 `状态`。\n2. 使用 IF 语句判断 `状态` 是否为开启。\n3. 如果 `状态` 为开启，则点击 id 为 `CustomErrorPage` 元素中的 `新增规则` 按钮。\n4. 调用 `设置自定义错误页面` 关键字，传入 `异常状态码`、`重定向方式` 和 `目标地址` 参数。\n5. 点击弹窗中的 `确定` 按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置自定义错误页面\n    [Arguments]  ${状态}  ${异常状态码}  ${重定向方式}  ${目标地址}\n    # 设置自定义错误页面的状态\n    SetField  自定义错误页面  ${状态}\n    \n    # 判断状态是否为开启\n    IF  \"${状态}\" == \"开启\"\n        # 点击新增规则按钮\n        ClickElem  [id=CustomErrorPage]:contains(新增规则)\n        \n        # 调用关键字设置异常状态码，重定向方式和目标地址\n        设置自定义错误页面  ${异常状态码}  ${重定向方式}  ${目标地址}\n        \n        # 点击弹窗中的确定按钮\n        Click  确定  base=POPUP\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "find canvas element to the bottom of ${elem}",
        "output": "<thought>\n在这个场景中，我们需要找到元素 `${elem}` 下方的 canvas 元素。可以使用 `FindElemToTheDirectionOf` 关键字，该关键字允许在指定的基准元素某个方向上查找特定选择器的元素。这里，我们将使用这个关键字查找 `${elem}` 下方的 (bottom) `canvas` 元素。\n</thought>\n\n<code_block>\n# 查找元素 ${elem} 下方的 canvas\n${canvas_elem}  FindElemToTheDirectionOf | ${elem} | bottom | canvas\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置接入名称为：【创建自动化测试专用】，点击查询，等待页面加载完成",
        "output": "\n    \n<thought>\n 首先需要使用`SetField`关键字设置接入名称，然后使用`Click`关键字点击查询按钮，最后使用`WaitLoading`等待页面加载完成。\n </thought>\n \n <code_block>\n # 设置接入名称为【创建自动化测试专用】\n SetField | 接入名称 | 创建自动化测试专用\n \n # 点击查询按钮\n Click | 查询\n \n # 等待页面加载完成\n WaitLoading\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查‘在线下载’按钮是否置灰，如果没有置灰，就点击添加",
        "output": "<thought>\n首先，需要检查页面上是否有名为“在线下载”的按钮，并验证该按钮是否已禁用。可以使用 `IsElementDisabled` 关键字来判断按钮是否处于禁用状态。如果按钮没有禁用（即处于可用状态），那么接下来应该执行点击“添加”这一操作。\n</thought>\n\n<code_block>\n# 检查‘在线下载’按钮是否置灰禁用\n\n${status}  IsElementDisabled | button:contains(在线下载)\n\n# 如果'在线下载'没有被禁用，就点击'添加'\nIF  not ${status}\n    Click  添加\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到UUID所在行，并打印出来",
        "output": "<thought>\n首先，需要获取表格的全部行数，然后逐行遍历每一行的值，查找是否有包含\"UUID\"的行。找到后打印该行的值。\n</thought>\n\n<code_block>\n# 获取表的总行数\n${row_count}  GetRowCount\n\n# 遍历每一行，查找UUID\nFOR  ${index}  IN RANGE  1  ${row_count}+1\n    # 获取当前行的值\n    @{row_values}  GetRowValues | ${index}\n\n    # 检查行中是否包含\"UUID\"\n    ${contains_uuid}  Evaluate  'UUID' in ${row_values}\n\n    IF  ${contains_uuid}\n        # 如果包含UUID，打印行的值\n        Log  ${row_values}\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击返回，点击在线支付，点击 第一行的置顶报表，检查页面包含：预计补款，执行完毕关闭浏览器",
        "output": "<thought>\n在这个场景中，我们需要按照顺序执行一系列点击操作然后进行页面校验。首先，点击返回和在线支付按钮。接下来，需要点击表格第一行中的置顶报表。最后，校验页面是否包含“预计补款”这个文本，确保操作成功后关闭浏览器。为此，我们将依次使用`Click`、`ClickTextOfRow`、`CheckHasText`和`CloseBrowser`这些关键字。\n</thought>\n\n<code_block>\n# 点击返回按钮\nClick | 返回\n\n# 点击在线支付按钮\nClick | 在线支付\n\n# 点击第一行中的置顶报表\nClickTextOfRow | 1 | 置顶报表\n\n# 检查页面是否包含预计补款\nCheckHasText | 预计补款\n\n# 执行完毕后关闭浏览器\nCloseBrowser\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发往 api/v1/org/demo_apps 接口的最后 3 个 get 请求，从响应json中提取 app_name 字段，并校验其中包含 ‘教育Demo’",
        "output": "<thought>\n在这个场景中，要实现两个主要任务：首先是使用Search Requests关键字找到符合条件的HTTP请求，其次是从请求响应中提取所需字段，并进行校验。为了完成这个任务，我将依次使用以下关键字：\n\n1. 使用`Search Requests`关键字获取发往`api/v1/org/demo_apps`接口的最后3个GET请求。\n2. 使用`GetValuesFromJson`关键字从响应JSON中提取`app_name`字段。\n3. 使用内置校验关键字`Should Contain`来校验提取出的字段包含`教育Demo`。\n</thought>\n\n<code_block>\n# 搜索发往 api/v1/org/demo_apps 接口的最后3个 GET 请求\n${resp_json}  Search Requests  api/v1/org/demo_apps  GET  last3\n\n# 从获取的响应中提取 app_name 字段的值\n${app_name}  GetValuesFromJson  ${resp_json}  app_name\n\n# 校验提取的 app_name 字段是否包含 \"教育Demo\"\nShould Contain  ${app_name}  教育Demo\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${name}右侧三个点的小图标",
        "output": "<thought>\n要点击${name}右侧三个点的icon，分析如下：\n1. 这是一个基于相对位置的点击操作，需要先定位${name}元素，然后在其右侧找到目标icon\n2. 三个点的icon通常表示\"更多\"操作，常见的icon名称可能是\"more\"或\"ellipsis\"\n3. 根据关键字文档，最适合的是ClickIconToTheDirectionOf关键字，它可以基于基准元素和方向定位icon\n4. 方向参数应为\"right\"，基准元素是${name}，icon名称可能是\"more\"\n5. 不需要指定idx参数，因为默认就是点击第一个匹配的icon\n</thought>\n\n<code_block>\n# 点击${name}右侧的三个点icon\nClickIconToTheDirectionOf    ${name}    right    more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 设置请输入关键字为：【自动化测试专用】，检测页面至少包含2处【自动化测试专用】。",
        "output": "<thought>\n首先，使用SetField关键字设置“请输入关键字”字段为“自动化测试专用”。然后，使用GetElemCount关键字获取页面上包含“自动化测试专用”的元素数量，并检查是否至少有2个。\n</thought>\n\n<code_block>\n# 设置请输入关键字为【自动化测试专用】\nSetField | 请输入关键字 | 自动化测试专用\n\n# 获取页面上包含“自动化测试专用”的元素个数\n${count}  GetElemCount | :contains('自动化测试专用')\n\n# 检测页面至少包含2处【自动化测试专用】\nIF  ${count} >= 2\n Log | 页面包含至少2处【自动化测试专用】\nELSE\n Log | 页面包含少于2处【自动化测试专用】\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选中页面左侧导航栏的：任务管理，点击“任务组视图”右侧的搜索图标，判断${url}中含有https://www.volcengine.com/docs/6758/1336079\n\n提示：导航栏一般就是菜单栏",
        "output": "<thought>\n根据问题描述，首先需要从页面的左侧导航栏中选择“任务管理”，使用ClickMenu关键字可以实现。接着，点击“任务组视图”右侧的搜索icon，可以使用ClickIconToTheDirectionOf关键字完成。最后，需要判断${url}中是否包含https://www.volcengine.com/docs/6758/1336079，这可以通过IsURLContains关键字实现。\n</thought>\n\n<code_block>\n# 点击任务管理菜单\nClickMenu 任务管理\n\n# 点击“任务组视图”右侧的搜索icon\nClickIconToTheDirectionOf | 任务组视图 | right | search\n\n# 判断url中是否包含指定的文本\n${status}  IsURLContains | https://www.volcengine.com/docs/6758/1336079\nShould Be True  ${status}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘导入’ 下方的规则组",
        "output": "<thought>\n要实现点击“导入”下方的“规则组”这一操作，可以使用`ClickTextToTheDirectionOf`关键字。该关键字允许我们指定一个基准文本，比如“导入”，以及相对于这个基准文本的方向，比如“下方”（bottom），然后点击在这个方向上的目标文本“规则组”。\n</thought>\n\n<code_block>\n# 点击导入下方的规则组\nClickTextToTheDirectionOf | 导入 | bottom | 规则组\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将class为oc-card-content的页面区域保存为基准图，命名为整体数据（汇总）-数据概览/对比页面校验，相似度为1",
        "output": "<thought>\n首先，我们需要使用ImageDiff关键字，为元素截图并与基准图进行对比。我们使用jquery选择器选中class为oc-card-content的元素。\n</thought>\n\n<code_block>\n# 将class为oc-card-content的页面区域保存为基准图\nImageDiff | [class=oc-card-content] | pic_name=整体数据（汇总）-数据概览/对比页面校验 | sim=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "确认警告弹窗",
        "output": "<thought>\n要确认警告弹窗，我们应使用接受/确认警告的关键字，即 `AcceptAlert`。如果需要检测弹窗中的某些文本，则还可以使用 `CheckAlertHas`。在这个场景中，我们不需要进行文本验证，所以只需使用 `AcceptAlert` 即可。\n</thought>\n\n<code_block>\n# 确认警告弹窗\nAcceptAlert\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将libra_autotest_config_khyocnqtco粘贴到class包含arco-input-size-small的元素中",
        "output": "<thought>\n在这个任务中，我们需要将特定的文本粘贴到一个特定的HTML元素中。首先，我们需要定位到这个元素，我们可以通过FindElem关键字来完成这个任务，由于题目已经给出了元素的class，我们可以直接使用它作为选择器。然后我们使用Paste关键字将文本粘贴到这个元素中。\n</thought>\n\n<code_block>\n# 定位到指定的元素\n${elem}  FindElem | [class*=arco-input-size-small]\n\n# 将文本粘贴到该元素中\nPaste | ${elem} | libra_autotest_config_khyocnqtco\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一个加号图标",
        "output": "<thought>\n根据任务需求，需要点击第一个加号图标。首先需要使用`ClickIcon`关键字来实现此操作，指定图标名称为'plus'，并且索引为0 (表示第一个)。\n</thought>\n\n<code_block>\n# 点击第一个加号图标\nClickIcon | plus | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击新建，然后在 ‘搜索想要接入的数据源’ 中输入 ${数据源类型}，然后点击 section class包含type-name 且文本包含 ${数据源类型} 的元素",
        "output": "<thought>\n首先需要点击“新建”按钮。然后在页面中寻找“搜索想要接入的数据源”的字段并输入`${数据源类型}`。最后点击符合条件的元素，根据题意，需要找到`section`标签，其class包含`type-name`且文本包含`${数据源类型}`的元素。\n</thought>\n\n<code_block>\n# 点击“新建”按钮\nClick | 新建\n\n# 在“搜索想要接入的数据源”输入框中输入数据源类型\nSetField | 搜索想要接入的数据源 | ${数据源类型}\n\n# 点击符合条件的section元素\nClickElem | section[class*=type-name]:contains(${数据源类型})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在“数据最新状态”的下拉列表中选择“质检-打回”",
        "output": "<thought>\n1. 首先需要明确这是一个下拉列表选择操作，可以使用`SelectOption`或`SelectOptionForField`关键字\n2. 题目中提到了\"数据最新状态\"的下拉列表，说明这是一个有明确字段名称的下拉框\n3. 由于有明确的字段名称\"数据最新状态\"，更适合使用`SelectOptionForField`关键字\n4. 需要选择的值是\"质检-打回\"，这是一个具体的选项文本\n5. 不需要使用索引选择(OPTIONS_i)，因为已经知道具体的选项文本\n</thought>\n\n<code_block>\n# 在\"数据最新状态\"下拉列表中选择\"质检-打回\"\nSelectOptionForField | 数据最新状态 | 质检-打回\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左侧菜单 实物资产",
        "output": "<thought>\n我们可以使用ClickMenu关键字，只需要将\"实物资产\"作为参数输入。\n</thought>\n\n<code_block>\n# 单击左侧菜单 实物资产\nClickMenu | 实物资产\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 趋势图，设置 可选择指标为 通用指标，校验 弹窗中 存在 \"5 Item\"，点击 弹窗中 OK",
        "output": "<thought>\n为了实现该场景，首先需要使用Click关键字点击“趋势图”，然后使用SetField关键字设置“可选择指标”为“通用指标”。接下来，利用CheckHasText关键字校验弹窗中是否存在“5 Item”。最后，使用Click关键字点击弹窗中的“OK”按钮。\n</thought>\n\n<code_block>\n# 点击趋势图\nClick | 趋势图\n\n# 设置可选择指标为通用指标\nSetField | 可选择指标 | 通用指标\n\n# 校验弹窗中存在 \"5 Item\"\nCheckHasText | 5 Item | base=POPUP\n\n# 点击弹窗中的OK\nClick | OK | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面存在至少有1个 mr_cost_center的文本",
        "output": "<thought>\n为了解决此问题，需要获取页面上文本“mr_cost_center”出现的次数，并确保至少有3个。可以使用关键字GetElemCount来获取该文本的数量，并通过Should Be True来验证数量。\n</thought>\n\n<code_block>\n# 获取mr_cost_center元素的数量\n${cnt}  GetElemCount | :contains(\"mr_cost_center\")\n\n# 校验数量至少为3\nShould Be True  ${cnt} >= 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "上传文件：https://tosv.byted.org/obj/giraffe-longtime-tos/2025_02_11_14_50_13_XlmP_海鸥飞.png  ，点击导出数据左侧的输入框",
        "output": "<thought>\n首先，根据问题描述，我们需要执行两个操作：上传文件和点击元素。第一个操作是上传指定的文件URL，这可以通过`UploadFile`关键字完成。接着，需要点击文本“导出数据”左侧的输入框或文本区域。要实现这个操作，可以使用`ClickElemToTheDirectionOf`关键字，指定方向为`left`，选择器为`input,textarea`。\n</thought>\n\n<code_block>\n# 上传文件\nUploadFile | https://tosv.byted.org/obj/giraffe-longtime-tos/2025_02_11_14_50_13_XlmP_海鸥飞.png\n\n# 点击导出数据左侧的 input 或 textarea\nClickElemToTheDirectionOf | 导出数据 | left | input,textarea\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个设置属性筛选条件关键字，接受 ${line_no}, @{config} 参数，分别表示组名和筛选条件配置，关键字会向组名${line_no}关联的字段中输入给定的一个或多个事件参数",
        "output": "<thought>\n为了解决这个问题，我将创建一个名为\"设置属性筛选条件\"的自定义关键字。这个关键字最重要的是它接受两个参数：${line_no} 和 @{config}。 \n- ${line_no}：这是我们要设置的字段组名。\n- @{config}：这是我们将要输入到上述字段组的一系列事件参数。\n关键字的实现思路是使用 SetField 关键字，因为我们需要将 @{config} 中的事件参数输入到某个字段中。这个字段是根据组名 ${line_no} 确定的。\n</thought>\n\n<code_block>\n设置属性筛选条件\n    [Arguments]  ${line_no}  @{config}\n    # 使用 SetField 一次性向给定字段值输入一个或多个值\n    SetField  |  ${line_no}  |  @{config}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取数据详情表格中 音浪 这一列的所有值，剔除表头数据，计算出一共有多少为0的值，并且计算出为0值的百分比，校验这个百分比是否小于30%",
        "output": "<thought>\n首先，需要获取数据详情表格中“音浪”这一列的所有值，并且剔除表头数据。然后，计算出有多少值为0的数量，并计算出这些值为0的百分比。最后，校验这个百分比是否小于30%。为实现上述任务，可以使用以下关键字：\n1. `GetColValues` 获取列的所有值。\n2. `Evaluate` 计算出为0的数量及其百分比。\n3. `Should Be True` 校验百分比是否小于30%。\n\n需要注意的是，获取列值时需要剔除表头数据。\n</thought>\n\n<code_block>\n# 获取数据详情表格中 音浪 这一列的所有值\n@{yinlang_values}  GetColValues | 音浪 | tbl=数据详情\n\n# 剔除表头数据\n@{yinlang_values}  Evaluate | [val for val in ${yinlang_values}[1:]]\n\n# 计算出为0的值的数量\n${zero_count}  Evaluate | len([val for val in ${yinlang_values} if val == '0'])\n\n# 计算出为0值的百分比\n${total_count}  Evaluate | len(${yinlang_values})\n${zero_percentage}  Evaluate | (${zero_count} / ${total_count}) * 100\n\n# 校验这个百分比是否小于30%\nShould Be True  ${zero_percentage} < 30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置第2个Age为“18”并回车",
        "output": "<thought>\n要设置页面上第二个“Age”字段为“18”并发送回车，可以使用`SetField`关键字，指定`idx=1`来表示第二个字段，并将`enter`参数设置为`True`。\n</thought>\n\n<code_block>\n# 设置第2个Age为“18”并回车\nSetField | Age | 18 | idx=1 | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验警告中包含：customClickAction",
        "output": "<thought>\n在这种情况下，我们需要校验警告弹窗中包含指定文本`customClickAction`。可以使用已有的关键字CheckAlertHas来完成这个任务。\n</thought>\n\n<code_block>\n# 校验警告中包含 customClickAction\nCheckAlertHas  customClickAction\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击取消工单，取消原因输入 测试软件领用取消工单，点击 再想想 右边的 ‘不用了’",
        "output": "<thought>\n首先，我们可以使用 Click 关键字点击 “取消工单”。接下来，用 SetField 关键字向取消原因输入框输入 “测试软件领用取消工单”。 最后，“再想想”右侧的“不用了”指的是“再想想”的右侧有文本（“不用了”），这里，我们可以使用ClickTextToTheDirectionOf 关键字来点击对应的元素。\n</thought>\n\n<code_block>\n# 点击取消工单\nClick | 取消工单\n\n# 输入取消原因\nSetField | 取消原因 | 测试软件领用取消工单\n\n# 点击再想想右边的不用了\nClickTextToTheDirectionOf | 再想想 | right | 不用了\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入 admin",
        "output": "<thought>\n分析问题后，输入“admin”可以使用`SendText`关键字，该关键字允许在光标激活位置输入文本。由于没有指定是否输入回车，所以`enter`参数保持默认值`False`。\n</thought>\n\n<code_block>\n# 在光标位置输入admin\nSendText | admin\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "售卖信息里顾客实际需支付设置为281 库存数量设置为不先库存 投放渠道设置为仅直播间 活动投放限制设置为测试商品 商品售卖日期设置为不限时间",
        "output": "<thought>\n在这个任务中，我们需要设置多个字段的值，因此可以利用BatchSetFields关键字来批量设置字段。具体来说，我们需要完成以下操作：\n1. 设置\"售卖信息里顾客实际需支付\"为281。\n2. 设置\"库存数量\"为\"不先库存\"。\n3. 设置\"投放渠道\"为\"仅直播间\"。\n4. 设置\"活动投放限制\"为\"测试商品\"。\n5. 设置\"商品售卖日期\"为\"不限时间\"。\n\n由于这些字段它们都在\"售卖信息\"里，因此可以使用BatchSetFields来简化字段批量填充。\n</thought>\n\n<code_block>\n# 批量设置售卖信息里的相关字段\nBatchSetFields  顾客实际需支付=281  库存数量=不先库存  投放渠道=仅直播间  活动投放限制=测试商品  商品售卖日期=不限时间  near=售卖信息\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“【自动化测试创建】请勿操作”所在表格行的更多小图标，点击删除，点击确定，等待1s后校验表格中不包含“【自动化测试创建】请勿操作”",
        "output": "\n    \n<thought>\n 首先，我们需要找到“【自动化测试创建】请勿操作”所在的表格行，并点击该行的更多icon。接着，依次点击删除和确定按钮。最后，等待1秒后，验证表格中不包含“【自动化测试创建】请勿操作”。\n </thought>\n \n <code_block>\n # 点击“【自动化测试创建】请勿操作”所在表格行的更多icon\n ClickIconOfRow | 【自动化测试创建】请勿操作 | more\n \n # 点击删除\n Click | 删除\n \n # 点击确定\n Click | 确定\n \n # 等待1秒\n Sleep | 1s\n \n # 校验表格中不包含“【自动化测试创建】请勿操作”\n CheckTableNotHas | 【自动化测试创建】请勿操作\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 ‘咨询及其它专业服务’ 所在区域向下滚动 90%",
        "output": "<thought>\n1. 首先需要定位到包含\"咨询及其它专业服务\"文本的元素区域\n2. 使用ScrollUpDown关键字来实现该区域的垂直滚动\n3. 滚动百分比设置为90%\n4. 由于是向下滚动，所以使用ScrollUpDown关键字并指定90%的滚动位置\n</thought>\n\n<code_block>\n# 将\"咨询及其它专业服务\"所在区域向下滚动90%\nScrollUpDown    咨询及其它专业服务    90%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击刷新小图标，点击下载小图标，点击确认导出，点击自动续费，校验页面的URL中有 fee",
        "output": "<thought>\n首先，需要点击刷新icon和下载icon，这可以通过使用`ClickIcon`关键字来完成。接下来，点击确认导出和自动续费，这可以通过使用`Click`关键字实现。最后，校验页面的URL中包含\"fee\"，可以使用`WaitURLContainsAny`关键字。\n</thought>\n\n<code_block>\n# 点击刷新icon\nClickIcon | refresh\n\n# 点击下载icon\nClickIcon | download\n\n# 点击确认导出\nClick | 确认导出\n\n# 点击自动续费\nClick | 自动续费\n\n# 校验URL中包含\"fee\"\nWaitURLContainsAny | fee\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击智能调优button",
        "output": "<thought>\n在这个场景中，我们需要点击一个名为“智能调优”的button。根据提供的关键字，我们可以使用`ClickElem`来通过jQuery选择器找到这个button。假设button是通过包含文字“智能调优”来识别的，我们可以使用`:contains`选择器来定位。\n</thought>\n\n<code_block>\n# 点击智能调优button\nClickElem | button:contains(智能调优)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上角测试POI-香菜1后的下拉箭头",
        "output": "<thought>\n首先，需要找到“测试POI-香菜1”这个元素的位置。然后点击该元素后面的“下拉箭头”图标。最合理的方案是使用ClickIconToTheDirectionOf关键字，因为字面上有一个“下拉箭头”图标，且位于“测试POI-香菜1”的右边。\n</thought>\n\n<code_block>\n# 点击“测试POI-香菜1”右侧的下拉箭头\nClickIconToTheDirectionOf | 测试POI-香菜1 | right | arrow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "剔除 ${val} 中的所有非数字字符，将剩下的字符转换成 int，校验它 > 0",
        "output": "<thought>\n为了实现从`${val}`中剔除所有非数字字符，并将剩下的数字字符串转换成整数后进行校验，我们可以使用`Evaluate`执行Python代码。首先，利用`filter`函数结合`str.isdigit`方法来提取`${val}`中的数字字符，然后使用`int`函数将得到的字符串转换成整数。最后，用`Should Be True`关键字来校验转换后的整数是否大于0。\n</thought>\n\n<code_block>\n# 剔除`${val}`中的所有非数字字符并转换为整数\n${cleaned_val}  Evaluate  ''.join(filter(str.isdigit, '''${val}'''))\n\n# 将结果转换为整数\n${int_val}  Evaluate  int('''${cleaned_val}''')\n\n# 校验结果是否大于0\nShould Be True  ${int_val} > 0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取5天前的毫秒级时间戳, 并设置到变量 ${time}",
        "output": "<thought>\n解决问题思路，因为需要获取5天前的毫秒级时间戳，并设置到变量 ${time}，所以我会使用 Evaluate 关键字执行 Python 代码来获取。\n这里我会使用 Python 的 datetime 和 time 模块来完成这个任务。首先，我会获取当前的时间，然后用 timedelta 函数减去5天，然后调用timestamp函数把时间转换成秒，最后再乘以1000转换成毫秒。\n</thought>\n\n<code_block>\n# 使用Evaluate关键字执行Python代码来获取5天前的毫秒级时间戳，并设置到变量 ${time}\n${time}  Evaluate  int((datetime.datetime.now() - datetime.timedelta(days=5)).timestamp()*1000)  modules=datetime, time\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中的点赞按钮",
        "output": "<thought>\n在这个场景中，我们需要点击弹窗中的一个按钮，按钮的文本是\"点赞\"。可以使用Click关键字，并将base参数设置为POPUP，以便在弹窗中定位该按钮。\n</thought>\n\n<code_block>\n# 点击弹窗中的点赞按钮\nClick | 点赞 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果页面存在 ‘刷新页面重试’ 就点击它，并执行关键字：测试用例备用",
        "output": "<thought>\n首先，使用IsAnyTextExisting关键字判断页面是否存在文本“刷新页面重试”。如果存在，则使用Click关键字点击该文本。然后执行自定义关键字“测试用例备用”。\n</thought>\n\n<code_block>\n# 判断页面是否存在“刷新页面重试”\n${exist}  IsAnyTextExisting | 刷新页面重试\n\n# 如果存在，点击它，并执行关键字：测试用例备用\nIF  ${exist}\n    Click  刷新页面重试\n    测试用例备用\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为OK或下一步的span",
        "output": "<thought>\n解决问题思路: 使用FindByText关键字来查找具有给定文本的元素。\n</thought>\n\n<code_block>\n# 查找文本为OK或下一步的span\n${elem}  FindByText | OK | 下一步 | tag=span\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击「用户运营商分布」下方的「流量」",
        "output": "<thought>\n按照题目要求，应该点击的按钮或链接是在「用户运营商分布」的下方，且内容为「流量」。这可以使用关键字ClickTextToTheDirectionOf实现，base设为「用户运营商分布」，direction设为bottom，text设为「流量」。\n</thought>\n\n<code_block>\n# 点击「用户运营商分布」下方的「流量」\nClickTextToTheDirectionOf | 用户运营商分布 | bottom | 流量\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “上传合同文件”，点击 “添加补充协议”，点击 “选择文件上传” ，随后上传 ${docx_1} 文件，并校验页面包含： ${docx_name_1} 文字",
        "output": "<thought>\n根据需求，我们需要依次点击页面上的多个按钮，然后上传一个文件，最后验证页面上是否出现特定文本。我们可以使用`ClickTextOneByOne`来逐个点击按钮，使用`UploadFile`来上传文件，最后用`CheckHasText`来检查页面上是否有指定的文本。\n</thought>\n\n<code_block>\n# 依次点击上传合同文件、添加补充协议、选择文件上传\nClickTextOneByOne | 上传合同文件 | 添加补充协议 | 选择文件上传\n\n# 上传文件 ${docx_1}\nUploadFile | ${docx_1}\n\n# 校验页面包含 ${docx_name_1}\nCheckHasText | ${docx_name_1}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 alert 中包含 ‘customClickAction’",
        "output": "<thought>\n为了验证警告弹窗中是否包含文本“customClickAction”，我们可以使用“CheckAlertHas”关键字。这个关键字用来检查警告弹窗中的文本内容，我们只需要指定需要检查的文本即可。\n</thought>\n\n<code_block>\n# 校验 alert 弹窗中包含 'customClickAction'\nCheckAlertHas  customClickAction\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“域名配置文档链接”的关键字，接受参数为list，list中有两个元素，逻辑如下：\n# 1、点击list的第一个元素下方的查看详情\n# 2、跳转到新的页面\n# 3、验证页面中存在list的第二个元素\n# 4、切换到之前的窗口",
        "output": "<thought>\n为了实现这个场景，首先需要使用`ClickTextToTheDirectionOf`来点击第一个参数元素下方的\"查看详情\"链接。然后，使用`ToNewWindow`关键字切换到新页面。接着，验证新页面中是否存在第二个参数元素，使用`CheckHasText`关键字。最后，需要使用`ToPrevWindow`关键字切换回之前的窗口。\n</thought>\n\n<code_block>\n*** Keywords ***\n域名配置文档链接\n    [Arguments]  ${list}\n    \n    # 点击第一个元素下方的查看详情\n    ClickTextToTheDirectionOf  ${list}[0]  bottom  查看详情\n    \n    # 跳转到新的页面\n    ToNewWindow\n    \n    # 验证页面中存在第二个元素\n    CheckHasText  ${list}[1]\n    \n    # 切换到之前的窗口\n    ToPrevWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击新建，然后在 ‘搜索想要接入的数据源’ 中输入 ${数据源类型}，2s后，判断 section class包含type-name 且文本包含 ${数据源类型} 的元素 elem1 是否存在\n如果不存在，就在 ‘搜索想要接入的数据源’ 输入 ${数据源类型} 中以空格分隔后的最后一段，然后等待元素 elem1 存在\n最后点击 ${数据源类型}",
        "output": "<thought>\n解决该问题需要首先点击“新建”按钮，然后在输入框中输入指定的数据源类型。如果期望的元素不存在，再输入数据源类型的最后一段，直到元素存在为止。最后，点击该数据源类型。\n</thought>\n\n<code_block>\n# 点击新建\nClick | 新建\n\n# 在‘搜索想要接入的数据源’中输入数据源类型\nSetField | 搜索想要接入的数据源 | ${数据源类型}\n\n# 等待2秒\nSleep | 2s\n\n# 判断元素elem1是否存在\n${exist} | IsAnyElemExisting | section[class*='type-name']:contains(${数据源类型})\n\n# 如果不存在，输入数据源类型最后一段并等待元素存在\nIF | not ${exist}\n    # 获取数据源类型以空格分隔的最后一段\n    ${last_part}  Evaluate | \"${数据源类型}\".split(\" \")[-1]\n    \n    # 在‘搜索想要接入的数据源’中输入最后一段\n    SetField | 搜索想要接入的数据源 | ${last_part}\n    \n    # 等待元素elem1存在\n    WaitElem | section[class*='type-name']:contains(${数据源类型})\nEND\n\n# 点击数据源类型\nClick | ${数据源类型}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义  数组 [\"xxx\", \"xx\", \"xxxxxx]",
        "output": "<thought>\n在这个场景中，我们可以使用Robot Framework的内置关键字或Python代码来定义并操作数组。\n我们将使用Robot Framework的内置关键字来创建数组。\n</thought>\n\n<code_block>\n# 使用内置关键字来定义数组\n${array}    Create List    xxx    xx    xxxxxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "hover 在REQ上",
        "output": "<thought>\n我需要将鼠标移到文本REQ上。在这种情况下，我可以使用MoTo关键字，它接受一个文本作为参数，即我们想要悬停的元素的文本。在这种情况下，这个元素的文本是 \"REQ\"。\n</thought>\n\n<code_block>\n# 将鼠标悬停在文本\"REQ\"上\nMoTo | REQ\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击确定并检查页面包含 创建成功 和 SAML 2.0",
        "output": "<thought>\n首先，使用`Click`关键字点击“确定”按钮。然后，使用`CheckHasText`关键字验证页面是否包含“创建成功”和“SAML 2.0”这两个文本。\n</thought>\n\n<code_block>\n# 点击确定按钮\nClick  确定 \n\n# 检查页面包含创建成功和SAML 2.0\nCheckHasText  创建成功  SAML 2.0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击文本‘Http API’右侧的文本为‘接入’的按钮",
        "output": "<thought>\n首先需要找到文本为‘Http API’的基准元素，然后确定其右侧的文本为‘接入’的按钮。可以使用`ClickElemToTheDirectionOf`关键字，设置方向为`right`。\n</thought>\n\n<code_block>\n# 点击文本'Http API'右侧的'接入'按钮\nClickElemToTheDirectionOf | Http API | right | button:contains(接入)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开“我创建的”开关",
        "output": "<thought>\n要打开“我创建的”开关，我们可以使用SetField关键字，直接将其值设置为ON。\n</thought>\n\n<code_block>\n# 设置“我创建的”开关为ON\nSetField | 我创建的 | ON\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含qa-detail-header-ux1NXP的元素下的备注",
        "output": "<thought>\n此问题需要点击特定类名的元素内的备注，我们可以使用关键字Click进行操作，base参数设置为特定的类名元素选择器。\n</thought>\n\n<code_block>\n# 找到class包含qa-detail-header-ux1NXP的元素内的备注并点击\nClick | 备注 | base=[class*=qa-detail-header-ux1NXP]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将class为common-promotion-wrapper的页面区域，保存为基准图，命名为整体数据（汇总）页面校验，相似度为1",
        "output": "<thought>\n我们需要使用 ImageDiff 关键字来截取 class=common-promotion-wrapper 的元素图片，并和基准图对比。首先确定jquery选择器，然后设置 pic_name 和 sim 参数。\n</thought>\n\n<code_block>\n# 截取 class=common-promotion-wrapper 的元素图片，命名为整体数据（汇总）页面校验，相似度为1\nImageDiff | [class=common-promotion-wrapper] | pic_name=整体数据（汇总）页面校验 | sim=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在‘业务定义’输入‘维度单表业务定义’",
        "output": "<thought>\n我们需要在名为‘业务定义’的字段中输入‘维度单表业务定义’。根据关键字描述，使用`SetField`可以满足要求。\n</thought>\n\n<code_block>\n# 在‘业务定义’输入‘维度单表业务定义’\nSetField | 业务定义 | 维度单表业务定义\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查事件属性弹窗数据范围是否有“是否首日访问”和“是否登录”，若有则检查事件属性弹窗的数据范围是否有“AND”，有则点击“AND”并点击确定退出事件属性弹窗，若没有“是否首日访问”和“是否登录”则点击“添加规则”",
        "output": "<thought>\n首先检查事件属性弹窗是否包含“是否首日访问”和“是否登录”，使用IsAnyTextExisting关键字来实现。如果存在，进一步检查是否包含“AND”，使用IsAnyTextExisting关键字实现；如果存在，依次点击“AND”和“确定”按钮，使用ClickTextOneByOne关键字实现。如果不存在“是否首日访问”和“是否登录”，则点击“添加规则”，使用Click关键字实现。\n</thought>\n\n<code_block>\n# 检查事件属性弹窗数据范围是否有“是否首日访问”和“是否登录”\n${exist}  IsAnyTextExisting  是否首日访问  是否登录  base=POPUP\n\nIF  ${exist}\n    # 如果存在“是否首日访问”或“是否登录”，检查是否存在“AND”\n    ${and_exist}  IsAnyTextExisting  AND  base=POPUP\n    IF  ${and_exist}\n        # 如果存在“AND”，点击“AND”和“确定”\n        ClickTextOneByOne  AND  确定  base=POPUP\n    END\nELSE\n    # 如果不存在“是否首日访问”和“是否登录”，点击“添加规则”\n    Click  添加规则  base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为我的收藏的元素，并打印其信息",
        "output": "<thought>\n首先，我们需要找到文本为“我的收藏”的元素。可以使用关键字`FindByText`来查找这个元素。找到元素之后，可以使用`PrintElemRect`来打印该元素的空间尺寸和位置信息。\n</thought>\n\n<code_block>\n# 查找文本为“我的收藏”的元素\n${elem}  FindByText | 我的收藏\n\n# 打印该元素的空间尺寸和位置信息\nPrintElemRect | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面底部‘提交至商家处理’，如果出现申请理由，点击 第二个 Bill details，输入价格不合理，点击提交",
        "output": "<thought>\n要实现这个操作，我们可以分解为以下几个步骤：\n1. 点击页面底部的“提交至商家处理”按钮。\n2. 检查页面上是否出现“申请理由”文本。\n3. 如果“申请理由”出现，则点击第二个“Bill details”。\n4. 输入文本“价格不合理”。\n5. 点击“提交”按钮。\n\n我们需要合理运用提供的关键字来实现这些步骤。首先，使用`ClickTextToTheDirectionOf`点击底部的文本“提交至商家处理”。然后，使用`IsAnyTextExisting`来判断“申请理由”是否出现。在条件判断中，使用`ClickTextOneByOne`来依次点击第二个“Bill details”和输入文本“价格不合理”，最后点击“提交”。\n</thought>\n\n<code_block>\n# 点击页面底部的“提交至商家处理”\nClickTextToTheDirectionOf | SCREEN_CENTER | bottom | 提交至商家处理\n\n# 判断是否出现“申请理由”\n${exist}  IsAnyTextExisting | 申请理由\nIF  ${exist}\n    # 点击第二个“Bill details”\n    Click | Bill details | idx=1\n    \n    # 输入“价格不合理”\n    SendText | 价格不合理\n    \n    # 点击“提交”\n    Click | 提交\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面上的json编辑器内填写${json_str}",
        "output": "<thought>\n针对本场景，我们需要使用RF的关键字来操作页面上的json编辑器并填写数据。我们可以先用FillEditor关键字完成填写操作。\n</thought>\n\n<code_block>\n# 在页面上的第一个json编辑器内填写${json_str}\nFillEditor | ${json_str} | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击创建或新建，10s超时",
        "output": "<thought>\n分析问题，目标是点击文本为“创建”或“新建”的元素，并设置超时时间为10秒。可以使用`ClickAny`关键字，因为它允许在多个文本中选择其中一个进行点击，同时可以指定超时时间。\n</thought>\n\n<code_block>\n# 尝试点击文本“创建”或“新建”，设定超时时间为10秒\nClickAny | 创建 | 新建 | timeout=10\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建一个 校验多选标签 的关键字，接受，key， value 参数，操作逻辑是： class 等于 volc-design-mtl-tags 的容器里，检查 key 的数据是否等于 value",
        "output": "<thought>\n我们需要创建一个关键字，用于在指定的容器中检查某个字段的值。首先，我们需要在类名为 \"volc-design-mtl-tags\" 的容器中找到 key 字段。然后从这个字段中获取值，并检查其是否等于给定的 value。可拆解为以下步骤：\n\n1. 查找类名为 \"volc-design-mtl-tags\" 的容器。\n2. 在该容器中，查找名为 key 的字段。\n3. 获取该字段的值。\n4. 校验获取的值是否等于参数 value。\n\n我们可以使用 `FindElem` 来查找容器和字段，使用 `GetFieldVal` 来获取字段值，并使用 `Should Be Equal As Strings` 来进行值的比较。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验多选标签\n    [Arguments]  ${key}  ${value}\n    # 查找class为volc-design-mtl-tags的容器\n    ${container}  FindElem  [class=volc-design-mtl-tags]\n\n    # 在容器中查找key字段并获取其值\n    ${field_value}  GetFieldVal  ${key}  base=${container}\n\n    # 校验获取的字段值是否等于value\n    Should Be Equal As Strings  ${field_value}  ${value}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 点击 class=arco-space-align-center 的第一个元素",
        "output": "<thought>\n 这个问题比较简单，要点击一个元素，我们只需要使用ClickElem关键字，并为其传递正确的选择器即可。在这种情况下，我们的选择器是'.arco-space-align-center'，这将选择所有具有这个类的元素。由于我们想要点击第一个元素，我们可以使用:eq选择器来获取第一个元素。在JQuery中，索引是从0开始的，所以我们需要使用:eq(0)来选择第一个元素。\n </thought>\n \n <code_block>\n # 点击 class=arco-space-align-center 的第一个元素\n ClickElem | .arco-space-align-center:eq(0)\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面上三个点的icon",
        "output": "<thought>\n我们可以使用ClickIcon关键字来点击页面上的三个点的icon。直接使用关键字，并指定icon名称为\"more\"。\n</thought>\n\n<code_block>\n# 点击页面上的三个点的icon\nClickIcon | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获得 alert 弹框中的文本，并校验其包含 ‘customClickAction’",
        "output": "${message} = | Handle Alert | LEAVE | # Leave alert open and get its message\nShould Contain  ${message}  customClickAction\n\n<thought>\n在这个场景中，我们需要获取弹窗的文本，然后验证它是否包含一个特定的文本。RobotFramework 提供了关键字 'Handle Alert' 来处理警告弹窗并获取其信息，然后我们可以使用 'Should Contain' 关键字来校验文本是否包含 'customClickAction'。\n</thought>\n\n<code_block>\n# 获取 alert 弹窗中的文本\n${message} = | Handle Alert | LEAVE   # Leave alert open and get its message\n\n# 校验获取到的弹窗文本是否包含 'customClickAction'\nShould Contain  ${message}  customClickAction\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“产品名称hover全部展示”的关键字，作用是先校验页面是否包含增长分析，如果包含就移动鼠标到class为_productName_2uf9v_35的元素上，如果不包含增长分析就执行register_DataFinder_functions，然后校验页面包含2个增长分析",
        "output": "<thought>\n首先，使用`CheckHasAnyText`关键字来校验页面是否包含\"增长分析\"文本。如果包含那么就使用`MoToElem`关键字将鼠标移动到class为`_productName_2uf9v_35`的元素上。如果不包含，则执行关键字`register_DataFinder_functions`。最后，再次使用`CheckHasText`来确认页面包含两个\"增长分析\"文本。\n</thought>\n\n<code_block>\n*** Keywords ***\n产品名称hover全部展示\n    # 检查页面是否包含\"增长分析\"\n    ${exist}  IsAnyTextExisting  增长分析\n    \n    # 如果包含，移动鼠标到指定元素\n    IF  ${exist}\n        MoToElem  [class*=_productName_2uf9v_35]\n    ELSE\n        # 否则执行自定义关键字\n        register_DataFinder_functions\n    END\n\n    # 获取包含\"增长分析\"文本的元素数量\n        ${count}  GetElemCount | :contains(\"增长分析\")\n\n        # 校验数量是否为2\n        Should Be Equal As Numbers  ${count}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击一下esc",
        "output": "<thought>\n对于场景“点击一下esc”，可以使用RobotFramework的`Press Keys`关键字来模拟按下键盘上的ESC键。\n</thought>\n\n<code_block>\n# 模拟按下ESC键\nPress Keys | None | ESC\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成今天和30天后的日期，格式为 2022/09/22，然后将他们依次都填写到‘合同期限’中",
        "output": "<thought>\n首先需要使用 `Get Current Date` 获取今天的日期，然后使用 `Add Time To Date` 来计算30天后的日期。接下来，将日期格式化为 `YYYY/MM/DD` 格式。最后使用 `SetField` 将这两个日期依次填入到‘合同期限’中。\n</thought>\n\n<code_block>\n# 获取今天的日期\n${today}  Get Current Date  result_format=%Y/%m/%d\n\n# 计算30天后的日期\n${future_date}  Add Time To Date  ${today}  30d  result_format=%Y/%m/%d\n\n# 将今天和30天后的日期依次填入‘合同期限’\nSetField | 合同期限 | ${today} | ${future_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "清除活动名称输入框中的\"LYNUI自动化\"",
        "output": "<thought>\n在处理页面字段时，我们可以使用`SetField`来清除输入框的内容。为了删除特定内容\"LYNUI自动化\"，我们可以使用特殊的键值`${KEY_BACKSPACE}`来清除字段内容。\n</thought>\n\n<code_block>\n# 清空活动名称字段内容\nSetField | 活动名称 | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "表格第一行，属性名称列应该包含 ${name}",
        "output": "<thought>\n根据问题描述，我们需要在表格第一行的属性名称列中检查是否包含变量`${name}`。可以采用`CheckCellHas`关键字，指定行号为1和列名为属性名称。\n</thought>\n\n<code_block>\n# 校验表格第一行的属性名称列中包含变量${name}\nCheckCellHas | 1 | 属性名称 | ${name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查存在class为arco-switch-type-circle的元素且类型为button，并返回此元素的总个数",
        "output": "<thought>\n为了检查存在class为arco-switch-type-circle的元素，并且类型为button，可以使用`FindElem`关键字结合jQuery选择器来定位符合条件的元素。选择器可以用`button.arco-switch-type-circle`来表示，查找完后使用`GetElemCount`来获取元素的总个数。\n</thought>\n\n<code_block>\n# 查找class为arco-switch-type-circle的button元素\n${elem}  FindElem | button[class=arco-switch-type-circle]\n\n# 获取元素总个数\n${cnt}  GetElemCount | button[class=arco-switch-type-circle]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 预期页面存在文案：选购 SSL 证书",
        "output": "<thought>\n 在这个测试场景中，我们需要校验页面中是否存在特定文本 \"选购 SSL 证书\"。我们可以使用RF的关键字 \"CheckHasText\" 来实现这个目标。\n </thought>\n \n <code_block>\n # 校验页面中存在文本 \"选购 SSL 证书\"\n CheckHasText | 选购 SSL 证书\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击name后的删除icon",
        "output": "<thought>\n为了点击“name”后的“删除”icon，我们可以使用“ClickIconToTheDirectionOf”关键字。首先找到“name”元素，接着选择“right”方向，最后选择图标为“delete”的icon。\n</thought>\n\n<code_block>\n# 点击name右边的删除icon\nClickIconToTheDirectionOf | name | right | delete\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 灵感 下方的 海报设计 按钮",
        "output": "<thought>\n要点击“灵感”下方的“海报设计”按钮，基于描述和提示信息，我需要使用`ClickElemToTheDirectionOf`关键字。此关键字允许我指定基准元素（在这种情况下是“灵感”）和方向（\"bottom\"），以定位目标元素“海报设计”按钮。由于按钮是目标，我将使用选择器`button:contains(海报设计)`来确保匹配正确元素。\n</thought>\n\n<code_block>\n# 点击“灵感”下方的“海报设计”按钮\nClickElemToTheDirectionOf | 灵感 | bottom | button:contains(海报设计)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取共享看板左侧箭头的属性",
        "output": "<thought>\n在这个任务中，我们需要获取某个元素的属性。给定的任务是“获取共享看板左侧箭头的属性”。根据现有关键字和说明，任务描述中并没有直接提供获取属性的方法，但我们可以通过查找到特定元素，然后利用`GetElemAttr`关键字来获取其属性。\n\n首先，我们需要找到“共享看板”这个基准元素，而“左侧箭头”是相对于这个基准元素的，所以我们可以使用`FindElemToTheDirectionOf`关键字获取到左侧箭头元素。然后通过`GetElemAttr`来获取这个箭头元素的属性。\n\n接下来，我们需要考虑“左侧箭头”相对“共享看板”的方向，一般情况下，左侧箭头可能位于共享看板的左侧，所以我们的方向参数可以设为“left”。\n\n最后，我们可以使用`GetElemAttr`关键字获取左侧箭头的属性。\n\n总结起来：使用`FindElemToTheDirectionOf`来定位箭头元素，然后使用`GetElemAttr`来获取属性。\n</thought>\n\n<code_block>\n# 获取共享看板左侧箭头元素\n${arrow_elem}  FindElemToTheDirectionOf | 共享看板 | left | [class*=arrow]\n\n# 获取左侧箭头的属性，比如获取class属性\n${arrow_attr}  GetElemAttr | ${arrow_elem} | class\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "write a function that multiplies a number and returns the number",
        "output": "<thought>\n为了实现一个可以将数字相乘并返回结果的关键字，我们需要定义一个RF关键字，该关键字接受两个参数并返回它们的乘积。在Robot Framework中，可以使用内置关键字或者通过Evaluate执行Python代码来实现。考虑到RF的内置支持非常有限，我们将使用Evaluate来编写Python代码进行计算。\n</thought>\n\n<code_block>\n# 创建关键字 ‘乘法’，接受两个参数，并返回它们的乘积\n*** Keywords ***\n乘法\n    [Arguments]  ${num1}  ${num2}\n    ${result}=  Evaluate  ${num1} * ${num2}\n    [Return]  ${result}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 Appid 的 span 的下一个元素，并点击该元素",
        "output": "<thought>\n首先，我们需要查找到含有 \"Appid\" 文本的 span 元素，然后找到它的下一个元素，最后点击找到的元素。\n我们可以使用 RF 关键字 FindElem 确定含有 \"Appid\" 的 span 元素和它的下一个元素，然后使用 ClickElem 点击此元素。\n</thought>\n\n<code_block>\n# 查询有 'Appid' 文本的 span 元素的下一个元素\n${elem}  FindElem  | span:contains(Appid) + *\n\n# 点击查找到的元素\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "依次点击：基础操作、送标",
        "output": "<thought>\n这个场景需要依次点击两个文本元素：\"基础操作\"和\"送标\"。根据提供的关键字，最适合的是使用`ClickTextOneByOne`关键字，因为它专门设计用于依次点击多个文本元素。不需要考虑元素定位的特殊情况，因为题目没有给出额外的限制条件。\n\n由于没有提到需要在弹窗或特定基准元素内操作，所以不需要使用`base`参数。直接使用`ClickTextOneByOne`关键字即可满足需求。\n</thought>\n\n<code_block>\n# 依次点击基础操作和送标\nClickTextOneByOne | 基础操作 | 送标\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击图标more (...)",
        "output": "<thought>\n根据提供的关键字描述，我们可以使用`ClickIcon`关键字来点击图标。图标名称为`more`，不需要指定索引，因此可以直接使用默认参数。\n</thought>\n\n<code_block>\n# 点击图标more (...)\nClickIcon | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击右上角关闭按钮",
        "output": "<thought>\n为了点击右上角的关闭按钮，我们需要找到对应的元素并点击它。这可能需要使用名为ClickTextToTheDirectionOf，ClickElemToTheDirectionOf 或 ClickIconToTheDirectionOf的RF库关键字，取决于这个关闭按钮的具体实现。\n\n由于关闭按钮通常是一个icon，因此我会假设它是一个icon，并使用ClickIconToTheDirectionOf方法。屏幕的中心通常可以被视为基准元素，方向是右上角，icon是一个可能的\"close\"。\n\n如果关闭按钮是一个text或elem，那么我们只需要更改关键词，其他保持不变。\n</thought>\n\n<code_block>\n# 点击右上角的关闭图标\nClickIconToTheDirectionOf | SCREEN_CENTER | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "关闭弹窗，关闭的方式是点击弹窗右上角的×",
        "output": "<thought>\n根据提示和可用关键字，应该使用ClickIconToTheDirectionOf关键字来实现点击弹窗右上角的关闭按钮。基准元素为弹窗，所以base参数应为POPUP。因为需要点击关闭图标，所以icon参数应为close。\n</thought>\n\n<code_block>\n# 点击弹窗右上角的关闭图标\nClickIconToTheDirectionOf | POPUP | topRight | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 name 为 metrics 的元素",
        "output": "<thought>\n要点击 name 为 metrics 的元素，可以使用 ClickElem 关键字，通过该元素的选择器来进行选择和点击操作。\n</thought>\n\n<code_block>\n# 点击name为metrics的元素\nClickElem | [name='metrics']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入字段A，值为：应用启动、总次数",
        "output": "<thought>\n因为题目只提供了字段名A和字段值，所以我们可以使用SetField关键字来设置字段。有两个值需要输入，将它们放在一行中，字段值将依次被输入。\n</thought>\n\n<code_block>\n# 输入字段A，值为：应用启动、总次数\nSetField | A | 应用启动 | 总次数\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 等待3秒",
        "output": "<thought>\n 这个任务非常简单，只需要使用RF的Sleep关键字等待指定的时间即可。在这个例子中，我们只需要等待3秒。\n </thought>\n \n <code_block>\n # 等待3秒\n Sleep 3s\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获得一周前的日期，然后将此日期，填写到 “开始日期” 字段中",
        "output": "<thought>\n我们需要获取一周前的日期，这可以通过Python的datetime库来实现。然后将日期格式化为“2022-08-22”这样的格式，并填入“开始日期”字段中。我们可以使用`Evaluate`关键字来执行Python代码获取日期，然后使用`SetField`关键字填写到字段中。\n</thought>\n\n<code_block>\n# 获取一周前的日期\n${date_one_week_ago}   Evaluate  (datetime.datetime.now() - datetime.timedelta(weeks=1)).strftime('%Y-%m-%d')  modules=datetime\n\n# 将日期填写到“开始日期”字段中\nSetField  开始日期  ${date_one_week_ago}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击下一页，然后点击删除，最后点击确定",
        "output": "<thought>\n要实现“点击下一页，然后点击删除，最后点击确定”的操作，可以使用`ClickTextOneByOne`关键字，该关键字可以依次点击指定的一系列文本。\n</thought>\n\n<code_block>\n# 依次点击“下一页”、“删除”和“确定”\nClickTextOneByOne | 下一页 | 删除 | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面上名为 直播数据的tab，点击表格第一行中的查看详情，判断弹出的框内有checkbox",
        "output": "<thought>\n要解决这个问题，首先需要点击页面上名为 \"直播数据\" 的 tab，可以使用 `Click` 关键字，通过文本定位这个 tab。接着，在表格的第一行中点击 \"查看详情\"，使用 `ClickTextOfRow` 关键字即可实现。然后，我们需要判断弹出的框内是否存在一个复选框（checkbox），可以使用 `IsAnyElemExisting` 关键字来判断弹窗中是否存在复选框元素。\n</thought>\n\n<code_block>\n# 点击名为 \"直播数据\" 的 tab\nClick | 直播数据\n\n# 点击表格第一行中的 \"查看详情\"\nClickTextOfRow | 1 | 查看详情\n\n# 判断弹出的框内是否存在复选框\n${exist}  IsAnyElemExisting | input[type='checkbox'] | base=POPUP\n\n# 如果存在复选框，记录日志\nIF  ${exist}\n    Log  弹窗中存在复选框\nELSE\n    Fail  弹窗中不存在复选框\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "填写 “属性名” 表格第二行的内容为  name name empty",
        "output": "<thought>\n该场景要求填写“属性名”表格第二行的内容为 name name empty。可以使用关键字 `FillRow` 来完成此任务，指定表格行号和要填写的内容。\n</thought>\n\n<code_block>\n# 填写 “属性名” 表格第二行的内容为 name name empty\nFillRow | 2 | name | name | empty | tbl=属性名\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一行中的第二个icon",
        "output": "<thought>\n根据描述，需要点击表格中第一行的第二个图标。可以使用ClickIconOfRow关键字，指定第一行，图标的索引为1（即第二个图标）。\n</thought>\n\n<code_block>\n# 点击第一行中的第二个图标\nClickIconOfRow | 1 | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${task_name}左侧的小箭头",
        "output": "<thought>\n要点击${task_name}左侧的小箭头arrowicon，可以使用ClickIconToTheDirectionOf关键字。这个关键字专门用于点击基准元素给定方位的目标icon小图标。在这里：\n1. 基准元素(the_base)应该是${task_name}文本\n2. 方向(direction)应该是left\n3. 图标名称(icon)应该是arrow\n4. 因为要点击的是左侧第一个小箭头，所以idx保持默认值0即可\n</thought>\n\n<code_block>\n# 点击任务名称左侧的小箭头图标\nClickIconToTheDirectionOf  ${task_name}  left  arrow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选已阅读并同意用户协议和隐私条款",
        "output": "<thought>\n在这个场景中，我们需要勾选“已阅读并同意用户协议和隐私条款”复选框。首先，我们需要使用 `CheckBoxOn` 关键字。根据给出的关键字说明，我们可以通过复选框的名称来勾选。因此可以直接使用该名称来触发操作。\n</thought>\n\n<code_block>\n# 勾选“已阅读并同意用户协议和隐私条款”复选框\nCheckBoxOn | 已阅读并同意用户协议和隐私条款\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 获取 首次响应时长 字段下的时间值",
        "output": "<thought>\n 首先，需要定位到 首次响应时长 字段，然后获取其对应的时间值。可以使用 GetFieldVal 关键字来完成。\n </thought>\n \n <code_block>\n # 获取首次响应时长字段的值\n ${val} GetFieldVal | 首次响应时长\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将搜索域名设置为b2clouds.com，校验列表第一行第一列中包含b2clouds.com，如果表格行数 > 2，则点击最后一行的 '查看结果' ，并校验弹框中包含：生效中",
        "output": "<thought>\n首先，使用SetField关键字设置搜索域名为b2clouds.com。然后使用CheckCellHas关键字校验列表第一行第一列中包含b2clouds.com。如果表格行数大于2，使用ClickTextOfRow关键字点击最后一行的\"查看结果\"，并使用CheckHasText关键字校验弹框中包含“生效中”。\n</thought>\n\n<code_block>\n# 设置搜索域名为b2clouds.com\nSetField | 搜索域名 | b2clouds.com\n\n# 校验第一行第一列中包含b2clouds.com\nCheckCellHas | 1 | 1 | b2clouds.com\n\n# 获取表格行数\n${row_count} | GetRowCount\n\n# 如果行数>2，点击最后一行的'查看结果'，并校验弹框中包含'生效中'\nIF  ${row_count} > 2\n    # 点击最后一行的'查看结果'\n    ClickTextOfRow | ${row_count} | 查看结果\n\n    # 校验弹框中包含‘生效中’\n    CheckHasText | 生效中 | base=POPUP\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待删除按钮消失，检测出现Toast",
        "output": "<thought>\n需要首先使用WaitElemDisappear关键字等待删除按钮消失。接下来，使用CheckHasElem关键字来检查页面上是否出现类名包含toast或notification的元素，作为检测Toast出现的依据。\n</thought>\n\n<code_block>\n# 等待删除按钮消失\nWaitElemDisappear | button:contains(删除)\n\n# 检查出现Toast\nCheckHasElem | [class*=toast], [class*=notification]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 获取当前url",
        "output": "<thought>\n 获取当前URL可以直接使用GetCurrentUrl关键字，这是Robot Framework自定义关键字的一部分，并且非常简单直接。\n </thought>\n \n <code_block>\n # 获取当前URL\n GetCurrentUrl\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在菜单栏找到 应用中心 并点击，点击 开始比对后边的“无需比对”按钮，点击 停用 右侧的 ...",
        "output": "<thought>\n首先，我需要在菜单栏中找到并点击“应用中心”。这是通过使用`ClickMenu`关键字实现的。接下来，我需要点击“开始比对”后面的“无需比对”按钮，可以使用`ClickTextToTheDirectionOf`在“开始比对”的右侧找到并点击“无需比对”按钮。最后，找到并点击“停用”右侧的\"...\"，这个可以通过`ClickIconToTheDirectionOf`实现。\n</thought>\n\n<code_block>\n# 点击菜单栏中的 应用中心\nClickMenu | 应用中心\n\n# 点击 开始比对 后边的 无需比对\nClickTextToTheDirectionOf | 开始比对 | right | 无需比对\n\n# 点击 停用 右侧的 ...\nClickIconToTheDirectionOf | 停用 | right | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "列表中第一行的融资预计放款日期 输入 2024/12/05",
        "output": "<thought>\n要为表格第一行的“融资预计放款日期”输入日期信息，我们需要找到对应的字段并填入指定的日期。这里可以使用关键字`FillCell`来指定表格的行和列，然后填入日期值`2024/12/05`。因为行是第一行，所以行号为1。需要找到“融资预计放款日期”所在的列号或者列名。\n</thought>\n\n<code_block>\n# 将表格第一行的“融资预计放款日期”列设为日期 2024/12/05\nFillCell | 1 | 融资预计放款日期 | 2024/12/05\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "先点击按省份  点击按区域，门店名输入${Rate_The_Store}",
        "output": "<thought>\n首先需要根据提供的关键字来完成任务。任务要求先点击“按省份”，然后点击“按区域”，最后在门店名输入一个变量`${Rate_The_Store}`。根据这些需求，我可以使用`Click`关键字来实现点击操作，并使用`SetField`关键字来实现向字段中输入操作。\n</thought>\n\n<code_block>\n# 点击“按省份”\nClick | 按省份\n\n# 点击“按区域”\nClick | 按区域\n\n# 输入门店名\nSetField | 门店名 | ${Rate_The_Store}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向用途表格第一行中输入：极速型SSD、PL0、40",
        "output": "<thought>\n为了达到这个目标，我们可以使用RobotFramework的关键字\"FillRow\"来填写表格行。在这个例子中，我们要填写的是\"用途\"表格的第一行，内容是\"极速型SSD\"，\"PL0\"和\"40\"。我们按照关键字\"FillRow\"的语法，依次填入表格行号，然后是要填入的内容，最后是表格名tbl。\n</thought>\n\n<code_block>\n# 向用途表格第一行中输入：极速型SSD、PL0、40\nFillRow | 1 | 极速型SSD | PL0 | 40 | tbl=用途\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“手机登录”的关键字，接受 phone_num，verification_code, url 参数，默认值分别为变量 Phone_Num, Verification_Code, Login_Url，作用是：\n1. 打开浏览器，访问 url, 等页面加载完成后，输入手机号，验证码，然后点击发送验证码，然后勾选 ‘我已阅读’，最后点击登录\n2. 等待页面包含文本：首页",
        "output": "<thought>\n首先需要使用`OpenBrowser`来打开浏览器并访问指定的URL。接着，使用`WaitLoading`等待页面加载完成。然后使用`SetField`输入手机号和验证码。发送验证码的操作可能需要点击一个特定的按钮，因此使用`Click`来实现。接下来，用`CheckBoxOn`来勾选“我已阅读”选项，最后使用`Click`点击登录按钮。最后，使用`WaitText`确保页面包含“首页”。\n</thought>\n\n<code_block>\n*** Keywords ***\n手机登录\n    [Arguments]  ${phone_num}=${Phone_Num}  ${verification_code}=${Verification_Code}  ${url}=${Login_Url}\n    \n    # 打开浏览器并访问指定URL\n    OpenBrowser  ${url}\n    \n    # 等待页面加载完成\n    WaitLoading\n    \n    # 输入手机号和验证码\n    SetField  手机号  ${phone_num}\n    SetField  验证码  ${verification_code}\n    \n    # 点击发送验证码按钮\n    Click  发送验证码\n    \n    # 勾选“我已阅读”\n    CheckBoxOn  我已阅读\n    \n    # 点击登录按钮\n    Click  登录\n    \n    # 等待页面包含“首页”\n    WaitText  首页\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“查看标签预估数量并完成创建” 的关键字，接受参数 count，默认值为 -1，逻辑为：\n1. 点击 ‘预估数量’，并校验页面无异常\n2. 等页面加载完成后，校验表格第一行的 ‘预估数量’ 列的值应该 > count\n3. 然后点击 ‘确定’，接着点击 ‘创建完成’，并校验页面无异常\n4. 最后校验页面包含 ‘新建标签’、‘标签预览’",
        "output": "<thought>\n为了解决这个问题，我们将按顺序执行以下步骤：\n\n1. 使用 `Click`关键字点击‘预估数量’。\n2. 使用 `CheckErrMsg` 确保页面无异常。\n3. 使用 `WaitLoading` 等待页面加载完成。\n4. 使用 `GetCellValue` 获取表格第一行‘预估数量’列的值。\n5. 使用内置 `Should Be True` 验证获取的值是否大于 `count`。\n6. 使用 `ClickTextOneByOne` 顺序点击‘确定’和‘创建完成’。\n7. 使用 `CheckErrMsg` 再次检查页面无异常。\n8. 使用 `CheckHasText` 验证页面包含‘新建标签’和‘标签预览’。\n\n如果 `count`为默认值 `-1`，我们将仍然进行上述验证。\n\n下面是自动化脚本。\n</thought>\n\n<code_block>\n*** Keywords ***\n查看标签预估数量并完成创建\n    [Arguments]  ${count}=-1\n\n    # 点击‘预估数量’\n    Click  预估数量\n    # 确保页面无异常\n    CheckErrMsg\n\n    # 等待页面加载完成\n    WaitLoading\n\n    # 获取表格第一行‘预估数量’列的值\n    ${estimated_count}  GetCellValue  1  预估数量\n\n    # 验证值是否大于count\n    Should Be True  ${estimated_count} > ${count}\n\n    # 点击‘确定’和‘创建完成’\n    ClickTextOneByOne  确定  创建完成\n\n    # 再次检查页面无异常\n    CheckErrMsg\n\n    # 验证页面包含‘新建标签’和‘标签预览’\n    CheckHasText  新建标签  标签预览\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验标题=${title}下方，内容为“选项 1”的复选框已被选中",
        "output": "<thought>\n要解决这个问题，我们需要完成以下步骤：\n1. 找到标题元素${title}\n2. 定位到该标题下方的\"选项 1\"复选框\n3. 验证该复选框是否被选中\n\n我们可以使用IsCheckboxSelected关键字来检查复选框状态，并通过near参数指定复选框位于${title}下方。由于题目要求校验复选框已被选中，所以应该使用Should Be True关键字来断言返回值为True。\n\n需要注意：\n- 使用near参数时，值应该是\"选项 1\"而不是\"选项1\"(注意空格)\n- IsCheckboxSelected返回的是状态值，需要配合断言关键字使用\n</thought>\n\n<code_block>\n# 校验${title}下方的\"选项 1\"复选框是否被选中\n${status}  IsCheckboxSelected  选项 1  near=${title}\nShould Be True  ${status} == ${True}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前日期 2024-09 格式，然后获取 1年前的日期，也是这个格式，接着校验页面上 ‘财务账期’ 字段同时包含这两个日期",
        "output": "<thought>\n首先我们需要获取当前日期以及一年前的日期，格式为“2024-09”。我们可以使用 `Evaluate` 关键字来执行 Python 代码获取这些日期。获取到日期后，我们需要校验页面上名为“财务账期”的字段是否包含这些日期，可以使用 `CheckFieldContains` 关键字来实现。\n</thought>\n\n<code_block>\n# 获取当前日期和一年前的日期，格式为“2024-09”\n${current_date}  Evaluate  datetime.datetime.now().strftime('%Y-%m')  datetime\n${one_year_ago}  Evaluate  (datetime.datetime.now() - dateutil.relativedelta.relativedelta(years=1)).strftime('%Y-%m')  datetime\n\n# 校验“财务账期”字段包含当前日期和一年前的日期\nCheckFieldContains  财务账期  ${current_date}  ${one_year_ago}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在表格中选择秒杀价column,填入1，然后按tab,填入1",
        "output": "<thought>\n给定的场景需要在表格的\"秒杀价\"列中输入数据。首先需要找到对应单元格，然后在单元格中执行输入操作。使用`FillCell`关键字可以将单元格内容设为特定值，然后结合`Press Keys`模拟按下Tab键，完成后续输入。\n</thought>\n\n<code_block>\n# 假设要操作的是将表格中第一行 秒杀价 列的单元格设为1\nFillCell | 1 | 秒杀价 | 1\n\n# 模拟按下Tab键\nPress Keys |  NONE | TAB\n\n# 再次输入1\nSendText | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行本机命令：make approve_sourcing",
        "output": "<thought>\n对于这个问题，我们需要在RF中执行一个本地命令 `make approve_sourcing`。Robot Framework 的 `OperatingSystem` 库提供了一个名为 `Run` 的关键字，可以用于在测试期间执行本地系统命令。因此，我们可以直接使用 `Run` 来执行该命令。\n</thought>\n\n<code_block>\n# 执行本地命令 make approve_sourcing\nRun | make approve_sourcing\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查域名table包含 源站类型 标签 创建时间 更新时间 操作",
        "output": "<thought>\n首先，我们需要使用CheckTableHas关键字来检查域名表格是否包含指定的文本。由于我们需要检查多个文本，我们将这些文本作为参数传递给CheckTableHas关键字。\n</thought>\n\n<code_block>\n# 校验域名表格包含指定的列标题\nCheckTableHas | 源站类型 | 标签 | 创建时间 | 更新时间 | 操作 | tbl=域名\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到第一行第一列的单元格，设置第一行 收款单列 为积分",
        "output": "<thought>\n在这个场景中，我们需要分两步操作。首先，使用MoveToElemOfCell关键字将鼠标移动到第一行第一列的单元格上。然后，使用FillCell关键字来设置第一行中名为\"收款单\"列的值为\"积分\"。\n</thought>\n\n<code_block>\n# 移动鼠标到第一行第一列的单元格\nMoveToElemOfCell | 1 | 1\n\n# 设置第一行 \"收款单\" 列的值为 \"积分\"\nFillCell | 1 | 收款单 | 积分\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左上角任务开发",
        "output": "<thought>\n在这个场景中，我们需要点击位于屏幕左上角的“任务开发”文本。根据给定的关键字集合，`ClickTextToTheDirectionOf` 是一个可以用于基准位置和方向来定位目标文本的关键字。我们可以使用 `SCREEN_CENTER` 作为基准位置，并指定方向为 `topLeft` 来点击屏幕左上角的“任务开发”。\n</thought>\n\n<code_block>\n# 点击左上角的任务开发\nClickTextToTheDirectionOf | SCREEN_CENTER | topLeft | 任务开发\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找文本为 确定 或 下一步 的按钮",
        "output": "<thought>\n本场景是要查找文本为\"确定\"或\"下一步\"的按钮。对于这种场景，我们可以使用FindByText关键字，这个关键字可以查找/定位/获取给定文本的元素，默认返回第一个满足的元素。这里我们需要查找的文本是\"确定\"或者\"下一步\"，所以这两个文本就是FindByText关键字的参数。最后返回的元素将存储在变量${elem}中。\n</thought>\n\n<code_block>\n# 查找文本为\"确定\"或\"下一步\"的按钮\n${elem}  FindByText | 确定 | 下一步\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 设置浏览器高度 4000",
        "output": "<thought>\n 对于设置浏览器高度的任务，我们可以使用给定的关键字 `SetWindowHeight`。这个关键字能够直接设置浏览器的高度。因此，我们只需要调用一次这个关键字，并传入所需的高度值 4000。\n </thought>\n \n <code_block>\n # 设置浏览器高度为4000\n SetWindowHeight | 4000\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将“入驻意愿”往上滚动到最顶层",
        "output": "<thought>\n要将“入驻意愿”文案滚动到最顶层，我们可以先定位到包含“入驻意愿”的元素。然后，我们使用 `ScrollUpDown` 关键字将包含该元素的区域向上滚动到最顶层。 首先使用 `FindByText` 定位到“入驻意愿”所在的元素，然后使用 `ScrollUpDown` 实现滚动。\n</thought>\n\n<code_block>\n# 查找文本为“入驻意愿”的元素\n${elem}  FindByText | 入驻意愿\n\n# 将该元素向上滚动到最顶层\nScrollUpDown | ${elem} | 0%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面不显示${config_APP}",
        "output": "<thought>\n我们需要验证页面不包含某个特定文本，针对这种情况，我们可以使用`CheckNotHasText`关键字。这个关键字可以直接用于检查页面上是否不存在指定的文本。\n</thought>\n\n<code_block>\n# 校验页面不显示${config_APP}\nCheckNotHasText  ${config_APP}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 鼠标移动到 class=arco-icon-robot的元素上点击",
        "output": "<thought>\n 首先需要使用鼠标移动到指定的元素上，然后进行点击操作。可以通过MoToElem关键字移动到元素上，再使用MClick进行点击。\n </thought>\n \n <code_block>\n # 移动到class=arco-icon-robot的元素上\n MoToElem | [class=arco-icon-robot]\n \n # 点击class=arco-icon-robot的元素\n MClick | [class=arco-icon-robot]\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开浏览器访问：https://www.feishu.cn/product/corehr\n等待页面加载完成后，点击data-elem-id=\"SY157Dq3kw\"的登录按钮",
        "output": "<thought>\n首先，我们需要使用OpenBrowser关键字打开指定的URL。然后，等待页面加载完成。接下来，使用ClickElem关键字点击data-elem-id为SY157Dq3kw的登录按钮。\n</thought>\n\n<code_block>\n# 打开飞书产品页面\nOpenBrowser | https://www.feishu.cn/product/corehr\n\n# 等待页面加载完成\nWaitLoading\n\n# 点击登录按钮\nClickElem | [data-elem-id='SY157Dq3kw']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面应该包含abnormal、recommend、insight，设置属性分组 module，校验”订单编号“为：1072571872012188944，最后点击“已退款”右边的“已撤销核销”",
        "output": "<thought>\n首先，我们使用`CheckHasText`关键字校验页面同时包含文本abnormal、recommend、insight。接下来，使用`SetField`关键字设置“属性分组”字段的值为module。然后，通过`CheckFieldContains`来校验“订单编号”字段的值为1072571872012188944。最后，我们使用`ClickTextToTheDirectionOf`关键字点击“已退款”右边的“已撤销核销”。\n</thought>\n\n<code_block>\n# 校验页面出现文本abnormal, recommend, insight\nCheckHasText | abnormal | recommend | insight\n\n# 设置属性分组为module\nSetField | 属性分组 | module\n\n# 校验订单编号为1072571872012188944\nCheckFieldContains | 订单编号 | 1072571872012188944\n\n# 点击已退款右边的已撤销核销\nClickTextToTheDirectionOf | 已退款 | right | 已撤销核销\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class包含y的元素前面的确定",
        "output": "<thought>\n对于给定的场景，我们需要找到class包含\"y\"的元素，然后点击其前面的\"确定\"文本。可以使用\"ClickTextToTheDirectionOf\"关键字，方向为\"left\"。\n</thought>\n\n<code_block>\n# 点击class包含y的元素前面的确定\nClickTextToTheDirectionOf | [class*=y] | left | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验“请选择单个选项”这个表格，题目包含：“单选组”、“标注数量:2”",
        "output": "<thought>\n1. 首先需要明确要校验的是表格的表头行(HEAD)是否包含特定文本\n2. 根据关键字文档，可以使用CheckRowHas来校验表格行包含给定文本\n3. 表头行在关键字中表示为特殊值HEAD\n4. 需要校验的文本是\"单选组\"和\"标注数量:2\"\n5. 表格名称为\"请选择单个选项\"，根据规则要去掉\"表格\"二字，所以tbl参数应为\"请选择单个选项\"\n6. 不需要指定base参数，因为不是弹窗中的表格\n</thought>\n\n<code_block>\n# 校验表头行包含\"单选组\"和\"标注数量:2\"\nCheckRowHas  HEAD  单选组  标注数量:2  tbl=请选择单个选项\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行关键字去点击 ‘保存到看板’，如果执行异常，就看页面上是否存在 ‘放弃此查询’，有的话就点击它，然后再去点击保存到看板",
        "output": "<thought>\n首先尝试点击“保存到看板”，如果点击失败（即发生异常），则需要检查页面上是否存在“放弃此查询”文本。如果存在，则点击“放弃此查询”后，再次尝试点击“保存到看板”。可以使用RF的Try/Except结构来处理异常，然后使用IsAnyTextExisting关键字来检查“放弃此查询”是否存在。\n</thought>\n\n<code_block>\n# 尝试点击“保存到看板”\nTRY\n    Click  保存到看板\nEXCEPT\n    # 如果发生异常，则检查“放弃此查询”是否存在\n    ${exist}  IsAnyTextExisting  放弃此查询\n    IF  ${exist}\n        # 如果存在，则点击“放弃此查询”\n        Click  放弃此查询\n    END\n    # 再次尝试点击“保存到看板”\n    Click  保存到看板\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为“删除标注任务”的关键字，接受一个参数task_name。操作逻辑为：在搜索中输入task_name 回车，然后点击右侧的更多小图标，点击删除，再点击确定",
        "output": "<thought>\n1. 首先需要输入任务名称进行搜索，可以使用`SetField`关键字在搜索字段中输入task_name并回车\n2. 然后需要定位到该任务右侧的更多icon，可以使用`ClickIconToTheDirectionOf`关键字，以任务名称为基准元素，方向为right，icon名称为more\n3. 接着需要点击删除按钮，可以使用`Click`关键字点击\"删除\"文本\n4. 最后需要点击确定按钮确认删除，可以使用`Click`关键字点击\"确定\"文本\n5. 整个过程需要处理可能的弹窗，所以需要使用base=POPUP参数\n</thought>\n\n<code_block>\n*** Keywords ***\n删除标注任务\n    [Arguments]  ${task_name}\n    # 在搜索框中输入任务名称并回车\n    SetField  搜索  ${task_name}  enter=True\n    \n    # 点击任务右侧的更多图标\n    ClickIconToTheDirectionOf  ${task_name}  right  more\n    \n    # 点击删除按钮(可能在弹窗中)\n    Click  删除  base=POPUP\n    \n    # 点击确定按钮确认删除(可能在弹窗中)\n    Click  确定  base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格第1行、第2列",
        "output": "<thought>\n对于这个场景，我们需要点击表格中的一个特定单元格，第1行和第2列的交集就是该特定单元格。在给出的关键字列表中，`ClickTextOfCell` 和 `ClickElemOfCell` 都可以用来点击单元格内的文本或元素。因为没有给定单元格内具体的文本或元素信息，我们可以选择点击单元格中的任意位置。为此，我们可以使用默认的参数来点击单元格中的任何文本或元素。\n</thought>\n\n<code_block>\n# 点击表格第1行、第2列的单元格中的任意元素\nClickElemOfCell | 1 | 2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "移动到表格第一行第一列单元格的图片上，点击弹窗中的主播详情",
        "output": "<thought>\n首先，需要找到表格第一行第一列单元格中的图片元素，通过查看提供的关键字列表，我们可以使用MoveToElemOfCell关键字将鼠标移动到该元素上。接下来，点击弹窗中的\"主播详情\"文本，可以使用Click关键字，并指定base=POPUP来进行点击。\n</thought>\n\n<code_block>\n# 移动到表格第一行第一列单元格的图片上\nMoveToElemOfCell | 1 | 1 | img\n\n# 点击弹窗中的主播详情\nClick | 主播详情 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到弹框中 ‘字段类型’ 下方 20像素的位置点击",
        "output": "<thought>\n在这个场景中，我们需要将鼠标移动到弹框中的某个文本的特定位置并执行点击操作。首先可以使用`MoTo`关键字将鼠标移动到特定文本，再利用坐标调整功能移动到下方20像素的位置，最后使用`MClick`关键字进行点击。由于是在弹框中操作，需要确保`base=POPUP`的使用。\n</thought>\n\n<code_block>\n# 移动鼠标到弹框中‘字段类型’下方20像素位置\nMoTo | 字段类型 | base=POPUP | dy=20\n\n# 点击当前鼠标位置\nMClick\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“素人孵化线上型公会”下面的“展开”，点击 铅笔形状的编辑icon，然后输入：素人甲天下",
        "output": "<thought>\n首先需要点击“素人孵化线上型公会”下方的“展开”按钮，接着点击铅笔形状的编辑图标。然后在文本框中输入“素人甲天下”。可以使用ClickTextToTheDirectionOf来点击文本下方的元素；接着使用ClickIcon选择铅笔形状的图标；最后使用SendText输入文本。\n</thought>\n\n<code_block>\n# 点击“素人孵化线上型公会”下方的“展开”\nClickTextToTheDirectionOf | 素人孵化线上型公会 | bottom | 展开\n\n# 点击铅笔形状的编辑icon\nClickIcon | edit\n\n# 输入：素人甲天下\nSendText | 素人甲天下\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断val1是六位数字",
        "output": "<thought>\n判断val1是六位数字，可以通过RF的内置关键字'Length Should Be'和'Should Match Regexp'来完成。首先，我们需要判断长度是否为6，然后判断是否都是数字。\n</thought>\n\n<code_block>\n#  判断val1长度是否为6\nLength Should Be    ${val1}    6\n\n#  判断val1是否全为数字\nShould Match Regexp    ${val1}    \\\\d{6}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "申请员工输入邢翔宇 enter=True，点击设备型号前的勾选框，等待页面加载完毕后，检查表格至少有一行，判断审批列表申请员工是xingxiangyu",
        "output": "<thought>\n首先使用`SetField`关键字在申请员工字段中输入邢翔宇，并使用`enter=True`以回车确认。然后使用`CheckBoxOn`关键字勾选设备型号前的勾选框。接着使用`WaitLoading`确保页面加载完成。检查表格行数至少为1使用`CheckRowCount`。最后获取审批列表中申请员工列的值，判断是否为xingxiangyu。\n</thought>\n\n<code_block>\n# 在申请员工输入邢翔宇并回车\nSetField | 申请员工 | 邢翔宇 | enter=True\n\n# 勾选设备型号前的勾选框\nCheckBoxOn | 设备型号\n\n# 等待页面加载完成\nWaitLoading \n\n# 检查表格至少有一行\nCheckRowCount | 1 | tbl=审批列表\n\n# 判断审批列表申请员工为xingxiangyu\n${values} GetColValues | 申请员工 | tbl=审批列表\nShould Contain | ${values} | xingxiangyu\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 id为7h 的元素内部的 class包含 xxx 的元素",
        "output": "<thought>\n首先，按要求找到 id 为 7h 的元素，然后在该元素内部查找 class 包含 xxx 的元素。此任务可以通过两个步骤完成：首先使用 `FindElem` 查找 id 为 7h 的基准元素，然后在此基准元素内部使用 `FindElem` 查找 class 包含 xxx 的元素，指定 `base` 参数为所找到的基准元素。\n</thought>\n\n<code_block>\n# 查找 id 为 7h 的元素\n${base_elem}  FindElem | [id=7h]\n\n# 在该元素内部查找 class 包含 xxx 的元素\n${target_elem}  FindElem | [class*=xxx] | base=${base_elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到 ‘主播’ 右边的 LYN 上，然后点击 ‘LYN’ 右边的叉号",
        "output": "<thought>\n首先，我们需要将鼠标移动到“主播”右边的“LYN”上。可以使用 `MoveToTextToTheDirectionOf` 关键字来实现，从“主播”的右边定位到“LYN”。接着，我们需要点击“LYN”右边的 close icon，这可以通过 `ClickIconToTheDirectionOf` 关键字来实现，从“LYN”的右边定位到 close 图标。\n</thought>\n\n<code_block>\n# 移动鼠标到“主播”右边的“LYN”\nMoveToTextToTheDirectionOf | 主播 | right | LYN\n\n# 点击“LYN”右边的close图标\nClickIconToTheDirectionOf | LYN | right | close\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 对方信息 为${part_name_1}，等待页面中出现${part_name_1}，选择${part_name_1}，若果MULTI_ENV变量是True，返回minibase，否则执行关键字 ’生成随机名称‘",
        "output": "<thought>\n为了完成这个任务，我将采取以下步骤：\n1. 使用`SetField`关键字设置页面字段\"对方信息\"为`${part_name_1}`。\n2. 使用`WaitText`关键字等待页面出现`${part_name_1}`。\n3. 使用`SelectOption`关键字选择`${part_name_1}`。\n4. 使用内置的IF/ELSE语句检查`MULTI_ENV`变量是否为`True`，如果是，则`RETURN` \"minibase\"；否则，执行关键字`生成随机名称`。\n</thought>\n\n<code_block>\n# 设置 对方信息 为 ${part_name_1}\nSetField  对方信息  ${part_name_1}\n\n# 等待 页面中出现 ${part_name_1}\nWaitText  ${part_name_1}\n\n# 选择 ${part_name_1}\nSelectOption  ${part_name_1}\n\n# 判断 MULTI_ENV 变量是否为 True\nIF  \"${MULTI_ENV}\" == \"True\"\n    # 返回 minibase\n    RETURN  minibase\nELSE\n    # 执行关键字 生成随机名称\n    ${rand_name}  生成随机名称\n    RETURN  ${rand_name}\nEND"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "返回上一个页面",
        "output": "<thought>\n为了返回上一个页面，我们可以使用RobotFramework提供的PageBack关键字。因为返回上一个页面的操作在不同浏览器中表现一致，使用该关键字即可实现此功能。\n</thought>\n\n<code_block>\n# 返回到上一个页面\nPageBack\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击页面最上层的确定按钮",
        "output": "<thought>\n要解决这个问题，我们首先需要识别最上层的\"确定\"按钮。我们可以通过查找所有包含\"确定\"文本的元素，然后选择最后一个。最后一个元素通常代表最上层的元素，因为它最后被加载到页面上。对此，我们可以使用 \"${elem}  FindByText | 确定 | idx=-1\" 关键字，idx=-1 表示选择最后一个元素。然后，我们可以使用 \"ClickElem | ${elem}\" 关键字来点击这个元素。\n</thought>\n\n<code_block>\n# 查找最上层的\"确定\"按钮\n${elem}  FindByText | 确定 | idx=-1\n\n# 点击这个\"确定\"按钮\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击左上角箭头，回到上一个页面",
        "output": "<thought>\n解决问题思路: 根据场景描述，需要点击位于屏幕左上角的箭头图标，可以使用 ClickIconToTheDirectionOf 关键字，以 SCREEN_CENTER 为基准元素，方向为 topLeft，图标名为 arrowLeft。\n</thought>\n\n<code_block>\n# 点击左上角的箭头图标\nClickIconToTheDirectionOf | SCREEN_CENTER | topLeft | arrowLeft\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 点击更多小图标，点击详情，等待1s，页面包含年月日格式的日期。提示：需要先获取页面文本，然后用正则表达式校验是否包含给定格式的日期",
        "output": "\n    \n<thought>\n 首先，我们需要点击“更多”图标，可以使用`ClickIcon`关键字。然后点击“详情”，可以使用`Click`关键字。随后，等待1秒钟，用`Sleep`关键字实现。最后，获取页面文本并用正则表达式检查文本中是否包含日期格式。可以通过`GetPageText`获取页面文本，并用`Should Match Regexp`校验日期格式。\n </thought>\n \n <code_block>\n # 点击更多icon\n ClickIcon | more\n \n # 点击详情\n Click | 详情\n \n # 等待1秒\n Sleep | 1s\n \n # 获取页面文本\n ${page_text} | GetPageText\n \n # 校验页面文本中是否包含年月日格式的日期\n Should Match Regexp | ${page_text} | \\\\d{4}-\\\\d{2}-\\\\d{2}\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "截图对比命名为图片2",
        "output": "<thought>\n这个场景非常简单，我们只需要在ImageDiff关键字中，将 pic_name 参数设置为 \"图片2\" 即可。\n</thought>\n\n<code_block>\n# 使用ImageDiff关键字截屏并对比，命名为\"图片2\"\nImageDiff | pic_name=图片2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "1. 访问火山ECS云主机页面: ECS_URL 并页面加载完成\n2. 在筛选条件中输入: WebUIDemo, 然后回车\n3. 点击包含 WebUIDemo 的表格行中的：停止，选择停机方式为：强制停机，然后点击取消右边的停止按钮\n4. 最后校验页面包含：停止操作提交完成",
        "output": "<thought>\n1. 根据题目的描述，首先需要使用\"OpenUrl\"关键字来访问火山ECS云主机页面并等待其加载完成，使用\"WaitLoading\"关键字来实现页面加载的等待。\n2. 接下来，在筛选条件中输入\"WebUIDemo\"，然后回车。可以使用框架的\"SetField\"（用于设置页面字段）关键字来实现这部分操作，并设置 enter=True 。\n3. 紧接着需要点击包含\"WebUIDemo\"的表格行中的\"停止\"，选择停机方式为\"强制停机\"，然后点击\"取消\"右边的\"停止\"按钮。这部分可以使用\"ClickTextOfRow\"（点击表格行中的文本），\"SetField\"（设置页面字段）以及\"ClickTextToTheDirectionOf\"（点击基准元素给定方位的目标文本）等关键字来实现。\n4. 最后，需要校验页面包含\"停止操作提交完成\"，这一步可以使用\"CheckHasText\"关键字来实现。\n</thought>\n\n<code_block>\n# 访问火山ECS云主机页面并等待页面加载完成\nOpenUrl  |  ${ECS_URL}\nWaitLoading\n\n# 在筛选条件中输入\"WebUIDemo\"，然后回车\nSetField  |  筛选条件  |  WebUIDemo  |  enter=True \n\n# 点击包含\"WebUIDemo\"的表格行中的\"停止\"\nClickTextOfRow  |  WebUIDemo  |  停止\n\n# 选择停机方式为\"强制停机\"\nSetField  |  停机方式  |  强制停机\n\n# 点击\"取消\"右边的\"停止\"按钮\nClickTextToTheDirectionOf  |  取消  |  right  |  停止\n\n# 校验页面包含\"停止操作提交完成\"\nCheckHasText  |  停止操作提交完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 挂起原因 选择 其他",
        "output": "<thought>\n 对于这个问题，我们的目标是选择一个选项\"其他\"。我们可以使用SetField关键字达到这个目标。\"挂起原因\"是我们要操作的字段名，\"其他\"是我们要选择的值。\n </thought>\n \n <code_block>\n # 选择挂起原因为其他\n SetField | 挂起原因 | 其他\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击删除按钮，弹窗后点击确定按钮",
        "output": "<thought>\n首先需要找到删除按钮并点击，然后等待弹窗出现后再点击弹窗中的确定按钮。可以使用Click关键字来点击删除按钮，并利用base=POPUP参数来点击弹窗中的确定按钮。\n</thought>\n\n<code_block>\n# 点击删除按钮\nClick | 删除\n\n# 点击弹窗中的确定按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 专属Server 下方的 立即新增",
        "output": "<thought>\n在这个场景中，我们需要点击位于\"专属Server\"下方的\"立即新增\"。根据提供的关键字信息，\"ClickTextToTheDirectionOf\"关键字最适合用于这种通过相对定位进行点击的场景。具体来说，我们可以使用\"专属Server\"作为基准文本，并选择\"bottom\"方向进行查找和点击\"立即新增\"。\n</thought>\n\n<code_block>\n# 点击 专属Server 下方的 立即新增\nClickTextToTheDirectionOf | 专属Server | bottom | 立即新增\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "切入到allowfullscreen=\"true\"的元素里面的iframe",
        "output": "<thought>\n要切入到具有allowfullscreen=\"true\"属性的元素内部的iframe元素中，我们需要首先查找这个iframe元素，然后使用ToFrame关键字进入该iframe。在jQuery选择器中，我们可以使用属性选择器来定位具有特定属性值的标签，因此可以使用[allowfullscreen=\"true\"] iframe来选择目标iframe。\n</thought>\n\n<code_block>\n# 切入到allowfullscreen=\"true\"属性的元素里面的iframe\nToFrame | [allowfullscreen=\"true\"] iframe\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待1小时3分钟7s",
        "output": "<thought>\n在这个场景中，我们需要等待指定的时间长度，因此可以直接使用Sleep关键字。Sleep关键字接受时间字符串作为参数，并根据时间字符串等待指定的时间。时间字符串可以包含小时、分钟和秒的组合。\n</thought>\n\n<code_block>\n# 等待1小时3分钟7秒\nSleep  1hour3min7s\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果${is_num}为真，就把 ${val} 转化成数值",
        "output": "<thought>\n判断${is_num}是否为真，如果为真则使用Evaluate关键字执行Python代码将${val}转化为数值。\n</thought>\n\n<code_block>\nIF  $is_num\n    ${val} =  Evaluate  int(${val})\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "按enter键",
        "output": "<thought>\n要在Robot Framework中模拟按下Enter键，可以使用SeleniumLibrary中的Press Keys关键字。\n</thought>\n\n<code_block>\n# 使用Press Keys键入Enter键\nPress Keys | None | ENTER\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验\"有效任务\"下方是“单协议”，“单协议”下方是“网络质量”",
        "output": "<thought>\n首先，我们需要使用`CheckHasTextToTheDirectionOf`关键字来校验\"有效任务\"下方是否包含“单协议”，然后再次使用`CheckHasTextToTheDirectionOf`关键字来校验“单协议”下方是否包含“网络质量”。在这个过程中，我们需要确保每一步都准确地找到相应的文本。\n</thought>\n\n<code_block>\n# 校验\"有效任务\"下方是“单协议”\nCheckHasTextToTheDirectionOf | 有效任务 | bottom | 单协议\n\n# 校验“单协议”下方是“网络质量”\nCheckHasTextToTheDirectionOf | 单协议 | bottom | 网络质量\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "商品名称设置为 UI自动化-固定品-复制并创建-0906-的副本，校验商品总额的值包括 ${total_amount}",
        "output": "<thought>\n首先，我应该使用SetField关键字来设置商品名称字段。然后，我需要使用CheckFieldContains来验证商品总额字段是否包含${total_amount}。在这里，我们没有指定哪个字段是商品总额，所以我们可能需要根据上下文/规范来猜测字段名称是否就叫做\"总额\"或类似字样。\n</thought>\n\n<code_block>\n# 设置商品名称为给定值\nSetField | 商品名称 | UI自动化-固定品-复制并创建-0906-的副本\n\n# 校验商品总额字段值包含${total_amount}\nCheckFieldContains | 总额 | ${total_amount}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断 ‘我的任务’ 按钮是否可以点击，如果可以，就取${product_name_id}第4位开始的值，输到任务名称中，点击开启",
        "output": "<thought>\n首先，我们需要判断“我的任务”按钮是否处于可用状态，可以使用关键字 `IsElementEnabled` 判断按钮是否可点击。如果按钮可用，我们需要从变量 `${product_name_id}` 中提取第四位开始的值，并将其输入到任务名称中。然后，我们点击“开启”按钮。在这种情况下，应该选择使用 `Evaluate` 执行 Python 代码来提取字符串的一部分。\n</thought>\n\n<code_block>\n# 查看我的任务按钮是否可用\n${status}  IsElementEnabled | button:contains('我的任务')\n\n# 如果按钮可用\nIF  ${status}\n    # 提取product_name_id从第四位开始的值并输入到任务名称\n    ${task_name}  Evaluate  ${product_name_id}[3:]\n    SetField | 任务名称 | ${task_name}\n    \n    # 点击开启按钮\n    Click | 开启\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成1-30随机数",
        "output": "<thought>\n要生成1到30之间的随机数，可以使用RobotFramework的Evaluate关键字结合Python的random.randint函数来实现。因为GenerateRandom关键字不支持生成范围内的随机数，因此需要借助Python代码来完成。\n</thought>\n\n<code_block>\n# 使用Evaluate关键字生成1到30之间的随机数\n${random_number}  Evaluate  random.randint(1, 30)  modules=random\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置弹窗的账务账期 2024-09 ~ 2024-09",
        "output": "<thought>\n解决问题思路：首先需要设置弹窗中的账务账期字段，可以使用SetField关键字，设置base=POPUP表示操作弹窗中的字段，然后填写相应的值。\n</thought>\n\n<code_block>\n# 设置弹窗的账务账期 2024-09 ~ 2024-09\nSetField | 账务账期 | 2024-09 ~ 2024-09 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第一行中的第3个编辑图标",
        "output": "<thought>\n需要确定应该使用哪个关键字来点击表格中第一行的第三个编辑图标。可以使用 `ClickIconOfRow` 关键字，并设置 `row_name_or_id` 为 1，`icon` 为 `edit`，以及 `idx` 为 2 来表示第三个编辑图标。\n</thought>\n\n<code_block>\n# 点击第一行中的第3个编辑图标\nClickIconOfRow | 1 | edit | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断变量x是否存在",
        "output": "<thought>\n在这个场景中，我们需要判断变量x是否存在。可以使用提供的IsVarExisting关键字来实现。\n</thought>\n\n<code_block>\n# 判断变量x是否存在\n${exist}  IsVarExisting | x\n\n# 打印变量是否存在\nIF  ${exist}\n    Log  变量x存在\nELSE\n    Log  变量x不存在\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将页面下拉滑动要完全可见class为lightcharts-container的页面区域。提示：其实就是要将目标元素移动要视野呢",
        "output": "<thought>\n为了将滚动页面到某个元素完全可见，我们可以使用\"MoveIntoView\"关键字，该关键字内部会执行javascript代码将滚动条滚动到使目标元素完全可见。这里class为lightcharts-container的元素就是我们要移动到视野的目标元素，我们只需将它的jquery选择器\"[class=lightcharts-container]\"作为参数传递给\"MoveIntoView\"关键字即可。\n</thought>\n\n<code_block>\n# 移动视野到class为lightcharts-container的元素\nMoveIntoView | [class=lightcharts-container]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 ID 不存在，就创建全局变量 ID,并设置其值为 xxx",
        "output": "<thought>\n首先，判断变量 ID 是否存在。若不存在，则创建一个全局变量并赋值为 'xxx'。我们可以使用 `IsVarExisting` 来检测变量的存在性，然后使用 `Set Global Variable` 来创建和设置全局变量。\n</thought>\n\n<code_block>\n# 判断变量 ID 是否存在\n${exist}  IsVarExisting  ID\n\n# 如果不存在，则创建全局变量 ID 并设置为 'xxx'\nIF  not ${exist}\n    Set Global Variable  ${ID}  xxx\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面向下滚动",
        "output": "<thought>\n这个问题相对简单，只需要使用关键字\"PageDown\"，并确保times参数设置为1，这样页面就会向下滚动一次。\n</thought>\n\n<code_block>\n# 页面向下滚动一次\nPageDown | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "清空“看板/文件夹”输入框",
        "output": "<thought>\n为了清空“看板/文件夹”输入框，我们可以使用`SetField`关键字，并将字段的值设为`${KEY_BACKSPACE}`来删除现有的内容。我们需要通过在适当的位置添加注释来说明操作步骤。\n</thought>\n\n<code_block>\n# 清空看板/文件夹字段\nSetField | 看板/文件夹 | ${KEY_BACKSPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置实例数量为 2，购买时长为：3个月，接着向 ‘用途’ 表的第二行中输入：极速、PL0、40",
        "output": "<thought>\n对于这个场景，需要设置两个字段和填写表格中的一行。首先，使用`SetField`关键字分别设置实例数量和购买时长字段。然后，使用`FillRow`关键字填写“用途”表的第二行。具体步骤如下：\n\n1. 使用`SetField`设置实例数量为2。\n2. 使用`SetField`设置购买时长为3个月。\n3. 使用`FillRow`为“用途”表的第二行设置数据为“极速、PL0、40”。\n</thought>\n\n<code_block>\n# 设置实例数量为2\nSetField | 实例数量 | 2\n\n# 设置购买时长为3个月\nSetField | 购买时长 | 3个月\n\n# 填写“用途”表的第二行数据为：极速、PL0、40\nFillRow | 2 | 极速 | PL0 | 40 | tbl=用途\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待结论正在计算中消失，超时30秒",
        "output": "<thought>\n使用WaitTextDisappear关键字等待文本\"结论正在计算中\"消失，超时时间设置为30秒。\n</thought>\n\n<code_block>\n# 等待结论正在计算中消失，超时30秒\nWaitTextDisappear | 结论正在计算中 | timeout=30\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "取当前时间为 reqTime，精确到秒",
        "output": "<thought>\n为了获取当前时间并将其精确到秒，可以使用RF标准库中的Get Current Date关键字。该关键字可以获取当前时间，并且我们可以通过指定格式来确保其精确到秒。\n</thought>\n\n<code_block>\n# 获取当前时间，精确到秒\n${reqTime}  Get Current Date  result_format=%Y-%m-%d %H:%M:%S\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断审批节点字段值中存在${user_ceo}[user_name], 并检测页面不存在报错",
        "output": "<thought>\n首先，我们需要检查“审批节点”字段中是否包含文本`${user_ceo}[user_name]`。我们可以使用`CheckFieldContains`关键字来完成此任务。接下来，我们需要确保页面不存在报错，可以使用关键字`CheckErrMsg`来检测页面是否有异常提示，如果没有异常提示，`CheckErrMsg`将成功通过。\n</thought>\n\n<code_block>\n# 检查审批节点字段中存在指定用户\nCheckFieldContains | 审批节点 | ${user_ceo}[user_name]\n\n# 检查页面没有报错\nCheckErrMsg\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量y设置为空格",
        "output": "<thought>\n在此场景中，需要将变量y设置为空格。我们可以使用Robot Framework的内置关键字`Set Variable`，并利用`${SPACE}`来表示空格。\n</thought>\n\n<code_block>\n# 设置变量y为空格\n${y}  Set Variable  ${SPACE}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘接单’ 右边的元素",
        "output": "<thought>\n要点击\"接单\"右边的元素，我将使用关键字 \"ClickElemToTheDirectionOf\"，将 \"接单\" 作为基准元素，选取右方向。由于题目中没有给出右边元素的具体信息，比如 id 或 class，我将使用 \"*\" 作为默认的选择器，它可以匹配任何元素。\n</thought>\n\n<code_block>\n# 点击 \"接单\" 右边的元素\nClickElemToTheDirectionOf | 接单 | right | *\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前光标所在元素",
        "output": "<thought>\n根据需求，要获取当前光标所在的元素，可以使用 `GetActiveElem` 关键字。这个关键字能够直接返回当前获得焦点的元素，因此这是最直接的方法。\n</thought>\n\n<code_block>\n# 获取当前激活的元素\n${elem}  GetActiveElem\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class=\"XWO9b\"的'商品榜单'的文本",
        "output": "<thought>\n在指定的场景中，任务是点击具有特定class的文本，因此我将使用ClickElem关键字。我们需要选择类名为XWO9b的元素，并选择其中包含\"商品榜单\"文本的元素。\n</thought>\n\n<code_block>\n# 点击 class=\"XWO9b\" 且包含'商品榜单'的元素\nClickElem | [class=XWO9b]:contains(商品榜单)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 URL 包含 xxx",
        "output": "<thought>\n使用WaitURLContainsAny关键字来检查URL是否包含给定文本“xxx”。这个关键字可以直接用于等待和验证URL中包含特定字符串。\n</thought>\n\n<code_block>\n# 等待并校验 URL 包含 \"xxx\"\nWaitURLContainsAny | xxx\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果存在套餐图，则设置套餐图为 ${IMAGE_URL_fifth}，如果页面出现裁剪，就点击确定；否则，设置头图为${IMAGE_URL_fifth}，设置辅助图为${IMAGE_URL_fifth}，如果出现智能优化，点击确定上传",
        "output": "<thought>\n首先，我们需要判断页面上是否存在名为套餐图的元素，如果存在，则需要设置其值为 ${IMAGE_URL_fifth}。紧接着，我们要监测是否出现裁剪，如果出现就单击确认。\n\n如果套餐图不存在，则我们依次设置头图和辅助图的值为 ${IMAGE_URL_fifth}。随后，我们要监测页面是否出现智能优化，如果出现则点击确认上传。\n\n为了实现这些功能，我们需要使用IsAnyElemExisting、SetField、IsAnyTextExisting和Click关键字。\n</thought>\n\n<code_block>\n# 判断套餐图是否存在\n${exist}  IsAnyElemExisting | :contains(套餐图)\n\nIF  ${exist}\n    # 设置套餐图为 ${IMAGE_URL_fifth}\n    SetField | 套餐图 | ${IMAGE_URL_fifth}\n\n    # 判断裁剪是否出现\n    ${exist_crop}  IsAnyTextExisting | 裁剪\n    IF  ${exist_crop}\n        # 点击确定\n        Click | 确定\n    END\nELSE\n    # 设置头图为 ${IMAGE_URL_fifth}\n    SetField | 头图 | ${IMAGE_URL_fifth}\n    \n    # 设置辅助图为 ${IMAGE_URL_fifth}\n    SetField | 辅助图 | ${IMAGE_URL_fifth}\n    \n    # 判断智能优化是否出现\n    ${exist_optimize}  IsAnyTextExisting | 智能优化\n    IF  ${exist_optimize}\n        # 点击确认上传\n        Click | 确定\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "选择 ‘中医院’ 附近的 ‘麦当劳’",
        "output": "<thought>\n本任务要求我们点击“中医院”附近的“麦当劳”。根据提供的关键字文档，我们可以使用Click关键字结合near参数来实现这个需求。具体步骤如下：首先使用Click关键字，然后使用near参数指定“中医院”，并点击“麦当劳”。\n</thought>\n\n<code_block>\n# 点击'麦当劳'，它在'中医院'的附近\nClick | 麦当劳 | near=中医院\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将id 为scrollContainer的元素，滑动到最底部",
        "output": "<thought>\n解决此问题的思路是使用ScrollUpDown关键字将scrollContainer元素滚动到100%，以达到滚动到底部的效果。\n</thought>\n\n<code_block>\n# 使用FindElem关键字查找id为scrollContainer的元素\n${scroll_container}  FindElem  | [id=scrollContainer]\n\n# 使用ScrollUpDown关键字将scrollContainer元素滚动到最底部\nScrollUpDown  | ${scroll_container}  | 100%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字“看板管理搜索看板”，接受参数 name ，逻辑是：\n1.在class包含arco-input arco-input-size-small的元素中输入给定的name\n2.等待1秒",
        "output": "<thought>\n 首先要创建一个关键字“看板管理搜索看板”，然后使用FillArea关键字在指定的class元素中输入参数name，接着使用Sleep关键字等待1秒。\n </thought>\n \n <code_block>\n 看板管理搜索看板\n  [Arguments] ${name}\n  # 在指定的class元素中输入name\n  FillArea | [class*=arco-input arco-input-size-small] | ${name}\n  # 等待1秒\n  Sleep | 1s\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹出列表中的不为空",
        "output": "<thought>\n需要在弹出列表中点击文本“不为空”。可以使用Click关键字，base参数设置为POPUP来定位到弹出列表中的元素。\n</thought>\n\n<code_block>\n# 点击弹出列表中的不为空\nClick | 不为空 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击${count}次数的“添加条件”，然后把${triggers}中的所有参数填写到页面的“触发条件”字段中",
        "output": "<thought>\n1. 首先需要点击\"添加条件\"按钮${count}次，可以使用`Click`关键字配合循环来实现多次点击\n2. 然后需要将${triggers}列表中的参数填写到\"触发条件\"字段中，可以使用`SetField`关键字\n3. 由于${triggers}是一个列表，需要将其展开作为参数传递给`SetField`\n</thought>\n\n<code_block>\n# 点击${count}次\"添加条件\"\nFOR    ${i}    IN RANGE    ${count}\n    Click | 添加条件\nEND\n\n# 将${triggers}中的所有参数填写到\"触发条件\"字段中\nSetField | 触发条件 | @{triggers}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 nif 右侧的 编辑 符号",
        "output": "<thought>\n任务是点击 \"nif\" 右侧的 \"编辑\" 符号。可以使用关键字 ClickIconToTheDirectionOf，指定基准元素为包含 \"nif\" 的文本，方向为 right，目标为 \"编辑\" 符号。\n</thought>\n\n<code_block>\n# 点击 nif 右侧的编辑符号\nClickIconToTheDirectionOf | :contains(nif) | right | edit\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检验是否打开新页面 url包含add-endpoint-group",
        "output": "<thought>\n对于这个任务，我们需要完成以下步骤：\n1. 使用`ToNewWindow`关键字切换到新窗口。\n2. 使用`IsURLContains`关键字检查URL中是否包含指定的字符串`add-endpoint-group`。\n3. 根据检查结果输出日志。\n\n这个过程需要确保RobotFramework能够正确识别和切换到新窗口，并能判断URL是否符合预期。\n</thought>\n\n<code_block>\n# 切换到新窗口\nToNewWindow\n\n# 判断当前URL是否包含'add-endpoint-group'\n${status}  IsURLContains  add-endpoint-group\n\n# 如果包含，输出'新页面已打开'\nIF  ${status}\n    Log  新页面已打开\nELSE\n    Log  新页面未找到\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索发往 CalculateInstancePrice 的最后一个 GET 请求，校验其 json 响应中的 originalAmount 字段中包含：1.45",
        "output": "<thought>\n在这个场景中，我们需要搜索最后一个发往 CalculateInstancePrice 的 GET 请求，并从该请求的响应中获取 JSON 对象。然后，我们需要检查这个 JSON 响应中的 originalAmount 字段是否包含 1.45。我们可以使用 `Search Requests` 关键字来搜索请求，并使用 `GetValuesFromJson` 关键字获取 originalAmount 字段的值。最后，我们可以使用内置的 Should 系列关键字来验证这一点。\n</thought>\n\n<code_block>\n# 搜索发往 CalculateInstancePrice 的最后一个 GET 请求\n${resp_json}  Search Requests  CalculateInstancePrice  GET  last\n\n# 获取响应中的 originalAmount 字段值\n${original_amount}  GetValuesFromJson | ${resp_json} | originalAmount\n\n# 校验 originalAmount 字段中包含 1.45\nShould Contain  ${original_amount}  1.45\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " #设置供应商为：“北方财税”，供应商联系人为：“丽丽”，输入签约主体为： “今日头条有限公司”，税率为：0%，交付日期输入今天的日期（格式为：2022-07-08）",
        "output": "<thought>\n我们需要使用以下关键字来完成任务：\n\n1. 使用`SetField`来设置供应商和供应商联系人。\n2. 使用`SetField`来输入签约主体。\n3. 使用`SetField`来设置税率。\n4. 使用`SetField`来输入交付日期。为了获取今天的日期，我们会使用RF的`Get Current Date`关键字。\n</thought>\n\n<code_block>\n# 设置供应商为“北方财税”\nSetField | 供应商 | 北方财税\n\n# 设置供应商联系人为“丽丽”\nSetField | 供应商联系人 | 丽丽\n\n# 输入签约主体为“今日头条有限公司”\nSetField | 签约主体 | 今日头条有限公司\n\n# 设置税率为0%\nSetField | 税率 | 0%\n\n# 获取今天的日期，格式为“2022-07-08”\n${today_date}  Get Current Date | result_format=%Y-%m-%d\n\n# 输入交付日期为今天的日期\nSetField | 交付日期 | ${today_date}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选应用场景为通用管报",
        "output": "<thought>\n根据给出的应用场景，我们需要将字段‘应用场景’设置为‘通用管报’。对于这种简单的字段设置操作，可以使用`SetField`关键字来完成。字段名为‘应用场景’，值为‘通用管报’。\n</thought>\n\n<code_block>\n# 设置应用场景为通用管报\nSetField | 应用场景 | 通用管报\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当天月日",
        "output": "<thought>\n要获取当天的月日信息，RobotFramework本身没有直接的内置关键字可以实现这个功能。但可以通过以下思路解决：\n1. 使用Evaluate关键字执行Python代码来获取当前日期\n2. 从日期对象中提取月份和日信息\n3. 将结果格式化为需要的字符串格式\n\nPython的datetime模块可以很方便地获取当前日期并提取月日信息。我们将使用datetime.datetime.now()获取当前时间，然后使用strftime格式化输出月日。\n</thought>\n\n<code_block>\n# 使用Python获取当前月日并格式化为\"月日\"字符串\n${current_date}    Evaluate    datetime.datetime.now().strftime(\"%m%d\")    modules=datetime\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为：“页面打开” 的关键字，接受 url 参数，作用是打开该页面并等待页面加载完成",
        "output": "\n    \n<thought>\n 解决问题思路：为实现“页面打开”关键字，我们需要首先使用OpenUrl关键字打开指定的URL，然后使用WaitLoading关键字等待页面加载完成。\n </thought>\n \n <code_block>\n 页面打开\n     [Arguments]  ${url}\n     # 打开指定的URL\n     OpenUrl  ${url}\n     \n     # 等待页面加载完成\n     WaitLoading\n </code_block>\n  \n "
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（abc, 操作）中的设置",
        "output": "<thought>\n需要点击表格中指定单元格的文本\"设置\"。根据输入信息，我们需要使用`ClickTextOfCell`关键字，指定行名为\"abc\"和列名为\"操作\"。\n</thought>\n\n<code_block>\n# 点击行名为abc、列名为操作的单元格中的文本设置\nClickTextOfCell | abc | 操作 | 设置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面中不包含跳过按钮",
        "output": "<thought>\n要校验页面中不包含\"跳过\"按钮，可以使用CheckNotHasText关键字来检查页面文本中不包含\"跳过\"字样。由于题目要求的是校验按钮，更精确的做法是使用CheckNotHasElem关键字结合jquery选择器来检查页面中不存在包含\"跳过\"文本的按钮元素。这里选择后者更准确。\n\njquery选择器可以写成：button:contains('跳过')，表示查找所有包含\"跳过\"文本的button元素。\n</thought>\n\n<code_block>\n# 校验页面中不存在包含\"跳过\"文本的按钮\nCheckNotHasElem | button:contains('跳过')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “打开浏览器登录飞书” 的关键字，接受参数 page_url, feishu_url, feishu_session 默认值分别为变量：MAIN_PAGE, FEISHU_LOGIN_URL, FEISHU_SESSION_ID, 操作逻辑是：\n1. 打开浏览器\n2. 使用 feishu_session 和 feishu_url 登录飞书\n3. 访问页面 page_url\n4. 等待页面 URL 中不再包含 login",
        "output": "<thought>\n首先，我们需要使用 `OpenBrowser` 打开浏览器。然后通过 `LoginFeiShu` 使用给定的会话信息登录飞书。接下来，使用 `OpenUrl` 访问指定页面。最后，使用 `WaitURLNotContains` 等待 URL 中不再包含 \"login\"。\n</thought>\n\n<code_block>\n# 打开浏览器并登录飞书关键字实现\n*** Keywords ***\n打开浏览器登录飞书\n    [Arguments]  ${page_url}=${MAIN_PAGE}  ${feishu_url}=${FEISHU_LOGIN_URL}  ${feishu_session}=${FEISHU_SESSION_ID}\n    \n    # 打开浏览器\n    OpenBrowser\n    \n    # 使用给定会话信息登录飞书\n    LoginFeiShu  ${feishu_session}  ${feishu_url}\n    \n    # 访问指定页面\n    OpenUrl  ${page_url}\n    \n    # 等待页面 URL 中不再包含 login\n    WaitURLNotContains  login\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘使用模型’ 右边的向右小图标，获取arco-comment-datetime的span值，把该值 ${datetime} 从字符串表示的时间 转换成 int型的时间戳",
        "output": "<thought>\n首先，使用`ClickIconToTheDirectionOf`点击‘使用模型’右边的向右icon。接着，使用`FindElem`查找arco-comment-datetime的span元素。然后，用`GetElemText`获取该元素的文本值。最后，利用`Convert Date`将字符串时间转换为时间戳。\n</thought>\n\n<code_block>\n# 点击‘使用模型’右边的向右icon\nClickIconToTheDirectionOf | 使用模型 | right | right-arrow\n\n# 查找arco-comment-datetime的span元素\n${elem}  FindElem | span[class='arco-comment-datetime']\n\n# 获取元素文本值\n${datetime}  GetElemText | ${elem}\n\n# 将字符串时间转换为时间戳\n${timestamp}  Convert Date | ${datetime} | result_format=epoch\n${timestamp}  Evaluate  int(${datetime})\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击管理分类",
        "output": "<thought>\n在这个场景中，我们需要点击文本“管理分类”。使用Click关键字可以实现这一点。假设“管理分类”是一个唯一的文本，因此可以直接点击该文本。\n</thought>\n\n<code_block>\n# 点击管理分类\nClick | 管理分类\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“设置自定义标签基本信息” 的关键字，接受 show_name、name、period、desc 四个参数，业务逻辑是：\n1. 设置 ‘展示名’ 为 show_name\n1. 设置 ‘标签名’ 为 name\n2. 如果 desc 不为空，就把 ‘标签描述’ 设置为 desc，否则就把 ‘标签描述’ 设置为 name + '的标签描述'\n3. 如果 period 不为空，就把 ‘计算周期’ 设置为 period",
        "output": "<thought>\n要根据描述编写一个包含逻辑判断的Robot Framework关键字，使用SetField来设置页面字段，使用IF/ELSE语句来处理条件逻辑。四个参数分别用于设置展示名、标签名、标签描述和计算周期。检查desc是否为空，设置相应的标签描述。如果period不为空，则设置计算周期。\n</thought>\n\n<code_block>\n*** Keywords ***\n设置自定义标签基本信息\n    [Arguments]    ${show_name}    ${name}    ${period}    ${desc}\n    # 设置展示名\n    SetField    展示名    ${show_name}\n    # 设置标签名\n    SetField    标签名    ${name}\n    # 如果标签描述为空，设置为name的标签描述，否则设置为desc\n    IF    '${desc}' != ''\n        SetField    标签描述    ${desc}\n    ELSE\n        SetField    标签描述    ${name}的标签描述\n    END\n    # 如果计算周期不为空，设置为period\n    IF    '${period}' != ''\n        SetField    计算周期    ${period}\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击placeholder为可输入自定义字段值进行搜索的元素，然后输入1111，最后点击确定",
        "output": "<thought>\n首先，需要点击页面上placeholder为“可输入自定义字段值进行搜索”的元素，可以使用`ClickElem`通过jQuery选择器来实现。然后，使用`SendText`输入“1111”到该元素中。最后，使用`Click`关键字点击“确定”按钮来完成操作。\n</thought>\n\n<code_block>\n# 点击placeholder为\"可输入自定义字段值进行搜索\"的输入框\nClickElem | input[placeholder='可输入自定义字段值进行搜索']\n\n# 输入1111到输入框\nSendText | 1111\n\n# 点击确定按钮\nClick | 确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取页面中有多少个 class包含 style__UICardsGrid的元素",
        "output": "<thought>\n我们需要计算页面中class包含style__UICardsGrid的元素数量。可以使用GetElemCount关键字，结合jquery选择器语法，来实现这一目标。选择器可以通过属性选择器语法来实现，即[class*='style__UICardsGrid']。\n</thought>\n\n<code_block>\n# 获取class包含style__UICardsGrid的元素个数\n${cnt}  GetElemCount | [class*='style__UICardsGrid']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击退出按钮",
        "output": "<thought>\n首先，确定使用哪个关键字来完成按钮点击操作。在这种情况下，应选择`ClickElem`关键字，因为需要通过jQuery选择器指定特定的按钮元素。接下来，构建选择器来识别\"退出\"按钮。\n</thought>\n\n<code_block>\n# 点击包含“退出”的按钮\nClickElem | button:contains(退出)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "输入单号 ${borrowId} ，点击回车",
        "output": "<thought>\n首先，我们需要找到表示单号字段的元素，并使用 SetField 关键字将 ${borrowId} 填入单号字段，然后模拟回车操作。\n</thought>\n\n<code_block>\n# 设置单号字段的值为 ${borrowId}，然后回车\nSetField | 单号 | ${borrowId} | enter=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 div.list-filter 中输入  Libra  小时级   全部",
        "output": "<thought>\n根据需求，需要向页面上的 `div.list-filter` 元素中输入三个值：`Libra`，`小时级`，和 `全部`。可以使用 `FillArea` 关键字来完成这个任务。 `FillArea` 关键字允许我们选择特定的 jquery 选择器并依次填入多个值到控件中。\n</thought>\n\n<code_block>\n# 向 div.list-filter 中依次输入 Libra 小时级 全部\nFillArea | div.list-filter | Libra | 小时级 | 全部\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成随机数",
        "output": "<thought>\n根据题目要求，需要生成一个长度为15的由字母和数字组成的随机字符串。可以使用`GenerateRandom`关键字来实现。\n</thought>\n\n<code_block>\n# 生成长度为15的随机字母数字字符串\n${random_string}  GenerateRandom  | 15 | [LETTERS][NUMBERS]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘300x100’",
        "output": "<thought>\n在RobotFramework中，点击指定文本的动作可以使用Click关键字。提供的文字是‘300x100’，似乎不需要考虑idx、exclude、base或near参数的使用，因为没有其他文本或条件需要排除或基于。直接点击该文本即可。\n</thought>\n\n<code_block>\n# 点击文本‘300x100’\nClick | 300x100\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标 移动到 “Hide $0 bills” 右边的小图标，点击${attribute_name} 后面的 12345",
        "output": "<thought>\n该场景要求鼠标首先移动到“Hide $0 bills”右边的icon上，然后点击${attribute_name}后面的文本“12345”。结合给定的关键字，我们可以使用`MoveToIconToTheDirectionOf`来达到鼠标移动的效果，然后使用`ClickTextToTheDirectionOf`来实现点击操作。\n</thought>\n\n<code_block>\n# 移动到“Hide $0 bills”右边的icon\nMoveToIconToTheDirectionOf | Hide $0 bills | right\n\n# 点击 ${attribute_name} 右边的 12345\nClickTextToTheDirectionOf | ${attribute_name} | right | 12345\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表格中第一行的“编辑”，设置“数值要求”为多个值：开播时长、入会后7天内、大于、100，点击分润模式，预期页面存在文案：5:5开",
        "output": "<thought>\n本任务可以分为几个步骤：首先需要点击表格中第一行的“编辑”按钮，这可以使用关键字 `ClickTextOfRow`。然后需要在弹出的界面中设置“数值要求”字段为多个值（开播时长、入会后7天内、大于、100），这可以通过使用关键字 `SetField`。接下来，需要点击“分润模式”，可以用 `Click`关键字完成。最后，验证页面是否包含文案“5:5开”可使用 `CheckHasText`。整体思路比较清晰，主要需要注意顺序和触发的具体页面元素。\n</thought>\n\n<code_block>\n# 点击表格中第一行的“编辑”\nClickTextOfRow | 1 | 编辑\n\n# 设置“数值要求”为多个值\nSetField | 数值要求 | 开播时长 | 入会后7天内 | 大于 | 100\n\n# 点击“分润模式”\nClick | 分润模式\n\n# 校验页面存在文案“5:5开”\nCheckHasText | 5:5开\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到包含「大于等于」的元素并点击",
        "output": "<thought>\n要找到包含「大于等于」的元素并点击，我们可以使用FindByText关键字来定位该元素。因为我们只查找一个文本元素，所以可以使用默认参数idx=0。找到元素后，使用Click关键字进行点击。\n</thought>\n\n<code_block>\n# 查找文本包含「大于等于」的元素\n${elem}  FindByText | 大于等于\n\n# 点击找到的元素\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击驳回按钮，在‘驳回意见’字段输入‘驳回当前审核拆解指标’",
        "output": "<thought>\n需要点击驳回按钮，然后在驳回意见字段输入特定文本。首先使用Click关键字点击驳回按钮，然后使用SetField关键字将文本输入到驳回意见字段。\n</thought>\n\n<code_block>\n# 点击驳回按钮\nClick | 驳回\n\n# 在‘驳回意见’字段输入‘驳回当前审核拆解指标’\nSetField | 驳回意见 | 驳回当前审核拆解指标\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选${name}前面的勾选框，设置参数第一个请选择=首次发生 第二个请选择=函数 第三个请选择=具体时间点",
        "output": "<thought>\n我们需要完成以下任务：\n1. 勾选`${name}`前面的复选框。\n2. 设置第一个\"请选择\"选项为\"首次发生\"。\n3. 设置第二个\"请选择\"选项为\"函数\"。\n4. 设置第三个\"请选择\"选项为\"具体时间点\"。\n\n根据描述，勾选框的操作可以使用 `CheckBoxOn` 方法。设置下拉框可以使用 `SelectOptionForField` 方法来完成。\n</thought>\n\n<code_block>\n# 勾选 `${name}` 前面的复选框\nCheckBoxOn | ${name}\n\n# 设置第一个 \"请选择\" 为 \"首次发生\"\nSelectOptionForField | 请选择 | 首次发生 | idx=0\n\n# 设置第二个 \"请选择\" 为 \"函数\"\nSelectOptionForField | 请选择 | 函数 | idx=1\n\n# 设置第三个 \"请选择\" 为 \"具体时间点\"\nSelectOptionForField | 请选择 | 具体时间点 | idx=2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找 ‘姓名’ 附近的 ‘学号’",
        "output": "<thought>\n在这个场景中，我们需要查找“姓名”附近的“学号”。根据提供的关键字列表，我们可以使用`FindNearElem`关键字来完成这个任务。此关键字专用于查找某个基准元素附近的目标元素。因此，我们的解决方案是首先提供基准文本“姓名”，然后指定要查找的目标元素为“学号”。\n</thought>\n\n<code_block>\n# 查找‘姓名’附近的‘学号’\n${elem}  FindNearElem | 姓名 | 学号\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击最后一个 gender",
        "output": "<thought>\n要点击最后一个 \"gender\"，可以使用 `Click` 关键字并指定 `idx=-1` 来选择最后一个出现的 \"gender\" 文本。\n</thought>\n\n<code_block>\n# 点击最后一个 gender\nClick | gender | idx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 向class为main-fields的div元素中输入多个值：奶茶, 综合服务 > 日用品 > 健康保健, 自动化测试, 20, 1, 个",
        "output": "<thought>\n需要使用`FillArea`关键字向class为main-fields的div元素中输入多个值。可以通过jQuery选择器表示该元素，然后将所需的多个值依次填入。\n</thought>\n\n<code_block>\n# 向class为main-fields的div元素中输入多个值\nFillArea | div[class=main-fields] | 奶茶 | 综合服务 > 日用品 > 健康保健 | 自动化测试 | 20 | 1 | 个\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 在品牌简称处填写品牌简称为“品牌”",
        "output": "<thought>\n 根据提供的关键字，我们可以使用SetField来填写品牌简称。因为我们只需要填写一个字段，所以我们不需要关心idx，enter，base和near的值，将他们保持默认即可。品牌简称为“品牌”是需要输入的值。\n </thought>\n \n <code_block>\n # 在品牌简称处填写品牌简称为“品牌”\n SetField | 品牌简称 | 品牌\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击名称精准为'LIVE Anchor的span'元素",
        "output": "<thought>\n在这个场景中，我们需要点击一个文本为“LIVE Anchor”的span元素。由于文本需要精准匹配，我们可以使用Click关键字配合FindByText关键字来实现这一操作，确保不会点击到其他不相关的元素。我们使用FindByText定位到元素，然后使用Click进行点击。\n</thought>\n\n<code_block>\n# 查找名称精准为'LIVE Anchor'的span元素，然后进行点击\n${elem}  FindByText | LIVE Anchor | tag=span | strict=True\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面不存在：校验emr_离线任务复查",
        "output": "<thought>\n为了确认页面上不存在特定的文本“emr_离线任务复查”，我们可以使用`CheckNotHasText`关键字。这将检查指定的文本不在页面中。\n</thought>\n\n<code_block>\n# 校验页面不包含文本 emr_离线任务复查\nCheckNotHasText  emr_离线任务复查\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 收支类型 为 “支出类”，计价方式 为 “固定总价”， 向合同总额中输入多个值：0.01、CNY ",
        "output": "<thought>\n首先，需要设置“收支类型”为“支出类”，然后设置“计价方式”为“固定总价”，这两个字段可以通过 `BatchSetFields` 关键字批量设置。接下来，向“合同总额”中输入多个值“0.01”和“CNY”，可以使用 `SetField` 关键字完成。\n</thought>\n\n<code_block>\n# 批量设置收支类型和计价方式\nBatchSetFields  收支类型=支出类  计价方式=固定总价\n\n# 向合同总额中输入多个值：0.01、CNY\nSetField  合同总额  0.01  CNY\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "搜索请求url中包含/mweb/v1/aigc_draft/generate,且请求方式为 POST 的最后一个请求",
        "output": "<thought>\n在这个场景中，我们需要查找满足特定条件的HTTP请求。给定的关键字`Search Requests`可以用于搜索特定URL和请求方法的请求日志。我们需要使用提供的关键字来查找请求URL中包含`/mweb/v1/aigc_draft/generate`，且请求方式为`POST`的最后一个请求。可以直接使用默认的`mode=last`来获取最后一个满足条件的请求。\n</thought>\n\n<code_block>\n# 搜索请求 url 中包含 /mweb/v1/aigc_draft/generate, 且请求方式为 POST 的最后一个请求\n${resp_json}  Search Requests  /mweb/v1/aigc_draft/generate  POST  last\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送请求，GET，url是https://www.baidu.com, cookie是 ${cookie_dict}",
        "output": "<thought>\n根据问题描述，需要发送一个GET请求，并包含cookie信息。可以使用`UiSendRequest`关键字，其中请求方法为GET，url为\"https://www.baidu.com\"，请求头里包含cookie信息。\n</thought>\n\n<code_block>\n# 发送GET请求，url是https://www.baidu.com，cookie是${cookie_dict}\n${resp_json}  UiSendRequest | GET | https://www.baidu.com | ${None} | {\"Cookie\": ${cookie_dict}}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击提交最左边的按钮",
        "output": "<thought>\n此场景要求点击“提交”文本最左边的按钮。可以使用“ClickElemToTheDirectionOf”关键字，选择“提交”为基准元素，方向为“left”，选择器为“button”，指定第一个按钮。\n</thought>\n\n<code_block>\n# 点击提交左边的第一个按钮\nClickElemToTheDirectionOf | 提交 | left | button | idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "调用「校验热点分析数据」关键字，其中第一个参数分别设置为：「URL」、「DOMAIN」，第二个参数分别设置为：「按流量」、「按请求数」、「按状态码」，就是多次调用，每次使用不同参数",
        "output": "<thought>\n基于以上需求，我们需要创建一个循环来多次调用「校验热点分析数据」关键字，每次调用时，参数的组合都不同。在Robot Framework中，通常使用FOR循环来实现这种需求。我将创建两个列表，一个列表包含「URL」、「DOMAIN」，另一个列表包含 「按流量」、「按请求数」、「按状态码」。然后，我将使用这两个列表来生成所有可能的参数组合并调用关键字「校验热点分析数据」。\n</thought>\n\n<code_block>\n# 创建两个列表来存储所有可能的参数值\n@{first_param}  Create List  URL  DOMAIN\n@{second_param}  Create List  按流量  按请求数  按状态码\n\n# 对第一个参数列表进行遍历\nFOR  ${item1}  IN  @{first_param}\n    # 对第二个参数列表进行遍历\n    FOR  ${item2}  IN  @{second_param}\n        # 调用「校验热点分析数据」关键字，使用不同参数的组合\n        校验热点分析数据  ${item1}  ${item2}\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找class包含xxx的div",
        "output": "<thought>\n首先，我们需要通过class属性查找div元素。为了实现这个功能，我们可以使用FindElem这个关键字。关键字FindElem可以使用jquery选择器语法，所以我们可以构造一个匹配class包含xxx的div元素的jquery选择器。\n</thought>\n\n<code_block>\n# 查找class包含xxx的div元素\n${elem}  FindElem | div[class*=xxx]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到button class包含arco-switch-type-circle的第4个元素，然后判断他的aria-checked是否等于true，等于true 则点击确认 不等于true 就点击取消",
        "output": "<thought>\n 首先，我们需要使用FindElem关键字来找到class包含arco-switch-type-circle的第4个元素。然后，我们将使用Get Element Attribute关键字来获取该元素的aria-checked属性，并检查其是否等于true。最后，我们将使用IF/ELSE语句来根据aria-checked的值来点击确认或取消。\n </thought>\n \n <code_block>\n # 查找class包含arco-switch-type-circle的第4个元素\n ${elem} FindElem | button[class*=arco-switch-type-circle]:eq(3)\n \n # 获取元素的aria-checked属性值\n ${aria_checked} Get Element Attribute ${elem} aria-checked\n \n # 如果aria-checked等于true，则点击确认；否则，点击取消\n IF '${aria_checked}' == 'true'\n  Click | 确认\n ELSE\n  Click | 取消\n END\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将变量 x 设置为空格, 将字符串${text}中换行符替换为空格",
        "output": "<thought>\n首先，使用“Set Variable”关键字来设置变量x为空格。然后，使用RF中的Evaluate关键字调用python的replace方法将字符串${text}中的换行符替换为空格。\n</thought>\n\n<code_block>\n# 设置变量 x 为空格\n${x}  Set Variable  ${SPACE}\n\n# 使用python的replace方法，将${text}中的换行符替换为空格\n${text}  Evaluate  ${text}.replace('\\n', ' ')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在 “我的快捷入口” 下面的 “Finder全量” 设置为：线上",
        "output": "<thought>\n这个问题需要在“我的快捷入口” 下面的 “Finder全量” 设置为“线上”。因此，应该使用`SetField`关键字，利用`near`参数来定位“我的快捷入口”文本下的“Finder全量”字段，并设置其值。\n</thought>\n\n<code_block>\n# 在“我的快捷入口”下方设置“Finder全量”为“线上”\nSetField | Finder全量 | 线上 | near=我的快捷入口\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面出现 仅展示权限范围内的合同 ，点击弹窗中的 已签署合同 右边的查看详情，选择 Refund 并点击Ok",
        "output": "<thought>\n此场景需要通过等待文本出现，然后在弹窗中点击特定文本的“查看详情”按钮，以及选择一个选项并确认。一开始，需要等待页面出现“仅展示权限范围内的合同”。然后在弹窗中，需要找到“已签署合同”右侧的“查看详情”按钮进行点击，再选择Refund选项并点击Ok按钮，需要用到Click系列和SelectOption关键字。具体步骤如下：\n1. 使用`WaitText`关键字等待文本“仅展示权限范围内的合同”出现。\n2. 使用`ClickTextToTheDirectionOf`关键字，查找“已签署合同”右侧的“查看详情”并点击。\n3. 使用`SelectOption`关键字选择Refund。\n4. 使用`Click`关键字点击Ok。\n</thought>\n\n<code_block>\n# 等待出现文本“仅展示权限范围内的合同”\nWaitText | 仅展示权限范围内的合同\n\n# 点击弹窗中“已签署合同”右边的“查看详情”\nClickTextToTheDirectionOf | 已签署合同 | right | 查看详情 | base=POPUP\n\n# 选择Refund选项\nSelectOption | Refund\n\n# 点击Ok按钮\nClick | Ok\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取当前 截图 并校验 存在 “$42,928.51 USD”、“Post-tax amount(payment currency)”、“default: S57,422.76 USD 79.47%”",
        "output": "<thought>\n为了解决这个问题，需要获取当前屏幕截图中的文本，然后校验截图文本同时包含指定的多个文本。应该使用`GetPageScreenshotText`来获取截图中的文本，接着使用`Should Contain`来校验截图文本包含指定的每个文本。\n</thought>\n\n<code_block>\n# 获取屏幕截图中的文本\n${txt}  GetPageScreenshotText\n\n# 校验截图中包含 “$42,928.51 USD”\nShould Contain  ${txt}  $42,928.51 USD\n\n# 校验截图中包含 “Post-tax amount(payment currency)”\nShould Contain  ${txt}  Post-tax amount(payment currency)\n\n# 校验截图中包含 “default: S57,422.76 USD 79.47%”\nShould Contain  ${txt}  default: S57,422.76 USD 79.47%\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验存在已撤回合同编号： CT20241118N37574，基准元素：包括detailDrawer的class",
        "output": "<thought>\n要校验页面中存在特定合同编号，并且基准元素选择器定义为class包含\"detailDrawer\"的元素，可以使用CheckHasText关键字。首先，需要生成一个包含此类元素的选择器，然后利用CheckHasText进行校验。\n</thought>\n\n<code_block>\n# 定义选择器，class包含'detailDrawer'的元素\n${selector}    Set Variable    [class*=detailDrawer]\n\n# 校验存在文本'CT20241118N37574'的合同编号\nCheckHasText   CT20241118N37574    base=${selector}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格第一行第一列的内容为 yyyy-mm-dd hh:mm:ss 格式。提示：先获取单元格内容，然后进行正则匹配",
        "output": "<thought>\n首先获取表格第一行第一列的内容，然后使用正则表达式进行匹配校验。可以使用GetCellValue关键字获取单元格内容，然后使用Should Match Regexp关键字进行格式校验。\n</thought>\n\n<code_block>\n# 获取表格第一行第一列的值\n${cell_value}  GetCellValue | 1 | 1\n\n# 校验单元格内容是否符合 yyyy-mm-dd hh:mm:ss 格式\nShould Match Regexp  ${cell_value}  ^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}$\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 等待页面不出现“中止回答",
        "output": "<thought>\n 我们需要等待页面上某个文本消失。根据可用的关键字，我们可以使用WaitTextDisappear关键字来等待文本“中止回答”消失。\n </thought>\n \n <code_block>\n # 等待文本“中止回答”消失\n WaitTextDisappear | 中止回答\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置实时调用超时时长，近线调用超时时长，分别为：100，200",
        "output": "<thought>\n在这个任务中，我们需要设置两个字段：“实时调用超时时长”和“近线调用超时时长”，并将其值分别设为100和200。可以使用`BatchSetFields`关键字来批量设置它们。\n</thought>\n\n<code_block>\n# 设置实时调用超时时长为100，近线调用超时时长为200\nBatchSetFields  实时调用超时时长=100  近线调用超时时长=200\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中 合同类型 右边的 按钮",
        "output": "<thought>\n为了完成这个任务，我们需要在弹窗中找到“合同类型”文本，并点击它右边的按钮。这需要用到`ClickElemToTheDirectionOf`关键字，以“合同类型”为基准元素（`the_base`），并设置方向为`right`。目标元素是一个按钮，通常用按钮的选择器`button`来指定。如果有多个按钮，我们需要根据需求选择特定的按钮，但在这里没有指定具体的按钮索引，因此我们可以利用默认值（第一个按钮）。基准元素在弹窗中，故`base`应设置为`POPUP`。\n</thought>\n\n<code_block>\n# 点击弹窗中“合同类型”右边的按钮\nClickElemToTheDirectionOf | 合同类型 | right | button | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成时间戳",
        "output": "<thought>\n要生成数字秒级时间戳，可以考虑以下几种方法：\n1. 使用RobotFramework的Get Current Date关键字获取当前时间，然后转换为时间戳\n2. 直接使用Python的time.time()函数获取时间戳，但需要转换为整数秒级\n3. 使用Evaluate执行Python代码是最简洁的方式\n\n最佳选择是使用Evaluate执行Python的int(time.time())，因为：\n- 直接返回秒级时间戳\n- 代码简洁\n- 不需要额外的格式转换\n</thought>\n\n<code_block>\n# 获取当前秒级时间戳\n${timestamp}    Evaluate    int(time.time())    time\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取26小时3分钟5秒前的时间，格式为：年-月-日 时:分:秒",
        "output": "<thought>\n计算26小时3分钟5秒前的时间，我们可以使用`Get Current Date`关键字，并通过`increment`参数传递一个负值来调整时间。格式化为“年-月-日 时:分:秒”。\n</thought>\n\n<code_block>\n# 获取26小时3分钟5秒前的时间\n${past_time}    Get Current Date    result_format=%Y-%m-%d %H:%M:%S    increment=-26h3m5s\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为 “飞书授权登录” 的关键字，操作步骤如下：\n 1. 打开浏览器，使用 LARK_SESSION 变量登录飞书\n 2. 访问主页 MAIN_PAGE\n 3. 如果页面出现 “授权” 就点击它\n 4. 等待 3s 后继续查看，如果页面还有 ‘授权’，就继续点击\n 5. 再次访问 MAIN_PAGE\n 6. 预期页面 URL 不在含有 feishu",
        "output": "<thought>\n 根据任务要求，通过以下步骤实现自动化测试：\n 1. 使用 `OpenBrowser` 和 `LoginFeiShu` 登录飞书。\n 2. 使用 `OpenUrl` 访问主页。\n 3. 使用 `IsAnyTextExisting` 判断页面是否包含“授权”，如果存在则点击。\n 4. 使用 `Sleep` 等待3秒，再次检查“授权”文本并点击。\n 5. 再次访问主页。\n 6. 使用 `IsURLContains` 判断当前 URL 是否不包含“feishu”。\n </thought>\n \n <code_block>\n 飞书授权登录\n  # Step 1: 打开浏览器并登录飞书\n  OpenBrowser\n  LoginFeiShu | session=${LARK_SESSION}\n \n  # Step 2: 访问主页\n  OpenUrl | ${MAIN_PAGE}\n \n  # Step 3: 如果页面出现“授权”就点击\n  ${exist}  IsAnyTextExisting | 授权\n  IF  ${exist}\n    Click | 授权\n  END\n \n  # Step 4: 等待3秒后再次检查“授权”并点击\n  Sleep  3s\n  ${exist}  IsAnyTextExisting | 授权\n  IF  ${exist}\n    Click | 授权\n  END\n \n  # Step 5: 再次访问主页\n  OpenUrl | ${MAIN_PAGE}\n \n  # Step 6: 校验URL不包含“feishu”\n  ${status}  IsURLContains | feishu\n  Should Be False | ${status}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开url https://test-union.bytedance.net/open/faker，设置变量名为${rule_name}，赋值为随机的10位字符串，并把此变量输入到 “请搜索规则” 中",
        "output": "<thought>\n首先，我需要使用OpenUrl关键字打开指定的URL。接下来，通过GenerateRandom关键字生成一个随机的10位字符串，并将其赋值给变量${rule_name}。最后，使用SetField关键字将这个变量输入到名称为“请搜索规则”的字段中。\n</thought>\n\n<code_block>\n# 打开目标网页\nOpenUrl | https://test-union.bytedance.net/open/faker\n\n# 生成随机的10位字符串，并赋值给变量${rule_name}\n${rule_name}  GenerateRandom  | 10 | [LETTERS][NUMBERS]\n\n# 将${rule_name}输入到“请搜索规则”字段中\nSetField | 请搜索规则 | ${rule_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找value为key的input，点击该元素",
        "output": "<thought>\n需要查找一个input元素，其属性value为key，然后点击该元素。可以使用FindElem关键字定位该元素，然后使用ClickElem关键字进行点击。\n</thought>\n\n<code_block>\n# 查找value为key的input元素\n${elem}  FindElem | input[value='key']\n\n# 点击该元素\nClickElem | ${elem}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 向 ‘自定义字段配置’ 表格的第一行中输入多个值：key1, value1",
        "output": "<thought>\n 为了向表格的第一行输入多个值，可以使用`FillRow`关键字。首先确定表格的基准元素`base`是否需要设置，如果不需要，可以直接使用默认值。然后使用`FillRow`关键字，指定第一行，并输入`key1`和`value1`作为参数。\n </thought>\n \n <code_block>\n # 向‘自定义字段配置’表格的第一行输入key1和value1\n FillRow | 1 | key1 | value1 | tbl=自定义字段配置\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " #选择合同信息为“不需要合同” 无合同原因选择“时间紧急”，填写无合同说明为“前端UI测试demo”",
        "output": "<thought>\n 首先，选择合同信息为“不需要合同”，可以使用`SetField`关键字。然后，无合同原因选择“时间紧急”，同样使用`SetField`关键字。最后，填写无合同说明为“前端UI测试demo”，仍然可以使用`SetField`，因为 SetField 关键字的作用就是填写页面字段，它能自动识别字段的具体控件类型并完成填写。\n </thought>\n \n <code_block>\n # 选择合同信息为“不需要合同”\n SetField | 合同信息 | 不需要合同\n \n # 选择无合同原因为“时间紧急”\n SetField | 无合同原因 | 时间紧急\n \n # 填写无合同说明为“前端UI测试demo”\n SetField | 无合同说明 | 前端UI测试demo\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "申请理由 填写 UI自动化申请",
        "output": "<thought>\n这是一个简单的文本字段填充任务，可以使用SetField关键字来完成。在输入框中键入“UI自动化申请”作为“申请理由”。\n</thought>\n\n<code_block>\n# 在\"申请理由\"字段中输入 \"UI自动化申请\"\nSetField | 申请理由 | UI自动化申请\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " # 2. 在当前页面表格中，找到一个实例名称为 刘嘉诚-10-强密码 的第一个实例，选中它",
        "output": "<thought>\n 我们需要在表格中找到一个实例名称为\"刘嘉诚-10-强密码\"的第一个实例，并选中它。因此我们可以使用\"SelectTableRow\"关键字，把\"刘嘉诚-10-强密码\"作为参数传入，即可选中该实例。注意，关键字\"SelectTableRow\"的作用是选中表格行，参数是行名或ID。\n </thought>\n \n <code_block>\n # 选中\"刘嘉诚-10-强密码\"这一行\n SelectTableRow | 刘嘉诚-10-强密码\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到新建上，并点击新建任务",
        "output": "<thought>\n此场景要求鼠标先移动到“新建”上，然后点击“新建任务”。可以使用“MoTo”关键字移动到“新建”文本上，再使用“Click”关键字点击“新建任务”。\n</thought>\n\n<code_block>\n# 移动到 新建 文本\nMoTo | 新建\n\n# 点击 新建任务\nClick | 新建任务\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击生图模型下方的‘图片 2.1’按钮",
        "output": "<thought>\n根据场景描述，需要点击“生图模型”下方的“图片 2.1”按钮。可以使用ClickTextToTheDirectionOf关键字，其中基准元素是“生图模型”，方向是bottom，目标文本是“图片 2.1”。\n</thought>\n\n<code_block>\n# 点击“生图模型”下方的“图片 2.1”按钮\nClickTextToTheDirectionOf | 生图模型 | bottom | 图片 2.1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "请输入签字的个数大于0，则刷新页面，点击提交",
        "output": "<thought>\n解决该问题需要首先通过获取“请输入签字”文本的个数来判断其是否大于0。使用关键字GetElemCount可以实现该步骤，获取到个数后，通过RF的Built-in IF/ELSE结构进行判断：如果个数大于0，则执行刷新页面和点击提交操作。\n</thought>\n\n<code_block>\n# 获取“请输入签字”文本的数量\n${count}  GetElemCount | :contains(请输入签字)\n\n# 如果数量大于0，则刷新页面并点击提交\nIF    ${count} > 0\n    RefreshPage\n    Click | 提交\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "企业群类型选择飞书",
        "output": "<thought>\n要选择企业群类型为“飞书”，可以使用`SelectOptionForField`关键字，并指定相应的字段名称和选项“飞书”。\n</thought>\n\n<code_block>\n# 选择企业群类型为飞书\nSelectOptionForField | 企业群类型 | 飞书\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向 维度 下方的搜索框里输入 任务id",
        "output": "<thought>\n我们需要在“维度”下方找到一个搜索框，并在该搜索框中输入\"任务id\"。为此，我们可以使用“FindElemToTheDirectionOf”关键字来查找在“维度”下方的搜索框元素，然后使用“FillArea”关键字来输入文本“任务id”。\n</thought>\n\n<code_block>\n# 查找维度下方的搜索框\n${search_input}  FindElemToTheDirectionOf | 维度 | bottom | input\n\n# 在搜索框中输入任务id\nFillArea | ${search_input} | 任务id\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "找到 id 是 @life-partner/platform-reach/StudyCenter 的元素\n找到 class 含有 lp-study-center-page 的元素",
        "output": "<thought>\n首先，我们需要找到两个元素。第一个是通过ID查找的元素，第二个是通过class包含特定值查找的元素。可以直接使用`FindElem`关键字两次分别查找这两个元素。\n</thought>\n\n<code_block>\n# 查找 id 是 @life-partner/platform-reach/StudyCenter 的元素\n${elem1}  FindElem  |  [id=\"@life-partner/platform-reach/StudyCenter\"]\n\n# 查找 class 含有 lp-study-center-page 的元素\n${elem2}  FindElem  |  [class*=\"lp-study-center-page\"]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果{tag_name}等于Hive自定义规则，则点击${val}右边的查看详情，否则调用 审批节点审批 关键字，最后检查页面包含${val}",
        "output": "<thought>\n我们需要根据变量{tag_name}的值进行条件判断。如果它等于\"Hive自定义规则\"，则点击${val}右边的\"查看详情\"。否则，执行\"审批节点审批\"关键字。最后，确保页面包含${val}。使用RF内置的IF结构来处理条件逻辑和相应的CheckHasText来验证页面内容。\n</thought>\n\n<code_block>\n# 判断{tag_name}是否等于\"Hive自定义规则\"\nIF  \"${tag_name}\" == \"Hive自定义规则\"\n    # 点击 ${val} 右边的 查看详情\n    ClickTextToTheDirectionOf | ${val} | right | 查看详情\nELSE\n    # 调用 审批节点审批 关键字\n    审批节点审批\nEND\n\n# 检查页面是否包含 ${val}\nCheckHasText | ${val}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ${elem} 左上角的name为a的元素",
        "output": "<thought>\n我们需要找到一个给定元素(${elem})左上方的元素，并且该元素的name为\"a\"。可以使用ClickElemToTheDirectionOf关键字来实现。此关键字允许我们指定一个基准元素(base)和一个方向(direction)，以及选择器(selector)。在本例中，方向是topLeft，选择器是[name=a]。\n</thought>\n\n<code_block>\n# 点击 ${elem} 左上角的 name 为 a 的元素\nClickElemToTheDirectionOf | ${elem} | topLeft | [name=a]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为‘编辑指定新增源站响应头设置’的关键字，接受参数：index，配置类型，头部名称，取值方式，头部取值，参数默认值均为 ${EMPTY}，逻辑如下：\n# 1. 点击 id 为 OriginResponseHeader 元素中 第 index 个 编辑 按钮\n# 2. 调用 填充新增HTTP请求头设置弹窗 关键字，设置参数：配置类型，头部名称，取值方式，头部取值\n# 3. 点击弹窗中的确定",
        "output": "<thought>\n首先，根据步骤1，需要点击id为OriginResponseHeader的元素中第index个编辑按钮。我们可以使用ClickTextToTheDirectionOf关键字，指定基准元素为[id=OriginResponseHeader]，目标文本为\"编辑\"，使用idx参数指定第index个。\n\n接下来，步骤2提到调用关键字填充新增HTTP请求头设置弹窗，并传递参数：配置类型，头部名称，取值方式，头部取值。我们可以直接调用该自定义关键字，并传入这些参数。\n\n最后，步骤3要求点击弹窗中的确定按钮。我们可以使用Click关键字，并指定base为POPUP，来点击弹窗内的确定按钮。\n</thought>\n\n<code_block>\n*** Keywords ***\n编辑指定新增源站响应头设置\n    [Arguments]  ${index}  ${配置类型}=${EMPTY}  ${头部名称}=${EMPTY}  ${取值方式}=${EMPTY}  ${头部取值}=${EMPTY}\n\n    # 点击 id 为 OriginResponseHeader 元素中 第 index 个 编辑 按钮\n    ClickTextToTheDirectionOf | [id=OriginResponseHeader] | bottom | 编辑 | idx=${index-1}\n    \n    # 调用 填充新增HTTP请求头设置弹窗 关键字，设置参数\n    填充新增HTTP请求头设置弹窗  ${配置类型}  ${头部名称}  ${取值方式}  ${头部取值}\n    \n    # 点击弹窗中的确定\n    Click | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个名为‘新增下载限速规则’的关键字，接受参数：状态，限速时段，规则类型，规则内容，放行阈值，放行阈值单位，限速设置，限速设置单位，参数默认值均为 EMPTY，逻辑如下：\n# 1. 设置 下载限速 的状态为：状态\n# 2. 如果 状态 为：开启，则点击 下载限速 下面的：新增规则\n# 2.1 将弹窗中的 限速时段 设置为：限速时段\n# 2.2 将弹窗中的 规则类型 设置为：规则类型\n# 2.3 将弹窗中的 放行阈值 设置为：放行阈值\n# 2.4 将弹窗中的 限速设置 设置为：限速设置\n# 2.5 如果 规则类型 不为：全部文件，则将弹窗中的 规则内容 设置为：规则内容\n# 2.6 点击弹窗中的 确定",
        "output": "<thought>\n需要根据逻辑使用`SetField`设置“下载限速”的状态，然后根据`IF`条件判断状态是否为“开启”。如果“开启”，需要点击“新增规则”并在弹窗中设置各种参数。使用`BatchSetFields`批量设置参数，并在特定条件下设置“规则内容”。最后点击“确定”。\n</thought>\n\n<code_block>\n*** Keywords ***\n新增下载限速规则\n    [Arguments]  ${状态}=${EMPTY}  ${限速时段}=${EMPTY}  ${规则类型}=${EMPTY}  ${规则内容}=${EMPTY}  ${放行阈值}=${EMPTY}  ${放行阈值单位}=${EMPTY}  ${限速设置}=${EMPTY}  ${限速设置单位}=${EMPTY}\n    \n    # 设置下载限速状态\n    SetField  下载限速  ${状态}\n    \n    # 检查状态是否为开启\n    IF  \"${状态}\" == \"开启\"\n        # 点击新增规则按钮\n        ClickTextToTheDirectionOf  下载限速  bottom  新增规则\n        \n        # 在弹窗中批量设置限速时段、规则类型、放行阈值和限速设置\n        BatchSetFields  限速时段=${限速时段}  规则类型=${规则类型}  放行阈值=${放行阈值}  限速设置=${限速设置}  base=POPUP\n        \n        # 如果规则类型不为全部文件，则设置规则内容\n        IF  \"${规则类型}\" != \"全部文件\"\n            SetField  规则内容  ${规则内容}  base=POPUP\n        END\n        \n        # 点击弹窗中的确定\n        Click  确定  base=POPUP\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 向 https://ab.com 发送 post 请求, 请求体: {\"name\": \"a\"}, 请求头: {\"header1\": \"val1\"}",
        "output": "<thought>\n根据要求，需要向指定URL发送POST请求，并包含请求体和请求头。可以直接使用提供的关键字UiSendRequest来实现。\n</thought>\n\n<code_block>\n# 发送POST请求到https://ab.com\n${resp_json}  UiSendRequest | POST | https://ab.com | {\"name\": \"a\"} | {\"header1\": \"val1\"}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取元素 ${elem} 的文案，校验其中包含：xxx, yyy, zzz",
        "output": "<thought>\n首先，我们需要获取元素 ${elem} 的文本内容，可以使用 GetElemText 关键字。然后，使用 Should Contain 关键字检查文本是否包含 xxx, yyy, zzz。\n</thought>\n\n<code_block>\n# 获取元素 ${elem} 的文本内容\n${val}  GetElemText  ${elem}\n\n# 校验文本中包含 xxx\nShould Contain  ${val}  xxx\n\n# 校验文本中包含 yyy\nShould Contain  ${val}  yyy\n\n# 校验文本中包含 zzz\nShould Contain  ${val}  zzz\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 解决方案 设置为 UI自动化测试解决方案，将 技术目录 设置为 IT产品 > ITAM > ITAM",
        "output": "<thought>\n本次任务需要设置两个页面字段，“解决方案”和“技术目录”。可以使用`SetField`关键字来分别设置这两个字段。对于“技术目录”字段，值为多级分类， 需用`>`分隔来设置。\n</thought>\n\n<code_block>\n# 将 解决方案 设置为 UI自动化测试解决方案\nSetField | 解决方案 | UI自动化测试解决方案\n\n# 将 技术目录 设置为 IT产品 > ITAM > ITAM\nSetField | 技术目录 | IT产品 > ITAM > ITAM\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ui_访问带宽 后面 更多图标",
        "output": "<thought>\n在这个场景中，我们需要点击“ui_访问带宽”文本右边的“更多”图标。可以使用`ClickIconToTheDirectionOf`关键字，基准元素为“ui_访问带宽”，方向为右边，目标是“更多”图标。\n</thought>\n\n<code_block>\n# 点击“ui_访问带宽”右边的更多icon\nClickIconToTheDirectionOf | ui_访问带宽 | right | more\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标移动到“本月新增申诉通过解冻金额”右边的黑色问号图标上，会展示以下文案：\"公会申诉通过后，从历史冻结金额中解冻的金额，将通过本月合并结算\"",
        "output": "<thought>\n在这个场景中，我们需要将鼠标移动到“本月新增申诉通过解冻金额”文本右边的黑色问号icon上。我们可以使用`MoveToIconToTheDirectionOf`关键字来实现这个操作。这个关键字可以让我们指定一个基准元素（在这里是“本月新增申诉通过解冻金额”）以及icon的方向（在这里是right）。然后我们用`CheckHasText`来验证目标文本是否出现。\n</thought>\n\n<code_block>\n# 将鼠标移动到“本月新增申诉通过解冻金额”右侧的黑色问号icon上\nMoveToIconToTheDirectionOf | 本月新增申诉通过解冻金额 | right | black_question_mark\n\n# 校验期望的文案出现\nCheckHasText | 公会申诉通过后，从历史冻结金额中解冻的金额，将通过本月合并结算\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 操作下方 修改",
        "output": "<thought>\n根据描述，需要点击“操作”下方的“修改”按钮。可以使用`ClickTextToTheDirectionOf`关键字，指定“操作”为基准元素，方向为`bottom`，目标文本为“修改”。\n</thought>\n\n<code_block>\n# 点击“操作”下方的“修改”\nClickTextToTheDirectionOf | 操作 | bottom | 修改\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 切换到之前的窗口",
        "output": "<thought>\n 解决问题思路：通过使用关键字\"ToPrevWindow\"来实现切换到之前的窗口。\n </thought>\n \n <code_block>\n # 切换到之前的窗口\n ToPrevWindow\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹框里的确定",
        "output": "<thought>\n为了点击弹框里的确定按钮，我们可以使用基于文本的点击关键字。在这个场景中，使用`Click`关键字并指定`base=POPUP`以确保点击操作定位到弹框内的确认按钮。\n</thought>\n\n<code_block>\n# 点击弹框里的确定按钮\nClick | 确定 | base=POPUP\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面不包含 name",
        "output": "<thought>\n需要校验页面不包含特定的文本“name”。可以使用关键字CheckNotHasText来实现。\n</thought>\n\n<code_block>\n# 校验页面不包含name\nCheckNotHasText | name\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "进入新开的页面",
        "output": "<thought>\n要解决切换到新打开窗口的问题，我需要分析可用的关键字。`ToNewWindow`正好就是专门用于切换到新窗口的关键字。\n</thought>\n\n<code_block>\n# 切换到新打开的窗口\nToNewWindow\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将剪切板内容粘贴到 input placeholder包含 “请粘贴” 的元素",
        "output": "<thought>\n首先，我需要获取剪切板的内容，并将其粘贴到指定的输入元素中。使用`FindElem`关键字可以通过jQuery选择器查找到具有特定占位符属性的输入元素。然后，使用`Paste`关键字将获取的剪切板内容粘贴到该元素中。\n</thought>\n\n<code_block>\n# 获取剪切板内容\n${clipboard_content}  GetCopied\n\n# 查找input元素，placeholder属性包含“请粘贴”\n${input_elem}  FindElem | input[placeholder*=\"请粘贴\"]\n\n# 将剪切板内容粘贴到找到的input元素中\nPaste | ${input_elem} | ${clipboard_content}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "跳过不执行这条用例",
        "output": "<thought>\n根据需求，用例需要被跳过。Robot Framework提供了“Skip”关键字用于跳过测试步骤。因此，直接使用“Skip”关键字即可实现。\n</thought>\n\n<code_block>\n# 跳过测试用例\nSkip  \"跳过后续步骤\"\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：筛选内容 的关键字，接受 text，val 参数，val的默认值为空值，操作逻辑是，往输入text里面输入val值，然后点击查询，等待页面加载完成",
        "output": "<thought>\n在这个场景中，我们需要实现一个关键字：筛选内容。首先，我们需要在给定的文本输入框中输入值，然后点击查询按钮，最后等待页面加载完成。可以使用SetField关键字来输入值，Click关键字来点击查询按钮，以及WaitLoading关键字来等待页面加载。\n</thought>\n\n<code_block>\n*** Keywords ***\n筛选内容\n    [Arguments]  ${text}  ${val}=''\n    # 在给定的文本输入框中输入值\n    SetField  ${text}  ${val}\n    \n    # 点击查询按钮\n    Click  查询\n    \n    # 等待页面加载完成\n    WaitLoading\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘选择转置字段’ 为 gender, 然后点击 ‘选择转置字段’, ‘转置字段属性名’ 为 aa, ‘转置字段属性值’ 为 bb",
        "output": "<thought>\n我们需要使用`BatchSetFields`关键字来批量设置各个字段的值。首先设置‘选择转置字段’为gender，然后点击‘选择转置字段’。接着设置‘转置字段属性名’为aa，‘转置字段属性值’为bb。\n</thought>\n\n<code_block>\n# 批量设置字段值\nBatchSetFields  选择转置字段=gender\n\n# 点击选择转置字段\nClick | 选择转置字段\n\n# 批量设置字段值\nBatchSetFields  转置字段属性名=aa  转置字段属性值=bb\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "等待页面加载完成\n点击浮窗中的 模拟流程 按钮\n将收款方式设置为 区域账户收款\n点击 ${ceo_strategic_apply} 后面的 编辑",
        "output": "<thought>\n为了实现场景要求，我们首先需要等待页面加载完成，可以使用 `WaitLoading` 关键字。接着需要在浮窗中点击“模拟流程”按钮，使用 `Click` 关键字并在 `base` 参数中指定 `POPUP` 来表示浮窗。然后，我们需要将收款方式设置为“区域账户收款”，应用 `SetField` 关键字。最后，点击 `${ceo_strategic_apply}` 右边的“编辑”按钮。这可以通过 `ClickTextToTheDirectionOf` 关键字实现。\n</thought>\n\n<code_block>\n# 等待页面加载完成\nWaitLoading\n\n# 点击浮窗中的模拟流程按钮\nClick | 模拟流程 | base=POPUP\n\n# 设置收款方式为区域账户收款\nSetField | 收款方式 | 区域账户收款\n\n# 点击 ${ceo_strategic_apply} 右边的 编辑\nClickTextToTheDirectionOf | ${ceo_strategic_apply} | right | 编辑\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘添加筛选条件’，然后点击 ‘主私网IP地址’",
        "output": "<thought>\n根据提示，可以使用 `ClickTextOneByOne` 关键字。首先点击 ‘添加筛选条件’，然后点击 ‘主私网IP地址’。\n</thought>\n\n<code_block>\n# 依次点击添加筛选条件和主私网IP地址\nClickTextOneByOne | 添加筛选条件 | 主私网IP地址\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 弹窗中 Custom column，校验存在 2个 “Amount after discount” ",
        "output": "<thought>\n为了完成此任务，我们需要在弹窗中执行特定操作。首先，我们需要点击弹窗中的文本 \"Custom column\"。接着，我们需要检查弹窗中是否存在两个 \"Amount after discount\"。这可以通过获取包含指定文本的元素数量并进行校验来实现。首先使用`Click`关键字进行点击，然后使用`GetElemCount`结合适当的选择器来获取元素的数量，最后用RF内置的`Should Be Equal As Numbers`进行校验。\n</thought>\n\n<code_block>\n# 点击弹窗中 Custom column\nClick | Custom column | base=POPUP\n\n# 获取弹窗中 \"Amount after discount\" 的元素个数\n${cnt}  GetElemCount | :contains(Amount after discount) | base=POPUP\n\n# 校验个数是否等于2\nShould Be Equal As Numbers  ${cnt}  2\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "页面滑到最顶部",
        "output": "<thought>\n为了让页面滑到最顶部，我们可以使用Execute Javascript关键字来执行JavaScript代码实现滚动效果。JavaScript中常用的`window.scrollTo(0, 0)`可以将页面滚动到顶部。因此，我们可以在RF中使用此JS代码完成任务。\n</thought>\n\n<code_block>\n# 滑动页面到最顶部\nExecute Javascript | window.scrollTo(0, 0)\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击最后一个launch_test_hdl",
        "output": "<thought>\n要点击最后一个包含文本“launch_test_hdl”的元素，我们可以使用Click关键字，并通过设置idx参数为-1来选择最后一个匹配的元素。\n</thought>\n\n<code_block>\n# 点击最后一个包含文本“launch_test_hdl”的元素\nClick | launch_test_hdl | idx=-1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击屏幕下方的 id=x的元素",
        "output": "<thought>\n为了点击屏幕下方的 `id=x` 的元素，我们可以使用 `ClickElemToTheDirectionOf` 关键字。该关键字允许我们指定一个基准位置（例如 `SCREEN_CENTER`），并指明方向（这里是 `bottom`），然后通过选择器 `id=x` 指定要点击的元素。\n</thought>\n\n<code_block>\n# 点击屏幕下方的 id=x的元素\nClickElemToTheDirectionOf | SCREEN_CENTER | bottom | [id=x]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "鼠标点击我确定",
        "output": "<thought>\n解决问题思路：\n对于这个场景，我们需要使用MClick关键字来完成任务。这个关键字会模拟鼠标点击操作，参数是jquery选择器或文本，代表想要点击的元素或文本。在这个场景中，我们要点击的元素的文本是\"我确定\"\n</thought>\n\n<code_block>\n# 鼠标点击我确定\nMClick | 我确定\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 设置请输入消息为：你好，你是什么模型？然后回车",
        "output": "<thought>\n 需要在当前光标位置输入消息“你好，你是什么模型？”并在输入完成后发送回车。可以使用SendText关键字来实现此功能，通过设置参数enter=True来发送回车。\n </thought>\n \n <code_block>\n # 在光标位置输入“你好，你是什么模型？”并回车\n SendText | 你好，你是什么模型？ | enter=True\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击空白地方",
        "output": "<thought>\n 这个场景很简单，只需要调用ClickWhiteArea关键字即可实现点击空白地方的操作。\n </thought>\n \n <code_block>\n # 点击空白地方\n ClickWhiteArea\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击导航栏中“通用分析”",
        "output": "<thought>\n在导航栏中找到文本为“通用分析”的元素并进行点击。可以直接使用Click关键字寻找“通用分析”文本。\n</thought>\n\n<code_block>\n# 点击导航栏中的“通用分析”\nClick | 通用分析\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在页面选择你的公司这个选择器中，选择第一个\"北京巨量引擎网络技术有限公司\"",
        "output": "<thought>\n想要在页面中选择“北京巨量引擎网络技术有限公司”，首先需要确认该元素是在一个选择器中。这种情况下，使用`SelectOption`关键字来选择特定选项。如果是一个特定字段内的选择器，可以使用`SelectOptionForField`。我们假设“你的公司”是一个页面字段，因此可以使用`SelectOptionForField`关键字直接选择该选项。需要确保选择器的选项文本与目标一致。\n</thought>\n\n<code_block>\n# 在“你的公司”选择器中选择\"北京巨量引擎网络技术有限公司\"\nSelectOptionForField | 你的公司 | 北京巨量引擎网络技术有限公司\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击数据测试附近的data_source_va",
        "output": "<thought>\n首先需要点击一个文本“data_source_va”，该文本位于“数据测试”附近。因此可以使用Click关键字，并利用near参数指定“数据测试”作为基准文本。\n</thought>\n\n<code_block>\n# 点击数据测试附近的data_source_va\nClick | data_source_va | near=数据测试\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "在最后一个textarea 输入 “1”",
        "output": "<thought>\n在这个场景中，我们需要在页面的最后一个textarea中输入“1”。可以利用jQuery选择器来定位最后一个textarea，然后使用FillArea关键字来输入。\n</thought>\n\n<code_block>\n# 在最后一个textarea中输入“1”\nFillArea | textarea:eq(-1) | 1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验 ‘国学美风’ 的左边有 ‘视频’",
        "output": "<thought>\n解决问题思路: 应该使用CheckHasTextToTheDirectionOf关键字，以‘国学美风’为基准元素，检查其左方是否存在文本‘视频’。\n</thought>\n\n<code_block>\n# 校验 ‘国学美风’ 左边有 ‘视频’\nCheckHasTextToTheDirectionOf | 国学美风 | left | 视频\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击命中详情右侧的查看，点击弹窗的删除icon，等待页面加载出文案“删除成功”",
        "output": "<thought>\n首先，根据给定的描述，需要实现以下几个步骤：\n1. 点击“命中详情”右侧的“查看”，可以使用`ClickTextToTheDirectionOf`关键字。\n2. 点击弹窗中的“删除”icon，使用`ClickIconToTheDirectionOf`关键字。\n3. 等待页面加载出文案“删除成功”，可以使用`WaitText`关键字。\n</thought>\n\n<code_block>\n# 点击命中详情右侧的查看\nClickTextToTheDirectionOf | 命中详情 | right | 查看\n\n# 点击弹窗的删除icon\nClickIconToTheDirectionOf | POPUP | topRight | delete\n\n# 等待页面加载出文案“删除成功”\nWaitText | 删除成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击投放时间日期选择，点击 ‘3天后’，点击保存",
        "output": "<thought>\n首先，我们需要点击“投放时间”选择日期，然后点击“三天后”这个选项。接着，点击“保存”按钮。可以假设“3天后”和“保存”是页面上的文本，因此可以使用Click关键字。\n</thought>\n\n<code_block>\n# 点击‘投放时间’以选择日期\nClick | 投放时间\n\n# 点击‘3天后’选项\nClick | 3天后\n\n# 点击‘保存’按钮\nClick | 保存\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "使用 ocr 的方式获取资源类型的值",
        "output": "<thought>\n在这个场景中，我们需要获取资源类型字段的值，并且明确要求使用OCR，即通过光学字符识别方式来获取字段关联的页面控件的值。通过查看提供的关键字列表，可以使用GetFieldVal关键字来实现这个功能，其中use_ocr参数设置为True。没有其他复杂的操作，直接调用关键字即可完成任务。\n</thought>\n\n<code_block>\n# 使用OCR方式获取资源类型字段的值\n${val}  GetFieldVal | 资源类型 | use_ocr=True\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击表单分组，点击新会话，向 localStorage 中添加 key, value，刷新页面，从 localStorage 中获取名为key的项对应的值，最后校验数据权限列表（表格）字段参数（列）是toutiao_zebra_channel:channel_type",
        "output": "<thought>\n首先需要点击“表单分组”，接着点击“新会话”。然后，使用`LocalStorageSetItem`关键字向localStorage中添加key和value。刷新页面后，再使用`LocalStorageGetItem`关键字获取名为key的项的值。最后，校验数据权限列表字段参数的值为“toutiao_zebra_channel:channel_type”。\n</thought>\n\n<code_block>\n# 点击表单分组\nClick | 表单分组\n\n# 点击新会话\nClick | 新会话\n\n# 向 localStorage 中添加 key, value\nLocalStorageSetItem | key | value\n\n# 刷新页面\nRefreshPage\n\n# 从 localStorage 中获取名为key的项对应的值\n${val}  LocalStorageGetItem | key\n\n# 校验数据权限列表字段参数（列）是toutiao_zebra_channel:channel_type\nCheckColHas | 参数 | toutiao_zebra_channel:channel_type | tbl=数据权限列表\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class=sub-menu-item-text-zoom-udV56Z 的 服务工单 的 span，等待3秒，检验页面存在 123 文案，同时检验 处理中 文案出现",
        "output": "<thought>\n首先，我们需要点击指定的元素，这可以通过 `ClickElem` 关键字来实现。接下来，我们需要等待3秒钟，这可以通过 `Sleep` 关键字来完成。最后，我们需要验证页面中同时存在 \"123\" 和 \"处理中\" 文案，这一步可以使用 `CheckHasText` 关键字。\n</thought>\n\n<code_block>\n# 点击 class 为 sub-menu-item-text-zoom-udV56Z 的 服务工单 的 span\nClickElem | [class=sub-menu-item-text-zoom-udV56Z]:contains(服务工单)\n\n# 等待3秒钟\nSleep | 3s\n\n# 校验页面存在 \"123\" 并且存在 \"处理中\"\nCheckHasText | 123 | 处理中\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": " 获取文本添加分群的个数",
        "output": "<thought>\n 首先需要查找页面中包含文本“添加分群”的元素，然后获取这些元素的数量。\n 可以使用FindByText关键字查找包含“添加分群”文本的元素，之后使用GetElemCount关键字获取元素的数量。\n </thought>\n \n <code_block>\n # 查找包含文本“添加分群”的元素\n ${elems}  FindByText | 添加分群\n \n # 获取包含“添加分群”文本的元素数量\n ${count}  GetElemCount | ${elems}\n </code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果URL中包含 volcengine, 且当前页面包含 ‘不再提示’ 就点击",
        "output": "# 如果URL中包含 volcengine\n${exist}  IsURLContains | volcengine\nIF  ${exist}\n    # 如果当前页面包含 ‘不再提示’\n    ${exist}  IsAnyTextExisting | 不再提示\n    IF  ${exist}\n        # 点击 '不再提示'\n        Click | 不再提示\n    END\nEND"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "判断页面中是否有id为task-center-bpm-iframe的iframe，如果存在，进入iframe，往搜索账号ID里面输入 2100286987 然后点击查询",
        "output": "<thought>\n首先，我们需要判断页面中是否存在id为task-center-bpm-iframe的iframe。可以使用IsAnyElemExisting关键字来实现这一点。如果iframe存在，则使用ToFrame关键字切换到该iframe中。然后，我们需要在\"搜索账号ID\"的字段中输入账号ID \"2100286987\"，可以使用SetField关键字来实现。最后，我们点击\"查询\"按钮，以完成搜索操作，可以使用Click关键字来实现。\n</thought>\n\n<code_block>\n# 判断页面中是否有id为task-center-bpm-iframe的iframe\n${exist}  IsAnyElemExisting | iframe[id='task-center-bpm-iframe']\n\n# 如果存在，进入iframe\nIF  $exist\n    ToFrame | iframe[id='task-center-bpm-iframe']\n    # 往搜索账号ID里面输入 2100286987\n    SetField | 搜索账号ID | 2100286987\n    # 点击查询\n    Click | 查询\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验单元格（1，超管审计）中包含：审批工地信息不完成",
        "output": "<thought>\n要校验特定单元格中的文本是否包含指定内容，可以使用CheckCellHas关键字。需要知道的是目标单元格位于第一行中的“超管审计”列。根据场景描述，单元格应包含“审批工地信息不完成”。\n</thought>\n\n<code_block>\n# 校验第一行“超管审计”列中的单元格包含“审批工地信息不完成”文本\nCheckCellHas | 1 | 超管审计 | 审批工地信息不完成\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向class为ovui-date-picker输入2025-03-10",
        "output": "<thought>\n首先，目标是向class为ovui-date-picker的元素输入日期2025-03-10。可以使用FillArea关键字，因为它支持基于jquery选择器进行操作。需要确定选择器格式，第一个匹配项可使用:eq(0)。因此选择器可以定义为\"div[class=ovui-date-picker]:eq(0)\"。\n</thought>\n\n<code_block>\n# 向第一个class为ovui-date-picker的div输入2025-03-10\nFillArea | div[class=ovui-date-picker]:eq(0) | 2025-03-10\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击新增数据源，校验页面无自动化分组1",
        "output": "<thought>\n为了实现“点击新增数据源，校验页面无自动化分组1”的操作，我们需要选择合适的关键字。\n\n首先，我们需要使用“Click”关键字点击“新增数据源”按钮。假设“新增数据源”是页面上的一个文本按钮，我们可以直接使用“Click”关键字。\n\n接下来，我们需要校验操作的结果，即页面中不应包含“自动化分组1”这个文本。对于这种情况，我们可以使用“CheckNotHasText”关键字来检查页面上是否没有该文本。\n\n因此，脚本的逻辑是：\n1. 点击“新增数据源”。\n2. 校验页面不含“自动化分组1”。\n</thought>\n\n<code_block>\n# 点击新增数据源按钮\nClick | 新增数据源\n\n# 校验页面上不包含自动化分组1\nCheckNotHasText | 自动化分组1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 设置是否只需配置纯规则为：开，点击下一步",
        "output": "<thought>\n 需要使用SetField关键字来设置“是否只需配置纯规则”为“开”，然后使用Click关键字来点击“下一步”。\n </thought>\n \n <code_block>\n # 设置“是否只需配置纯规则”为“开”\n SetField | 是否只需配置纯规则 | 开\n \n # 点击“下一步”\n Click | 下一步\n </code_block>\n"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查创建按钮是否enable",
        "output": "<thought>\n要检查创建按钮是否enable，应该使用CheckHasElem关键字来校验页面是否包含表示创建按钮的jquery选择器，并且该元素应该是可用的（enabled）。可以为元素选择器创建变量以提升复用性。\n</thought>\n\n<code_block>\n# 定义创建按钮的jquery选择器\n${create_btn}   Set Variable  button:contains(创建)\n\n# 校验页面包含表示创建按钮的元素\nCheckHasElem  ${create_btn}\n\n# 校验创建按钮是可用的\n${enabled}  IsElementEnabled  ${create_btn}\nShould Be True  ${enabled}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "列出当前网页所有的input元素的placeholder属性",
        "output": "<thought>\n首先需要使用FindElem关键字查找当前页面上所有的input元素。然后对于每个找到的元素，逐一获取其placeholder属性。需要使用Loop进行遍历，并调用GetElemAttr关键字获取属性值。\n</thought>\n\n<code_block>\n# 查找页面上所有的input元素\n${inputs}  FindElem  input\n\n# 循环获取每个input元素的placeholder属性\nFOR  ${input}  IN  @{inputs}\n    # 获取当前input元素的placeholder属性\n    ${placeholder}  GetElemAttr  ${input}  placeholder\n    # 打印或记录placeholder属性\n    Log  ${placeholder}\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "发送这个请求：curl 'https://infinite-boe.bytedance.net/infinite/api/giraffe/v1/file/cooperation?id=5o926e403w8nwdo3rk17vnxl&psm=wzgq9o77kq9r&type=testcase' \\\n  -X 'POST' \\\n  -H 'Accept: */*' \\\n  -H 'Referer: https://infinite-boe.bytedance.net/giraffe/project/wzgq9o77kq9r/main/testcase?id=5o926e403w8nwdo3rk17vnxl'",
        "output": "<thought>\n根据给定的curl请求，我们需要使用UiSendRequest关键字来发送一个POST请求，同时设置请求头。请求地址为'https://xxx.yyy.zzz.com/infinite/api/giraffe/v1/file/cooperation?id=5o926e403w8nwdo3rk17vnxl&psm=wzgq9o77kq9r&type=testcase'，请求头包含'Accept': '*/*'和'Referer': 'https://xxx.yyy.zzz.com/giraffe/project/wzgq9o77kq9r/main/testcase?id=5o926e403w8nwdo3rk17vnxl'。\n</thought>\n\n<code_block>\n# 设置请求头\n${headers} =  Create Dictionary  Accept=*/*  Referer=https://xxx.yyy.zzz.com/giraffe/project/wzgq9o77kq9r/main/testcase?id=5o926e403w8nwdo3rk17vnxl\n\n# 发送POST请求并获取响应\n${resp_json}  UiSendRequest  POST  https://xxx.yyy.zzz.com/infinite/api/giraffe/v1/file/cooperation?id=5o926e403w8nwdo3rk17vnxl&psm=wzgq9o77kq9r&type=testcase  ${None}  ${headers}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "查找div元素，class属性为arco-pagination-total-text",
        "output": "<thought>\n首先，我们需要定位到class属性为\"arco-pagination-total-text\"的div元素。我们可以使用\"FindElem\"关键字，它可以帮助我们使用jquery选择器来定位元素。选择器字符串应为\"div[class=arco-pagination-total-text]\"，这个字符串表示class属性为arco-pagination-total-text的div元素。\n</thought>\n\n<code_block>\n# 使用FindElem关键字查找class属性为arco-pagination-total-text的div元素\n${elem}  FindElem | div[class=arco-pagination-total-text]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开 ${MAIN_PAGE_URL}",
        "output": "<thought>\n此问题很简单，直接使用OpenUrl关键字即可访问指定的URL。\n</thought>\n\n<code_block>\n# 打开主页\nOpenUrl | ${MAIN_PAGE_URL}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 “选择事件类型”，然后选择选项 “双击”",
        "output": "<thought>\n首先需要点击“选择事件类型”的文本，然后选择“双击”选项。可以使用`Click`关键字点击文本，再用`SelectOption`选择特定选项。\n</thought>\n\n<code_block>\n# 点击选择事件类型\nClick | 选择事件类型\n\n# 选择双击选项\nSelectOption | 双击\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "菜单打开 客户管理 我的客户，点击 div ID uba-chart",
        "output": "<thought>\n这个场景需要通过点击菜单路径“客户管理”和“我的客户”来进入对应的页面。然后在该页面中找到一个具有特定 ID 的 `div` 元素并进行点击。可以使用 `ClickMenu` 关键字依次点击菜单，然后使用 `ClickElem` 关键字点击指定的 `div` 元素。\n</thought>\n\n<code_block>\n# 打开“客户管理 > 我的客户”菜单\nClickMenu | 客户管理 | 我的客户\n\n# 点击 ID 为 uba-chart 的 div\nClickElem | div[id='uba-chart']\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击项目控制台，并切换至新窗口，再点击复查配置",
        "output": "<thought>\n首先需要点击“项目控制台”，然后切换到新窗口，最后在新窗口中点击“复查配置”。使用`Click`关键字点击“项目控制台”，用`ToNewWindow`切换窗口，再用`Click`关键字点击“复查配置”。\n</thought>\n\n<code_block>\n# 点击项目控制台\nClick | 项目控制台\n\n# 切换到新窗口\nToNewWindow\n\n# 点击复查配置\nClick | 复查配置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：“查看第${start}-${end}日${type}”，主要逻辑是: 去除 start, end，type 参数前后的空白字符，然后将 start，end 输入 span class包含RetentionRange__rangeContainer的元素中，将type输入该元素的兄弟中",
        "output": "<thought>\n首先，需要去除输入参数start、end和type的前后空白字符。然后，使用FillArea关键字将start和end输入到指定的元素中，再将type输入到该元素的兄弟元素中。通过Set Variable保存兄弟元素的jquery选择器，方便后续使用。\n</thought>\n\n<code_block>\n# 定义查看第${start}-${end}日${type}的关键字\n*** Keywords ***\n查看第${start}-${end}日${type}\n    [Arguments]   ${start}  ${end}  ${type}\n    \n    # 去除参数前后空白字符\n    ${start}  Strip String  ${start}\n    ${end}  Strip String  ${end}\n    ${type}  Strip String  ${type}\n    \n    # 输入start和end到指定元素\n    FillArea  span[class*=RetentionRange__rangeContainer]  ${start}  ${end}\n    \n    # 设置兄弟元素选择器并输入type\n    ${sibling_selector}  Set Variable  span[class*=RetentionRange__rangeContainer] ~ *\n    FillArea  ${sibling_selector}  ${type}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面中没有弹框，如果有，报出‘加载错误’异常。如果没有，跳出检测",
        "output": "<thought>\n首先，我们需要检查页面上是否存在弹框。如果存在弹框，则需要抛出“加载错误”的异常。我们可以使用IsAnyElemExisting关键字来判断是否有弹框存在。通常，弹框可以通过特殊的选择器 POPUP 来识别。然后，我们通过判断${exist}的值来决定是否抛出异常。\n</thought>\n\n<code_block>\n# 检查页面中是否存在弹框元素\n${exist}  IsAnyElemExisting | POPUP\n\n# 如果存在弹框，抛出“加载错误”异常\nIF  ${exist}\n    Fail  加载错误\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向‘写下你的问题’输入：这是做什么的？",
        "output": "<thought>\n此场景较为简单，只需要使用SetField关键字即可完成任务，其中，name参数为‘写下你的问题’，@args参数为‘这是做什么的？’。\n</thought>\n\n<code_block>\n# 输入问题\nSetField | 写下你的问题 | 这是做什么的？\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "打开字段名称为 ‘限速’ 的switch开关",
        "output": "<thought>\n这一问题是要点击一个switch开关的操作，所以我们可以使用SetField这个关键字。同时，“限速”被指明为字段名，因此我们可以将其设为关键字SetField的第一个参数。我们需要将switch开关设为开，所以我们将第二个参数设为\"ON\"。\n</thought>\n\n<code_block>\n# 设置字段\"限速\"为开\nSetField | 限速 | ON\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 表格头中 Biling mode 单元格中右边的筛选器，选择 Yearly/monthly，选择 Pay as you go",
        "output": "<thought>\n首先，需要选择表格头中\"Biling mode\"单元格右边的筛选器。可以通过`ClickElemOfCell`关键字实现，指定`row_name_or_id='HEAD'`来选择表头行，然后指定列为\"Biling mode\"。接下来，需要选择\"Yearly/monthly\"和\"Pay as you go\"这两个选项，可以使用`SelectOption`关键字分别执行这两个选择。\n</thought>\n\n<code_block>\n# 点击表头中Biling mode单元格右边的筛选器图标\nClickElemOfCell | HEAD | Biling mode | [class*=filter]\n\n# 选择 Yearly/monthly\nSelectOption | Yearly/monthly\n\n# 选择 Pay as you go\nSelectOption | Pay as you go\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "创建关键字 ABC, 接受3个参数，${user}, ${password}, ${token}, 返回 ${success}, 关键字逻辑为，输入用户名，密码，点击登录，判断页面是否包含 welcome, 如果存在，则登录成功",
        "output": "<thought>\n创建名为ABC的关键字，需要接受三个参数：${user}、${password}和${token}；实现逻辑是输入用户名、密码，点击登录；然后判断页面是否包含welcome文本，如果存在则表示登录成功，并将success变量值设为True，否则为False。\n</thought>\n\n<code_block>\n*** Keywords ***\nABC\n    [Arguments]  ${user}  ${password}  ${token}\n    SetField | 用户名 | ${user}\n    SetField | 密码 | ${password}\n    Click | 登录\n    ${exist}  IsAnyTextExisting  | welcome\n    ${success}  Set Variable If | ${exist} | True | False\n    [Return]  ${success}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验字段全端口模式所选值为关闭",
        "output": "<thought>\n为了解决这个问题，我们需要校验页面中名为\"全端口模式\"的字段包含的文本为\"关闭\"。可以使用`CheckFieldContains`关键字来实现这个功能。需要指定字段名称为\"全端口模式\"，同时检查文本\"关闭\"是否存在。\n</thought>\n\n<code_block>\n# 校验字段全端口模式所选值为关闭\nCheckFieldContains | 全端口模式 | 关闭\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘实例与镜像’ 菜单下方的“实例",
        "output": "<thought>\n根据提供的关键字列表，\"点击 ‘实例与镜像’ 菜单下方的“实例”\" 这一场景可以通过\"ClickMenu\"关键字来实现。因为\"ClickMenu\"可以依次点击多个菜单项，根据描述，应该是先点击“实例与镜像”菜单，然后点击其下方的“实例”选项。\n</thought>\n\n<code_block>\n# 先点击“实例与镜像”菜单，再点击“实例”选项\nClickMenu | 实例与镜像 | 实例\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验页面是否有错误，‘失败’ 不算错误",
        "output": "<thought>\n在这个场景中，我们需要校验页面是否有错误，但是要排除 '失败' 这个词。我们可以使用 RF 框架的 'CheckErrExclude' 关键字来实现这个需求。\n</thought>\n\n<code_block>\n# 使用 'CheckErrExclude' 关键字校验页面错误，排除 '失败' 这个词\nCheckErrExclude | 失败\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 placeholder=\"请输入你的手机号\" ，输入变量 PHONE_ONLINE后再进行勾选 class=\"ud__checkbox__input\" ，然后点击文本 下一步 按钮，\n",
        "output": "<thought>\n首先，使用`SetField`关键字来操作带有`placeholder`属性的输入框，接着使用`CheckBoxOn`关键字勾选复选框，然后用`Click`关键字点击文本为“下一步”的按钮。\n</thought>\n\n<code_block>\n# 输入手机号\nSetField | 请输入你的手机号 | ${PHONE_ONLINE}\n\n# 勾选复选框\nCheckBoxOn | [class='ud__checkbox__input']\n\n# 点击下一步按钮\nClick | 下一步\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置请选择为预算科目",
        "output": "<thought>\n在这个场景中，我们需要将一个字段“请选择”设置为预算科目。看起来这是一个直接的选择操作，可以使用`SelectOptionForField`关键字来实现，因为我们知道字段名是“请选择”，选项值是“预算科目”。\n</thought>\n\n<code_block>\n# 设置字段“请选择”为“预算科目”\nSelectOptionForField | 请选择 | 预算科目\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "获取DEVICE_ID后面span的value",
        "output": "<thought>\n首先需要找到文本为“DEVICE_ID”的元素，然后选择它后面的span元素。最后，获取该span元素的value属性。\n</thought>\n\n<code_block>\n# 查找DEVICE_ID后面的span元素\n${span_elem}  FindElem | :contains(DEVICE_ID) + span\n\n# 获取该span元素的value属性\n${value}  GetElemAttr | ${span_elem} | value\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：火山登录，接受 ${user}, ${password}, ${sub_account} 参数，默认值分别为 ${ADMIN_ACCOUNT}, ${ADMIN_PASSWORD}, ${SUB_ACCOUNT}, \n业务逻辑：\n等待页面加载好之后，如果${sub_account}为真，就先点击子用户登录，然后输入主账号用户名，子用户用户名，否则只需要输入用户名。\n然后输入密码，最后点击登录，等待页面出现 ‘快捷导航’",
        "output": "<thought>\n首先，创建一个名为“火山登录”的新关键字，接受 ${user}, ${password}, ${sub_account} 三个参数，并设置默认值。\n然后，等待页面加载完成，使用WaitLoading关键字。\n然后，使用IF...ELSE...END语法，判断 ${sub_account} 是否为真，如果为真，则意味着需要先登录子账户，因此我们需要点击“子用户登录”按钮，然后输入主账号用户名和子账号用户名。使用Click和SetField关键字来完成这些操作。如果 ${sub_account} 不为真，则只需要输入用户名，使用SetField关键字。\n然后，无论 ${sub_account} 是否为真，都需要输入密码，使用SetField关键字。\n然后，点击“登录”按钮，使用Click关键字。\n最后，等待页面出现“快捷导航”，使用WaitText关键字。\n</thought>\n\n<code_block>\n火山登录\n    [Arguments]  ${user}=${ADMIN_ACCOUNT}  ${password}=${ADMIN_PASSWORD}  ${sub_account}=${SUB_ACCOUNT}\n    \n    #等待页面加载完成\n    WaitLoading\n\n    #判断是否需要先点击子用户登录\n    IF  ${sub_account}\n        Click  子用户登录\n        SetField | 主账号用户名 | ${user}\n        SetField | 子用户用户名 | ${sub_account}\n    ELSE\n        SetField | 用户名 | ${user}\n    END\n   \n    #输入密码\n    SetField  | 密码 | ${password}\n   \n    #点击登录\n    Click  登录\n   \n    #等待页面出现“快捷导航”\n    WaitText  快捷导航\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击单元格（1,10）中的数据监控按钮    ",
        "output": "<thought>\n此场景请我们点击位于第一行和第十列的单元格中的“数据监控”按钮。根据描述，我们可以使用ClickTextOfCell关键字，并指定行号和列号来实现这一操作。在这里，我们需要确保文本值为“数据监控”，从而实现对特定按钮的点击。\n</thought>\n\n<code_block>\n# 点击表格第一行第十列中的数据监控按钮\nClickTextOfCell | 1 | 10 | 数据监控\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "勾选PR2408040100表格行中的复选框",
        "output": "<thought>\n根据任务，可以使用 ClickElemOfRow 关键字来点击表格行中的复选框。需要知道行名，并使用 `:checkbox` 选择器来定位复选框。\n</thought>\n\n<code_block>\n# 勾选PR2408040100所在表格行中的复选框\nClickElemOfRow | PR2408040100 | :checkbox\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击‘任务状态’下拉框，然后选择 ‘计费中’，最后调用 合同组审批 关键字，入参 ${arg_list}",
        "output": "<thought>\n在这个场景中，我们需要使用三个步骤来实现自动化脚本。首先，点击“任务状态”下拉框，接着选择“计费中”这个选项，最后调用自定义关键字“合同组审批”，并传入参数`${arg_list}`。根据提示，可以使用`SelectOptionForField`关键字来选择下拉框中的选项。\n</thought>\n\n<code_block>\n# 点击任务状态下拉框\nClick | 任务状态\n\n# 从任务状态下拉框中选择'计费中'\nSelectOptionForField | 任务状态 | 计费中\n\n# 调用合同组审批关键字，传入参数${arg_list}\n合同组审批 | ${arg_list}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置 ‘创建方式’ 为：已有项目",
        "output": "<thought>\n要设置“创建方式”字段的值为“已有项目”，可以使用`SetField`关键字来完成任务。首先判断页面上是否有多个“创建方式”字段，如果只有一个，直接设置它的值即可。如果有多个字段，则需要结合`idx`参数明确指定目标字段。一般情况下，只需考虑单个字段的处理，因为题干未提及多字段情况。\n</thought>\n\n<code_block>\n# 设置‘创建方式’为：已有项目\nSetField | 创建方式 | 已有项目\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "# 写一个关键字：校验表格行中非0数字个数，接受 line_no, count, table[可选，默认为空],\n# 关键字先获取第line_no表格行中的数据，将其中每一个数据中的‘,’都去掉，然后判断该字符串是否是数字，如果是数字，且不等于0，则个数加1，最终判断非0数字的数量是否大于等于 count",
        "output": "校验表格行中非0数字个数\n    [Arguments]  ${line_no}  ${count}  ${table}=\n    @{vals}  GetRowValues | ${line_no} | tbl=${table}\n    ${num}  Set Variable  0\n    FOR  ${val}  IN  @{vals}\n        ${val}  Replace String  ${val}  ,  ''\n        ${is_num}  Run Keyword And Return Status  Should Be True  ${val}.isdigit()\n        IF  ${is_num} AND ${val} != 0\n            ${num}  Set Variable  ${num+1}\n        END\n    END\n    Should Be True  ${num} >= ${count}"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "尝试点击预览探查",
        "output": "<thought>\n在这个场景中，我们需要尝试点击名为\"预览探查\"的按钮。根据提示，这可以用ClickAny关键字来实现。ClickAny关键字是用于尝试点击给定文本中的任意一个，因此这里只需要提供一个文本\"预览探查\"即可。\n</thought>\n\n<code_block>\n# 尝试点击文本“预览探查”\nClickAny | 预览探查\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击弹窗中 第二个“Payer账号”下方的“加号“小图标",
        "output": "<thought>\n首先，我们需要找到弹窗中的第二个\"Payer账号\"，然后找到它下方的\"加号\"icon。我们可以使用关键字`ClickIconToTheDirectionOf`来实现这个需求。`ClickIconToTheDirectionOf`关键字允许我们首先定位一个基准元素，然后在它的某个方向上找到目标icon并点击它。在这个场景中，基准元素是弹窗中的第二个\"Payer账号\"，方向是下方，目标icon是\"加号\"。\n</thought>\n\n<code_block>\n# 找到弹窗中的第二个\"Payer账号\"\n${payer_account}    Set Variable    :contains(Payer账号):eq(1)\n\n# 点击弹窗中 第二个\"Payer账号\"下方的\"加号\"icon\nClickIconToTheDirectionOf    ${payer_account}    bottom    plus\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "设置分组名称为随机的三个字段，用下划线连接",
        "output": "<thought>\n为了实现这个操作，我们可以使用`GenerateRandom`关键字生成三个随机字符串。每个字符串由指定的字符集合构成。然后，我们可以使用`Catenate`关键字将这三个字符串连接在一起，中间用下划线作为分隔符。最后，我们使用`SetField`关键字将生成的字符串设置为分组名称。需要注意的是，`GenerateRandom`的字符集合需要根据具体需求进行定义。\n</thought>\n\n<code_block>\n# 生成三个不同的随机字符串\n${part1}  GenerateRandom  | 5 | [LETTERS][NUMBERS]\n${part2}  GenerateRandom  | 5 | [LETTERS][NUMBERS]\n${part3}  GenerateRandom  | 5 | [LETTERS][NUMBERS]\n\n# 将三个字符串用下划线连接起来\n${group_name}  Catenate  SEPARATOR=_  ${part1}  ${part2}  ${part3}\n\n# 设置分组名称\nSetField | 分组名称 | ${group_name}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成一个8位字符串全部是小写",
        "output": "<thought>\n根据需求，生成一个8位字符串全部是小写，可以使用RobotFramework的Generate Random关键字，并使用LOWER字符集。生成后将结果存储在一个变量中。\n</thought>\n\n<code_block>\n# 生成长度为8的随机小写字符串\n${low_str}  GenerateRandom  | 8 | [LOWER]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "编写一个关键字，从一个给定的参数列表@{paramList}中，逐个取出参数，然后填写到 id=params 的 div 的 class=arco-card-body 的div后代元素的, 各个直接div后代元素中, 注意需要先判断对应的后代元素是否存在，如果不存在，需要先点击增加参数，然后等待1s再继续填写",
        "output": "<thought>\n解决问题的关键思路是使用for循环遍历给定的参数列表。然后根据每个参数的索引位置，构造出jquery选择器来定位到每一个需要填写的div元素。同时需要判断该元素是否存在，如果不存在，需要点击按钮添加新的输入区域。最后使用FillArea关键字填写参数值。由于可能存在一些延迟，因此在添加新的输入区域之后，我们需要使用Sleep关键字等待1s以确保新的输入区域已经被成功创建。注意在for循环中，我们使用了Evaluate关键字将索引值加一，方便下一次循环定位到下一个div元素。\n</thought>\n\n<code_block>\n填写参数\n    [Arguments]  @{paramList}\n    # 初始化 div 元素的索引\n    ${index}  Set Variable  0\n    # for 循环遍历参数列表\n    FOR  ${param}  IN  @{paramList}\n        # 判断当前索引的 div 元素是否存在\n        ${exist}=  IsAnyElemExisting | div[id=params] div[class=arco-card-body] > div:eq(${index})\n        IF  ${exist}\n            # 如果存在，直接在该 div 元素中填写参数\n            FillArea | div[id=params] div[class=arco-card-body] > div:eq(${index}) | ${param}\n        ELSE\n            # 如果不存在，先点击按钮添加新的输入区域\n            Click | 增加参数\n            # 等待1s等待新增区域渲染完成\n            Sleep  1s\n            # 填写参数\n            FillArea | div[id=params] div[class=arco-card-body] > div:eq(${index}) | ${param}\n        END\n        # 索引值加1，准备填写下一组参数\n        ${index}  Evaluate  ${index} + 1\n    END\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击赠送礼物后面的第二个按钮",
        "output": "<thought>\n在这个场景中，我们需要实现点击\"赠送礼物\"文本后面的第二个按钮。可以借助ClickElemToTheDirectionOf关键字完成。首先要确保\"赠送礼物\"是基准文本，然后根据需求点击其右侧第二个按钮，因此我们需要使用direction参数设置为right，selector参数设置为button，idx参数设置为1（因为选择第二个按钮）。这样可以精确定位到目标元素并完成操作。\n</thought>\n\n<code_block>\n# 点击赠送礼物后面的第二个按钮\nClickElemToTheDirectionOf | 赠送礼物 | right | button | idx=1\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 ‘未下载’ 右侧的 ‘下载’ 小图标",
        "output": "<thought>\n解决问题思路：首先找到文本 \"未下载\"，然后点击该文本右侧的 \"下载\" icon。可以使用ClickIconToTheDirectionOf关键字。\n</thought>\n\n<code_block>\n# 点击 \"未下载\" 右侧的 \"下载\" icon\nClickIconToTheDirectionOf | 未下载 | right | download\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击第第三个 '标签名称' 左面 class包含checkbox的元素",
        "output": "<thought>\n我们需要点击文本为“标签名称”的第三个元素左面的一个特定class元素。因此，我们可以使用组合的Find和Click关键字来实现。首先，找到文本为“标签名称”的第三个元素，然后使用ClickElemToTheDirectionOf关键字点击该元素左方class包含checkbox的元素。\n</thought>\n\n<code_block>\n# 点击第三个 '标签名称' 左面的 class包含checkbox的元素\nClickElemToTheDirectionOf | :contains(标签名称):eq(2) | left | [class*=checkbox]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击镜像管理，进行白屏检测，点击 产品文档右侧的 更多，然后点击 数据监控右侧的 详情，预期页面存在文案：新增实例",
        "output": "<thought>\n为了解决这个问题，我们需要依次使用关键字实现以下步骤：\n1. 使用`Click`关键字点击\"镜像管理\"。\n2. 使用`CheckWhiteScreen`关键字进行白屏检测。\n3. 使用`ClickTextToTheDirectionOf`关键字点击\"产品文档\"右侧的\"更多\"。\n4. 使用`ClickTextToTheDirectionOf`关键字点击\"数据监控\"右侧的\"详情\"。\n5. 使用`CheckHasText`关键字检查页面是否存在\"新增实例\"的文案。\n</thought>\n\n<code_block>\n# 点击镜像管理\nClick | 镜像管理\n\n# 检测白屏\nCheckWhiteScreen\n\n# 点击产品文档右侧的更多\nClickTextToTheDirectionOf | 产品文档 | right | 更多\n\n# 点击数据监控右侧的详情\nClickTextToTheDirectionOf | 数据监控 | right | 详情\n\n# 校验页面存在新增实例\nCheckHasText | 新增实例\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击class为arco-dropdown-menu-inner的div下，class带有解决的span",
        "output": "<thought>\n要实现点击class为arco-dropdown-menu-inner的div下，class带有解决的span，可以使用ClickElem关键字，通过jQuery选择器来定位目标元素。我们需要在选择器中指定div的class为arco-dropdown-menu-inner，并且在其下选择class包含解决的span。\n</thought>\n\n<code_block>\n# 点击class为arco-dropdown-menu-inner的div下，class带有解决的span\nClickElem | [class='arco-dropdown-menu-inner'] span[class*=解决]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "读取文件·Resources/Dorado/emr-hsql语句·的内容,然后将其填写到编辑器中",
        "output": "<thought>\n首先，需要读取指定文件的内容，可以使用RF的内置关键字进行文件操作。读取文件后，接着需要将获取的内容填写到编辑器中，可以使用FillEditor关键字实现。\n</thought>\n\n<code_block>\n# 从文件中读取内容\n${file_content}  Get File  Resources/Dorado/emr-hsql语句\n\n# 将读取的内容填写到第一个编辑器中\nFillEditor  ${file_content}  idx=0\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "将 证书配置 的状态设置为：开启",
        "output": "<thought>\n首先需要找到页面上 \"证书配置\" 文字附近的控件，然后再设置状态为 \"开启\"。\n</thought>\n\n<code_block>\n# 设置证书配置的状态为开启\nSetField | 状态 | 开启 | near=证书配置\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "生成 20天前和20天后的日期，格式为 2024/11/22",
        "output": "<thought>\n要生成20天前和20天后的日期，首先要获取当前日期，然后分别使用Subtract Time From Date和Add Time To Date关键字进行计算。最后，对结果进行格式转换。\n</thought>\n\n<code_block>\n# 获取当前日期\n${current_date}  Get Current Date  result_format=%Y/%m/%d\n\n# 计算20天前的日期\n${date_20_days_ago}  Subtract Time From Date  ${current_date}  20 days  result_format=%Y/%m/%d\n\n# 计算20天后的日期\n${date_20_days_later}  Add Time To Date  ${current_date}  20 days  result_format=%Y/%m/%d\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "如果变量 page_type 字符串等于 gray，则 ui sleep 3",
        "output": "<thought>\n首先，我们需要判断变量page_type是否等于字符串\"gray\"。如果条件为真，执行ui sleep 3。我们可以使用Robot Framework的IF/ELSE语法来实现这个逻辑。\n</thought>\n\n<code_block>\n# 判断page_type是否等于字符串\"gray\"\nIF  \"${page_type}\" == \"gray\"\n    Sleep  3s\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "执行关键字直到成功或15s未成功而超时,执行成功后存储到${svg}中: return document.querySelector('div[class=\"ovui-modal__close-icon\"] svg')",
        "output": "<thought>\n问题要求使用RobotFramework执行一个JavaScript代码块，直到成功或超时15秒，并将结果存储在变量${svg}中。由于没有提供现成的关键字来直接满足这个要求，我们可以使用“Execute Javascript”关键字来执行JavaScript代码，并使用“Wait Until Keyword Succeeds”来实现重试机制和超时控制。\n</thought>\n\n<code_block>\n# 定义选择器变量\n${selector}    div[class=\"ovui-modal__close-icon\"] svg\n\n# 尝试执行JavaScript代码直到成功或超时15秒\nWait Until Keyword Succeeds    15s    1s    Execute Javascript    return document.querySelector('${selector}')\n\n# 存储执行结果到${svg}\n${svg}    Execute Javascript    return document.querySelector('${selector}')\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击“内容不会保存，确定取消吗？”右下角的“取消”按钮",
        "output": "<thought>\n根据任务描述，我们需要执行以下操作：在基准文本“内容不会保存，确定取消吗？”的右下角找到并点击“取消”按钮。可以使用`ClickTextToTheDirectionOf`关键字来实现这一操作。我们将使用“内容不会保存，确定取消吗？”作为基准文本，方向指定为`bottomRight`，目标文本为“取消”。\n</thought>\n\n<code_block>\n# 点击“内容不会保存，确定取消吗？”右下角的“取消”按钮\nClickTextToTheDirectionOf | 内容不会保存，确定取消吗？ | bottomRight | 取消\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "校验表格 ‘指标组名称’ 的单元格 （‘23年春节_入口滲透’， ‘状态’）中包含 张三，李四，王二麻",
        "output": "<thought>\n根据描述，需要校验特定单元格中包含多个文本。可以使用 `CheckCellHas` 关键字，指定行名、列名和所需检查的文本列表。\n</thought>\n\n<code_block>\n# 校验表格‘指标组名称’的单元格（‘23年春节_入口滲透’，‘状态’）中包含 张三，李四，王二麻\nCheckCellHas | 23年春节_入口滲透 | 状态 | 张三 | 李四 | 王二麻 | tbl=指标组名称\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "表格的第一行入库数量输入2，第二行入库数量输入3",
        "output": "<thought>\n首先，根据题目描述，我们需要在表格的第一行和第二行中找到\"入库数量\"这一列，然后在这一列中输入2和3。我们可以使用\"FillCell\"关键字来实现这个操作。\"FillCell\"关键字需要的参数有行号，列名，及我们需要输入的值。因此我们需要分别为第一行和第二行调用一次\"FillCell\"关键字。\n</thought>\n\n<code_block>\n# 在表格的第一行的入库数量中输入2\nFillCell | 1 | 入库数量 | 2 \n\n# 在表格的第二行的入库数量中输入3\nFillCell | 2 | 入库数量 | 3\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "想依次点击表格里的查看详情 如果 没有报错 就点击返回 如果有报错就中断退出",
        "output": "<thought>\n为了实现点击\"查看详情\"并处理可能的报错，我们需要获取表格中\"查看详情\"按钮的数量，然后迭代地点击每个按钮。在点击每个\"查看详情\"按钮后，判断是否发生了某种报错(假设可以通过某种机制，比如查找特定的错误提示元素，来判断是否有报错)，如果没有报错则点击返回按钮。如果发生报错，则退出整个流程。我们将利用Robot Framework的结构化条件语句(IF/ELSE)和循环来实现这个逻辑。\n</thought>\n\n<code_block>\n# 获取\"查看详情\"按钮的数量\n${count}  GetElemCount  button:contains(查看详情)\n\n# 判断是否有\"查看详情\"按钮\nIF  ${count} > 0\n    # 遍历每个\"查看详情\"按钮，依次点击\n    FOR  ${index}  IN RANGE  ${count}\n        # 点击当前\"查看详情\"按钮\n        ClickElem  button:contains(查看详情):eq(${index})\n\n        # 判断是否有报错，假设错误提示元素为: [class*=error], [class*=fail]\n        ${has_error}  IsAnyElemExisting  [class*=error], [class*=fail]\n\n        IF  ${has_error}\n            # 发现报错，退出流程\n            Fail  发现报错\n        ELSE\n            # 如果没有报错，点击返回按钮\n            Click  返回\n        END\n    END\nEND\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个关键字：生成随机字符串，长度为10位",
        "output": "<thought>\n为了生成长度为10位的随机字符串，我们可以使用`GenerateRandom`关键字。直接传递长度为10以及字符集参数即可。\n</thought>\n\n<code_block>\n# 生成长度为10的随机字符串\n${random_string}  GenerateRandom  | 10 | [LETTERS][NUMBERS]\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "定义变量approve_type，枚举值为：同意 拒绝 盖章 归档",
        "output": "<thought>\n在Robot Framework中，我们可以使用列表来存储变量approve_type的所有可能值。我们可以使用Create List关键字来创建一个列表，并使用Set Variable关键字将其设置为approve_type变量。\n</thought>\n\n<code_block>\n# 创建列表存储所有可能的approve_type值\n@{approve_types}  Create List  同意  拒绝  盖章  归档\n\n# 将列表设置为approve_type变量\n${approve_type}  Set Variable  @{approve_types}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "向jimeng.com的本地缓存中注入has_download_dialog_auto_show=true",
        "output": "<thought>\n1. 首先需要明确操作目标：向jimeng.com的本地缓存(localStorage)中注入一个键值对\n2. 根据提供的自定义关键字，LocalStorageSetItem正好可以完成这个操作\n3. 需要先访问目标网站jimeng.com，然后才能操作其localStorage\n4. 由于是简单的键值对设置，直接使用LocalStorageSetItem关键字即可\n5. 键为\"has_download_dialog_auto_show\"，值为\"true\"\n</thought>\n\n<code_block>\n# 访问目标网站\nUiOpenUrl    https://jimeng.com    chrome\n\n# 向localStorage注入键值对\nLocalStorageSetItem    has_download_dialog_auto_show    true\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检查页面不包含事件分析，设置接入管理员为maopengge并等待15s，检查页面显示邀请成功",
        "output": "<thought>\n首先，使用\"CheckNotHasText\"关键字来检查页面中是否不包含\"事件分析\"文本。然后，用\"SetField\"关键字来设置接入管理员的值为\"maopengge\"。接着，使用\"Sleep\"关键字等待15s，最后再用\"CheckHasText\"关键字检查页面中是否出现了\"邀请成功\"的文本。\n</thought>\n\n<code_block>\n# 检查页面中不包含\"事件分析\"\nCheckNotHasText | 事件分析 \n\n# 设置接入管理员的值为\"maopengge\"\nSetField | 接入管理员 | maopengge\n\n# 等待15s\nSleep | 15s\n\n# 检查页面中是否显示了\"邀请成功\"\nCheckHasText | 邀请成功\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "点击 class 包含 universal-card-button 的button 组件，接着点击 ${dashboard_name} 右侧的删除图标，然后点击 ${dashboard_name} 左边的返回图标",
        "output": "<thought>\n首先，根据要求需要点击class包含universal-card-button的button组件，使用ClickElem关键字。其次，需要点击${dashboard_name}右侧的删除icon，可以借助ClickIconToTheDirectionOf关键字。最后，点击${dashboard_name}左边的返回icon，同样使用ClickIconToTheDirectionOf关键字。\n</thought>\n\n<code_block>\n# 点击class包含universal-card-button的button组件\nClickElem | button[class*=universal-card-button]\n\n# 点击${dashboard_name}右侧的删除icon\nClickIconToTheDirectionOf | ${dashboard_name} | right | delete\n\n# 点击${dashboard_name}左边的返回icon\nClickIconToTheDirectionOf | ${dashboard_name} | left | back\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "检测 变量a的值等于变量b的值",
        "output": "<thought>\n此场景要求检测变量a是否等于变量b。可以使用RobotFramework内置关键字`Should Be Equal As Strings`来比较两个字符串值是否相等。\n</thought>\n\n<code_block>\n# 校验变量 a 等于变量 b\nShould Be Equal As Strings  ${a}  ${b}\n</code_block>"
    },
    {
        "instruction": "使用RobotFramework标准库和EasyUILib编写或重构WebUI自动化脚本，注意代码缩进等格式要正确",
        "input": "写一个名为：“校验核心数据大于基准值1\" 的关键字，接受card_name 和 num 参数，num默认值为1，关键字的作用是:\n# 将 经办组 设置为：QA测试组new\n# 找到 class 包含 coreDataItem 且文本包含 card_name 的元素，获取此元素中 class包含 webcast-data-browser 元素的文案，校验此文案的值大于 num",
        "output": "<thought>\n为了解决这个任务，我们需要依次执行以下操作：\n\n1. 利用 `SetField` 设置“经办组”为“QA测试组new”。\n2. 利用 `FindElem` 找到 class 包含 `coreDataItem` 且文本包含 `card_name` 的元素。\n3. 在前一步找到的元素中，再利用 `FindElem` 找到 class 包含 `webcast-data-browser` 的元素。\n4. 获取该元素的文本内容，使用 `GetElemText` 。\n5. 将获取到的文本内容转换为数字，然后比对它是否大于 `num`，这里可以采用 `Should Be True` 关键字进行判断。\n\n我们可以安全地假设文本能被成功解析为数值。如果解析时出现错误，需考虑添加处理逻辑。\n</thought>\n\n<code_block>\n*** Keywords ***\n校验核心数据大于基准值1\n    [Arguments]  ${card_name}  ${num}=1\n    \n    # 设置“经办组”为“QA测试组new”\n    SetField  经办组  QA测试组new\n    \n    # 查找 class 包含 coreDataItem 且文本包含 card_name 的元素\n    ${card_elem}  FindElem  [class*=coreDataItem]:contains(${card_name})\n    \n    # 在 card_elem 中查找 class 包含 webcast-data-browser 的元素\n    ${data_elem}  FindElem  [class*=webcast-data-browser]  base=${card_elem}\n    \n    # 获取 data_elem 的文本\n    ${data_text}  GetElemText  ${data_elem}\n    \n    # 将文本转换为数值并比较\n    ${data_value}  Evaluate  float(${data_text})\n    Should Be True  ${data_value} > ${num}\n</code_block>"
    }
]